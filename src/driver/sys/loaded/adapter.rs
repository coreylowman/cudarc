use super :: * ;pub unsafe fn cuGetErrorString (error : CUresult , pStr : * mut * const :: core :: ffi :: c_char) -> CUresult { unsafe { culib () . cuGetErrorString (error , pStr) } }
pub unsafe fn cuGetErrorName (error : CUresult , pStr : * mut * const :: core :: ffi :: c_char) -> CUresult { unsafe { culib () . cuGetErrorName (error , pStr) } }
pub unsafe fn cuInit (Flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuInit (Flags) } }
pub unsafe fn cuDriverGetVersion (driverVersion : * mut :: core :: ffi :: c_int) -> CUresult { unsafe { culib () . cuDriverGetVersion (driverVersion) } }
pub unsafe fn cuDeviceGet (device : * mut CUdevice , ordinal : :: core :: ffi :: c_int) -> CUresult { unsafe { culib () . cuDeviceGet (device , ordinal) } }
pub unsafe fn cuDeviceGetCount (count : * mut :: core :: ffi :: c_int) -> CUresult { unsafe { culib () . cuDeviceGetCount (count) } }
pub unsafe fn cuDeviceGetName (name : * mut :: core :: ffi :: c_char , len : :: core :: ffi :: c_int , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetName (name , len , dev) } }
pub unsafe fn cuDeviceGetUuid (uuid : * mut CUuuid , dev : CUdevice) -> CUresult { unsafe { culib () . cuDeviceGetUuid (uuid , dev) } }
pub unsafe fn cuDeviceGetUuid_v2 (uuid : * mut CUuuid , dev : CUdevice) -> CUresult { unsafe { culib () . cuDeviceGetUuid_v2 (uuid , dev) } }
pub unsafe fn cuDeviceGetLuid (luid : * mut :: core :: ffi :: c_char , deviceNodeMask : * mut :: core :: ffi :: c_uint , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetLuid (luid , deviceNodeMask , dev) } }
pub unsafe fn cuDeviceTotalMem_v2 (bytes : * mut usize , dev : CUdevice) -> CUresult { unsafe { culib () . cuDeviceTotalMem_v2 (bytes , dev) } }
pub unsafe fn cuDeviceGetTexture1DLinearMaxWidth (maxWidthInElements : * mut usize , format : CUarray_format , numChannels : :: core :: ffi :: c_uint , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetTexture1DLinearMaxWidth (maxWidthInElements , format , numChannels , dev) } }
pub unsafe fn cuDeviceGetAttribute (pi : * mut :: core :: ffi :: c_int , attrib : CUdevice_attribute , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetAttribute (pi , attrib , dev) } }
pub unsafe fn cuDeviceGetNvSciSyncAttributes (nvSciSyncAttrList : * mut :: core :: ffi :: c_void , dev : CUdevice , flags : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuDeviceGetNvSciSyncAttributes (nvSciSyncAttrList , dev , flags) } }
pub unsafe fn cuDeviceSetMemPool (dev : CUdevice , pool : CUmemoryPool) -> CUresult { unsafe { culib () . cuDeviceSetMemPool (dev , pool) } }
pub unsafe fn cuDeviceGetMemPool (pool : * mut CUmemoryPool , dev : CUdevice) -> CUresult { unsafe { culib () . cuDeviceGetMemPool (pool , dev) } }
pub unsafe fn cuDeviceGetDefaultMemPool (pool_out : * mut CUmemoryPool , dev : CUdevice) -> CUresult { unsafe { culib () . cuDeviceGetDefaultMemPool (pool_out , dev) } }
pub unsafe fn cuDeviceGetExecAffinitySupport (pi : * mut :: core :: ffi :: c_int , type_ : CUexecAffinityType , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetExecAffinitySupport (pi , type_ , dev) } }
pub unsafe fn cuFlushGPUDirectRDMAWrites (target : CUflushGPUDirectRDMAWritesTarget , scope : CUflushGPUDirectRDMAWritesScope ,) -> CUresult { unsafe { culib () . cuFlushGPUDirectRDMAWrites (target , scope) } }
pub unsafe fn cuDeviceGetProperties (prop : * mut CUdevprop , dev : CUdevice) -> CUresult { unsafe { culib () . cuDeviceGetProperties (prop , dev) } }
pub unsafe fn cuDeviceComputeCapability (major : * mut :: core :: ffi :: c_int , minor : * mut :: core :: ffi :: c_int , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceComputeCapability (major , minor , dev) } }
pub unsafe fn cuDevicePrimaryCtxRetain (pctx : * mut CUcontext , dev : CUdevice) -> CUresult { unsafe { culib () . cuDevicePrimaryCtxRetain (pctx , dev) } }
pub unsafe fn cuDevicePrimaryCtxRelease_v2 (dev : CUdevice) -> CUresult { unsafe { culib () . cuDevicePrimaryCtxRelease_v2 (dev) } }
pub unsafe fn cuDevicePrimaryCtxSetFlags_v2 (dev : CUdevice , flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuDevicePrimaryCtxSetFlags_v2 (dev , flags) } }
pub unsafe fn cuDevicePrimaryCtxGetState (dev : CUdevice , flags : * mut :: core :: ffi :: c_uint , active : * mut :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuDevicePrimaryCtxGetState (dev , flags , active) } }
pub unsafe fn cuDevicePrimaryCtxReset_v2 (dev : CUdevice) -> CUresult { unsafe { culib () . cuDevicePrimaryCtxReset_v2 (dev) } }
pub unsafe fn cuCtxCreate_v2 (pctx : * mut CUcontext , flags : :: core :: ffi :: c_uint , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuCtxCreate_v2 (pctx , flags , dev) } }
pub unsafe fn cuCtxCreate_v3 (pctx : * mut CUcontext , paramsArray : * mut CUexecAffinityParam , numParams : :: core :: ffi :: c_int , flags : :: core :: ffi :: c_uint , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuCtxCreate_v3 (pctx , paramsArray , numParams , flags , dev) } }
pub unsafe fn cuCtxCreate_v4 (pctx : * mut CUcontext , ctxCreateParams : * mut CUctxCreateParams , flags : :: core :: ffi :: c_uint , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuCtxCreate_v4 (pctx , ctxCreateParams , flags , dev) } }
pub unsafe fn cuCtxDestroy_v2 (ctx : CUcontext) -> CUresult { unsafe { culib () . cuCtxDestroy_v2 (ctx) } }
pub unsafe fn cuCtxPushCurrent_v2 (ctx : CUcontext) -> CUresult { unsafe { culib () . cuCtxPushCurrent_v2 (ctx) } }
pub unsafe fn cuCtxPopCurrent_v2 (pctx : * mut CUcontext) -> CUresult { unsafe { culib () . cuCtxPopCurrent_v2 (pctx) } }
pub unsafe fn cuCtxSetCurrent (ctx : CUcontext) -> CUresult { unsafe { culib () . cuCtxSetCurrent (ctx) } }
pub unsafe fn cuCtxGetCurrent (pctx : * mut CUcontext) -> CUresult { unsafe { culib () . cuCtxGetCurrent (pctx) } }
pub unsafe fn cuCtxGetDevice (device : * mut CUdevice) -> CUresult { unsafe { culib () . cuCtxGetDevice (device) } }
pub unsafe fn cuCtxGetFlags (flags : * mut :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuCtxGetFlags (flags) } }
pub unsafe fn cuCtxSetFlags (flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuCtxSetFlags (flags) } }
pub unsafe fn cuCtxGetId (ctx : CUcontext , ctxId : * mut :: core :: ffi :: c_ulonglong) -> CUresult { unsafe { culib () . cuCtxGetId (ctx , ctxId) } }
pub unsafe fn cuCtxSynchronize () -> CUresult { unsafe { culib () . cuCtxSynchronize () } }
pub unsafe fn cuCtxSetLimit (limit : CUlimit , value : usize) -> CUresult { unsafe { culib () . cuCtxSetLimit (limit , value) } }
pub unsafe fn cuCtxGetLimit (pvalue : * mut usize , limit : CUlimit) -> CUresult { unsafe { culib () . cuCtxGetLimit (pvalue , limit) } }
pub unsafe fn cuCtxGetCacheConfig (pconfig : * mut CUfunc_cache) -> CUresult { unsafe { culib () . cuCtxGetCacheConfig (pconfig) } }
pub unsafe fn cuCtxSetCacheConfig (config : CUfunc_cache) -> CUresult { unsafe { culib () . cuCtxSetCacheConfig (config) } }
pub unsafe fn cuCtxGetApiVersion (ctx : CUcontext , version : * mut :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuCtxGetApiVersion (ctx , version) } }
pub unsafe fn cuCtxGetStreamPriorityRange (leastPriority : * mut :: core :: ffi :: c_int , greatestPriority : * mut :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuCtxGetStreamPriorityRange (leastPriority , greatestPriority) } }
pub unsafe fn cuCtxResetPersistingL2Cache () -> CUresult { unsafe { culib () . cuCtxResetPersistingL2Cache () } }
pub unsafe fn cuCtxGetExecAffinity (pExecAffinity : * mut CUexecAffinityParam , type_ : CUexecAffinityType ,) -> CUresult { unsafe { culib () . cuCtxGetExecAffinity (pExecAffinity , type_) } }
pub unsafe fn cuCtxRecordEvent (hCtx : CUcontext , hEvent : CUevent) -> CUresult { unsafe { culib () . cuCtxRecordEvent (hCtx , hEvent) } }
pub unsafe fn cuCtxWaitEvent (hCtx : CUcontext , hEvent : CUevent) -> CUresult { unsafe { culib () . cuCtxWaitEvent (hCtx , hEvent) } }
pub unsafe fn cuCtxAttach (pctx : * mut CUcontext , flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuCtxAttach (pctx , flags) } }
pub unsafe fn cuCtxDetach (ctx : CUcontext) -> CUresult { unsafe { culib () . cuCtxDetach (ctx) } }
pub unsafe fn cuCtxGetSharedMemConfig (pConfig : * mut CUsharedconfig) -> CUresult { unsafe { culib () . cuCtxGetSharedMemConfig (pConfig) } }
pub unsafe fn cuCtxSetSharedMemConfig (config : CUsharedconfig) -> CUresult { unsafe { culib () . cuCtxSetSharedMemConfig (config) } }
pub unsafe fn cuModuleLoad (module : * mut CUmodule , fname : * const :: core :: ffi :: c_char) -> CUresult { unsafe { culib () . cuModuleLoad (module , fname) } }
pub unsafe fn cuModuleLoadData (module : * mut CUmodule , image : * const :: core :: ffi :: c_void) -> CUresult { unsafe { culib () . cuModuleLoadData (module , image) } }
pub unsafe fn cuModuleLoadDataEx (module : * mut CUmodule , image : * const :: core :: ffi :: c_void , numOptions : :: core :: ffi :: c_uint , options : * mut CUjit_option , optionValues : * mut * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuModuleLoadDataEx (module , image , numOptions , options , optionValues) } }
pub unsafe fn cuModuleLoadFatBinary (module : * mut CUmodule , fatCubin : * const :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuModuleLoadFatBinary (module , fatCubin) } }
pub unsafe fn cuModuleUnload (hmod : CUmodule) -> CUresult { unsafe { culib () . cuModuleUnload (hmod) } }
pub unsafe fn cuModuleGetLoadingMode (mode : * mut CUmoduleLoadingMode) -> CUresult { unsafe { culib () . cuModuleGetLoadingMode (mode) } }
pub unsafe fn cuModuleGetFunction (hfunc : * mut CUfunction , hmod : CUmodule , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuModuleGetFunction (hfunc , hmod , name) } }
pub unsafe fn cuModuleGetFunctionCount (count : * mut :: core :: ffi :: c_uint , mod_ : CUmodule) -> CUresult { unsafe { culib () . cuModuleGetFunctionCount (count , mod_) } }
pub unsafe fn cuModuleEnumerateFunctions (functions : * mut CUfunction , numFunctions : :: core :: ffi :: c_uint , mod_ : CUmodule ,) -> CUresult { unsafe { culib () . cuModuleEnumerateFunctions (functions , numFunctions , mod_) } }
pub unsafe fn cuModuleGetGlobal_v2 (dptr : * mut CUdeviceptr , bytes : * mut usize , hmod : CUmodule , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuModuleGetGlobal_v2 (dptr , bytes , hmod , name) } }
pub unsafe fn cuLinkCreate_v2 (numOptions : :: core :: ffi :: c_uint , options : * mut CUjit_option , optionValues : * mut * mut :: core :: ffi :: c_void , stateOut : * mut CUlinkState ,) -> CUresult { unsafe { culib () . cuLinkCreate_v2 (numOptions , options , optionValues , stateOut) } }
pub unsafe fn cuLinkAddData_v2 (state : CUlinkState , type_ : CUjitInputType , data : * mut :: core :: ffi :: c_void , size : usize , name : * const :: core :: ffi :: c_char , numOptions : :: core :: ffi :: c_uint , options : * mut CUjit_option , optionValues : * mut * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuLinkAddData_v2 (state , type_ , data , size , name , numOptions , options , optionValues) } }
pub unsafe fn cuLinkAddFile_v2 (state : CUlinkState , type_ : CUjitInputType , path : * const :: core :: ffi :: c_char , numOptions : :: core :: ffi :: c_uint , options : * mut CUjit_option , optionValues : * mut * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuLinkAddFile_v2 (state , type_ , path , numOptions , options , optionValues) } }
pub unsafe fn cuLinkComplete (state : CUlinkState , cubinOut : * mut * mut :: core :: ffi :: c_void , sizeOut : * mut usize ,) -> CUresult { unsafe { culib () . cuLinkComplete (state , cubinOut , sizeOut) } }
pub unsafe fn cuLinkDestroy (state : CUlinkState) -> CUresult { unsafe { culib () . cuLinkDestroy (state) } }
pub unsafe fn cuModuleGetTexRef (pTexRef : * mut CUtexref , hmod : CUmodule , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuModuleGetTexRef (pTexRef , hmod , name) } }
pub unsafe fn cuModuleGetSurfRef (pSurfRef : * mut CUsurfref , hmod : CUmodule , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuModuleGetSurfRef (pSurfRef , hmod , name) } }
pub unsafe fn cuLibraryLoadData (library : * mut CUlibrary , code : * const :: core :: ffi :: c_void , jitOptions : * mut CUjit_option , jitOptionsValues : * mut * mut :: core :: ffi :: c_void , numJitOptions : :: core :: ffi :: c_uint , libraryOptions : * mut CUlibraryOption , libraryOptionValues : * mut * mut :: core :: ffi :: c_void , numLibraryOptions : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuLibraryLoadData (library , code , jitOptions , jitOptionsValues , numJitOptions , libraryOptions , libraryOptionValues , numLibraryOptions) } }
pub unsafe fn cuLibraryLoadFromFile (library : * mut CUlibrary , fileName : * const :: core :: ffi :: c_char , jitOptions : * mut CUjit_option , jitOptionsValues : * mut * mut :: core :: ffi :: c_void , numJitOptions : :: core :: ffi :: c_uint , libraryOptions : * mut CUlibraryOption , libraryOptionValues : * mut * mut :: core :: ffi :: c_void , numLibraryOptions : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuLibraryLoadFromFile (library , fileName , jitOptions , jitOptionsValues , numJitOptions , libraryOptions , libraryOptionValues , numLibraryOptions) } }
pub unsafe fn cuLibraryUnload (library : CUlibrary) -> CUresult { unsafe { culib () . cuLibraryUnload (library) } }
pub unsafe fn cuLibraryGetKernel (pKernel : * mut CUkernel , library : CUlibrary , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuLibraryGetKernel (pKernel , library , name) } }
pub unsafe fn cuLibraryGetKernelCount (count : * mut :: core :: ffi :: c_uint , lib : CUlibrary) -> CUresult { unsafe { culib () . cuLibraryGetKernelCount (count , lib) } }
pub unsafe fn cuLibraryEnumerateKernels (kernels : * mut CUkernel , numKernels : :: core :: ffi :: c_uint , lib : CUlibrary ,) -> CUresult { unsafe { culib () . cuLibraryEnumerateKernels (kernels , numKernels , lib) } }
pub unsafe fn cuLibraryGetModule (pMod : * mut CUmodule , library : CUlibrary) -> CUresult { unsafe { culib () . cuLibraryGetModule (pMod , library) } }
pub unsafe fn cuKernelGetFunction (pFunc : * mut CUfunction , kernel : CUkernel) -> CUresult { unsafe { culib () . cuKernelGetFunction (pFunc , kernel) } }
pub unsafe fn cuKernelGetLibrary (pLib : * mut CUlibrary , kernel : CUkernel) -> CUresult { unsafe { culib () . cuKernelGetLibrary (pLib , kernel) } }
pub unsafe fn cuLibraryGetGlobal (dptr : * mut CUdeviceptr , bytes : * mut usize , library : CUlibrary , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuLibraryGetGlobal (dptr , bytes , library , name) } }
pub unsafe fn cuLibraryGetManaged (dptr : * mut CUdeviceptr , bytes : * mut usize , library : CUlibrary , name : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuLibraryGetManaged (dptr , bytes , library , name) } }
pub unsafe fn cuLibraryGetUnifiedFunction (fptr : * mut * mut :: core :: ffi :: c_void , library : CUlibrary , symbol : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuLibraryGetUnifiedFunction (fptr , library , symbol) } }
pub unsafe fn cuKernelGetAttribute (pi : * mut :: core :: ffi :: c_int , attrib : CUfunction_attribute , kernel : CUkernel , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuKernelGetAttribute (pi , attrib , kernel , dev) } }
pub unsafe fn cuKernelSetAttribute (attrib : CUfunction_attribute , val : :: core :: ffi :: c_int , kernel : CUkernel , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuKernelSetAttribute (attrib , val , kernel , dev) } }
pub unsafe fn cuKernelSetCacheConfig (kernel : CUkernel , config : CUfunc_cache , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuKernelSetCacheConfig (kernel , config , dev) } }
pub unsafe fn cuKernelGetName (name : * mut * const :: core :: ffi :: c_char , hfunc : CUkernel) -> CUresult { unsafe { culib () . cuKernelGetName (name , hfunc) } }
pub unsafe fn cuKernelGetParamInfo (kernel : CUkernel , paramIndex : usize , paramOffset : * mut usize , paramSize : * mut usize ,) -> CUresult { unsafe { culib () . cuKernelGetParamInfo (kernel , paramIndex , paramOffset , paramSize) } }
pub unsafe fn cuMemGetInfo_v2 (free : * mut usize , total : * mut usize) -> CUresult { unsafe { culib () . cuMemGetInfo_v2 (free , total) } }
pub unsafe fn cuMemAlloc_v2 (dptr : * mut CUdeviceptr , bytesize : usize) -> CUresult { unsafe { culib () . cuMemAlloc_v2 (dptr , bytesize) } }
pub unsafe fn cuMemAllocPitch_v2 (dptr : * mut CUdeviceptr , pPitch : * mut usize , WidthInBytes : usize , Height : usize , ElementSizeBytes : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMemAllocPitch_v2 (dptr , pPitch , WidthInBytes , Height , ElementSizeBytes) } }
pub unsafe fn cuMemFree_v2 (dptr : CUdeviceptr) -> CUresult { unsafe { culib () . cuMemFree_v2 (dptr) } }
pub unsafe fn cuMemGetAddressRange_v2 (pbase : * mut CUdeviceptr , psize : * mut usize , dptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuMemGetAddressRange_v2 (pbase , psize , dptr) } }
pub unsafe fn cuMemAllocHost_v2 (pp : * mut * mut :: core :: ffi :: c_void , bytesize : usize) -> CUresult { unsafe { culib () . cuMemAllocHost_v2 (pp , bytesize) } }
pub unsafe fn cuMemFreeHost (p : * mut :: core :: ffi :: c_void) -> CUresult { unsafe { culib () . cuMemFreeHost (p) } }
pub unsafe fn cuMemHostAlloc (pp : * mut * mut :: core :: ffi :: c_void , bytesize : usize , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMemHostAlloc (pp , bytesize , Flags) } }
pub unsafe fn cuMemHostGetDevicePointer_v2 (pdptr : * mut CUdeviceptr , p : * mut :: core :: ffi :: c_void , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMemHostGetDevicePointer_v2 (pdptr , p , Flags) } }
pub unsafe fn cuMemHostGetFlags (pFlags : * mut :: core :: ffi :: c_uint , p : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuMemHostGetFlags (pFlags , p) } }
pub unsafe fn cuMemAllocManaged (dptr : * mut CUdeviceptr , bytesize : usize , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMemAllocManaged (dptr , bytesize , flags) } }
pub unsafe fn cuDeviceRegisterAsyncNotification (device : CUdevice , callbackFunc : CUasyncCallback , userData : * mut :: core :: ffi :: c_void , callback : * mut CUasyncCallbackHandle ,) -> CUresult { unsafe { culib () . cuDeviceRegisterAsyncNotification (device , callbackFunc , userData , callback) } }
pub unsafe fn cuDeviceUnregisterAsyncNotification (device : CUdevice , callback : CUasyncCallbackHandle ,) -> CUresult { unsafe { culib () . cuDeviceUnregisterAsyncNotification (device , callback) } }
pub unsafe fn cuDeviceGetByPCIBusId (dev : * mut CUdevice , pciBusId : * const :: core :: ffi :: c_char ,) -> CUresult { unsafe { culib () . cuDeviceGetByPCIBusId (dev , pciBusId) } }
pub unsafe fn cuDeviceGetPCIBusId (pciBusId : * mut :: core :: ffi :: c_char , len : :: core :: ffi :: c_int , dev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetPCIBusId (pciBusId , len , dev) } }
pub unsafe fn cuIpcGetEventHandle (pHandle : * mut CUipcEventHandle , event : CUevent) -> CUresult { unsafe { culib () . cuIpcGetEventHandle (pHandle , event) } }
pub unsafe fn cuIpcOpenEventHandle (phEvent : * mut CUevent , handle : CUipcEventHandle) -> CUresult { unsafe { culib () . cuIpcOpenEventHandle (phEvent , handle) } }
pub unsafe fn cuIpcGetMemHandle (pHandle : * mut CUipcMemHandle , dptr : CUdeviceptr) -> CUresult { unsafe { culib () . cuIpcGetMemHandle (pHandle , dptr) } }
pub unsafe fn cuIpcOpenMemHandle_v2 (pdptr : * mut CUdeviceptr , handle : CUipcMemHandle , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuIpcOpenMemHandle_v2 (pdptr , handle , Flags) } }
pub unsafe fn cuIpcCloseMemHandle (dptr : CUdeviceptr) -> CUresult { unsafe { culib () . cuIpcCloseMemHandle (dptr) } }
pub unsafe fn cuMemHostRegister_v2 (p : * mut :: core :: ffi :: c_void , bytesize : usize , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMemHostRegister_v2 (p , bytesize , Flags) } }
pub unsafe fn cuMemHostUnregister (p : * mut :: core :: ffi :: c_void) -> CUresult { unsafe { culib () . cuMemHostUnregister (p) } }
pub unsafe fn cuMemcpy (dst : CUdeviceptr , src : CUdeviceptr , ByteCount : usize) -> CUresult { unsafe { culib () . cuMemcpy (dst , src , ByteCount) } }
pub unsafe fn cuMemcpyPeer (dstDevice : CUdeviceptr , dstContext : CUcontext , srcDevice : CUdeviceptr , srcContext : CUcontext , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyPeer (dstDevice , dstContext , srcDevice , srcContext , ByteCount) } }
pub unsafe fn cuMemcpyHtoD_v2 (dstDevice : CUdeviceptr , srcHost : * const :: core :: ffi :: c_void , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyHtoD_v2 (dstDevice , srcHost , ByteCount) } }
pub unsafe fn cuMemcpyDtoH_v2 (dstHost : * mut :: core :: ffi :: c_void , srcDevice : CUdeviceptr , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyDtoH_v2 (dstHost , srcDevice , ByteCount) } }
pub unsafe fn cuMemcpyDtoD_v2 (dstDevice : CUdeviceptr , srcDevice : CUdeviceptr , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyDtoD_v2 (dstDevice , srcDevice , ByteCount) } }
pub unsafe fn cuMemcpyDtoA_v2 (dstArray : CUarray , dstOffset : usize , srcDevice : CUdeviceptr , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyDtoA_v2 (dstArray , dstOffset , srcDevice , ByteCount) } }
pub unsafe fn cuMemcpyAtoD_v2 (dstDevice : CUdeviceptr , srcArray : CUarray , srcOffset : usize , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyAtoD_v2 (dstDevice , srcArray , srcOffset , ByteCount) } }
pub unsafe fn cuMemcpyHtoA_v2 (dstArray : CUarray , dstOffset : usize , srcHost : * const :: core :: ffi :: c_void , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyHtoA_v2 (dstArray , dstOffset , srcHost , ByteCount) } }
pub unsafe fn cuMemcpyAtoH_v2 (dstHost : * mut :: core :: ffi :: c_void , srcArray : CUarray , srcOffset : usize , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyAtoH_v2 (dstHost , srcArray , srcOffset , ByteCount) } }
pub unsafe fn cuMemcpyAtoA_v2 (dstArray : CUarray , dstOffset : usize , srcArray : CUarray , srcOffset : usize , ByteCount : usize ,) -> CUresult { unsafe { culib () . cuMemcpyAtoA_v2 (dstArray , dstOffset , srcArray , srcOffset , ByteCount) } }
pub unsafe fn cuMemcpy2D_v2 (pCopy : * const CUDA_MEMCPY2D) -> CUresult { unsafe { culib () . cuMemcpy2D_v2 (pCopy) } }
pub unsafe fn cuMemcpy2DUnaligned_v2 (pCopy : * const CUDA_MEMCPY2D) -> CUresult { unsafe { culib () . cuMemcpy2DUnaligned_v2 (pCopy) } }
pub unsafe fn cuMemcpy3D_v2 (pCopy : * const CUDA_MEMCPY3D) -> CUresult { unsafe { culib () . cuMemcpy3D_v2 (pCopy) } }
pub unsafe fn cuMemcpy3DPeer (pCopy : * const CUDA_MEMCPY3D_PEER) -> CUresult { unsafe { culib () . cuMemcpy3DPeer (pCopy) } }
pub unsafe fn cuMemcpyAsync (dst : CUdeviceptr , src : CUdeviceptr , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyAsync (dst , src , ByteCount , hStream) } }
pub unsafe fn cuMemcpyPeerAsync (dstDevice : CUdeviceptr , dstContext : CUcontext , srcDevice : CUdeviceptr , srcContext : CUcontext , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyPeerAsync (dstDevice , dstContext , srcDevice , srcContext , ByteCount , hStream) } }
pub unsafe fn cuMemcpyHtoDAsync_v2 (dstDevice : CUdeviceptr , srcHost : * const :: core :: ffi :: c_void , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyHtoDAsync_v2 (dstDevice , srcHost , ByteCount , hStream) } }
pub unsafe fn cuMemcpyDtoHAsync_v2 (dstHost : * mut :: core :: ffi :: c_void , srcDevice : CUdeviceptr , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyDtoHAsync_v2 (dstHost , srcDevice , ByteCount , hStream) } }
pub unsafe fn cuMemcpyDtoDAsync_v2 (dstDevice : CUdeviceptr , srcDevice : CUdeviceptr , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyDtoDAsync_v2 (dstDevice , srcDevice , ByteCount , hStream) } }
pub unsafe fn cuMemcpyHtoAAsync_v2 (dstArray : CUarray , dstOffset : usize , srcHost : * const :: core :: ffi :: c_void , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyHtoAAsync_v2 (dstArray , dstOffset , srcHost , ByteCount , hStream) } }
pub unsafe fn cuMemcpyAtoHAsync_v2 (dstHost : * mut :: core :: ffi :: c_void , srcArray : CUarray , srcOffset : usize , ByteCount : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyAtoHAsync_v2 (dstHost , srcArray , srcOffset , ByteCount , hStream) } }
pub unsafe fn cuMemcpy2DAsync_v2 (pCopy : * const CUDA_MEMCPY2D , hStream : CUstream) -> CUresult { unsafe { culib () . cuMemcpy2DAsync_v2 (pCopy , hStream) } }
pub unsafe fn cuMemcpy3DAsync_v2 (pCopy : * const CUDA_MEMCPY3D , hStream : CUstream) -> CUresult { unsafe { culib () . cuMemcpy3DAsync_v2 (pCopy , hStream) } }
pub unsafe fn cuMemcpy3DPeerAsync (pCopy : * const CUDA_MEMCPY3D_PEER , hStream : CUstream) -> CUresult { unsafe { culib () . cuMemcpy3DPeerAsync (pCopy , hStream) } }
pub unsafe fn cuMemcpyBatchAsync (dsts : * mut CUdeviceptr , srcs : * mut CUdeviceptr , sizes : * mut usize , count : usize , attrs : * mut CUmemcpyAttributes , attrsIdxs : * mut usize , numAttrs : usize , failIdx : * mut usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpyBatchAsync (dsts , srcs , sizes , count , attrs , attrsIdxs , numAttrs , failIdx , hStream) } }
pub unsafe fn cuMemcpy3DBatchAsync (numOps : usize , opList : * mut CUDA_MEMCPY3D_BATCH_OP , failIdx : * mut usize , flags : :: core :: ffi :: c_ulonglong , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemcpy3DBatchAsync (numOps , opList , failIdx , flags , hStream) } }
pub unsafe fn cuMemsetD8_v2 (dstDevice : CUdeviceptr , uc : :: core :: ffi :: c_uchar , N : usize) -> CUresult { unsafe { culib () . cuMemsetD8_v2 (dstDevice , uc , N) } }
pub unsafe fn cuMemsetD16_v2 (dstDevice : CUdeviceptr , us : :: core :: ffi :: c_ushort , N : usize) -> CUresult { unsafe { culib () . cuMemsetD16_v2 (dstDevice , us , N) } }
pub unsafe fn cuMemsetD32_v2 (dstDevice : CUdeviceptr , ui : :: core :: ffi :: c_uint , N : usize) -> CUresult { unsafe { culib () . cuMemsetD32_v2 (dstDevice , ui , N) } }
pub unsafe fn cuMemsetD2D8_v2 (dstDevice : CUdeviceptr , dstPitch : usize , uc : :: core :: ffi :: c_uchar , Width : usize , Height : usize ,) -> CUresult { unsafe { culib () . cuMemsetD2D8_v2 (dstDevice , dstPitch , uc , Width , Height) } }
pub unsafe fn cuMemsetD2D16_v2 (dstDevice : CUdeviceptr , dstPitch : usize , us : :: core :: ffi :: c_ushort , Width : usize , Height : usize ,) -> CUresult { unsafe { culib () . cuMemsetD2D16_v2 (dstDevice , dstPitch , us , Width , Height) } }
pub unsafe fn cuMemsetD2D32_v2 (dstDevice : CUdeviceptr , dstPitch : usize , ui : :: core :: ffi :: c_uint , Width : usize , Height : usize ,) -> CUresult { unsafe { culib () . cuMemsetD2D32_v2 (dstDevice , dstPitch , ui , Width , Height) } }
pub unsafe fn cuMemsetD8Async (dstDevice : CUdeviceptr , uc : :: core :: ffi :: c_uchar , N : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemsetD8Async (dstDevice , uc , N , hStream) } }
pub unsafe fn cuMemsetD16Async (dstDevice : CUdeviceptr , us : :: core :: ffi :: c_ushort , N : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemsetD16Async (dstDevice , us , N , hStream) } }
pub unsafe fn cuMemsetD32Async (dstDevice : CUdeviceptr , ui : :: core :: ffi :: c_uint , N : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemsetD32Async (dstDevice , ui , N , hStream) } }
pub unsafe fn cuMemsetD2D8Async (dstDevice : CUdeviceptr , dstPitch : usize , uc : :: core :: ffi :: c_uchar , Width : usize , Height : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemsetD2D8Async (dstDevice , dstPitch , uc , Width , Height , hStream) } }
pub unsafe fn cuMemsetD2D16Async (dstDevice : CUdeviceptr , dstPitch : usize , us : :: core :: ffi :: c_ushort , Width : usize , Height : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemsetD2D16Async (dstDevice , dstPitch , us , Width , Height , hStream) } }
pub unsafe fn cuMemsetD2D32Async (dstDevice : CUdeviceptr , dstPitch : usize , ui : :: core :: ffi :: c_uint , Width : usize , Height : usize , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemsetD2D32Async (dstDevice , dstPitch , ui , Width , Height , hStream) } }
pub unsafe fn cuArrayCreate_v2 (pHandle : * mut CUarray , pAllocateArray : * const CUDA_ARRAY_DESCRIPTOR ,) -> CUresult { unsafe { culib () . cuArrayCreate_v2 (pHandle , pAllocateArray) } }
pub unsafe fn cuArrayGetDescriptor_v2 (pArrayDescriptor : * mut CUDA_ARRAY_DESCRIPTOR , hArray : CUarray ,) -> CUresult { unsafe { culib () . cuArrayGetDescriptor_v2 (pArrayDescriptor , hArray) } }
pub unsafe fn cuArrayGetSparseProperties (sparseProperties : * mut CUDA_ARRAY_SPARSE_PROPERTIES , array : CUarray ,) -> CUresult { unsafe { culib () . cuArrayGetSparseProperties (sparseProperties , array) } }
pub unsafe fn cuMipmappedArrayGetSparseProperties (sparseProperties : * mut CUDA_ARRAY_SPARSE_PROPERTIES , mipmap : CUmipmappedArray ,) -> CUresult { unsafe { culib () . cuMipmappedArrayGetSparseProperties (sparseProperties , mipmap) } }
pub unsafe fn cuArrayGetMemoryRequirements (memoryRequirements : * mut CUDA_ARRAY_MEMORY_REQUIREMENTS , array : CUarray , device : CUdevice ,) -> CUresult { unsafe { culib () . cuArrayGetMemoryRequirements (memoryRequirements , array , device) } }
pub unsafe fn cuMipmappedArrayGetMemoryRequirements (memoryRequirements : * mut CUDA_ARRAY_MEMORY_REQUIREMENTS , mipmap : CUmipmappedArray , device : CUdevice ,) -> CUresult { unsafe { culib () . cuMipmappedArrayGetMemoryRequirements (memoryRequirements , mipmap , device) } }
pub unsafe fn cuArrayGetPlane (pPlaneArray : * mut CUarray , hArray : CUarray , planeIdx : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuArrayGetPlane (pPlaneArray , hArray , planeIdx) } }
pub unsafe fn cuArrayDestroy (hArray : CUarray) -> CUresult { unsafe { culib () . cuArrayDestroy (hArray) } }
pub unsafe fn cuArray3DCreate_v2 (pHandle : * mut CUarray , pAllocateArray : * const CUDA_ARRAY3D_DESCRIPTOR ,) -> CUresult { unsafe { culib () . cuArray3DCreate_v2 (pHandle , pAllocateArray) } }
pub unsafe fn cuArray3DGetDescriptor_v2 (pArrayDescriptor : * mut CUDA_ARRAY3D_DESCRIPTOR , hArray : CUarray ,) -> CUresult { unsafe { culib () . cuArray3DGetDescriptor_v2 (pArrayDescriptor , hArray) } }
pub unsafe fn cuMipmappedArrayCreate (pHandle : * mut CUmipmappedArray , pMipmappedArrayDesc : * const CUDA_ARRAY3D_DESCRIPTOR , numMipmapLevels : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMipmappedArrayCreate (pHandle , pMipmappedArrayDesc , numMipmapLevels) } }
pub unsafe fn cuMipmappedArrayGetLevel (pLevelArray : * mut CUarray , hMipmappedArray : CUmipmappedArray , level : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuMipmappedArrayGetLevel (pLevelArray , hMipmappedArray , level) } }
pub unsafe fn cuMipmappedArrayDestroy (hMipmappedArray : CUmipmappedArray) -> CUresult { unsafe { culib () . cuMipmappedArrayDestroy (hMipmappedArray) } }
pub unsafe fn cuMemGetHandleForAddressRange (handle : * mut :: core :: ffi :: c_void , dptr : CUdeviceptr , size : usize , handleType : CUmemRangeHandleType , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemGetHandleForAddressRange (handle , dptr , size , handleType , flags) } }
pub unsafe fn cuMemBatchDecompressAsync (paramsArray : * mut CUmemDecompressParams , count : usize , flags : :: core :: ffi :: c_uint , errorIndex : * mut usize , stream : CUstream ,) -> CUresult { unsafe { culib () . cuMemBatchDecompressAsync (paramsArray , count , flags , errorIndex , stream) } }
pub unsafe fn cuMemAddressReserve (ptr : * mut CUdeviceptr , size : usize , alignment : usize , addr : CUdeviceptr , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemAddressReserve (ptr , size , alignment , addr , flags) } }
pub unsafe fn cuMemAddressFree (ptr : CUdeviceptr , size : usize) -> CUresult { unsafe { culib () . cuMemAddressFree (ptr , size) } }
pub unsafe fn cuMemCreate (handle : * mut CUmemGenericAllocationHandle , size : usize , prop : * const CUmemAllocationProp , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemCreate (handle , size , prop , flags) } }
pub unsafe fn cuMemRelease (handle : CUmemGenericAllocationHandle) -> CUresult { unsafe { culib () . cuMemRelease (handle) } }
pub unsafe fn cuMemMap (ptr : CUdeviceptr , size : usize , offset : usize , handle : CUmemGenericAllocationHandle , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemMap (ptr , size , offset , handle , flags) } }
pub unsafe fn cuMemMapArrayAsync (mapInfoList : * mut CUarrayMapInfo , count : :: core :: ffi :: c_uint , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemMapArrayAsync (mapInfoList , count , hStream) } }
pub unsafe fn cuMemUnmap (ptr : CUdeviceptr , size : usize) -> CUresult { unsafe { culib () . cuMemUnmap (ptr , size) } }
pub unsafe fn cuMemSetAccess (ptr : CUdeviceptr , size : usize , desc : * const CUmemAccessDesc , count : usize ,) -> CUresult { unsafe { culib () . cuMemSetAccess (ptr , size , desc , count) } }
pub unsafe fn cuMemGetAccess (flags : * mut :: core :: ffi :: c_ulonglong , location : * const CUmemLocation , ptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuMemGetAccess (flags , location , ptr) } }
pub unsafe fn cuMemExportToShareableHandle (shareableHandle : * mut :: core :: ffi :: c_void , handle : CUmemGenericAllocationHandle , handleType : CUmemAllocationHandleType , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemExportToShareableHandle (shareableHandle , handle , handleType , flags) } }
pub unsafe fn cuMemImportFromShareableHandle (handle : * mut CUmemGenericAllocationHandle , osHandle : * mut :: core :: ffi :: c_void , shHandleType : CUmemAllocationHandleType ,) -> CUresult { unsafe { culib () . cuMemImportFromShareableHandle (handle , osHandle , shHandleType) } }
pub unsafe fn cuMemGetAllocationGranularity (granularity : * mut usize , prop : * const CUmemAllocationProp , option : CUmemAllocationGranularity_flags ,) -> CUresult { unsafe { culib () . cuMemGetAllocationGranularity (granularity , prop , option) } }
pub unsafe fn cuMemGetAllocationPropertiesFromHandle (prop : * mut CUmemAllocationProp , handle : CUmemGenericAllocationHandle ,) -> CUresult { unsafe { culib () . cuMemGetAllocationPropertiesFromHandle (prop , handle) } }
pub unsafe fn cuMemRetainAllocationHandle (handle : * mut CUmemGenericAllocationHandle , addr : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuMemRetainAllocationHandle (handle , addr) } }
pub unsafe fn cuMemFreeAsync (dptr : CUdeviceptr , hStream : CUstream) -> CUresult { unsafe { culib () . cuMemFreeAsync (dptr , hStream) } }
pub unsafe fn cuMemAllocAsync (dptr : * mut CUdeviceptr , bytesize : usize , hStream : CUstream) -> CUresult { unsafe { culib () . cuMemAllocAsync (dptr , bytesize , hStream) } }
pub unsafe fn cuMemPoolTrimTo (pool : CUmemoryPool , minBytesToKeep : usize) -> CUresult { unsafe { culib () . cuMemPoolTrimTo (pool , minBytesToKeep) } }
pub unsafe fn cuMemPoolSetAttribute (pool : CUmemoryPool , attr : CUmemPool_attribute , value : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuMemPoolSetAttribute (pool , attr , value) } }
pub unsafe fn cuMemPoolGetAttribute (pool : CUmemoryPool , attr : CUmemPool_attribute , value : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuMemPoolGetAttribute (pool , attr , value) } }
pub unsafe fn cuMemPoolSetAccess (pool : CUmemoryPool , map : * const CUmemAccessDesc , count : usize ,) -> CUresult { unsafe { culib () . cuMemPoolSetAccess (pool , map , count) } }
pub unsafe fn cuMemPoolGetAccess (flags : * mut CUmemAccess_flags , memPool : CUmemoryPool , location : * mut CUmemLocation ,) -> CUresult { unsafe { culib () . cuMemPoolGetAccess (flags , memPool , location) } }
pub unsafe fn cuMemPoolCreate (pool : * mut CUmemoryPool , poolProps : * const CUmemPoolProps) -> CUresult { unsafe { culib () . cuMemPoolCreate (pool , poolProps) } }
pub unsafe fn cuMemPoolDestroy (pool : CUmemoryPool) -> CUresult { unsafe { culib () . cuMemPoolDestroy (pool) } }
pub unsafe fn cuMemAllocFromPoolAsync (dptr : * mut CUdeviceptr , bytesize : usize , pool : CUmemoryPool , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemAllocFromPoolAsync (dptr , bytesize , pool , hStream) } }
pub unsafe fn cuMemPoolExportToShareableHandle (handle_out : * mut :: core :: ffi :: c_void , pool : CUmemoryPool , handleType : CUmemAllocationHandleType , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemPoolExportToShareableHandle (handle_out , pool , handleType , flags) } }
pub unsafe fn cuMemPoolImportFromShareableHandle (pool_out : * mut CUmemoryPool , handle : * mut :: core :: ffi :: c_void , handleType : CUmemAllocationHandleType , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMemPoolImportFromShareableHandle (pool_out , handle , handleType , flags) } }
pub unsafe fn cuMemPoolExportPointer (shareData_out : * mut CUmemPoolPtrExportData , ptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuMemPoolExportPointer (shareData_out , ptr) } }
pub unsafe fn cuMemPoolImportPointer (ptr_out : * mut CUdeviceptr , pool : CUmemoryPool , shareData : * mut CUmemPoolPtrExportData ,) -> CUresult { unsafe { culib () . cuMemPoolImportPointer (ptr_out , pool , shareData) } }
pub unsafe fn cuMulticastCreate (mcHandle : * mut CUmemGenericAllocationHandle , prop : * const CUmulticastObjectProp ,) -> CUresult { unsafe { culib () . cuMulticastCreate (mcHandle , prop) } }
pub unsafe fn cuMulticastAddDevice (mcHandle : CUmemGenericAllocationHandle , dev : CUdevice) -> CUresult { unsafe { culib () . cuMulticastAddDevice (mcHandle , dev) } }
pub unsafe fn cuMulticastBindMem (mcHandle : CUmemGenericAllocationHandle , mcOffset : usize , memHandle : CUmemGenericAllocationHandle , memOffset : usize , size : usize , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMulticastBindMem (mcHandle , mcOffset , memHandle , memOffset , size , flags) } }
pub unsafe fn cuMulticastBindAddr (mcHandle : CUmemGenericAllocationHandle , mcOffset : usize , memptr : CUdeviceptr , size : usize , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuMulticastBindAddr (mcHandle , mcOffset , memptr , size , flags) } }
pub unsafe fn cuMulticastUnbind (mcHandle : CUmemGenericAllocationHandle , dev : CUdevice , mcOffset : usize , size : usize ,) -> CUresult { unsafe { culib () . cuMulticastUnbind (mcHandle , dev , mcOffset , size) } }
pub unsafe fn cuMulticastGetGranularity (granularity : * mut usize , prop : * const CUmulticastObjectProp , option : CUmulticastGranularity_flags ,) -> CUresult { unsafe { culib () . cuMulticastGetGranularity (granularity , prop , option) } }
pub unsafe fn cuPointerGetAttribute (data : * mut :: core :: ffi :: c_void , attribute : CUpointer_attribute , ptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuPointerGetAttribute (data , attribute , ptr) } }
pub unsafe fn cuMemPrefetchAsync (devPtr : CUdeviceptr , count : usize , dstDevice : CUdevice , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemPrefetchAsync (devPtr , count , dstDevice , hStream) } }
pub unsafe fn cuMemPrefetchAsync_v2 (devPtr : CUdeviceptr , count : usize , location : CUmemLocation , flags : :: core :: ffi :: c_uint , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuMemPrefetchAsync_v2 (devPtr , count , location , flags , hStream) } }
pub unsafe fn cuMemAdvise (devPtr : CUdeviceptr , count : usize , advice : CUmem_advise , device : CUdevice ,) -> CUresult { unsafe { culib () . cuMemAdvise (devPtr , count , advice , device) } }
pub unsafe fn cuMemAdvise_v2 (devPtr : CUdeviceptr , count : usize , advice : CUmem_advise , location : CUmemLocation ,) -> CUresult { unsafe { culib () . cuMemAdvise_v2 (devPtr , count , advice , location) } }
pub unsafe fn cuMemRangeGetAttribute (data : * mut :: core :: ffi :: c_void , dataSize : usize , attribute : CUmem_range_attribute , devPtr : CUdeviceptr , count : usize ,) -> CUresult { unsafe { culib () . cuMemRangeGetAttribute (data , dataSize , attribute , devPtr , count) } }
pub unsafe fn cuMemRangeGetAttributes (data : * mut * mut :: core :: ffi :: c_void , dataSizes : * mut usize , attributes : * mut CUmem_range_attribute , numAttributes : usize , devPtr : CUdeviceptr , count : usize ,) -> CUresult { unsafe { culib () . cuMemRangeGetAttributes (data , dataSizes , attributes , numAttributes , devPtr , count) } }
pub unsafe fn cuPointerSetAttribute (value : * const :: core :: ffi :: c_void , attribute : CUpointer_attribute , ptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuPointerSetAttribute (value , attribute , ptr) } }
pub unsafe fn cuPointerGetAttributes (numAttributes : :: core :: ffi :: c_uint , attributes : * mut CUpointer_attribute , data : * mut * mut :: core :: ffi :: c_void , ptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuPointerGetAttributes (numAttributes , attributes , data , ptr) } }
pub unsafe fn cuStreamCreate (phStream : * mut CUstream , Flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuStreamCreate (phStream , Flags) } }
pub unsafe fn cuStreamCreateWithPriority (phStream : * mut CUstream , flags : :: core :: ffi :: c_uint , priority : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuStreamCreateWithPriority (phStream , flags , priority) } }
pub unsafe fn cuStreamGetPriority (hStream : CUstream , priority : * mut :: core :: ffi :: c_int) -> CUresult { unsafe { culib () . cuStreamGetPriority (hStream , priority) } }
pub unsafe fn cuStreamGetDevice (hStream : CUstream , device : * mut CUdevice) -> CUresult { unsafe { culib () . cuStreamGetDevice (hStream , device) } }
pub unsafe fn cuStreamGetFlags (hStream : CUstream , flags : * mut :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuStreamGetFlags (hStream , flags) } }
pub unsafe fn cuStreamGetId (hStream : CUstream , streamId : * mut :: core :: ffi :: c_ulonglong) -> CUresult { unsafe { culib () . cuStreamGetId (hStream , streamId) } }
pub unsafe fn cuStreamGetCtx (hStream : CUstream , pctx : * mut CUcontext) -> CUresult { unsafe { culib () . cuStreamGetCtx (hStream , pctx) } }
pub unsafe fn cuStreamGetCtx_v2 (hStream : CUstream , pCtx : * mut CUcontext , pGreenCtx : * mut CUgreenCtx ,) -> CUresult { unsafe { culib () . cuStreamGetCtx_v2 (hStream , pCtx , pGreenCtx) } }
pub unsafe fn cuStreamWaitEvent (hStream : CUstream , hEvent : CUevent , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamWaitEvent (hStream , hEvent , Flags) } }
pub unsafe fn cuStreamAddCallback (hStream : CUstream , callback : CUstreamCallback , userData : * mut :: core :: ffi :: c_void , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamAddCallback (hStream , callback , userData , flags) } }
pub unsafe fn cuStreamBeginCapture_v2 (hStream : CUstream , mode : CUstreamCaptureMode) -> CUresult { unsafe { culib () . cuStreamBeginCapture_v2 (hStream , mode) } }
pub unsafe fn cuStreamBeginCaptureToGraph (hStream : CUstream , hGraph : CUgraph , dependencies : * const CUgraphNode , dependencyData : * const CUgraphEdgeData , numDependencies : usize , mode : CUstreamCaptureMode ,) -> CUresult { unsafe { culib () . cuStreamBeginCaptureToGraph (hStream , hGraph , dependencies , dependencyData , numDependencies , mode) } }
pub unsafe fn cuThreadExchangeStreamCaptureMode (mode : * mut CUstreamCaptureMode) -> CUresult { unsafe { culib () . cuThreadExchangeStreamCaptureMode (mode) } }
pub unsafe fn cuStreamEndCapture (hStream : CUstream , phGraph : * mut CUgraph) -> CUresult { unsafe { culib () . cuStreamEndCapture (hStream , phGraph) } }
pub unsafe fn cuStreamIsCapturing (hStream : CUstream , captureStatus : * mut CUstreamCaptureStatus ,) -> CUresult { unsafe { culib () . cuStreamIsCapturing (hStream , captureStatus) } }
pub unsafe fn cuStreamGetCaptureInfo_v2 (hStream : CUstream , captureStatus_out : * mut CUstreamCaptureStatus , id_out : * mut cuuint64_t , graph_out : * mut CUgraph , dependencies_out : * mut * const CUgraphNode , numDependencies_out : * mut usize ,) -> CUresult { unsafe { culib () . cuStreamGetCaptureInfo_v2 (hStream , captureStatus_out , id_out , graph_out , dependencies_out , numDependencies_out) } }
pub unsafe fn cuStreamGetCaptureInfo_v3 (hStream : CUstream , captureStatus_out : * mut CUstreamCaptureStatus , id_out : * mut cuuint64_t , graph_out : * mut CUgraph , dependencies_out : * mut * const CUgraphNode , edgeData_out : * mut * const CUgraphEdgeData , numDependencies_out : * mut usize ,) -> CUresult { unsafe { culib () . cuStreamGetCaptureInfo_v3 (hStream , captureStatus_out , id_out , graph_out , dependencies_out , edgeData_out , numDependencies_out) } }
pub unsafe fn cuStreamUpdateCaptureDependencies (hStream : CUstream , dependencies : * mut CUgraphNode , numDependencies : usize , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamUpdateCaptureDependencies (hStream , dependencies , numDependencies , flags) } }
pub unsafe fn cuStreamUpdateCaptureDependencies_v2 (hStream : CUstream , dependencies : * mut CUgraphNode , dependencyData : * const CUgraphEdgeData , numDependencies : usize , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamUpdateCaptureDependencies_v2 (hStream , dependencies , dependencyData , numDependencies , flags) } }
pub unsafe fn cuStreamAttachMemAsync (hStream : CUstream , dptr : CUdeviceptr , length : usize , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamAttachMemAsync (hStream , dptr , length , flags) } }
pub unsafe fn cuStreamQuery (hStream : CUstream) -> CUresult { unsafe { culib () . cuStreamQuery (hStream) } }
pub unsafe fn cuStreamSynchronize (hStream : CUstream) -> CUresult { unsafe { culib () . cuStreamSynchronize (hStream) } }
pub unsafe fn cuStreamDestroy_v2 (hStream : CUstream) -> CUresult { unsafe { culib () . cuStreamDestroy_v2 (hStream) } }
pub unsafe fn cuStreamCopyAttributes (dst : CUstream , src : CUstream) -> CUresult { unsafe { culib () . cuStreamCopyAttributes (dst , src) } }
pub unsafe fn cuStreamGetAttribute (hStream : CUstream , attr : CUstreamAttrID , value_out : * mut CUstreamAttrValue ,) -> CUresult { unsafe { culib () . cuStreamGetAttribute (hStream , attr , value_out) } }
pub unsafe fn cuStreamSetAttribute (hStream : CUstream , attr : CUstreamAttrID , value : * const CUstreamAttrValue ,) -> CUresult { unsafe { culib () . cuStreamSetAttribute (hStream , attr , value) } }
pub unsafe fn cuEventCreate (phEvent : * mut CUevent , Flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuEventCreate (phEvent , Flags) } }
pub unsafe fn cuEventRecord (hEvent : CUevent , hStream : CUstream) -> CUresult { unsafe { culib () . cuEventRecord (hEvent , hStream) } }
pub unsafe fn cuEventRecordWithFlags (hEvent : CUevent , hStream : CUstream , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuEventRecordWithFlags (hEvent , hStream , flags) } }
pub unsafe fn cuEventQuery (hEvent : CUevent) -> CUresult { unsafe { culib () . cuEventQuery (hEvent) } }
pub unsafe fn cuEventSynchronize (hEvent : CUevent) -> CUresult { unsafe { culib () . cuEventSynchronize (hEvent) } }
pub unsafe fn cuEventDestroy_v2 (hEvent : CUevent) -> CUresult { unsafe { culib () . cuEventDestroy_v2 (hEvent) } }
pub unsafe fn cuEventElapsedTime (pMilliseconds : * mut f32 , hStart : CUevent , hEnd : CUevent) -> CUresult { unsafe { culib () . cuEventElapsedTime (pMilliseconds , hStart , hEnd) } }
pub unsafe fn cuEventElapsedTime_v2 (pMilliseconds : * mut f32 , hStart : CUevent , hEnd : CUevent ,) -> CUresult { unsafe { culib () . cuEventElapsedTime_v2 (pMilliseconds , hStart , hEnd) } }
pub unsafe fn cuImportExternalMemory (extMem_out : * mut CUexternalMemory , memHandleDesc : * const CUDA_EXTERNAL_MEMORY_HANDLE_DESC ,) -> CUresult { unsafe { culib () . cuImportExternalMemory (extMem_out , memHandleDesc) } }
pub unsafe fn cuExternalMemoryGetMappedBuffer (devPtr : * mut CUdeviceptr , extMem : CUexternalMemory , bufferDesc : * const CUDA_EXTERNAL_MEMORY_BUFFER_DESC ,) -> CUresult { unsafe { culib () . cuExternalMemoryGetMappedBuffer (devPtr , extMem , bufferDesc) } }
pub unsafe fn cuExternalMemoryGetMappedMipmappedArray (mipmap : * mut CUmipmappedArray , extMem : CUexternalMemory , mipmapDesc : * const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC ,) -> CUresult { unsafe { culib () . cuExternalMemoryGetMappedMipmappedArray (mipmap , extMem , mipmapDesc) } }
pub unsafe fn cuDestroyExternalMemory (extMem : CUexternalMemory) -> CUresult { unsafe { culib () . cuDestroyExternalMemory (extMem) } }
pub unsafe fn cuImportExternalSemaphore (extSem_out : * mut CUexternalSemaphore , semHandleDesc : * const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC ,) -> CUresult { unsafe { culib () . cuImportExternalSemaphore (extSem_out , semHandleDesc) } }
pub unsafe fn cuSignalExternalSemaphoresAsync (extSemArray : * const CUexternalSemaphore , paramsArray : * const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS , numExtSems : :: core :: ffi :: c_uint , stream : CUstream ,) -> CUresult { unsafe { culib () . cuSignalExternalSemaphoresAsync (extSemArray , paramsArray , numExtSems , stream) } }
pub unsafe fn cuWaitExternalSemaphoresAsync (extSemArray : * const CUexternalSemaphore , paramsArray : * const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS , numExtSems : :: core :: ffi :: c_uint , stream : CUstream ,) -> CUresult { unsafe { culib () . cuWaitExternalSemaphoresAsync (extSemArray , paramsArray , numExtSems , stream) } }
pub unsafe fn cuDestroyExternalSemaphore (extSem : CUexternalSemaphore) -> CUresult { unsafe { culib () . cuDestroyExternalSemaphore (extSem) } }
pub unsafe fn cuStreamWaitValue32_v2 (stream : CUstream , addr : CUdeviceptr , value : cuuint32_t , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamWaitValue32_v2 (stream , addr , value , flags) } }
pub unsafe fn cuStreamWaitValue64_v2 (stream : CUstream , addr : CUdeviceptr , value : cuuint64_t , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamWaitValue64_v2 (stream , addr , value , flags) } }
pub unsafe fn cuStreamWriteValue32_v2 (stream : CUstream , addr : CUdeviceptr , value : cuuint32_t , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamWriteValue32_v2 (stream , addr , value , flags) } }
pub unsafe fn cuStreamWriteValue64_v2 (stream : CUstream , addr : CUdeviceptr , value : cuuint64_t , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamWriteValue64_v2 (stream , addr , value , flags) } }
pub unsafe fn cuStreamBatchMemOp_v2 (stream : CUstream , count : :: core :: ffi :: c_uint , paramArray : * mut CUstreamBatchMemOpParams , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuStreamBatchMemOp_v2 (stream , count , paramArray , flags) } }
pub unsafe fn cuFuncGetAttribute (pi : * mut :: core :: ffi :: c_int , attrib : CUfunction_attribute , hfunc : CUfunction ,) -> CUresult { unsafe { culib () . cuFuncGetAttribute (pi , attrib , hfunc) } }
pub unsafe fn cuFuncSetAttribute (hfunc : CUfunction , attrib : CUfunction_attribute , value : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuFuncSetAttribute (hfunc , attrib , value) } }
pub unsafe fn cuFuncSetCacheConfig (hfunc : CUfunction , config : CUfunc_cache) -> CUresult { unsafe { culib () . cuFuncSetCacheConfig (hfunc , config) } }
pub unsafe fn cuFuncGetModule (hmod : * mut CUmodule , hfunc : CUfunction) -> CUresult { unsafe { culib () . cuFuncGetModule (hmod , hfunc) } }
pub unsafe fn cuFuncGetName (name : * mut * const :: core :: ffi :: c_char , hfunc : CUfunction) -> CUresult { unsafe { culib () . cuFuncGetName (name , hfunc) } }
pub unsafe fn cuFuncGetParamInfo (func : CUfunction , paramIndex : usize , paramOffset : * mut usize , paramSize : * mut usize ,) -> CUresult { unsafe { culib () . cuFuncGetParamInfo (func , paramIndex , paramOffset , paramSize) } }
pub unsafe fn cuFuncIsLoaded (state : * mut CUfunctionLoadingState , function : CUfunction) -> CUresult { unsafe { culib () . cuFuncIsLoaded (state , function) } }
pub unsafe fn cuFuncLoad (function : CUfunction) -> CUresult { unsafe { culib () . cuFuncLoad (function) } }
pub unsafe fn cuLaunchKernel (f : CUfunction , gridDimX : :: core :: ffi :: c_uint , gridDimY : :: core :: ffi :: c_uint , gridDimZ : :: core :: ffi :: c_uint , blockDimX : :: core :: ffi :: c_uint , blockDimY : :: core :: ffi :: c_uint , blockDimZ : :: core :: ffi :: c_uint , sharedMemBytes : :: core :: ffi :: c_uint , hStream : CUstream , kernelParams : * mut * mut :: core :: ffi :: c_void , extra : * mut * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuLaunchKernel (f , gridDimX , gridDimY , gridDimZ , blockDimX , blockDimY , blockDimZ , sharedMemBytes , hStream , kernelParams , extra) } }
pub unsafe fn cuLaunchKernelEx (config : * const CUlaunchConfig , f : CUfunction , kernelParams : * mut * mut :: core :: ffi :: c_void , extra : * mut * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuLaunchKernelEx (config , f , kernelParams , extra) } }
pub unsafe fn cuLaunchCooperativeKernel (f : CUfunction , gridDimX : :: core :: ffi :: c_uint , gridDimY : :: core :: ffi :: c_uint , gridDimZ : :: core :: ffi :: c_uint , blockDimX : :: core :: ffi :: c_uint , blockDimY : :: core :: ffi :: c_uint , blockDimZ : :: core :: ffi :: c_uint , sharedMemBytes : :: core :: ffi :: c_uint , hStream : CUstream , kernelParams : * mut * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuLaunchCooperativeKernel (f , gridDimX , gridDimY , gridDimZ , blockDimX , blockDimY , blockDimZ , sharedMemBytes , hStream , kernelParams) } }
pub unsafe fn cuLaunchCooperativeKernelMultiDevice (launchParamsList : * mut CUDA_LAUNCH_PARAMS , numDevices : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuLaunchCooperativeKernelMultiDevice (launchParamsList , numDevices , flags) } }
pub unsafe fn cuLaunchHostFunc (hStream : CUstream , fn_ : CUhostFn , userData : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuLaunchHostFunc (hStream , fn_ , userData) } }
pub unsafe fn cuFuncSetBlockShape (hfunc : CUfunction , x : :: core :: ffi :: c_int , y : :: core :: ffi :: c_int , z : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuFuncSetBlockShape (hfunc , x , y , z) } }
pub unsafe fn cuFuncSetSharedSize (hfunc : CUfunction , bytes : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuFuncSetSharedSize (hfunc , bytes) } }
pub unsafe fn cuParamSetSize (hfunc : CUfunction , numbytes : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuParamSetSize (hfunc , numbytes) } }
pub unsafe fn cuParamSeti (hfunc : CUfunction , offset : :: core :: ffi :: c_int , value : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuParamSeti (hfunc , offset , value) } }
pub unsafe fn cuParamSetf (hfunc : CUfunction , offset : :: core :: ffi :: c_int , value : f32) -> CUresult { unsafe { culib () . cuParamSetf (hfunc , offset , value) } }
pub unsafe fn cuParamSetv (hfunc : CUfunction , offset : :: core :: ffi :: c_int , ptr : * mut :: core :: ffi :: c_void , numbytes : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuParamSetv (hfunc , offset , ptr , numbytes) } }
pub unsafe fn cuLaunch (f : CUfunction) -> CUresult { unsafe { culib () . cuLaunch (f) } }
pub unsafe fn cuLaunchGrid (f : CUfunction , grid_width : :: core :: ffi :: c_int , grid_height : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuLaunchGrid (f , grid_width , grid_height) } }
pub unsafe fn cuLaunchGridAsync (f : CUfunction , grid_width : :: core :: ffi :: c_int , grid_height : :: core :: ffi :: c_int , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuLaunchGridAsync (f , grid_width , grid_height , hStream) } }
pub unsafe fn cuParamSetTexRef (hfunc : CUfunction , texunit : :: core :: ffi :: c_int , hTexRef : CUtexref ,) -> CUresult { unsafe { culib () . cuParamSetTexRef (hfunc , texunit , hTexRef) } }
pub unsafe fn cuFuncSetSharedMemConfig (hfunc : CUfunction , config : CUsharedconfig) -> CUresult { unsafe { culib () . cuFuncSetSharedMemConfig (hfunc , config) } }
pub unsafe fn cuGraphCreate (phGraph : * mut CUgraph , flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuGraphCreate (phGraph , flags) } }
pub unsafe fn cuGraphAddKernelNode_v2 (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * const CUDA_KERNEL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphAddKernelNode_v2 (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphKernelNodeGetParams_v2 (hNode : CUgraphNode , nodeParams : * mut CUDA_KERNEL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphKernelNodeGetParams_v2 (hNode , nodeParams) } }
pub unsafe fn cuGraphKernelNodeSetParams_v2 (hNode : CUgraphNode , nodeParams : * const CUDA_KERNEL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphKernelNodeSetParams_v2 (hNode , nodeParams) } }
pub unsafe fn cuGraphAddMemcpyNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , copyParams : * const CUDA_MEMCPY3D , ctx : CUcontext ,) -> CUresult { unsafe { culib () . cuGraphAddMemcpyNode (phGraphNode , hGraph , dependencies , numDependencies , copyParams , ctx) } }
pub unsafe fn cuGraphMemcpyNodeGetParams (hNode : CUgraphNode , nodeParams : * mut CUDA_MEMCPY3D ,) -> CUresult { unsafe { culib () . cuGraphMemcpyNodeGetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphMemcpyNodeSetParams (hNode : CUgraphNode , nodeParams : * const CUDA_MEMCPY3D ,) -> CUresult { unsafe { culib () . cuGraphMemcpyNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphAddMemsetNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , memsetParams : * const CUDA_MEMSET_NODE_PARAMS , ctx : CUcontext ,) -> CUresult { unsafe { culib () . cuGraphAddMemsetNode (phGraphNode , hGraph , dependencies , numDependencies , memsetParams , ctx) } }
pub unsafe fn cuGraphMemsetNodeGetParams (hNode : CUgraphNode , nodeParams : * mut CUDA_MEMSET_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphMemsetNodeGetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphMemsetNodeSetParams (hNode : CUgraphNode , nodeParams : * const CUDA_MEMSET_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphMemsetNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphAddHostNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * const CUDA_HOST_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphAddHostNode (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphHostNodeGetParams (hNode : CUgraphNode , nodeParams : * mut CUDA_HOST_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphHostNodeGetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphHostNodeSetParams (hNode : CUgraphNode , nodeParams : * const CUDA_HOST_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphHostNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphAddChildGraphNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , childGraph : CUgraph ,) -> CUresult { unsafe { culib () . cuGraphAddChildGraphNode (phGraphNode , hGraph , dependencies , numDependencies , childGraph) } }
pub unsafe fn cuGraphChildGraphNodeGetGraph (hNode : CUgraphNode , phGraph : * mut CUgraph) -> CUresult { unsafe { culib () . cuGraphChildGraphNodeGetGraph (hNode , phGraph) } }
pub unsafe fn cuGraphAddEmptyNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize ,) -> CUresult { unsafe { culib () . cuGraphAddEmptyNode (phGraphNode , hGraph , dependencies , numDependencies) } }
pub unsafe fn cuGraphAddEventRecordNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , event : CUevent ,) -> CUresult { unsafe { culib () . cuGraphAddEventRecordNode (phGraphNode , hGraph , dependencies , numDependencies , event) } }
pub unsafe fn cuGraphEventRecordNodeGetEvent (hNode : CUgraphNode , event_out : * mut CUevent) -> CUresult { unsafe { culib () . cuGraphEventRecordNodeGetEvent (hNode , event_out) } }
pub unsafe fn cuGraphEventRecordNodeSetEvent (hNode : CUgraphNode , event : CUevent) -> CUresult { unsafe { culib () . cuGraphEventRecordNodeSetEvent (hNode , event) } }
pub unsafe fn cuGraphAddEventWaitNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , event : CUevent ,) -> CUresult { unsafe { culib () . cuGraphAddEventWaitNode (phGraphNode , hGraph , dependencies , numDependencies , event) } }
pub unsafe fn cuGraphEventWaitNodeGetEvent (hNode : CUgraphNode , event_out : * mut CUevent) -> CUresult { unsafe { culib () . cuGraphEventWaitNodeGetEvent (hNode , event_out) } }
pub unsafe fn cuGraphEventWaitNodeSetEvent (hNode : CUgraphNode , event : CUevent) -> CUresult { unsafe { culib () . cuGraphEventWaitNodeSetEvent (hNode , event) } }
pub unsafe fn cuGraphAddExternalSemaphoresSignalNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphAddExternalSemaphoresSignalNode (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphExternalSemaphoresSignalNodeGetParams (hNode : CUgraphNode , params_out : * mut CUDA_EXT_SEM_SIGNAL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExternalSemaphoresSignalNodeGetParams (hNode , params_out) } }
pub unsafe fn cuGraphExternalSemaphoresSignalNodeSetParams (hNode : CUgraphNode , nodeParams : * const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExternalSemaphoresSignalNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphAddExternalSemaphoresWaitNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * const CUDA_EXT_SEM_WAIT_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphAddExternalSemaphoresWaitNode (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphExternalSemaphoresWaitNodeGetParams (hNode : CUgraphNode , params_out : * mut CUDA_EXT_SEM_WAIT_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExternalSemaphoresWaitNodeGetParams (hNode , params_out) } }
pub unsafe fn cuGraphExternalSemaphoresWaitNodeSetParams (hNode : CUgraphNode , nodeParams : * const CUDA_EXT_SEM_WAIT_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExternalSemaphoresWaitNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphAddBatchMemOpNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * const CUDA_BATCH_MEM_OP_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphAddBatchMemOpNode (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphBatchMemOpNodeGetParams (hNode : CUgraphNode , nodeParams_out : * mut CUDA_BATCH_MEM_OP_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphBatchMemOpNodeGetParams (hNode , nodeParams_out) } }
pub unsafe fn cuGraphBatchMemOpNodeSetParams (hNode : CUgraphNode , nodeParams : * const CUDA_BATCH_MEM_OP_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphBatchMemOpNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphExecBatchMemOpNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , nodeParams : * const CUDA_BATCH_MEM_OP_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExecBatchMemOpNodeSetParams (hGraphExec , hNode , nodeParams) } }
pub unsafe fn cuGraphAddMemAllocNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * mut CUDA_MEM_ALLOC_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphAddMemAllocNode (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphMemAllocNodeGetParams (hNode : CUgraphNode , params_out : * mut CUDA_MEM_ALLOC_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphMemAllocNodeGetParams (hNode , params_out) } }
pub unsafe fn cuGraphAddMemFreeNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , dptr : CUdeviceptr ,) -> CUresult { unsafe { culib () . cuGraphAddMemFreeNode (phGraphNode , hGraph , dependencies , numDependencies , dptr) } }
pub unsafe fn cuGraphMemFreeNodeGetParams (hNode : CUgraphNode , dptr_out : * mut CUdeviceptr) -> CUresult { unsafe { culib () . cuGraphMemFreeNodeGetParams (hNode , dptr_out) } }
pub unsafe fn cuDeviceGraphMemTrim (device : CUdevice) -> CUresult { unsafe { culib () . cuDeviceGraphMemTrim (device) } }
pub unsafe fn cuDeviceGetGraphMemAttribute (device : CUdevice , attr : CUgraphMem_attribute , value : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuDeviceGetGraphMemAttribute (device , attr , value) } }
pub unsafe fn cuDeviceSetGraphMemAttribute (device : CUdevice , attr : CUgraphMem_attribute , value : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuDeviceSetGraphMemAttribute (device , attr , value) } }
pub unsafe fn cuGraphClone (phGraphClone : * mut CUgraph , originalGraph : CUgraph) -> CUresult { unsafe { culib () . cuGraphClone (phGraphClone , originalGraph) } }
pub unsafe fn cuGraphNodeFindInClone (phNode : * mut CUgraphNode , hOriginalNode : CUgraphNode , hClonedGraph : CUgraph ,) -> CUresult { unsafe { culib () . cuGraphNodeFindInClone (phNode , hOriginalNode , hClonedGraph) } }
pub unsafe fn cuGraphNodeGetType (hNode : CUgraphNode , type_ : * mut CUgraphNodeType) -> CUresult { unsafe { culib () . cuGraphNodeGetType (hNode , type_) } }
pub unsafe fn cuGraphGetNodes (hGraph : CUgraph , nodes : * mut CUgraphNode , numNodes : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphGetNodes (hGraph , nodes , numNodes) } }
pub unsafe fn cuGraphGetRootNodes (hGraph : CUgraph , rootNodes : * mut CUgraphNode , numRootNodes : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphGetRootNodes (hGraph , rootNodes , numRootNodes) } }
pub unsafe fn cuGraphGetEdges (hGraph : CUgraph , from : * mut CUgraphNode , to : * mut CUgraphNode , numEdges : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphGetEdges (hGraph , from , to , numEdges) } }
pub unsafe fn cuGraphGetEdges_v2 (hGraph : CUgraph , from : * mut CUgraphNode , to : * mut CUgraphNode , edgeData : * mut CUgraphEdgeData , numEdges : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphGetEdges_v2 (hGraph , from , to , edgeData , numEdges) } }
pub unsafe fn cuGraphNodeGetDependencies (hNode : CUgraphNode , dependencies : * mut CUgraphNode , numDependencies : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphNodeGetDependencies (hNode , dependencies , numDependencies) } }
pub unsafe fn cuGraphNodeGetDependencies_v2 (hNode : CUgraphNode , dependencies : * mut CUgraphNode , edgeData : * mut CUgraphEdgeData , numDependencies : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphNodeGetDependencies_v2 (hNode , dependencies , edgeData , numDependencies) } }
pub unsafe fn cuGraphNodeGetDependentNodes (hNode : CUgraphNode , dependentNodes : * mut CUgraphNode , numDependentNodes : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphNodeGetDependentNodes (hNode , dependentNodes , numDependentNodes) } }
pub unsafe fn cuGraphNodeGetDependentNodes_v2 (hNode : CUgraphNode , dependentNodes : * mut CUgraphNode , edgeData : * mut CUgraphEdgeData , numDependentNodes : * mut usize ,) -> CUresult { unsafe { culib () . cuGraphNodeGetDependentNodes_v2 (hNode , dependentNodes , edgeData , numDependentNodes) } }
pub unsafe fn cuGraphAddDependencies (hGraph : CUgraph , from : * const CUgraphNode , to : * const CUgraphNode , numDependencies : usize ,) -> CUresult { unsafe { culib () . cuGraphAddDependencies (hGraph , from , to , numDependencies) } }
pub unsafe fn cuGraphAddDependencies_v2 (hGraph : CUgraph , from : * const CUgraphNode , to : * const CUgraphNode , edgeData : * const CUgraphEdgeData , numDependencies : usize ,) -> CUresult { unsafe { culib () . cuGraphAddDependencies_v2 (hGraph , from , to , edgeData , numDependencies) } }
pub unsafe fn cuGraphRemoveDependencies (hGraph : CUgraph , from : * const CUgraphNode , to : * const CUgraphNode , numDependencies : usize ,) -> CUresult { unsafe { culib () . cuGraphRemoveDependencies (hGraph , from , to , numDependencies) } }
pub unsafe fn cuGraphRemoveDependencies_v2 (hGraph : CUgraph , from : * const CUgraphNode , to : * const CUgraphNode , edgeData : * const CUgraphEdgeData , numDependencies : usize ,) -> CUresult { unsafe { culib () . cuGraphRemoveDependencies_v2 (hGraph , from , to , edgeData , numDependencies) } }
pub unsafe fn cuGraphDestroyNode (hNode : CUgraphNode) -> CUresult { unsafe { culib () . cuGraphDestroyNode (hNode) } }
pub unsafe fn cuGraphInstantiateWithFlags (phGraphExec : * mut CUgraphExec , hGraph : CUgraph , flags : :: core :: ffi :: c_ulonglong ,) -> CUresult { unsafe { culib () . cuGraphInstantiateWithFlags (phGraphExec , hGraph , flags) } }
pub unsafe fn cuGraphInstantiateWithParams (phGraphExec : * mut CUgraphExec , hGraph : CUgraph , instantiateParams : * mut CUDA_GRAPH_INSTANTIATE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphInstantiateWithParams (phGraphExec , hGraph , instantiateParams) } }
pub unsafe fn cuGraphExecGetFlags (hGraphExec : CUgraphExec , flags : * mut cuuint64_t) -> CUresult { unsafe { culib () . cuGraphExecGetFlags (hGraphExec , flags) } }
pub unsafe fn cuGraphExecKernelNodeSetParams_v2 (hGraphExec : CUgraphExec , hNode : CUgraphNode , nodeParams : * const CUDA_KERNEL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExecKernelNodeSetParams_v2 (hGraphExec , hNode , nodeParams) } }
pub unsafe fn cuGraphExecMemcpyNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , copyParams : * const CUDA_MEMCPY3D , ctx : CUcontext ,) -> CUresult { unsafe { culib () . cuGraphExecMemcpyNodeSetParams (hGraphExec , hNode , copyParams , ctx) } }
pub unsafe fn cuGraphExecMemsetNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , memsetParams : * const CUDA_MEMSET_NODE_PARAMS , ctx : CUcontext ,) -> CUresult { unsafe { culib () . cuGraphExecMemsetNodeSetParams (hGraphExec , hNode , memsetParams , ctx) } }
pub unsafe fn cuGraphExecHostNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , nodeParams : * const CUDA_HOST_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExecHostNodeSetParams (hGraphExec , hNode , nodeParams) } }
pub unsafe fn cuGraphExecChildGraphNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , childGraph : CUgraph ,) -> CUresult { unsafe { culib () . cuGraphExecChildGraphNodeSetParams (hGraphExec , hNode , childGraph) } }
pub unsafe fn cuGraphExecEventRecordNodeSetEvent (hGraphExec : CUgraphExec , hNode : CUgraphNode , event : CUevent ,) -> CUresult { unsafe { culib () . cuGraphExecEventRecordNodeSetEvent (hGraphExec , hNode , event) } }
pub unsafe fn cuGraphExecEventWaitNodeSetEvent (hGraphExec : CUgraphExec , hNode : CUgraphNode , event : CUevent ,) -> CUresult { unsafe { culib () . cuGraphExecEventWaitNodeSetEvent (hGraphExec , hNode , event) } }
pub unsafe fn cuGraphExecExternalSemaphoresSignalNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , nodeParams : * const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExecExternalSemaphoresSignalNodeSetParams (hGraphExec , hNode , nodeParams) } }
pub unsafe fn cuGraphExecExternalSemaphoresWaitNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , nodeParams : * const CUDA_EXT_SEM_WAIT_NODE_PARAMS ,) -> CUresult { unsafe { culib () . cuGraphExecExternalSemaphoresWaitNodeSetParams (hGraphExec , hNode , nodeParams) } }
pub unsafe fn cuGraphNodeSetEnabled (hGraphExec : CUgraphExec , hNode : CUgraphNode , isEnabled : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphNodeSetEnabled (hGraphExec , hNode , isEnabled) } }
pub unsafe fn cuGraphNodeGetEnabled (hGraphExec : CUgraphExec , hNode : CUgraphNode , isEnabled : * mut :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphNodeGetEnabled (hGraphExec , hNode , isEnabled) } }
pub unsafe fn cuGraphUpload (hGraphExec : CUgraphExec , hStream : CUstream) -> CUresult { unsafe { culib () . cuGraphUpload (hGraphExec , hStream) } }
pub unsafe fn cuGraphLaunch (hGraphExec : CUgraphExec , hStream : CUstream) -> CUresult { unsafe { culib () . cuGraphLaunch (hGraphExec , hStream) } }
pub unsafe fn cuGraphExecDestroy (hGraphExec : CUgraphExec) -> CUresult { unsafe { culib () . cuGraphExecDestroy (hGraphExec) } }
pub unsafe fn cuGraphDestroy (hGraph : CUgraph) -> CUresult { unsafe { culib () . cuGraphDestroy (hGraph) } }
pub unsafe fn cuGraphExecUpdate_v2 (hGraphExec : CUgraphExec , hGraph : CUgraph , resultInfo : * mut CUgraphExecUpdateResultInfo ,) -> CUresult { unsafe { culib () . cuGraphExecUpdate_v2 (hGraphExec , hGraph , resultInfo) } }
pub unsafe fn cuGraphKernelNodeCopyAttributes (dst : CUgraphNode , src : CUgraphNode) -> CUresult { unsafe { culib () . cuGraphKernelNodeCopyAttributes (dst , src) } }
pub unsafe fn cuGraphKernelNodeGetAttribute (hNode : CUgraphNode , attr : CUkernelNodeAttrID , value_out : * mut CUkernelNodeAttrValue ,) -> CUresult { unsafe { culib () . cuGraphKernelNodeGetAttribute (hNode , attr , value_out) } }
pub unsafe fn cuGraphKernelNodeSetAttribute (hNode : CUgraphNode , attr : CUkernelNodeAttrID , value : * const CUkernelNodeAttrValue ,) -> CUresult { unsafe { culib () . cuGraphKernelNodeSetAttribute (hNode , attr , value) } }
pub unsafe fn cuGraphDebugDotPrint (hGraph : CUgraph , path : * const :: core :: ffi :: c_char , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphDebugDotPrint (hGraph , path , flags) } }
pub unsafe fn cuUserObjectCreate (object_out : * mut CUuserObject , ptr : * mut :: core :: ffi :: c_void , destroy : CUhostFn , initialRefcount : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuUserObjectCreate (object_out , ptr , destroy , initialRefcount , flags) } }
pub unsafe fn cuUserObjectRetain (object : CUuserObject , count : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuUserObjectRetain (object , count) } }
pub unsafe fn cuUserObjectRelease (object : CUuserObject , count : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuUserObjectRelease (object , count) } }
pub unsafe fn cuGraphRetainUserObject (graph : CUgraph , object : CUuserObject , count : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphRetainUserObject (graph , object , count , flags) } }
pub unsafe fn cuGraphReleaseUserObject (graph : CUgraph , object : CUuserObject , count : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphReleaseUserObject (graph , object , count) } }
pub unsafe fn cuGraphAddNode (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , numDependencies : usize , nodeParams : * mut CUgraphNodeParams ,) -> CUresult { unsafe { culib () . cuGraphAddNode (phGraphNode , hGraph , dependencies , numDependencies , nodeParams) } }
pub unsafe fn cuGraphAddNode_v2 (phGraphNode : * mut CUgraphNode , hGraph : CUgraph , dependencies : * const CUgraphNode , dependencyData : * const CUgraphEdgeData , numDependencies : usize , nodeParams : * mut CUgraphNodeParams ,) -> CUresult { unsafe { culib () . cuGraphAddNode_v2 (phGraphNode , hGraph , dependencies , dependencyData , numDependencies , nodeParams) } }
pub unsafe fn cuGraphNodeSetParams (hNode : CUgraphNode , nodeParams : * mut CUgraphNodeParams) -> CUresult { unsafe { culib () . cuGraphNodeSetParams (hNode , nodeParams) } }
pub unsafe fn cuGraphExecNodeSetParams (hGraphExec : CUgraphExec , hNode : CUgraphNode , nodeParams : * mut CUgraphNodeParams ,) -> CUresult { unsafe { culib () . cuGraphExecNodeSetParams (hGraphExec , hNode , nodeParams) } }
pub unsafe fn cuGraphConditionalHandleCreate (pHandle_out : * mut CUgraphConditionalHandle , hGraph : CUgraph , ctx : CUcontext , defaultLaunchValue : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphConditionalHandleCreate (pHandle_out , hGraph , ctx , defaultLaunchValue , flags) } }
pub unsafe fn cuOccupancyMaxActiveBlocksPerMultiprocessor (numBlocks : * mut :: core :: ffi :: c_int , func : CUfunction , blockSize : :: core :: ffi :: c_int , dynamicSMemSize : usize ,) -> CUresult { unsafe { culib () . cuOccupancyMaxActiveBlocksPerMultiprocessor (numBlocks , func , blockSize , dynamicSMemSize) } }
pub unsafe fn cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (numBlocks : * mut :: core :: ffi :: c_int , func : CUfunction , blockSize : :: core :: ffi :: c_int , dynamicSMemSize : usize , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (numBlocks , func , blockSize , dynamicSMemSize , flags) } }
pub unsafe fn cuOccupancyMaxPotentialBlockSize (minGridSize : * mut :: core :: ffi :: c_int , blockSize : * mut :: core :: ffi :: c_int , func : CUfunction , blockSizeToDynamicSMemSize : CUoccupancyB2DSize , dynamicSMemSize : usize , blockSizeLimit : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuOccupancyMaxPotentialBlockSize (minGridSize , blockSize , func , blockSizeToDynamicSMemSize , dynamicSMemSize , blockSizeLimit) } }
pub unsafe fn cuOccupancyMaxPotentialBlockSizeWithFlags (minGridSize : * mut :: core :: ffi :: c_int , blockSize : * mut :: core :: ffi :: c_int , func : CUfunction , blockSizeToDynamicSMemSize : CUoccupancyB2DSize , dynamicSMemSize : usize , blockSizeLimit : :: core :: ffi :: c_int , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuOccupancyMaxPotentialBlockSizeWithFlags (minGridSize , blockSize , func , blockSizeToDynamicSMemSize , dynamicSMemSize , blockSizeLimit , flags) } }
pub unsafe fn cuOccupancyAvailableDynamicSMemPerBlock (dynamicSmemSize : * mut usize , func : CUfunction , numBlocks : :: core :: ffi :: c_int , blockSize : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuOccupancyAvailableDynamicSMemPerBlock (dynamicSmemSize , func , numBlocks , blockSize) } }
pub unsafe fn cuOccupancyMaxPotentialClusterSize (clusterSize : * mut :: core :: ffi :: c_int , func : CUfunction , config : * const CUlaunchConfig ,) -> CUresult { unsafe { culib () . cuOccupancyMaxPotentialClusterSize (clusterSize , func , config) } }
pub unsafe fn cuOccupancyMaxActiveClusters (numClusters : * mut :: core :: ffi :: c_int , func : CUfunction , config : * const CUlaunchConfig ,) -> CUresult { unsafe { culib () . cuOccupancyMaxActiveClusters (numClusters , func , config) } }
pub unsafe fn cuTexRefSetArray (hTexRef : CUtexref , hArray : CUarray , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuTexRefSetArray (hTexRef , hArray , Flags) } }
pub unsafe fn cuTexRefSetMipmappedArray (hTexRef : CUtexref , hMipmappedArray : CUmipmappedArray , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuTexRefSetMipmappedArray (hTexRef , hMipmappedArray , Flags) } }
pub unsafe fn cuTexRefSetAddress_v2 (ByteOffset : * mut usize , hTexRef : CUtexref , dptr : CUdeviceptr , bytes : usize ,) -> CUresult { unsafe { culib () . cuTexRefSetAddress_v2 (ByteOffset , hTexRef , dptr , bytes) } }
pub unsafe fn cuTexRefSetAddress2D_v3 (hTexRef : CUtexref , desc : * const CUDA_ARRAY_DESCRIPTOR , dptr : CUdeviceptr , Pitch : usize ,) -> CUresult { unsafe { culib () . cuTexRefSetAddress2D_v3 (hTexRef , desc , dptr , Pitch) } }
pub unsafe fn cuTexRefSetFormat (hTexRef : CUtexref , fmt : CUarray_format , NumPackedComponents : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuTexRefSetFormat (hTexRef , fmt , NumPackedComponents) } }
pub unsafe fn cuTexRefSetAddressMode (hTexRef : CUtexref , dim : :: core :: ffi :: c_int , am : CUaddress_mode ,) -> CUresult { unsafe { culib () . cuTexRefSetAddressMode (hTexRef , dim , am) } }
pub unsafe fn cuTexRefSetFilterMode (hTexRef : CUtexref , fm : CUfilter_mode) -> CUresult { unsafe { culib () . cuTexRefSetFilterMode (hTexRef , fm) } }
pub unsafe fn cuTexRefSetMipmapFilterMode (hTexRef : CUtexref , fm : CUfilter_mode) -> CUresult { unsafe { culib () . cuTexRefSetMipmapFilterMode (hTexRef , fm) } }
pub unsafe fn cuTexRefSetMipmapLevelBias (hTexRef : CUtexref , bias : f32) -> CUresult { unsafe { culib () . cuTexRefSetMipmapLevelBias (hTexRef , bias) } }
pub unsafe fn cuTexRefSetMipmapLevelClamp (hTexRef : CUtexref , minMipmapLevelClamp : f32 , maxMipmapLevelClamp : f32 ,) -> CUresult { unsafe { culib () . cuTexRefSetMipmapLevelClamp (hTexRef , minMipmapLevelClamp , maxMipmapLevelClamp) } }
pub unsafe fn cuTexRefSetMaxAnisotropy (hTexRef : CUtexref , maxAniso : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuTexRefSetMaxAnisotropy (hTexRef , maxAniso) } }
pub unsafe fn cuTexRefSetBorderColor (hTexRef : CUtexref , pBorderColor : * mut f32) -> CUresult { unsafe { culib () . cuTexRefSetBorderColor (hTexRef , pBorderColor) } }
pub unsafe fn cuTexRefSetFlags (hTexRef : CUtexref , Flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuTexRefSetFlags (hTexRef , Flags) } }
pub unsafe fn cuTexRefGetAddress_v2 (pdptr : * mut CUdeviceptr , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetAddress_v2 (pdptr , hTexRef) } }
pub unsafe fn cuTexRefGetArray (phArray : * mut CUarray , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetArray (phArray , hTexRef) } }
pub unsafe fn cuTexRefGetMipmappedArray (phMipmappedArray : * mut CUmipmappedArray , hTexRef : CUtexref ,) -> CUresult { unsafe { culib () . cuTexRefGetMipmappedArray (phMipmappedArray , hTexRef) } }
pub unsafe fn cuTexRefGetAddressMode (pam : * mut CUaddress_mode , hTexRef : CUtexref , dim : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuTexRefGetAddressMode (pam , hTexRef , dim) } }
pub unsafe fn cuTexRefGetFilterMode (pfm : * mut CUfilter_mode , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetFilterMode (pfm , hTexRef) } }
pub unsafe fn cuTexRefGetFormat (pFormat : * mut CUarray_format , pNumChannels : * mut :: core :: ffi :: c_int , hTexRef : CUtexref ,) -> CUresult { unsafe { culib () . cuTexRefGetFormat (pFormat , pNumChannels , hTexRef) } }
pub unsafe fn cuTexRefGetMipmapFilterMode (pfm : * mut CUfilter_mode , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetMipmapFilterMode (pfm , hTexRef) } }
pub unsafe fn cuTexRefGetMipmapLevelBias (pbias : * mut f32 , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetMipmapLevelBias (pbias , hTexRef) } }
pub unsafe fn cuTexRefGetMipmapLevelClamp (pminMipmapLevelClamp : * mut f32 , pmaxMipmapLevelClamp : * mut f32 , hTexRef : CUtexref ,) -> CUresult { unsafe { culib () . cuTexRefGetMipmapLevelClamp (pminMipmapLevelClamp , pmaxMipmapLevelClamp , hTexRef) } }
pub unsafe fn cuTexRefGetMaxAnisotropy (pmaxAniso : * mut :: core :: ffi :: c_int , hTexRef : CUtexref ,) -> CUresult { unsafe { culib () . cuTexRefGetMaxAnisotropy (pmaxAniso , hTexRef) } }
pub unsafe fn cuTexRefGetBorderColor (pBorderColor : * mut f32 , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetBorderColor (pBorderColor , hTexRef) } }
pub unsafe fn cuTexRefGetFlags (pFlags : * mut :: core :: ffi :: c_uint , hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefGetFlags (pFlags , hTexRef) } }
pub unsafe fn cuTexRefCreate (pTexRef : * mut CUtexref) -> CUresult { unsafe { culib () . cuTexRefCreate (pTexRef) } }
pub unsafe fn cuTexRefDestroy (hTexRef : CUtexref) -> CUresult { unsafe { culib () . cuTexRefDestroy (hTexRef) } }
pub unsafe fn cuSurfRefSetArray (hSurfRef : CUsurfref , hArray : CUarray , Flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuSurfRefSetArray (hSurfRef , hArray , Flags) } }
pub unsafe fn cuSurfRefGetArray (phArray : * mut CUarray , hSurfRef : CUsurfref) -> CUresult { unsafe { culib () . cuSurfRefGetArray (phArray , hSurfRef) } }
pub unsafe fn cuTexObjectCreate (pTexObject : * mut CUtexObject , pResDesc : * const CUDA_RESOURCE_DESC , pTexDesc : * const CUDA_TEXTURE_DESC , pResViewDesc : * const CUDA_RESOURCE_VIEW_DESC ,) -> CUresult { unsafe { culib () . cuTexObjectCreate (pTexObject , pResDesc , pTexDesc , pResViewDesc) } }
pub unsafe fn cuTexObjectDestroy (texObject : CUtexObject) -> CUresult { unsafe { culib () . cuTexObjectDestroy (texObject) } }
pub unsafe fn cuTexObjectGetResourceDesc (pResDesc : * mut CUDA_RESOURCE_DESC , texObject : CUtexObject ,) -> CUresult { unsafe { culib () . cuTexObjectGetResourceDesc (pResDesc , texObject) } }
pub unsafe fn cuTexObjectGetTextureDesc (pTexDesc : * mut CUDA_TEXTURE_DESC , texObject : CUtexObject ,) -> CUresult { unsafe { culib () . cuTexObjectGetTextureDesc (pTexDesc , texObject) } }
pub unsafe fn cuTexObjectGetResourceViewDesc (pResViewDesc : * mut CUDA_RESOURCE_VIEW_DESC , texObject : CUtexObject ,) -> CUresult { unsafe { culib () . cuTexObjectGetResourceViewDesc (pResViewDesc , texObject) } }
pub unsafe fn cuSurfObjectCreate (pSurfObject : * mut CUsurfObject , pResDesc : * const CUDA_RESOURCE_DESC ,) -> CUresult { unsafe { culib () . cuSurfObjectCreate (pSurfObject , pResDesc) } }
pub unsafe fn cuSurfObjectDestroy (surfObject : CUsurfObject) -> CUresult { unsafe { culib () . cuSurfObjectDestroy (surfObject) } }
pub unsafe fn cuSurfObjectGetResourceDesc (pResDesc : * mut CUDA_RESOURCE_DESC , surfObject : CUsurfObject ,) -> CUresult { unsafe { culib () . cuSurfObjectGetResourceDesc (pResDesc , surfObject) } }
pub unsafe fn cuTensorMapEncodeTiled (tensorMap : * mut CUtensorMap , tensorDataType : CUtensorMapDataType , tensorRank : cuuint32_t , globalAddress : * mut :: core :: ffi :: c_void , globalDim : * const cuuint64_t , globalStrides : * const cuuint64_t , boxDim : * const cuuint32_t , elementStrides : * const cuuint32_t , interleave : CUtensorMapInterleave , swizzle : CUtensorMapSwizzle , l2Promotion : CUtensorMapL2promotion , oobFill : CUtensorMapFloatOOBfill ,) -> CUresult { unsafe { culib () . cuTensorMapEncodeTiled (tensorMap , tensorDataType , tensorRank , globalAddress , globalDim , globalStrides , boxDim , elementStrides , interleave , swizzle , l2Promotion , oobFill) } }
pub unsafe fn cuTensorMapEncodeIm2col (tensorMap : * mut CUtensorMap , tensorDataType : CUtensorMapDataType , tensorRank : cuuint32_t , globalAddress : * mut :: core :: ffi :: c_void , globalDim : * const cuuint64_t , globalStrides : * const cuuint64_t , pixelBoxLowerCorner : * const :: core :: ffi :: c_int , pixelBoxUpperCorner : * const :: core :: ffi :: c_int , channelsPerPixel : cuuint32_t , pixelsPerColumn : cuuint32_t , elementStrides : * const cuuint32_t , interleave : CUtensorMapInterleave , swizzle : CUtensorMapSwizzle , l2Promotion : CUtensorMapL2promotion , oobFill : CUtensorMapFloatOOBfill ,) -> CUresult { unsafe { culib () . cuTensorMapEncodeIm2col (tensorMap , tensorDataType , tensorRank , globalAddress , globalDim , globalStrides , pixelBoxLowerCorner , pixelBoxUpperCorner , channelsPerPixel , pixelsPerColumn , elementStrides , interleave , swizzle , l2Promotion , oobFill) } }
pub unsafe fn cuTensorMapEncodeIm2colWide (tensorMap : * mut CUtensorMap , tensorDataType : CUtensorMapDataType , tensorRank : cuuint32_t , globalAddress : * mut :: core :: ffi :: c_void , globalDim : * const cuuint64_t , globalStrides : * const cuuint64_t , pixelBoxLowerCornerWidth : :: core :: ffi :: c_int , pixelBoxUpperCornerWidth : :: core :: ffi :: c_int , channelsPerPixel : cuuint32_t , pixelsPerColumn : cuuint32_t , elementStrides : * const cuuint32_t , interleave : CUtensorMapInterleave , mode : CUtensorMapIm2ColWideMode , swizzle : CUtensorMapSwizzle , l2Promotion : CUtensorMapL2promotion , oobFill : CUtensorMapFloatOOBfill ,) -> CUresult { unsafe { culib () . cuTensorMapEncodeIm2colWide (tensorMap , tensorDataType , tensorRank , globalAddress , globalDim , globalStrides , pixelBoxLowerCornerWidth , pixelBoxUpperCornerWidth , channelsPerPixel , pixelsPerColumn , elementStrides , interleave , mode , swizzle , l2Promotion , oobFill) } }
pub unsafe fn cuTensorMapReplaceAddress (tensorMap : * mut CUtensorMap , globalAddress : * mut :: core :: ffi :: c_void ,) -> CUresult { unsafe { culib () . cuTensorMapReplaceAddress (tensorMap , globalAddress) } }
pub unsafe fn cuDeviceCanAccessPeer (canAccessPeer : * mut :: core :: ffi :: c_int , dev : CUdevice , peerDev : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceCanAccessPeer (canAccessPeer , dev , peerDev) } }
pub unsafe fn cuCtxEnablePeerAccess (peerContext : CUcontext , Flags : :: core :: ffi :: c_uint) -> CUresult { unsafe { culib () . cuCtxEnablePeerAccess (peerContext , Flags) } }
pub unsafe fn cuCtxDisablePeerAccess (peerContext : CUcontext) -> CUresult { unsafe { culib () . cuCtxDisablePeerAccess (peerContext) } }
pub unsafe fn cuDeviceGetP2PAttribute (value : * mut :: core :: ffi :: c_int , attrib : CUdevice_P2PAttribute , srcDevice : CUdevice , dstDevice : CUdevice ,) -> CUresult { unsafe { culib () . cuDeviceGetP2PAttribute (value , attrib , srcDevice , dstDevice) } }
pub unsafe fn cuGraphicsUnregisterResource (resource : CUgraphicsResource) -> CUresult { unsafe { culib () . cuGraphicsUnregisterResource (resource) } }
pub unsafe fn cuGraphicsSubResourceGetMappedArray (pArray : * mut CUarray , resource : CUgraphicsResource , arrayIndex : :: core :: ffi :: c_uint , mipLevel : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphicsSubResourceGetMappedArray (pArray , resource , arrayIndex , mipLevel) } }
pub unsafe fn cuGraphicsResourceGetMappedMipmappedArray (pMipmappedArray : * mut CUmipmappedArray , resource : CUgraphicsResource ,) -> CUresult { unsafe { culib () . cuGraphicsResourceGetMappedMipmappedArray (pMipmappedArray , resource) } }
pub unsafe fn cuGraphicsResourceGetMappedPointer_v2 (pDevPtr : * mut CUdeviceptr , pSize : * mut usize , resource : CUgraphicsResource ,) -> CUresult { unsafe { culib () . cuGraphicsResourceGetMappedPointer_v2 (pDevPtr , pSize , resource) } }
pub unsafe fn cuGraphicsResourceSetMapFlags_v2 (resource : CUgraphicsResource , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGraphicsResourceSetMapFlags_v2 (resource , flags) } }
pub unsafe fn cuGraphicsMapResources (count : :: core :: ffi :: c_uint , resources : * mut CUgraphicsResource , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuGraphicsMapResources (count , resources , hStream) } }
pub unsafe fn cuGraphicsUnmapResources (count : :: core :: ffi :: c_uint , resources : * mut CUgraphicsResource , hStream : CUstream ,) -> CUresult { unsafe { culib () . cuGraphicsUnmapResources (count , resources , hStream) } }
pub unsafe fn cuGetProcAddress_v2 (symbol : * const :: core :: ffi :: c_char , pfn : * mut * mut :: core :: ffi :: c_void , cudaVersion : :: core :: ffi :: c_int , flags : cuuint64_t , symbolStatus : * mut CUdriverProcAddressQueryResult ,) -> CUresult { unsafe { culib () . cuGetProcAddress_v2 (symbol , pfn , cudaVersion , flags , symbolStatus) } }
pub unsafe fn cuCoredumpGetAttribute (attrib : CUcoredumpSettings , value : * mut :: core :: ffi :: c_void , size : * mut usize ,) -> CUresult { unsafe { culib () . cuCoredumpGetAttribute (attrib , value , size) } }
pub unsafe fn cuCoredumpGetAttributeGlobal (attrib : CUcoredumpSettings , value : * mut :: core :: ffi :: c_void , size : * mut usize ,) -> CUresult { unsafe { culib () . cuCoredumpGetAttributeGlobal (attrib , value , size) } }
pub unsafe fn cuCoredumpSetAttribute (attrib : CUcoredumpSettings , value : * mut :: core :: ffi :: c_void , size : * mut usize ,) -> CUresult { unsafe { culib () . cuCoredumpSetAttribute (attrib , value , size) } }
pub unsafe fn cuCoredumpSetAttributeGlobal (attrib : CUcoredumpSettings , value : * mut :: core :: ffi :: c_void , size : * mut usize ,) -> CUresult { unsafe { culib () . cuCoredumpSetAttributeGlobal (attrib , value , size) } }
pub unsafe fn cuGetExportTable (ppExportTable : * mut * const :: core :: ffi :: c_void , pExportTableId : * const CUuuid ,) -> CUresult { unsafe { culib () . cuGetExportTable (ppExportTable , pExportTableId) } }
pub unsafe fn cuGreenCtxCreate (phCtx : * mut CUgreenCtx , desc : CUdevResourceDesc , dev : CUdevice , flags : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuGreenCtxCreate (phCtx , desc , dev , flags) } }
pub unsafe fn cuGreenCtxDestroy (hCtx : CUgreenCtx) -> CUresult { unsafe { culib () . cuGreenCtxDestroy (hCtx) } }
pub unsafe fn cuCtxFromGreenCtx (pContext : * mut CUcontext , hCtx : CUgreenCtx) -> CUresult { unsafe { culib () . cuCtxFromGreenCtx (pContext , hCtx) } }
pub unsafe fn cuDeviceGetDevResource (device : CUdevice , resource : * mut CUdevResource , type_ : CUdevResourceType ,) -> CUresult { unsafe { culib () . cuDeviceGetDevResource (device , resource , type_) } }
pub unsafe fn cuCtxGetDevResource (hCtx : CUcontext , resource : * mut CUdevResource , type_ : CUdevResourceType ,) -> CUresult { unsafe { culib () . cuCtxGetDevResource (hCtx , resource , type_) } }
pub unsafe fn cuGreenCtxGetDevResource (hCtx : CUgreenCtx , resource : * mut CUdevResource , type_ : CUdevResourceType ,) -> CUresult { unsafe { culib () . cuGreenCtxGetDevResource (hCtx , resource , type_) } }
pub unsafe fn cuDevSmResourceSplitByCount (result : * mut CUdevResource , nbGroups : * mut :: core :: ffi :: c_uint , input : * const CUdevResource , remaining : * mut CUdevResource , useFlags : :: core :: ffi :: c_uint , minCount : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuDevSmResourceSplitByCount (result , nbGroups , input , remaining , useFlags , minCount) } }
pub unsafe fn cuDevResourceGenerateDesc (phDesc : * mut CUdevResourceDesc , resources : * mut CUdevResource , nbResources : :: core :: ffi :: c_uint ,) -> CUresult { unsafe { culib () . cuDevResourceGenerateDesc (phDesc , resources , nbResources) } }
pub unsafe fn cuGreenCtxRecordEvent (hCtx : CUgreenCtx , hEvent : CUevent) -> CUresult { unsafe { culib () . cuGreenCtxRecordEvent (hCtx , hEvent) } }
pub unsafe fn cuGreenCtxWaitEvent (hCtx : CUgreenCtx , hEvent : CUevent) -> CUresult { unsafe { culib () . cuGreenCtxWaitEvent (hCtx , hEvent) } }
pub unsafe fn cuStreamGetGreenCtx (hStream : CUstream , phCtx : * mut CUgreenCtx) -> CUresult { unsafe { culib () . cuStreamGetGreenCtx (hStream , phCtx) } }
pub unsafe fn cuGreenCtxStreamCreate (phStream : * mut CUstream , greenCtx : CUgreenCtx , flags : :: core :: ffi :: c_uint , priority : :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuGreenCtxStreamCreate (phStream , greenCtx , flags , priority) } }
pub unsafe fn cuCheckpointProcessGetRestoreThreadId (pid : :: core :: ffi :: c_int , tid : * mut :: core :: ffi :: c_int ,) -> CUresult { unsafe { culib () . cuCheckpointProcessGetRestoreThreadId (pid , tid) } }
pub unsafe fn cuCheckpointProcessGetState (pid : :: core :: ffi :: c_int , state : * mut CUprocessState ,) -> CUresult { unsafe { culib () . cuCheckpointProcessGetState (pid , state) } }
pub unsafe fn cuCheckpointProcessLock (pid : :: core :: ffi :: c_int , args : * mut CUcheckpointLockArgs ,) -> CUresult { unsafe { culib () . cuCheckpointProcessLock (pid , args) } }
pub unsafe fn cuCheckpointProcessCheckpoint (pid : :: core :: ffi :: c_int , args : * mut CUcheckpointCheckpointArgs ,) -> CUresult { unsafe { culib () . cuCheckpointProcessCheckpoint (pid , args) } }
pub unsafe fn cuCheckpointProcessRestore (pid : :: core :: ffi :: c_int , args : * mut CUcheckpointRestoreArgs ,) -> CUresult { unsafe { culib () . cuCheckpointProcessRestore (pid , args) } }
pub unsafe fn cuCheckpointProcessUnlock (pid : :: core :: ffi :: c_int , args : * mut CUcheckpointUnlockArgs ,) -> CUresult { unsafe { culib () . cuCheckpointProcessUnlock (pid , args) } }
pub unsafe fn cuProfilerInitialize (configFile : * const :: core :: ffi :: c_char , outputFile : * const :: core :: ffi :: c_char , outputMode : CUoutput_mode ,) -> CUresult { unsafe { culib () . cuProfilerInitialize (configFile , outputFile , outputMode) } }
pub unsafe fn cuProfilerStart () -> CUresult { unsafe { culib () . cuProfilerStart () } }
pub unsafe fn cuProfilerStop () -> CUresult { unsafe { culib () . cuProfilerStop () } }
