// AUTOGENERATED UNIFIED CUDA BINDINGS
// This file combines bindings from multiple CUDA versions

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

extern "C" {
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcAddNameExpression (prog : nvrtcProgram , name_expression : * const :: core :: ffi :: c_char ,) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcCompileProgram (prog : nvrtcProgram , numOptions : :: core :: ffi :: c_int , options : * const * const :: core :: ffi :: c_char ,) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcCreateProgram (prog : * mut nvrtcProgram , src : * const :: core :: ffi :: c_char , name : * const :: core :: ffi :: c_char , numHeaders : :: core :: ffi :: c_int , headers : * const * const :: core :: ffi :: c_char , includeNames : * const * const :: core :: ffi :: c_char ,) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcDestroyProgram (prog : * mut nvrtcProgram) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetCUBIN (prog : nvrtcProgram , cubin : * mut :: core :: ffi :: c_char) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetCUBINSize (prog : nvrtcProgram , cubinSizeRet : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetErrorString (result : nvrtcResult) -> * const :: core :: ffi :: c_char ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetLTOIR (prog : nvrtcProgram , LTOIR : * mut :: core :: ffi :: c_char) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetLTOIRSize (prog : nvrtcProgram , LTOIRSizeRet : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetLoweredName (prog : nvrtcProgram , name_expression : * const :: core :: ffi :: c_char , lowered_name : * mut * const :: core :: ffi :: c_char ,) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetNVVM (prog : nvrtcProgram , nvvm : * mut :: core :: ffi :: c_char) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetNVVMSize (prog : nvrtcProgram , nvvmSizeRet : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetNumSupportedArchs (numArchs : * mut :: core :: ffi :: c_int) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetOptiXIR (prog : nvrtcProgram , optixir : * mut :: core :: ffi :: c_char) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetOptiXIRSize (prog : nvrtcProgram , optixirSizeRet : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12080"))]
pub fn nvrtcGetPCHCreateStatus (prog : nvrtcProgram) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12080"))]
pub fn nvrtcGetPCHHeapSize (ret : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12080"))]
pub fn nvrtcGetPCHHeapSizeRequired (prog : nvrtcProgram , size : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetPTX (prog : nvrtcProgram , ptx : * mut :: core :: ffi :: c_char) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetPTXSize (prog : nvrtcProgram , ptxSizeRet : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetProgramLog (prog : nvrtcProgram , log : * mut :: core :: ffi :: c_char) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetProgramLogSize (prog : nvrtcProgram , logSizeRet : * mut usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcGetSupportedArchs (supportedArchs : * mut :: core :: ffi :: c_int) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12080"))]
pub fn nvrtcSetFlowCallback (prog : nvrtcProgram , callback : :: core :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: core :: ffi :: c_void , arg2 : * mut :: core :: ffi :: c_void ,) -> :: core :: ffi :: c_int , > , payload : * mut :: core :: ffi :: c_void ,) -> nvrtcResult ;
#[cfg(any(feature = "cuda-12080"))]
pub fn nvrtcSetPCHHeapSize (size : usize) -> nvrtcResult ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn nvrtcVersion (major : * mut :: core :: ffi :: c_int , minor : * mut :: core :: ffi :: c_int ,) -> nvrtcResult ;
}
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum nvrtcResult { NVRTC_SUCCESS = 0 , NVRTC_ERROR_OUT_OF_MEMORY = 1 , NVRTC_ERROR_PROGRAM_CREATION_FAILURE = 2 , NVRTC_ERROR_INVALID_INPUT = 3 , NVRTC_ERROR_INVALID_PROGRAM = 4 , NVRTC_ERROR_INVALID_OPTION = 5 , NVRTC_ERROR_COMPILATION = 6 , NVRTC_ERROR_BUILTIN_OPERATION_FAILURE = 7 , NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION = 8 , NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION = 9 , NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID = 10 , NVRTC_ERROR_INTERNAL_ERROR = 11 , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum nvrtcResult { NVRTC_SUCCESS = 0 , NVRTC_ERROR_OUT_OF_MEMORY = 1 , NVRTC_ERROR_PROGRAM_CREATION_FAILURE = 2 , NVRTC_ERROR_INVALID_INPUT = 3 , NVRTC_ERROR_INVALID_PROGRAM = 4 , NVRTC_ERROR_INVALID_OPTION = 5 , NVRTC_ERROR_COMPILATION = 6 , NVRTC_ERROR_BUILTIN_OPERATION_FAILURE = 7 , NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION = 8 , NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION = 9 , NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID = 10 , NVRTC_ERROR_INTERNAL_ERROR = 11 , NVRTC_ERROR_TIME_FILE_WRITE_FAILED = 12 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _nvrtcProgram { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type nvrtcProgram = * mut _nvrtcProgram ;
