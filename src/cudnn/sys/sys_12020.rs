/* automatically generated by rust-bindgen 0.69.4 */

pub const CUDA_VERSION: u32 = 12020;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum libraryPropertyType_t {
    MAJOR_VERSION = 0,
    MINOR_VERSION = 1,
    PATCH_LEVEL = 2,
}
pub use self::libraryPropertyType_t as libraryPropertyType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnContext {
    _unused: [u8; 0],
}
pub type cudnnHandle_t = *mut cudnnContext;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnStatus_t {
    CUDNN_STATUS_SUCCESS = 0,
    CUDNN_STATUS_NOT_INITIALIZED = 1,
    CUDNN_STATUS_ALLOC_FAILED = 2,
    CUDNN_STATUS_BAD_PARAM = 3,
    CUDNN_STATUS_INTERNAL_ERROR = 4,
    CUDNN_STATUS_INVALID_VALUE = 5,
    CUDNN_STATUS_ARCH_MISMATCH = 6,
    CUDNN_STATUS_MAPPING_ERROR = 7,
    CUDNN_STATUS_EXECUTION_FAILED = 8,
    CUDNN_STATUS_NOT_SUPPORTED = 9,
    CUDNN_STATUS_LICENSE_ERROR = 10,
    CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING = 11,
    CUDNN_STATUS_RUNTIME_IN_PROGRESS = 12,
    CUDNN_STATUS_RUNTIME_FP_OVERFLOW = 13,
    CUDNN_STATUS_VERSION_MISMATCH = 14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnRuntimeTag_t {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnErrQueryMode_t {
    CUDNN_ERRQUERY_RAWCODE = 0,
    CUDNN_ERRQUERY_NONBLOCKING = 1,
    CUDNN_ERRQUERY_BLOCKING = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorDescriptor_t = *mut cudnnTensorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnPoolingStruct {
    _unused: [u8; 0],
}
pub type cudnnPoolingDescriptor_t = *mut cudnnPoolingStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnFilterStruct {
    _unused: [u8; 0],
}
pub type cudnnFilterDescriptor_t = *mut cudnnFilterStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnLRNStruct {
    _unused: [u8; 0],
}
pub type cudnnLRNDescriptor_t = *mut cudnnLRNStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnActivationStruct {
    _unused: [u8; 0],
}
pub type cudnnActivationDescriptor_t = *mut cudnnActivationStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnSpatialTransformerStruct {
    _unused: [u8; 0],
}
pub type cudnnSpatialTransformerDescriptor_t = *mut cudnnSpatialTransformerStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnOpTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnOpTensorDescriptor_t = *mut cudnnOpTensorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnReduceTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnReduceTensorDescriptor_t = *mut cudnnReduceTensorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnCTCLossStruct {
    _unused: [u8; 0],
}
pub type cudnnCTCLossDescriptor_t = *mut cudnnCTCLossStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnTensorTransformStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorTransformDescriptor_t = *mut cudnnTensorTransformStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnDataType_t {
    CUDNN_DATA_FLOAT = 0,
    CUDNN_DATA_DOUBLE = 1,
    CUDNN_DATA_HALF = 2,
    CUDNN_DATA_INT8 = 3,
    CUDNN_DATA_INT32 = 4,
    CUDNN_DATA_INT8x4 = 5,
    CUDNN_DATA_UINT8 = 6,
    CUDNN_DATA_UINT8x4 = 7,
    CUDNN_DATA_INT8x32 = 8,
    CUDNN_DATA_BFLOAT16 = 9,
    CUDNN_DATA_INT64 = 10,
    CUDNN_DATA_BOOLEAN = 11,
    CUDNN_DATA_FP8_E4M3 = 12,
    CUDNN_DATA_FP8_E5M2 = 13,
    CUDNN_DATA_FAST_FLOAT_FOR_FP8 = 14,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnMathType_t {
    CUDNN_DEFAULT_MATH = 0,
    CUDNN_TENSOR_OP_MATH = 1,
    CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION = 2,
    CUDNN_FMA_MATH = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnNanPropagation_t {
    CUDNN_NOT_PROPAGATE_NAN = 0,
    CUDNN_PROPAGATE_NAN = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnDeterminism_t {
    CUDNN_NON_DETERMINISTIC = 0,
    CUDNN_DETERMINISTIC = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnTensorFormat_t {
    CUDNN_TENSOR_NCHW = 0,
    CUDNN_TENSOR_NHWC = 1,
    CUDNN_TENSOR_NCHW_VECT_C = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnFoldingDirection_t {
    CUDNN_TRANSFORM_FOLD = 0,
    CUDNN_TRANSFORM_UNFOLD = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnOpTensorOp_t {
    CUDNN_OP_TENSOR_ADD = 0,
    CUDNN_OP_TENSOR_MUL = 1,
    CUDNN_OP_TENSOR_MIN = 2,
    CUDNN_OP_TENSOR_MAX = 3,
    CUDNN_OP_TENSOR_SQRT = 4,
    CUDNN_OP_TENSOR_NOT = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnReduceTensorOp_t {
    CUDNN_REDUCE_TENSOR_ADD = 0,
    CUDNN_REDUCE_TENSOR_MUL = 1,
    CUDNN_REDUCE_TENSOR_MIN = 2,
    CUDNN_REDUCE_TENSOR_MAX = 3,
    CUDNN_REDUCE_TENSOR_AMAX = 4,
    CUDNN_REDUCE_TENSOR_AVG = 5,
    CUDNN_REDUCE_TENSOR_NORM1 = 6,
    CUDNN_REDUCE_TENSOR_NORM2 = 7,
    CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnReduceTensorIndices_t {
    CUDNN_REDUCE_TENSOR_NO_INDICES = 0,
    CUDNN_REDUCE_TENSOR_FLATTENED_INDICES = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnIndicesType_t {
    CUDNN_32BIT_INDICES = 0,
    CUDNN_64BIT_INDICES = 1,
    CUDNN_16BIT_INDICES = 2,
    CUDNN_8BIT_INDICES = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnSoftmaxAlgorithm_t {
    CUDNN_SOFTMAX_FAST = 0,
    CUDNN_SOFTMAX_ACCURATE = 1,
    CUDNN_SOFTMAX_LOG = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnSoftmaxMode_t {
    CUDNN_SOFTMAX_MODE_INSTANCE = 0,
    CUDNN_SOFTMAX_MODE_CHANNEL = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnPoolingMode_t {
    CUDNN_POOLING_MAX = 0,
    CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING = 1,
    CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING = 2,
    CUDNN_POOLING_MAX_DETERMINISTIC = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnActivationMode_t {
    CUDNN_ACTIVATION_SIGMOID = 0,
    CUDNN_ACTIVATION_RELU = 1,
    CUDNN_ACTIVATION_TANH = 2,
    CUDNN_ACTIVATION_CLIPPED_RELU = 3,
    CUDNN_ACTIVATION_ELU = 4,
    CUDNN_ACTIVATION_IDENTITY = 5,
    CUDNN_ACTIVATION_SWISH = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnLRNMode_t {
    CUDNN_LRN_CROSS_CHANNEL_DIM1 = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnDivNormMode_t {
    CUDNN_DIVNORM_PRECOMPUTED_MEANS = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBatchNormMode_t {
    CUDNN_BATCHNORM_PER_ACTIVATION = 0,
    CUDNN_BATCHNORM_SPATIAL = 1,
    CUDNN_BATCHNORM_SPATIAL_PERSISTENT = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBatchNormOps_t {
    CUDNN_BATCHNORM_OPS_BN = 0,
    CUDNN_BATCHNORM_OPS_BN_ACTIVATION = 1,
    CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnNormMode_t {
    CUDNN_NORM_PER_ACTIVATION = 0,
    CUDNN_NORM_PER_CHANNEL = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnNormAlgo_t {
    CUDNN_NORM_ALGO_STANDARD = 0,
    CUDNN_NORM_ALGO_PERSIST = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnNormOps_t {
    CUDNN_NORM_OPS_NORM = 0,
    CUDNN_NORM_OPS_NORM_ACTIVATION = 1,
    CUDNN_NORM_OPS_NORM_ADD_ACTIVATION = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnSamplerType_t {
    CUDNN_SAMPLER_BILINEAR = 0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnDropoutStruct {
    _unused: [u8; 0],
}
pub type cudnnDropoutDescriptor_t = *mut cudnnDropoutStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnAlgorithmStruct {
    _unused: [u8; 0],
}
pub type cudnnAlgorithmDescriptor_t = *mut cudnnAlgorithmStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnAlgorithmPerformanceStruct {
    _unused: [u8; 0],
}
pub type cudnnAlgorithmPerformance_t = *mut cudnnAlgorithmPerformanceStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnConvolutionFwdAlgo_t {
    CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM = 0,
    CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM = 1,
    CUDNN_CONVOLUTION_FWD_ALGO_GEMM = 2,
    CUDNN_CONVOLUTION_FWD_ALGO_DIRECT = 3,
    CUDNN_CONVOLUTION_FWD_ALGO_FFT = 4,
    CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING = 5,
    CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD = 6,
    CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED = 7,
    CUDNN_CONVOLUTION_FWD_ALGO_COUNT = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnConvolutionBwdFilterAlgo_t {
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0 = 0,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1 = 1,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT = 2,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3 = 3,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD = 4,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED = 5,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING = 6,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnConvolutionBwdDataAlgo_t {
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_0 = 0,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_1 = 1,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT = 2,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING = 3,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD = 4,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED = 5,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRNNAlgo_t {
    CUDNN_RNN_ALGO_STANDARD = 0,
    CUDNN_RNN_ALGO_PERSIST_STATIC = 1,
    CUDNN_RNN_ALGO_PERSIST_DYNAMIC = 2,
    CUDNN_RNN_ALGO_PERSIST_STATIC_SMALL_H = 3,
    CUDNN_RNN_ALGO_COUNT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnCTCLossAlgo_t {
    CUDNN_CTC_LOSS_ALGO_DETERMINISTIC = 0,
    CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudnnAlgorithmUnionStruct {
    pub algo: cudnnAlgorithmUnionStruct_Algorithm,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudnnAlgorithmUnionStruct_Algorithm {
    pub convFwdAlgo: cudnnConvolutionFwdAlgo_t,
    pub convBwdFilterAlgo: cudnnConvolutionBwdFilterAlgo_t,
    pub convBwdDataAlgo: cudnnConvolutionBwdDataAlgo_t,
    pub RNNAlgo: cudnnRNNAlgo_t,
    pub CTCLossAlgo: cudnnCTCLossAlgo_t,
}
#[test]
fn bindgen_test_layout_cudnnAlgorithmUnionStruct_Algorithm() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnAlgorithmUnionStruct_Algorithm> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnAlgorithmUnionStruct_Algorithm>(),
        4usize,
        concat!("Size of: ", stringify!(cudnnAlgorithmUnionStruct_Algorithm))
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnAlgorithmUnionStruct_Algorithm>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudnnAlgorithmUnionStruct_Algorithm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).convFwdAlgo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithmUnionStruct_Algorithm),
            "::",
            stringify!(convFwdAlgo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).convBwdFilterAlgo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithmUnionStruct_Algorithm),
            "::",
            stringify!(convBwdFilterAlgo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).convBwdDataAlgo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithmUnionStruct_Algorithm),
            "::",
            stringify!(convBwdDataAlgo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RNNAlgo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithmUnionStruct_Algorithm),
            "::",
            stringify!(RNNAlgo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTCLossAlgo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithmUnionStruct_Algorithm),
            "::",
            stringify!(CTCLossAlgo)
        )
    );
}
impl Default for cudnnAlgorithmUnionStruct_Algorithm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudnnAlgorithmUnionStruct() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnAlgorithmUnionStruct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnAlgorithmUnionStruct>(),
        4usize,
        concat!("Size of: ", stringify!(cudnnAlgorithmUnionStruct))
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnAlgorithmUnionStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(cudnnAlgorithmUnionStruct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithmUnionStruct),
            "::",
            stringify!(algo)
        )
    );
}
impl Default for cudnnAlgorithmUnionStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudnnAlgorithm_t = cudnnAlgorithmUnionStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnSeverity_t {
    CUDNN_SEV_FATAL = 0,
    CUDNN_SEV_ERROR = 1,
    CUDNN_SEV_WARNING = 2,
    CUDNN_SEV_INFO = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudnnDebugStruct {
    pub cudnn_version: ::core::ffi::c_uint,
    pub cudnnStatus: cudnnStatus_t,
    pub time_sec: ::core::ffi::c_uint,
    pub time_usec: ::core::ffi::c_uint,
    pub time_delta: ::core::ffi::c_uint,
    pub handle: cudnnHandle_t,
    pub stream: cudaStream_t,
    pub pid: ::core::ffi::c_ulonglong,
    pub tid: ::core::ffi::c_ulonglong,
    pub cudaDeviceId: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 15usize],
}
#[test]
fn bindgen_test_layout_cudnnDebugStruct() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnDebugStruct> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnDebugStruct>(),
        120usize,
        concat!("Size of: ", stringify!(cudnnDebugStruct))
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnDebugStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(cudnnDebugStruct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cudnn_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(cudnn_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cudnnStatus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(cudnnStatus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time_sec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(time_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time_delta) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(time_delta)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cudaDeviceId) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(cudaDeviceId)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebugStruct),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudnnDebugStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudnnDebug_t = cudnnDebugStruct;
pub type cudnnCallback_t = ::core::option::Option<
    unsafe extern "C" fn(
        sev: cudnnSeverity_t,
        udata: *mut ::core::ffi::c_void,
        dbg: *const cudnnDebug_t,
        msg: *const ::core::ffi::c_char,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnForwardMode_t {
    CUDNN_FWD_MODE_INFERENCE = 0,
    CUDNN_FWD_MODE_TRAINING = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRNNMode_t {
    CUDNN_RNN_RELU = 0,
    CUDNN_RNN_TANH = 1,
    CUDNN_LSTM = 2,
    CUDNN_GRU = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRNNBiasMode_t {
    CUDNN_RNN_NO_BIAS = 0,
    CUDNN_RNN_SINGLE_INP_BIAS = 1,
    CUDNN_RNN_DOUBLE_BIAS = 2,
    CUDNN_RNN_SINGLE_REC_BIAS = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnDirectionMode_t {
    CUDNN_UNIDIRECTIONAL = 0,
    CUDNN_BIDIRECTIONAL = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRNNInputMode_t {
    CUDNN_LINEAR_INPUT = 0,
    CUDNN_SKIP_INPUT = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRNNClipMode_t {
    CUDNN_RNN_CLIP_NONE = 0,
    CUDNN_RNN_CLIP_MINMAX = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRNNDataLayout_t {
    CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED = 0,
    CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED = 1,
    CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED = 2,
}
pub type cudnnRNNPaddingMode_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnRNNStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDescriptor_t = *mut cudnnRNNStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnPersistentRNNPlan {
    _unused: [u8; 0],
}
pub type cudnnPersistentRNNPlan_t = *mut cudnnPersistentRNNPlan;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnRNNDataStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDataDescriptor_t = *mut cudnnRNNDataStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnSeqDataAxis_t {
    CUDNN_SEQDATA_TIME_DIM = 0,
    CUDNN_SEQDATA_BATCH_DIM = 1,
    CUDNN_SEQDATA_BEAM_DIM = 2,
    CUDNN_SEQDATA_VECT_DIM = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnSeqDataStruct {
    _unused: [u8; 0],
}
pub type cudnnSeqDataDescriptor_t = *mut cudnnSeqDataStruct;
pub type cudnnAttnQueryMap_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnAttnStruct {
    _unused: [u8; 0],
}
pub type cudnnAttnDescriptor_t = *mut cudnnAttnStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnMultiHeadAttnWeightKind_t {
    CUDNN_MH_ATTN_Q_WEIGHTS = 0,
    CUDNN_MH_ATTN_K_WEIGHTS = 1,
    CUDNN_MH_ATTN_V_WEIGHTS = 2,
    CUDNN_MH_ATTN_O_WEIGHTS = 3,
    CUDNN_MH_ATTN_Q_BIASES = 4,
    CUDNN_MH_ATTN_K_BIASES = 5,
    CUDNN_MH_ATTN_V_BIASES = 6,
    CUDNN_MH_ATTN_O_BIASES = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnWgradMode_t {
    CUDNN_WGRAD_MODE_ADD = 0,
    CUDNN_WGRAD_MODE_SET = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnLossNormalizationMode_t {
    CUDNN_LOSS_NORMALIZATION_NONE = 0,
    CUDNN_LOSS_NORMALIZATION_SOFTMAX = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnConvolutionStruct {
    _unused: [u8; 0],
}
pub type cudnnConvolutionDescriptor_t = *mut cudnnConvolutionStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnConvolutionMode_t {
    CUDNN_CONVOLUTION = 0,
    CUDNN_CROSS_CORRELATION = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnReorderType_t {
    CUDNN_DEFAULT_REORDER = 0,
    CUDNN_NO_REORDER = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudnnConvolutionFwdAlgoPerfStruct {
    pub algo: cudnnConvolutionFwdAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::core::ffi::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_cudnnConvolutionFwdAlgoPerfStruct() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnConvolutionFwdAlgoPerfStruct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnConvolutionFwdAlgoPerfStruct>(),
        48usize,
        concat!("Size of: ", stringify!(cudnnConvolutionFwdAlgoPerfStruct))
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnConvolutionFwdAlgoPerfStruct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).determinism) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(determinism)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mathType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(mathType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerfStruct),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudnnConvolutionFwdAlgoPerfStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudnnConvolutionFwdAlgoPerf_t = cudnnConvolutionFwdAlgoPerfStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudnnConvolutionBwdDataAlgoPerfStruct {
    pub algo: cudnnConvolutionBwdDataAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::core::ffi::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_cudnnConvolutionBwdDataAlgoPerfStruct() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnConvolutionBwdDataAlgoPerfStruct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnConvolutionBwdDataAlgoPerfStruct>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnConvolutionBwdDataAlgoPerfStruct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).determinism) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(determinism)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mathType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(mathType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerfStruct),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudnnConvolutionBwdDataAlgoPerfStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudnnConvolutionBwdDataAlgoPerf_t = cudnnConvolutionBwdDataAlgoPerfStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnFusedOpsConstParamStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsConstParamPack_t = *mut cudnnFusedOpsConstParamStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnFusedOpsVariantParamStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsVariantParamPack_t = *mut cudnnFusedOpsVariantParamStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnFusedOpsPlanStruct {
    _unused: [u8; 0],
}
pub type cudnnFusedOpsPlan_t = *mut cudnnFusedOpsPlanStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnFusedOps_t {
    CUDNN_FUSED_SCALE_BIAS_ACTIVATION_CONV_BNSTATS = 0,
    CUDNN_FUSED_SCALE_BIAS_ACTIVATION_WGRAD = 1,
    CUDNN_FUSED_BN_FINALIZE_STATISTICS_TRAINING = 2,
    CUDNN_FUSED_BN_FINALIZE_STATISTICS_INFERENCE = 3,
    CUDNN_FUSED_CONV_SCALE_BIAS_ADD_ACTIVATION = 4,
    CUDNN_FUSED_SCALE_BIAS_ADD_ACTIVATION_GEN_BITMASK = 5,
    CUDNN_FUSED_DACTIVATION_FORK_DBATCHNORM = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnFusedOpsConstParamLabel_t {
    CUDNN_PARAM_XDESC = 0,
    CUDNN_PARAM_XDATA_PLACEHOLDER = 1,
    CUDNN_PARAM_BN_MODE = 2,
    CUDNN_PARAM_BN_EQSCALEBIAS_DESC = 3,
    CUDNN_PARAM_BN_EQSCALE_PLACEHOLDER = 4,
    CUDNN_PARAM_BN_EQBIAS_PLACEHOLDER = 5,
    CUDNN_PARAM_ACTIVATION_DESC = 6,
    CUDNN_PARAM_CONV_DESC = 7,
    CUDNN_PARAM_WDESC = 8,
    CUDNN_PARAM_WDATA_PLACEHOLDER = 9,
    CUDNN_PARAM_DWDESC = 10,
    CUDNN_PARAM_DWDATA_PLACEHOLDER = 11,
    CUDNN_PARAM_YDESC = 12,
    CUDNN_PARAM_YDATA_PLACEHOLDER = 13,
    CUDNN_PARAM_DYDESC = 14,
    CUDNN_PARAM_DYDATA_PLACEHOLDER = 15,
    CUDNN_PARAM_YSTATS_DESC = 16,
    CUDNN_PARAM_YSUM_PLACEHOLDER = 17,
    CUDNN_PARAM_YSQSUM_PLACEHOLDER = 18,
    CUDNN_PARAM_BN_SCALEBIAS_MEANVAR_DESC = 19,
    CUDNN_PARAM_BN_SCALE_PLACEHOLDER = 20,
    CUDNN_PARAM_BN_BIAS_PLACEHOLDER = 21,
    CUDNN_PARAM_BN_SAVED_MEAN_PLACEHOLDER = 22,
    CUDNN_PARAM_BN_SAVED_INVSTD_PLACEHOLDER = 23,
    CUDNN_PARAM_BN_RUNNING_MEAN_PLACEHOLDER = 24,
    CUDNN_PARAM_BN_RUNNING_VAR_PLACEHOLDER = 25,
    CUDNN_PARAM_ZDESC = 26,
    CUDNN_PARAM_ZDATA_PLACEHOLDER = 27,
    CUDNN_PARAM_BN_Z_EQSCALEBIAS_DESC = 28,
    CUDNN_PARAM_BN_Z_EQSCALE_PLACEHOLDER = 29,
    CUDNN_PARAM_BN_Z_EQBIAS_PLACEHOLDER = 30,
    CUDNN_PARAM_ACTIVATION_BITMASK_DESC = 31,
    CUDNN_PARAM_ACTIVATION_BITMASK_PLACEHOLDER = 32,
    CUDNN_PARAM_DXDESC = 33,
    CUDNN_PARAM_DXDATA_PLACEHOLDER = 34,
    CUDNN_PARAM_DZDESC = 35,
    CUDNN_PARAM_DZDATA_PLACEHOLDER = 36,
    CUDNN_PARAM_BN_DSCALE_PLACEHOLDER = 37,
    CUDNN_PARAM_BN_DBIAS_PLACEHOLDER = 38,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnFusedOpsPointerPlaceHolder_t {
    CUDNN_PTR_NULL = 0,
    CUDNN_PTR_ELEM_ALIGNED = 1,
    CUDNN_PTR_16B_ALIGNED = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnFusedOpsVariantParamLabel_t {
    CUDNN_PTR_XDATA = 0,
    CUDNN_PTR_BN_EQSCALE = 1,
    CUDNN_PTR_BN_EQBIAS = 2,
    CUDNN_PTR_WDATA = 3,
    CUDNN_PTR_DWDATA = 4,
    CUDNN_PTR_YDATA = 5,
    CUDNN_PTR_DYDATA = 6,
    CUDNN_PTR_YSUM = 7,
    CUDNN_PTR_YSQSUM = 8,
    CUDNN_PTR_WORKSPACE = 9,
    CUDNN_PTR_BN_SCALE = 10,
    CUDNN_PTR_BN_BIAS = 11,
    CUDNN_PTR_BN_SAVED_MEAN = 12,
    CUDNN_PTR_BN_SAVED_INVSTD = 13,
    CUDNN_PTR_BN_RUNNING_MEAN = 14,
    CUDNN_PTR_BN_RUNNING_VAR = 15,
    CUDNN_PTR_ZDATA = 16,
    CUDNN_PTR_BN_Z_EQSCALE = 17,
    CUDNN_PTR_BN_Z_EQBIAS = 18,
    CUDNN_PTR_ACTIVATION_BITMASK = 19,
    CUDNN_PTR_DXDATA = 20,
    CUDNN_PTR_DZDATA = 21,
    CUDNN_PTR_BN_DSCALE = 22,
    CUDNN_PTR_BN_DBIAS = 23,
    CUDNN_SCALAR_SIZE_T_WORKSPACE_SIZE_IN_BYTES = 100,
    CUDNN_SCALAR_INT64_T_BN_ACCUMULATION_COUNT = 101,
    CUDNN_SCALAR_DOUBLE_BN_EXP_AVG_FACTOR = 102,
    CUDNN_SCALAR_DOUBLE_BN_EPSILON = 103,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudnnConvolutionBwdFilterAlgoPerfStruct {
    pub algo: cudnnConvolutionBwdFilterAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::core::ffi::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_cudnnConvolutionBwdFilterAlgoPerfStruct() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnConvolutionBwdFilterAlgoPerfStruct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnConvolutionBwdFilterAlgoPerfStruct>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnConvolutionBwdFilterAlgoPerfStruct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).determinism) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(determinism)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mathType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(mathType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerfStruct),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudnnConvolutionBwdFilterAlgoPerfStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudnnConvolutionBwdFilterAlgoPerf_t = cudnnConvolutionBwdFilterAlgoPerfStruct;
pub type cudnnBackendDescriptor_t = *mut ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudnnFractionStruct {
    pub numerator: i64,
    pub denominator: i64,
}
#[test]
fn bindgen_test_layout_cudnnFractionStruct() {
    const UNINIT: ::core::mem::MaybeUninit<cudnnFractionStruct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudnnFractionStruct>(),
        16usize,
        concat!("Size of: ", stringify!(cudnnFractionStruct))
    );
    assert_eq!(
        ::core::mem::align_of::<cudnnFractionStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(cudnnFractionStruct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numerator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnFractionStruct),
            "::",
            stringify!(numerator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).denominator) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnFractionStruct),
            "::",
            stringify!(denominator)
        )
    );
}
pub type cudnnFraction_t = cudnnFractionStruct;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnPointwiseMode_t {
    CUDNN_POINTWISE_ADD = 0,
    CUDNN_POINTWISE_ADD_SQUARE = 5,
    CUDNN_POINTWISE_DIV = 6,
    CUDNN_POINTWISE_MAX = 3,
    CUDNN_POINTWISE_MIN = 2,
    CUDNN_POINTWISE_MOD = 7,
    CUDNN_POINTWISE_MUL = 1,
    CUDNN_POINTWISE_POW = 8,
    CUDNN_POINTWISE_SUB = 9,
    CUDNN_POINTWISE_ABS = 10,
    CUDNN_POINTWISE_CEIL = 11,
    CUDNN_POINTWISE_COS = 12,
    CUDNN_POINTWISE_EXP = 13,
    CUDNN_POINTWISE_FLOOR = 14,
    CUDNN_POINTWISE_LOG = 15,
    CUDNN_POINTWISE_NEG = 16,
    CUDNN_POINTWISE_RSQRT = 17,
    CUDNN_POINTWISE_SIN = 18,
    CUDNN_POINTWISE_SQRT = 4,
    CUDNN_POINTWISE_TAN = 19,
    CUDNN_POINTWISE_ERF = 20,
    CUDNN_POINTWISE_IDENTITY = 21,
    CUDNN_POINTWISE_RECIPROCAL = 22,
    CUDNN_POINTWISE_RELU_FWD = 100,
    CUDNN_POINTWISE_TANH_FWD = 101,
    CUDNN_POINTWISE_SIGMOID_FWD = 102,
    CUDNN_POINTWISE_ELU_FWD = 103,
    CUDNN_POINTWISE_GELU_FWD = 104,
    CUDNN_POINTWISE_SOFTPLUS_FWD = 105,
    CUDNN_POINTWISE_SWISH_FWD = 106,
    CUDNN_POINTWISE_GELU_APPROX_TANH_FWD = 107,
    CUDNN_POINTWISE_RELU_BWD = 200,
    CUDNN_POINTWISE_TANH_BWD = 201,
    CUDNN_POINTWISE_SIGMOID_BWD = 202,
    CUDNN_POINTWISE_ELU_BWD = 203,
    CUDNN_POINTWISE_GELU_BWD = 204,
    CUDNN_POINTWISE_SOFTPLUS_BWD = 205,
    CUDNN_POINTWISE_SWISH_BWD = 206,
    CUDNN_POINTWISE_GELU_APPROX_TANH_BWD = 207,
    CUDNN_POINTWISE_CMP_EQ = 300,
    CUDNN_POINTWISE_CMP_NEQ = 301,
    CUDNN_POINTWISE_CMP_GT = 302,
    CUDNN_POINTWISE_CMP_GE = 303,
    CUDNN_POINTWISE_CMP_LT = 304,
    CUDNN_POINTWISE_CMP_LE = 305,
    CUDNN_POINTWISE_LOGICAL_AND = 400,
    CUDNN_POINTWISE_LOGICAL_OR = 401,
    CUDNN_POINTWISE_LOGICAL_NOT = 402,
    CUDNN_POINTWISE_GEN_INDEX = 501,
    CUDNN_POINTWISE_BINARY_SELECT = 601,
}
impl cudnnResampleMode_t {
    pub const CUDNN_RESAMPLE_AVGPOOL_INCLUDE_PADDING: cudnnResampleMode_t =
        cudnnResampleMode_t::CUDNN_RESAMPLE_AVGPOOL;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnResampleMode_t {
    CUDNN_RESAMPLE_NEAREST = 0,
    CUDNN_RESAMPLE_BILINEAR = 1,
    CUDNN_RESAMPLE_AVGPOOL = 2,
    CUDNN_RESAMPLE_AVGPOOL_EXCLUDE_PADDING = 4,
    CUDNN_RESAMPLE_MAXPOOL = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnSignalMode_t {
    CUDNN_SIGNAL_SET = 0,
    CUDNN_SIGNAL_WAIT = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnGenStatsMode_t {
    CUDNN_GENSTATS_SUM_SQSUM = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBnFinalizeStatsMode_t {
    CUDNN_BN_FINALIZE_STATISTICS_TRAINING = 0,
    CUDNN_BN_FINALIZE_STATISTICS_INFERENCE = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnRngDistribution_t {
    CUDNN_RNG_DISTRIBUTION_BERNOULLI = 0,
    CUDNN_RNG_DISTRIBUTION_UNIFORM = 1,
    CUDNN_RNG_DISTRIBUTION_NORMAL = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendAttributeName_t {
    CUDNN_ATTR_POINTWISE_MODE = 0,
    CUDNN_ATTR_POINTWISE_MATH_PREC = 1,
    CUDNN_ATTR_POINTWISE_NAN_PROPAGATION = 2,
    CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP = 3,
    CUDNN_ATTR_POINTWISE_RELU_UPPER_CLIP = 4,
    CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP_SLOPE = 5,
    CUDNN_ATTR_POINTWISE_ELU_ALPHA = 6,
    CUDNN_ATTR_POINTWISE_SOFTPLUS_BETA = 7,
    CUDNN_ATTR_POINTWISE_SWISH_BETA = 8,
    CUDNN_ATTR_POINTWISE_AXIS = 9,
    CUDNN_ATTR_CONVOLUTION_COMP_TYPE = 100,
    CUDNN_ATTR_CONVOLUTION_CONV_MODE = 101,
    CUDNN_ATTR_CONVOLUTION_DILATIONS = 102,
    CUDNN_ATTR_CONVOLUTION_FILTER_STRIDES = 103,
    CUDNN_ATTR_CONVOLUTION_POST_PADDINGS = 104,
    CUDNN_ATTR_CONVOLUTION_PRE_PADDINGS = 105,
    CUDNN_ATTR_CONVOLUTION_SPATIAL_DIMS = 106,
    CUDNN_ATTR_ENGINEHEUR_MODE = 200,
    CUDNN_ATTR_ENGINEHEUR_OPERATION_GRAPH = 201,
    CUDNN_ATTR_ENGINEHEUR_RESULTS = 202,
    CUDNN_ATTR_ENGINEHEUR_SM_COUNT_TARGET = 203,
    CUDNN_ATTR_ENGINECFG_ENGINE = 300,
    CUDNN_ATTR_ENGINECFG_INTERMEDIATE_INFO = 301,
    CUDNN_ATTR_ENGINECFG_KNOB_CHOICES = 302,
    CUDNN_ATTR_EXECUTION_PLAN_HANDLE = 400,
    CUDNN_ATTR_EXECUTION_PLAN_ENGINE_CONFIG = 401,
    CUDNN_ATTR_EXECUTION_PLAN_WORKSPACE_SIZE = 402,
    CUDNN_ATTR_EXECUTION_PLAN_COMPUTED_INTERMEDIATE_UIDS = 403,
    CUDNN_ATTR_EXECUTION_PLAN_RUN_ONLY_INTERMEDIATE_UIDS = 404,
    CUDNN_ATTR_EXECUTION_PLAN_JSON_REPRESENTATION = 405,
    CUDNN_ATTR_INTERMEDIATE_INFO_UNIQUE_ID = 500,
    CUDNN_ATTR_INTERMEDIATE_INFO_SIZE = 501,
    CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_DATA_UIDS = 502,
    CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_ATTRIBUTES = 503,
    CUDNN_ATTR_KNOB_CHOICE_KNOB_TYPE = 600,
    CUDNN_ATTR_KNOB_CHOICE_KNOB_VALUE = 601,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_ALPHA = 700,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_BETA = 701,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_CONV_DESC = 702,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_W = 703,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_X = 704,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_Y = 705,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_ALPHA = 706,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_BETA = 707,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_CONV_DESC = 708,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_W = 709,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DX = 710,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DY = 711,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_ALPHA = 712,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_BETA = 713,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_CONV_DESC = 714,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DW = 715,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_X = 716,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DY = 717,
    CUDNN_ATTR_OPERATION_POINTWISE_PW_DESCRIPTOR = 750,
    CUDNN_ATTR_OPERATION_POINTWISE_XDESC = 751,
    CUDNN_ATTR_OPERATION_POINTWISE_BDESC = 752,
    CUDNN_ATTR_OPERATION_POINTWISE_YDESC = 753,
    CUDNN_ATTR_OPERATION_POINTWISE_ALPHA1 = 754,
    CUDNN_ATTR_OPERATION_POINTWISE_ALPHA2 = 755,
    CUDNN_ATTR_OPERATION_POINTWISE_DXDESC = 756,
    CUDNN_ATTR_OPERATION_POINTWISE_DYDESC = 757,
    CUDNN_ATTR_OPERATION_POINTWISE_TDESC = 758,
    CUDNN_ATTR_OPERATION_GENSTATS_MODE = 770,
    CUDNN_ATTR_OPERATION_GENSTATS_MATH_PREC = 771,
    CUDNN_ATTR_OPERATION_GENSTATS_XDESC = 772,
    CUDNN_ATTR_OPERATION_GENSTATS_SUMDESC = 773,
    CUDNN_ATTR_OPERATION_GENSTATS_SQSUMDESC = 774,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_STATS_MODE = 780,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_MATH_PREC = 781,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SUM_DESC = 782,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SQ_SUM_DESC = 783,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_SCALE_DESC = 784,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_BIAS_DESC = 785,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_MEAN_DESC = 786,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_VAR_DESC = 787,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_MEAN_DESC = 788,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_VAR_DESC = 789,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_MEAN_DESC = 790,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_INV_STD_DESC = 791,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_SCALE_DESC = 792,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_BIAS_DESC = 793,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_ACCUM_COUNT_DESC = 794,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EPSILON_DESC = 795,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EXP_AVERATE_FACTOR_DESC = 796,
    CUDNN_ATTR_OPERATIONGRAPH_HANDLE = 800,
    CUDNN_ATTR_OPERATIONGRAPH_OPS = 801,
    CUDNN_ATTR_OPERATIONGRAPH_ENGINE_GLOBAL_COUNT = 802,
    CUDNN_ATTR_TENSOR_BYTE_ALIGNMENT = 900,
    CUDNN_ATTR_TENSOR_DATA_TYPE = 901,
    CUDNN_ATTR_TENSOR_DIMENSIONS = 902,
    CUDNN_ATTR_TENSOR_STRIDES = 903,
    CUDNN_ATTR_TENSOR_VECTOR_COUNT = 904,
    CUDNN_ATTR_TENSOR_VECTORIZED_DIMENSION = 905,
    CUDNN_ATTR_TENSOR_UNIQUE_ID = 906,
    CUDNN_ATTR_TENSOR_IS_VIRTUAL = 907,
    CUDNN_ATTR_TENSOR_IS_BY_VALUE = 908,
    CUDNN_ATTR_TENSOR_REORDERING_MODE = 909,
    CUDNN_ATTR_TENSOR_RAGGED_OFFSET_DESC = 913,
    CUDNN_ATTR_VARIANT_PACK_UNIQUE_IDS = 1000,
    CUDNN_ATTR_VARIANT_PACK_DATA_POINTERS = 1001,
    CUDNN_ATTR_VARIANT_PACK_INTERMEDIATES = 1002,
    CUDNN_ATTR_VARIANT_PACK_WORKSPACE = 1003,
    CUDNN_ATTR_LAYOUT_INFO_TENSOR_UID = 1100,
    CUDNN_ATTR_LAYOUT_INFO_TYPES = 1101,
    CUDNN_ATTR_KNOB_INFO_TYPE = 1200,
    CUDNN_ATTR_KNOB_INFO_MAXIMUM_VALUE = 1201,
    CUDNN_ATTR_KNOB_INFO_MINIMUM_VALUE = 1202,
    CUDNN_ATTR_KNOB_INFO_STRIDE = 1203,
    CUDNN_ATTR_ENGINE_OPERATION_GRAPH = 1300,
    CUDNN_ATTR_ENGINE_GLOBAL_INDEX = 1301,
    CUDNN_ATTR_ENGINE_KNOB_INFO = 1302,
    CUDNN_ATTR_ENGINE_NUMERICAL_NOTE = 1303,
    CUDNN_ATTR_ENGINE_LAYOUT_INFO = 1304,
    CUDNN_ATTR_ENGINE_BEHAVIOR_NOTE = 1305,
    CUDNN_ATTR_ENGINE_SM_COUNT_TARGET = 1306,
    CUDNN_ATTR_MATMUL_COMP_TYPE = 1500,
    CUDNN_ATTR_MATMUL_PADDING_VALUE = 1503,
    CUDNN_ATTR_OPERATION_MATMUL_ADESC = 1520,
    CUDNN_ATTR_OPERATION_MATMUL_BDESC = 1521,
    CUDNN_ATTR_OPERATION_MATMUL_CDESC = 1522,
    CUDNN_ATTR_OPERATION_MATMUL_DESC = 1523,
    CUDNN_ATTR_OPERATION_MATMUL_IRREGULARLY_STRIDED_BATCH_COUNT = 1524,
    CUDNN_ATTR_OPERATION_MATMUL_GEMM_M_OVERRIDE_DESC = 1525,
    CUDNN_ATTR_OPERATION_MATMUL_GEMM_N_OVERRIDE_DESC = 1526,
    CUDNN_ATTR_OPERATION_MATMUL_GEMM_K_OVERRIDE_DESC = 1527,
    CUDNN_ATTR_REDUCTION_OPERATOR = 1600,
    CUDNN_ATTR_REDUCTION_COMP_TYPE = 1601,
    CUDNN_ATTR_OPERATION_REDUCTION_XDESC = 1610,
    CUDNN_ATTR_OPERATION_REDUCTION_YDESC = 1611,
    CUDNN_ATTR_OPERATION_REDUCTION_DESC = 1612,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MATH_PREC = 1620,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MEAN_DESC = 1621,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_INVSTD_DESC = 1622,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_BN_SCALE_DESC = 1623,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_X_DESC = 1624,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DY_DESC = 1625,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_SCALE_DESC = 1626,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_BIAS_DESC = 1627,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_DY_SCALE_DESC = 1628,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_X_SCALE_DESC = 1629,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_BIAS = 1630,
    CUDNN_ATTR_RESAMPLE_MODE = 1700,
    CUDNN_ATTR_RESAMPLE_COMP_TYPE = 1701,
    CUDNN_ATTR_RESAMPLE_SPATIAL_DIMS = 1702,
    CUDNN_ATTR_RESAMPLE_POST_PADDINGS = 1703,
    CUDNN_ATTR_RESAMPLE_PRE_PADDINGS = 1704,
    CUDNN_ATTR_RESAMPLE_STRIDES = 1705,
    CUDNN_ATTR_RESAMPLE_WINDOW_DIMS = 1706,
    CUDNN_ATTR_RESAMPLE_NAN_PROPAGATION = 1707,
    CUDNN_ATTR_RESAMPLE_PADDING_MODE = 1708,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_XDESC = 1710,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_YDESC = 1711,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_IDXDESC = 1712,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_ALPHA = 1713,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_BETA = 1714,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_DESC = 1716,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DXDESC = 1720,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DYDESC = 1721,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_IDXDESC = 1722,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_ALPHA = 1723,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_BETA = 1724,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DESC = 1725,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_XDESC = 1726,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_YDESC = 1727,
    CUDNN_ATTR_OPERATION_CONCAT_AXIS = 1800,
    CUDNN_ATTR_OPERATION_CONCAT_INPUT_DESCS = 1801,
    CUDNN_ATTR_OPERATION_CONCAT_INPLACE_INDEX = 1802,
    CUDNN_ATTR_OPERATION_CONCAT_OUTPUT_DESC = 1803,
    CUDNN_ATTR_OPERATION_SIGNAL_MODE = 1900,
    CUDNN_ATTR_OPERATION_SIGNAL_FLAGDESC = 1901,
    CUDNN_ATTR_OPERATION_SIGNAL_VALUE = 1902,
    CUDNN_ATTR_OPERATION_SIGNAL_XDESC = 1903,
    CUDNN_ATTR_OPERATION_SIGNAL_YDESC = 1904,
    CUDNN_ATTR_OPERATION_NORM_FWD_MODE = 2000,
    CUDNN_ATTR_OPERATION_NORM_FWD_PHASE = 2001,
    CUDNN_ATTR_OPERATION_NORM_FWD_XDESC = 2002,
    CUDNN_ATTR_OPERATION_NORM_FWD_MEAN_DESC = 2003,
    CUDNN_ATTR_OPERATION_NORM_FWD_INV_VARIANCE_DESC = 2004,
    CUDNN_ATTR_OPERATION_NORM_FWD_SCALE_DESC = 2005,
    CUDNN_ATTR_OPERATION_NORM_FWD_BIAS_DESC = 2006,
    CUDNN_ATTR_OPERATION_NORM_FWD_EPSILON_DESC = 2007,
    CUDNN_ATTR_OPERATION_NORM_FWD_EXP_AVG_FACTOR_DESC = 2008,
    CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_MEAN_DESC = 2009,
    CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_VAR_DESC = 2010,
    CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_MEAN_DESC = 2011,
    CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_VAR_DESC = 2012,
    CUDNN_ATTR_OPERATION_NORM_FWD_YDESC = 2013,
    CUDNN_ATTR_OPERATION_NORM_FWD_PEER_STAT_DESCS = 2014,
    CUDNN_ATTR_OPERATION_NORM_BWD_MODE = 2100,
    CUDNN_ATTR_OPERATION_NORM_BWD_XDESC = 2101,
    CUDNN_ATTR_OPERATION_NORM_BWD_MEAN_DESC = 2102,
    CUDNN_ATTR_OPERATION_NORM_BWD_INV_VARIANCE_DESC = 2103,
    CUDNN_ATTR_OPERATION_NORM_BWD_DYDESC = 2104,
    CUDNN_ATTR_OPERATION_NORM_BWD_SCALE_DESC = 2105,
    CUDNN_ATTR_OPERATION_NORM_BWD_EPSILON_DESC = 2106,
    CUDNN_ATTR_OPERATION_NORM_BWD_DSCALE_DESC = 2107,
    CUDNN_ATTR_OPERATION_NORM_BWD_DBIAS_DESC = 2108,
    CUDNN_ATTR_OPERATION_NORM_BWD_DXDESC = 2109,
    CUDNN_ATTR_OPERATION_NORM_BWD_PEER_STAT_DESCS = 2110,
    CUDNN_ATTR_OPERATION_RESHAPE_XDESC = 2200,
    CUDNN_ATTR_OPERATION_RESHAPE_YDESC = 2201,
    CUDNN_ATTR_RNG_DISTRIBUTION = 2300,
    CUDNN_ATTR_RNG_NORMAL_DIST_MEAN = 2301,
    CUDNN_ATTR_RNG_NORMAL_DIST_STANDARD_DEVIATION = 2302,
    CUDNN_ATTR_RNG_UNIFORM_DIST_MAXIMUM = 2303,
    CUDNN_ATTR_RNG_UNIFORM_DIST_MINIMUM = 2304,
    CUDNN_ATTR_RNG_BERNOULLI_DIST_PROBABILITY = 2305,
    CUDNN_ATTR_OPERATION_RNG_YDESC = 2310,
    CUDNN_ATTR_OPERATION_RNG_SEED = 2311,
    CUDNN_ATTR_OPERATION_RNG_DESC = 2312,
    CUDNN_ATTR_OPERATION_RNG_OFFSET_DESC = 2313,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendAttributeType_t {
    CUDNN_TYPE_HANDLE = 0,
    CUDNN_TYPE_DATA_TYPE = 1,
    CUDNN_TYPE_BOOLEAN = 2,
    CUDNN_TYPE_INT64 = 3,
    CUDNN_TYPE_FLOAT = 4,
    CUDNN_TYPE_DOUBLE = 5,
    CUDNN_TYPE_VOID_PTR = 6,
    CUDNN_TYPE_CONVOLUTION_MODE = 7,
    CUDNN_TYPE_HEUR_MODE = 8,
    CUDNN_TYPE_KNOB_TYPE = 9,
    CUDNN_TYPE_NAN_PROPOGATION = 10,
    CUDNN_TYPE_NUMERICAL_NOTE = 11,
    CUDNN_TYPE_LAYOUT_TYPE = 12,
    CUDNN_TYPE_ATTRIB_NAME = 13,
    CUDNN_TYPE_POINTWISE_MODE = 14,
    CUDNN_TYPE_BACKEND_DESCRIPTOR = 15,
    CUDNN_TYPE_GENSTATS_MODE = 16,
    CUDNN_TYPE_BN_FINALIZE_STATS_MODE = 17,
    CUDNN_TYPE_REDUCTION_OPERATOR_TYPE = 18,
    CUDNN_TYPE_BEHAVIOR_NOTE = 19,
    CUDNN_TYPE_TENSOR_REORDERING_MODE = 20,
    CUDNN_TYPE_RESAMPLE_MODE = 21,
    CUDNN_TYPE_PADDING_MODE = 22,
    CUDNN_TYPE_INT32 = 23,
    CUDNN_TYPE_CHAR = 24,
    CUDNN_TYPE_SIGNAL_MODE = 25,
    CUDNN_TYPE_FRACTION = 26,
    CUDNN_TYPE_NORM_MODE = 27,
    CUDNN_TYPE_NORM_FWD_PHASE = 28,
    CUDNN_TYPE_RNG_DISTRIBUTION = 29,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendDescriptorType_t {
    CUDNN_BACKEND_POINTWISE_DESCRIPTOR = 0,
    CUDNN_BACKEND_CONVOLUTION_DESCRIPTOR = 1,
    CUDNN_BACKEND_ENGINE_DESCRIPTOR = 2,
    CUDNN_BACKEND_ENGINECFG_DESCRIPTOR = 3,
    CUDNN_BACKEND_ENGINEHEUR_DESCRIPTOR = 4,
    CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR = 5,
    CUDNN_BACKEND_INTERMEDIATE_INFO_DESCRIPTOR = 6,
    CUDNN_BACKEND_KNOB_CHOICE_DESCRIPTOR = 7,
    CUDNN_BACKEND_KNOB_INFO_DESCRIPTOR = 8,
    CUDNN_BACKEND_LAYOUT_INFO_DESCRIPTOR = 9,
    CUDNN_BACKEND_OPERATION_CONVOLUTION_FORWARD_DESCRIPTOR = 10,
    CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_FILTER_DESCRIPTOR = 11,
    CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_DATA_DESCRIPTOR = 12,
    CUDNN_BACKEND_OPERATION_POINTWISE_DESCRIPTOR = 13,
    CUDNN_BACKEND_OPERATION_GEN_STATS_DESCRIPTOR = 14,
    CUDNN_BACKEND_OPERATIONGRAPH_DESCRIPTOR = 15,
    CUDNN_BACKEND_VARIANT_PACK_DESCRIPTOR = 16,
    CUDNN_BACKEND_TENSOR_DESCRIPTOR = 17,
    CUDNN_BACKEND_MATMUL_DESCRIPTOR = 18,
    CUDNN_BACKEND_OPERATION_MATMUL_DESCRIPTOR = 19,
    CUDNN_BACKEND_OPERATION_BN_FINALIZE_STATISTICS_DESCRIPTOR = 20,
    CUDNN_BACKEND_REDUCTION_DESCRIPTOR = 21,
    CUDNN_BACKEND_OPERATION_REDUCTION_DESCRIPTOR = 22,
    CUDNN_BACKEND_OPERATION_BN_BWD_WEIGHTS_DESCRIPTOR = 23,
    CUDNN_BACKEND_RESAMPLE_DESCRIPTOR = 24,
    CUDNN_BACKEND_OPERATION_RESAMPLE_FWD_DESCRIPTOR = 25,
    CUDNN_BACKEND_OPERATION_RESAMPLE_BWD_DESCRIPTOR = 26,
    CUDNN_BACKEND_OPERATION_CONCAT_DESCRIPTOR = 27,
    CUDNN_BACKEND_OPERATION_SIGNAL_DESCRIPTOR = 28,
    CUDNN_BACKEND_OPERATION_NORM_FORWARD_DESCRIPTOR = 29,
    CUDNN_BACKEND_OPERATION_NORM_BACKWARD_DESCRIPTOR = 30,
    CUDNN_BACKEND_OPERATION_RESHAPE_DESCRIPTOR = 31,
    CUDNN_BACKEND_RNG_DESCRIPTOR = 32,
    CUDNN_BACKEND_OPERATION_RNG_DESCRIPTOR = 33,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendNumericalNote_t {
    CUDNN_NUMERICAL_NOTE_TENSOR_CORE = 0,
    CUDNN_NUMERICAL_NOTE_DOWN_CONVERT_INPUTS = 1,
    CUDNN_NUMERICAL_NOTE_REDUCED_PRECISION_REDUCTION = 2,
    CUDNN_NUMERICAL_NOTE_FFT = 3,
    CUDNN_NUMERICAL_NOTE_NONDETERMINISTIC = 4,
    CUDNN_NUMERICAL_NOTE_WINOGRAD = 5,
    CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_4x4 = 6,
    CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_6x6 = 7,
    CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_13x13 = 8,
    CUDNN_NUMERICAL_NOTE_TYPE_COUNT = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendBehaviorNote_t {
    CUDNN_BEHAVIOR_NOTE_RUNTIME_COMPILATION = 0,
    CUDNN_BEHAVIOR_NOTE_REQUIRES_FILTER_INT8x32_REORDER = 1,
    CUDNN_BEHAVIOR_NOTE_REQUIRES_BIAS_INT8x32_REORDER = 2,
    CUDNN_BEHAVIOR_NOTE_TYPE_COUNT = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendKnobType_t {
    CUDNN_KNOB_TYPE_SPLIT_K = 0,
    CUDNN_KNOB_TYPE_SWIZZLE = 1,
    CUDNN_KNOB_TYPE_TILE_SIZE = 2,
    CUDNN_KNOB_TYPE_USE_TEX = 3,
    CUDNN_KNOB_TYPE_EDGE = 4,
    CUDNN_KNOB_TYPE_KBLOCK = 5,
    CUDNN_KNOB_TYPE_LDGA = 6,
    CUDNN_KNOB_TYPE_LDGB = 7,
    CUDNN_KNOB_TYPE_CHUNK_K = 8,
    CUDNN_KNOB_TYPE_SPLIT_H = 9,
    CUDNN_KNOB_TYPE_WINO_TILE = 10,
    CUDNN_KNOB_TYPE_MULTIPLY = 11,
    CUDNN_KNOB_TYPE_SPLIT_K_BUF = 12,
    CUDNN_KNOB_TYPE_TILEK = 13,
    CUDNN_KNOB_TYPE_STAGES = 14,
    CUDNN_KNOB_TYPE_REDUCTION_MODE = 15,
    CUDNN_KNOB_TYPE_CTA_SPLIT_K_MODE = 16,
    CUDNN_KNOB_TYPE_SPLIT_K_SLC = 17,
    CUDNN_KNOB_TYPE_IDX_MODE = 18,
    CUDNN_KNOB_TYPE_SLICED = 19,
    CUDNN_KNOB_TYPE_SPLIT_RS = 20,
    CUDNN_KNOB_TYPE_SINGLEBUFFER = 21,
    CUDNN_KNOB_TYPE_LDGC = 22,
    CUDNN_KNOB_TYPE_SPECFILT = 23,
    CUDNN_KNOB_TYPE_KERNEL_CFG = 24,
    CUDNN_KNOB_TYPE_WORKSPACE = 25,
    CUDNN_KNOB_TYPE_TILE_CGA = 26,
    CUDNN_KNOB_TYPE_TILE_CGA_M = 27,
    CUDNN_KNOB_TYPE_TILE_CGA_N = 28,
    CUDNN_KNOB_TYPE_BLOCK_SIZE = 29,
    CUDNN_KNOB_TYPE_OCCUPANCY = 30,
    CUDNN_KNOB_TYPE_ARRAY_SIZE_PER_THREAD = 31,
    CUDNN_KNOB_TYPE_NUM_C_PER_BLOCK = 32,
    CUDNN_KNOB_TYPE_SPLIT_COLS = 33,
    CUDNN_KNOB_TYPE_TILE_ROWS = 34,
    CUDNN_KNOB_TYPE_TILE_COLS = 35,
    CUDNN_KNOB_TYPE_LOAD_SIZE = 36,
    CUDNN_KNOB_TYPE_COUNTS = 37,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendLayoutType_t {
    CUDNN_LAYOUT_TYPE_PREFERRED_NCHW = 0,
    CUDNN_LAYOUT_TYPE_PREFERRED_NHWC = 1,
    CUDNN_LAYOUT_TYPE_PREFERRED_PAD4CK = 2,
    CUDNN_LAYOUT_TYPE_PREFERRED_PAD8CK = 3,
    CUDNN_LAYOUT_TYPE_COUNT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendHeurMode_t {
    CUDNN_HEUR_MODE_INSTANT = 0,
    CUDNN_HEUR_MODE_B = 1,
    CUDNN_HEUR_MODE_FALLBACK = 2,
    CUDNN_HEUR_MODE_A = 3,
    CUDNN_HEUR_MODES_COUNT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendTensorReordering_t {
    CUDNN_TENSOR_REORDERING_NONE = 0,
    CUDNN_TENSOR_REORDERING_INT8x32 = 1,
    CUDNN_TENSOR_REORDERING_F16x16 = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnPaddingMode_t {
    CUDNN_ZERO_PAD = 0,
    CUDNN_NEG_INF_PAD = 1,
    CUDNN_EDGE_VAL_PAD = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendNormMode_t {
    CUDNN_LAYER_NORM = 0,
    CUDNN_INSTANCE_NORM = 1,
    CUDNN_BATCH_NORM = 2,
    CUDNN_GROUP_NORM = 3,
    CUDNN_RMS_NORM = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudnnBackendNormFwdPhase_t {
    CUDNN_NORM_FWD_INFERENCE = 0,
    CUDNN_NORM_FWD_TRAINING = 1,
}
extern crate libloading;
pub struct Lib {
    __library: ::libloading::Library,
    pub cudnnGetVersion: Result<unsafe extern "C" fn() -> usize, ::libloading::Error>,
    pub cudnnGetMaxDeviceVersion: Result<unsafe extern "C" fn() -> usize, ::libloading::Error>,
    pub cudnnGetCudartVersion: Result<unsafe extern "C" fn() -> usize, ::libloading::Error>,
    pub cudnnGetErrorString: Result<
        unsafe extern "C" fn(status: cudnnStatus_t) -> *const ::core::ffi::c_char,
        ::libloading::Error,
    >,
    pub cudnnQueryRuntimeError: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rstatus: *mut cudnnStatus_t,
            mode: cudnnErrQueryMode_t,
            tag: *mut cudnnRuntimeTag_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetProperty: Result<
        unsafe extern "C" fn(
            type_: libraryPropertyType,
            value: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreate: Result<
        unsafe extern "C" fn(handle: *mut cudnnHandle_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroy:
        Result<unsafe extern "C" fn(handle: cudnnHandle_t) -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnSetStream: Result<
        unsafe extern "C" fn(handle: cudnnHandle_t, streamId: cudaStream_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetStream: Result<
        unsafe extern "C" fn(handle: cudnnHandle_t, streamId: *mut cudaStream_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateTensorDescriptor: Result<
        unsafe extern "C" fn(tensorDesc: *mut cudnnTensorDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetTensor4dDescriptor: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            format: cudnnTensorFormat_t,
            dataType: cudnnDataType_t,
            n: ::core::ffi::c_int,
            c: ::core::ffi::c_int,
            h: ::core::ffi::c_int,
            w: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetTensor4dDescriptorEx: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            dataType: cudnnDataType_t,
            n: ::core::ffi::c_int,
            c: ::core::ffi::c_int,
            h: ::core::ffi::c_int,
            w: ::core::ffi::c_int,
            nStride: ::core::ffi::c_int,
            cStride: ::core::ffi::c_int,
            hStride: ::core::ffi::c_int,
            wStride: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetTensor4dDescriptor: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            dataType: *mut cudnnDataType_t,
            n: *mut ::core::ffi::c_int,
            c: *mut ::core::ffi::c_int,
            h: *mut ::core::ffi::c_int,
            w: *mut ::core::ffi::c_int,
            nStride: *mut ::core::ffi::c_int,
            cStride: *mut ::core::ffi::c_int,
            hStride: *mut ::core::ffi::c_int,
            wStride: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetTensorNdDescriptor: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            dataType: cudnnDataType_t,
            nbDims: ::core::ffi::c_int,
            dimA: *const ::core::ffi::c_int,
            strideA: *const ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetTensorNdDescriptorEx: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            format: cudnnTensorFormat_t,
            dataType: cudnnDataType_t,
            nbDims: ::core::ffi::c_int,
            dimA: *const ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetTensorNdDescriptor: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            nbDimsRequested: ::core::ffi::c_int,
            dataType: *mut cudnnDataType_t,
            nbDims: *mut ::core::ffi::c_int,
            dimA: *mut ::core::ffi::c_int,
            strideA: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetTensorSizeInBytes: Result<
        unsafe extern "C" fn(
            tensorDesc: cudnnTensorDescriptor_t,
            size: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyTensorDescriptor: Result<
        unsafe extern "C" fn(tensorDesc: cudnnTensorDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnInitTransformDest: Result<
        unsafe extern "C" fn(
            transformDesc: cudnnTensorTransformDescriptor_t,
            srcDesc: cudnnTensorDescriptor_t,
            destDesc: cudnnTensorDescriptor_t,
            destSizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateTensorTransformDescriptor: Result<
        unsafe extern "C" fn(transformDesc: *mut cudnnTensorTransformDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetTensorTransformDescriptor: Result<
        unsafe extern "C" fn(
            transformDesc: cudnnTensorTransformDescriptor_t,
            nbDims: u32,
            destFormat: cudnnTensorFormat_t,
            padBeforeA: *const i32,
            padAfterA: *const i32,
            foldA: *const u32,
            direction: cudnnFoldingDirection_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetTensorTransformDescriptor: Result<
        unsafe extern "C" fn(
            transformDesc: cudnnTensorTransformDescriptor_t,
            nbDimsRequested: u32,
            destFormat: *mut cudnnTensorFormat_t,
            padBeforeA: *mut i32,
            padAfterA: *mut i32,
            foldA: *mut u32,
            direction: *mut cudnnFoldingDirection_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyTensorTransformDescriptor: Result<
        unsafe extern "C" fn(transformDesc: cudnnTensorTransformDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnTransformTensor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnTransformTensorEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            transDesc: cudnnTensorTransformDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            srcDesc: cudnnTensorDescriptor_t,
            srcData: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            destDesc: cudnnTensorDescriptor_t,
            destData: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnAddTensor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha: *const ::core::ffi::c_void,
            aDesc: cudnnTensorDescriptor_t,
            A: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            cDesc: cudnnTensorDescriptor_t,
            C: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateOpTensorDescriptor: Result<
        unsafe extern "C" fn(opTensorDesc: *mut cudnnOpTensorDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetOpTensorDescriptor: Result<
        unsafe extern "C" fn(
            opTensorDesc: cudnnOpTensorDescriptor_t,
            opTensorOp: cudnnOpTensorOp_t,
            opTensorCompType: cudnnDataType_t,
            opTensorNanOpt: cudnnNanPropagation_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetOpTensorDescriptor: Result<
        unsafe extern "C" fn(
            opTensorDesc: cudnnOpTensorDescriptor_t,
            opTensorOp: *mut cudnnOpTensorOp_t,
            opTensorCompType: *mut cudnnDataType_t,
            opTensorNanOpt: *mut cudnnNanPropagation_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyOpTensorDescriptor: Result<
        unsafe extern "C" fn(opTensorDesc: cudnnOpTensorDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnOpTensor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            opTensorDesc: cudnnOpTensorDescriptor_t,
            alpha1: *const ::core::ffi::c_void,
            aDesc: cudnnTensorDescriptor_t,
            A: *const ::core::ffi::c_void,
            alpha2: *const ::core::ffi::c_void,
            bDesc: cudnnTensorDescriptor_t,
            B: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            cDesc: cudnnTensorDescriptor_t,
            C: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateReduceTensorDescriptor: Result<
        unsafe extern "C" fn(reduceTensorDesc: *mut cudnnReduceTensorDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetReduceTensorDescriptor: Result<
        unsafe extern "C" fn(
            reduceTensorDesc: cudnnReduceTensorDescriptor_t,
            reduceTensorOp: cudnnReduceTensorOp_t,
            reduceTensorCompType: cudnnDataType_t,
            reduceTensorNanOpt: cudnnNanPropagation_t,
            reduceTensorIndices: cudnnReduceTensorIndices_t,
            reduceTensorIndicesType: cudnnIndicesType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetReduceTensorDescriptor: Result<
        unsafe extern "C" fn(
            reduceTensorDesc: cudnnReduceTensorDescriptor_t,
            reduceTensorOp: *mut cudnnReduceTensorOp_t,
            reduceTensorCompType: *mut cudnnDataType_t,
            reduceTensorNanOpt: *mut cudnnNanPropagation_t,
            reduceTensorIndices: *mut cudnnReduceTensorIndices_t,
            reduceTensorIndicesType: *mut cudnnIndicesType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyReduceTensorDescriptor: Result<
        unsafe extern "C" fn(reduceTensorDesc: cudnnReduceTensorDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetReductionIndicesSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            reduceTensorDesc: cudnnReduceTensorDescriptor_t,
            aDesc: cudnnTensorDescriptor_t,
            cDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetReductionWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            reduceTensorDesc: cudnnReduceTensorDescriptor_t,
            aDesc: cudnnTensorDescriptor_t,
            cDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnReduceTensor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            reduceTensorDesc: cudnnReduceTensorDescriptor_t,
            indices: *mut ::core::ffi::c_void,
            indicesSizeInBytes: usize,
            workspace: *mut ::core::ffi::c_void,
            workspaceSizeInBytes: usize,
            alpha: *const ::core::ffi::c_void,
            aDesc: cudnnTensorDescriptor_t,
            A: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            cDesc: cudnnTensorDescriptor_t,
            C: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetTensor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            valuePtr: *const ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnScaleTensor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            alpha: *const ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateFilterDescriptor: Result<
        unsafe extern "C" fn(filterDesc: *mut cudnnFilterDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetFilter4dDescriptor: Result<
        unsafe extern "C" fn(
            filterDesc: cudnnFilterDescriptor_t,
            dataType: cudnnDataType_t,
            format: cudnnTensorFormat_t,
            k: ::core::ffi::c_int,
            c: ::core::ffi::c_int,
            h: ::core::ffi::c_int,
            w: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetFilter4dDescriptor: Result<
        unsafe extern "C" fn(
            filterDesc: cudnnFilterDescriptor_t,
            dataType: *mut cudnnDataType_t,
            format: *mut cudnnTensorFormat_t,
            k: *mut ::core::ffi::c_int,
            c: *mut ::core::ffi::c_int,
            h: *mut ::core::ffi::c_int,
            w: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetFilterNdDescriptor: Result<
        unsafe extern "C" fn(
            filterDesc: cudnnFilterDescriptor_t,
            dataType: cudnnDataType_t,
            format: cudnnTensorFormat_t,
            nbDims: ::core::ffi::c_int,
            filterDimA: *const ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetFilterNdDescriptor: Result<
        unsafe extern "C" fn(
            filterDesc: cudnnFilterDescriptor_t,
            nbDimsRequested: ::core::ffi::c_int,
            dataType: *mut cudnnDataType_t,
            format: *mut cudnnTensorFormat_t,
            nbDims: *mut ::core::ffi::c_int,
            filterDimA: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetFilterSizeInBytes: Result<
        unsafe extern "C" fn(
            filterDesc: cudnnFilterDescriptor_t,
            size: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnTransformFilter: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            transDesc: cudnnTensorTransformDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            srcDesc: cudnnFilterDescriptor_t,
            srcData: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            destDesc: cudnnFilterDescriptor_t,
            destData: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyFilterDescriptor: Result<
        unsafe extern "C" fn(filterDesc: cudnnFilterDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSoftmaxForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algo: cudnnSoftmaxAlgorithm_t,
            mode: cudnnSoftmaxMode_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreatePoolingDescriptor: Result<
        unsafe extern "C" fn(poolingDesc: *mut cudnnPoolingDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetPooling2dDescriptor: Result<
        unsafe extern "C" fn(
            poolingDesc: cudnnPoolingDescriptor_t,
            mode: cudnnPoolingMode_t,
            maxpoolingNanOpt: cudnnNanPropagation_t,
            windowHeight: ::core::ffi::c_int,
            windowWidth: ::core::ffi::c_int,
            verticalPadding: ::core::ffi::c_int,
            horizontalPadding: ::core::ffi::c_int,
            verticalStride: ::core::ffi::c_int,
            horizontalStride: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetPooling2dDescriptor: Result<
        unsafe extern "C" fn(
            poolingDesc: cudnnPoolingDescriptor_t,
            mode: *mut cudnnPoolingMode_t,
            maxpoolingNanOpt: *mut cudnnNanPropagation_t,
            windowHeight: *mut ::core::ffi::c_int,
            windowWidth: *mut ::core::ffi::c_int,
            verticalPadding: *mut ::core::ffi::c_int,
            horizontalPadding: *mut ::core::ffi::c_int,
            verticalStride: *mut ::core::ffi::c_int,
            horizontalStride: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetPoolingNdDescriptor: Result<
        unsafe extern "C" fn(
            poolingDesc: cudnnPoolingDescriptor_t,
            mode: cudnnPoolingMode_t,
            maxpoolingNanOpt: cudnnNanPropagation_t,
            nbDims: ::core::ffi::c_int,
            windowDimA: *const ::core::ffi::c_int,
            paddingA: *const ::core::ffi::c_int,
            strideA: *const ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetPoolingNdDescriptor: Result<
        unsafe extern "C" fn(
            poolingDesc: cudnnPoolingDescriptor_t,
            nbDimsRequested: ::core::ffi::c_int,
            mode: *mut cudnnPoolingMode_t,
            maxpoolingNanOpt: *mut cudnnNanPropagation_t,
            nbDims: *mut ::core::ffi::c_int,
            windowDimA: *mut ::core::ffi::c_int,
            paddingA: *mut ::core::ffi::c_int,
            strideA: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetPoolingNdForwardOutputDim: Result<
        unsafe extern "C" fn(
            poolingDesc: cudnnPoolingDescriptor_t,
            inputTensorDesc: cudnnTensorDescriptor_t,
            nbDims: ::core::ffi::c_int,
            outputTensorDimA: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetPooling2dForwardOutputDim: Result<
        unsafe extern "C" fn(
            poolingDesc: cudnnPoolingDescriptor_t,
            inputTensorDesc: cudnnTensorDescriptor_t,
            n: *mut ::core::ffi::c_int,
            c: *mut ::core::ffi::c_int,
            h: *mut ::core::ffi::c_int,
            w: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyPoolingDescriptor: Result<
        unsafe extern "C" fn(poolingDesc: cudnnPoolingDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnPoolingForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            poolingDesc: cudnnPoolingDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateActivationDescriptor: Result<
        unsafe extern "C" fn(activationDesc: *mut cudnnActivationDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetActivationDescriptor: Result<
        unsafe extern "C" fn(
            activationDesc: cudnnActivationDescriptor_t,
            mode: cudnnActivationMode_t,
            reluNanOpt: cudnnNanPropagation_t,
            coef: f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetActivationDescriptor: Result<
        unsafe extern "C" fn(
            activationDesc: cudnnActivationDescriptor_t,
            mode: *mut cudnnActivationMode_t,
            reluNanOpt: *mut cudnnNanPropagation_t,
            coef: *mut f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetActivationDescriptorSwishBeta: Result<
        unsafe extern "C" fn(
            activationDesc: cudnnActivationDescriptor_t,
            swish_beta: f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetActivationDescriptorSwishBeta: Result<
        unsafe extern "C" fn(
            activationDesc: cudnnActivationDescriptor_t,
            swish_beta: *mut f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyActivationDescriptor: Result<
        unsafe extern "C" fn(activationDesc: cudnnActivationDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnActivationForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            activationDesc: cudnnActivationDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateLRNDescriptor: Result<
        unsafe extern "C" fn(normDesc: *mut cudnnLRNDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetLRNDescriptor: Result<
        unsafe extern "C" fn(
            normDesc: cudnnLRNDescriptor_t,
            lrnN: ::core::ffi::c_uint,
            lrnAlpha: f64,
            lrnBeta: f64,
            lrnK: f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetLRNDescriptor: Result<
        unsafe extern "C" fn(
            normDesc: cudnnLRNDescriptor_t,
            lrnN: *mut ::core::ffi::c_uint,
            lrnAlpha: *mut f64,
            lrnBeta: *mut f64,
            lrnK: *mut f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyLRNDescriptor: Result<
        unsafe extern "C" fn(lrnDesc: cudnnLRNDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnLRNCrossChannelForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            normDesc: cudnnLRNDescriptor_t,
            lrnMode: cudnnLRNMode_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDivisiveNormalizationForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            normDesc: cudnnLRNDescriptor_t,
            mode: cudnnDivNormMode_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            means: *const ::core::ffi::c_void,
            temp: *mut ::core::ffi::c_void,
            temp2: *mut ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDeriveBNTensorDescriptor: Result<
        unsafe extern "C" fn(
            derivedBnDesc: cudnnTensorDescriptor_t,
            xDesc: cudnnTensorDescriptor_t,
            mode: cudnnBatchNormMode_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBatchNormalizationForwardInference: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            alpha: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
            bnScale: *const ::core::ffi::c_void,
            bnBias: *const ::core::ffi::c_void,
            estimatedMean: *const ::core::ffi::c_void,
            estimatedVariance: *const ::core::ffi::c_void,
            epsilon: f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDeriveNormTensorDescriptor: Result<
        unsafe extern "C" fn(
            derivedNormScaleBiasDesc: cudnnTensorDescriptor_t,
            derivedNormMeanVarDesc: cudnnTensorDescriptor_t,
            xDesc: cudnnTensorDescriptor_t,
            mode: cudnnNormMode_t,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnNormalizationForwardInference: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnNormMode_t,
            normOps: cudnnNormOps_t,
            algo: cudnnNormAlgo_t,
            alpha: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            normScaleBiasDesc: cudnnTensorDescriptor_t,
            normScale: *const ::core::ffi::c_void,
            normBias: *const ::core::ffi::c_void,
            normMeanVarDesc: cudnnTensorDescriptor_t,
            estimatedMean: *const ::core::ffi::c_void,
            estimatedVariance: *const ::core::ffi::c_void,
            zDesc: cudnnTensorDescriptor_t,
            z: *const ::core::ffi::c_void,
            activationDesc: cudnnActivationDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            epsilon: f64,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateSpatialTransformerDescriptor: Result<
        unsafe extern "C" fn(stDesc: *mut cudnnSpatialTransformerDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetSpatialTransformerNdDescriptor: Result<
        unsafe extern "C" fn(
            stDesc: cudnnSpatialTransformerDescriptor_t,
            samplerType: cudnnSamplerType_t,
            dataType: cudnnDataType_t,
            nbDims: ::core::ffi::c_int,
            dimA: *const ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroySpatialTransformerDescriptor: Result<
        unsafe extern "C" fn(stDesc: cudnnSpatialTransformerDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSpatialTfGridGeneratorForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            stDesc: cudnnSpatialTransformerDescriptor_t,
            theta: *const ::core::ffi::c_void,
            grid: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSpatialTfSamplerForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            stDesc: cudnnSpatialTransformerDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            grid: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateDropoutDescriptor: Result<
        unsafe extern "C" fn(dropoutDesc: *mut cudnnDropoutDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyDropoutDescriptor: Result<
        unsafe extern "C" fn(dropoutDesc: cudnnDropoutDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDropoutGetStatesSize: Result<
        unsafe extern "C" fn(handle: cudnnHandle_t, sizeInBytes: *mut usize) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDropoutGetReserveSpaceSize: Result<
        unsafe extern "C" fn(
            xdesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetDropoutDescriptor: Result<
        unsafe extern "C" fn(
            dropoutDesc: cudnnDropoutDescriptor_t,
            handle: cudnnHandle_t,
            dropout: f32,
            states: *mut ::core::ffi::c_void,
            stateSizeInBytes: usize,
            seed: ::core::ffi::c_ulonglong,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRestoreDropoutDescriptor: Result<
        unsafe extern "C" fn(
            dropoutDesc: cudnnDropoutDescriptor_t,
            handle: cudnnHandle_t,
            dropout: f32,
            states: *mut ::core::ffi::c_void,
            stateSizeInBytes: usize,
            seed: ::core::ffi::c_ulonglong,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetDropoutDescriptor: Result<
        unsafe extern "C" fn(
            dropoutDesc: cudnnDropoutDescriptor_t,
            handle: cudnnHandle_t,
            dropout: *mut f32,
            states: *mut *mut ::core::ffi::c_void,
            seed: *mut ::core::ffi::c_ulonglong,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDropoutForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            dropoutDesc: cudnnDropoutDescriptor_t,
            xdesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            ydesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateAlgorithmDescriptor: Result<
        unsafe extern "C" fn(algoDesc: *mut cudnnAlgorithmDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetAlgorithmDescriptor: Result<
        unsafe extern "C" fn(
            algoDesc: cudnnAlgorithmDescriptor_t,
            algorithm: cudnnAlgorithm_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetAlgorithmDescriptor: Result<
        unsafe extern "C" fn(
            algoDesc: cudnnAlgorithmDescriptor_t,
            algorithm: *mut cudnnAlgorithm_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCopyAlgorithmDescriptor: Result<
        unsafe extern "C" fn(
            src: cudnnAlgorithmDescriptor_t,
            dest: cudnnAlgorithmDescriptor_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyAlgorithmDescriptor: Result<
        unsafe extern "C" fn(algoDesc: cudnnAlgorithmDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateAlgorithmPerformance: Result<
        unsafe extern "C" fn(
            algoPerf: *mut cudnnAlgorithmPerformance_t,
            numberToCreate: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetAlgorithmPerformance: Result<
        unsafe extern "C" fn(
            algoPerf: cudnnAlgorithmPerformance_t,
            algoDesc: cudnnAlgorithmDescriptor_t,
            status: cudnnStatus_t,
            time: f32,
            memory: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetAlgorithmPerformance: Result<
        unsafe extern "C" fn(
            algoPerf: cudnnAlgorithmPerformance_t,
            algoDesc: *mut cudnnAlgorithmDescriptor_t,
            status: *mut cudnnStatus_t,
            time: *mut f32,
            memory: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyAlgorithmPerformance: Result<
        unsafe extern "C" fn(
            algoPerf: *mut cudnnAlgorithmPerformance_t,
            numberToDestroy: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetAlgorithmSpaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algoDesc: cudnnAlgorithmDescriptor_t,
            algoSpaceSizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSaveAlgorithm: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algoDesc: cudnnAlgorithmDescriptor_t,
            algoSpace: *mut ::core::ffi::c_void,
            algoSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRestoreAlgorithm: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algoSpace: *mut ::core::ffi::c_void,
            algoSpaceSizeInBytes: usize,
            algoDesc: cudnnAlgorithmDescriptor_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetCallback: Result<
        unsafe extern "C" fn(
            mask: ::core::ffi::c_uint,
            udata: *mut ::core::ffi::c_void,
            fptr: cudnnCallback_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetCallback: Result<
        unsafe extern "C" fn(
            mask: *mut ::core::ffi::c_uint,
            udata: *mut *mut ::core::ffi::c_void,
            fptr: *mut cudnnCallback_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnOpsInferVersionCheck:
        Result<unsafe extern "C" fn() -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnSoftmaxBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algo: cudnnSoftmaxAlgorithm_t,
            mode: cudnnSoftmaxMode_t,
            alpha: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnPoolingBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            poolingDesc: cudnnPoolingDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnActivationBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            activationDesc: cudnnActivationDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnLRNCrossChannelBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            normDesc: cudnnLRNDescriptor_t,
            lrnMode: cudnnLRNMode_t,
            alpha: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDivisiveNormalizationBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            normDesc: cudnnLRNDescriptor_t,
            mode: cudnnDivNormMode_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            means: *const ::core::ffi::c_void,
            dy: *const ::core::ffi::c_void,
            temp: *mut ::core::ffi::c_void,
            temp2: *mut ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dXdMeansDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            dMeans: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            bnOps: cudnnBatchNormOps_t,
            xDesc: cudnnTensorDescriptor_t,
            zDesc: cudnnTensorDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
            activationDesc: cudnnActivationDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetBatchNormalizationBackwardExWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            bnOps: cudnnBatchNormOps_t,
            xDesc: cudnnTensorDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            dyDesc: cudnnTensorDescriptor_t,
            dzDesc: cudnnTensorDescriptor_t,
            dxDesc: cudnnTensorDescriptor_t,
            dBnScaleBiasDesc: cudnnTensorDescriptor_t,
            activationDesc: cudnnActivationDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetBatchNormalizationTrainingExReserveSpaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            bnOps: cudnnBatchNormOps_t,
            activationDesc: cudnnActivationDescriptor_t,
            xDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBatchNormalizationForwardTraining: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            alpha: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
            bnScale: *const ::core::ffi::c_void,
            bnBias: *const ::core::ffi::c_void,
            exponentialAverageFactor: f64,
            resultRunningMean: *mut ::core::ffi::c_void,
            resultRunningVariance: *mut ::core::ffi::c_void,
            epsilon: f64,
            resultSaveMean: *mut ::core::ffi::c_void,
            resultSaveInvVariance: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBatchNormalizationForwardTrainingEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            bnOps: cudnnBatchNormOps_t,
            alpha: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            xData: *const ::core::ffi::c_void,
            zDesc: cudnnTensorDescriptor_t,
            zData: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            yData: *mut ::core::ffi::c_void,
            bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
            bnScale: *const ::core::ffi::c_void,
            bnBias: *const ::core::ffi::c_void,
            exponentialAverageFactor: f64,
            resultRunningMean: *mut ::core::ffi::c_void,
            resultRunningVariance: *mut ::core::ffi::c_void,
            epsilon: f64,
            resultSaveMean: *mut ::core::ffi::c_void,
            resultSaveInvVariance: *mut ::core::ffi::c_void,
            activationDesc: cudnnActivationDescriptor_t,
            workspace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBatchNormalizationBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            alphaDataDiff: *const ::core::ffi::c_void,
            betaDataDiff: *const ::core::ffi::c_void,
            alphaParamDiff: *const ::core::ffi::c_void,
            betaParamDiff: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            dBnScaleBiasDesc: cudnnTensorDescriptor_t,
            bnScale: *const ::core::ffi::c_void,
            dBnScaleResult: *mut ::core::ffi::c_void,
            dBnBiasResult: *mut ::core::ffi::c_void,
            epsilon: f64,
            savedMean: *const ::core::ffi::c_void,
            savedInvVariance: *const ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBatchNormalizationBackwardEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnBatchNormMode_t,
            bnOps: cudnnBatchNormOps_t,
            alphaDataDiff: *const ::core::ffi::c_void,
            betaDataDiff: *const ::core::ffi::c_void,
            alphaParamDiff: *const ::core::ffi::c_void,
            betaParamDiff: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            xData: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            yData: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dyData: *const ::core::ffi::c_void,
            dzDesc: cudnnTensorDescriptor_t,
            dzData: *mut ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dxData: *mut ::core::ffi::c_void,
            dBnScaleBiasDesc: cudnnTensorDescriptor_t,
            bnScaleData: *const ::core::ffi::c_void,
            bnBiasData: *const ::core::ffi::c_void,
            dBnScaleData: *mut ::core::ffi::c_void,
            dBnBiasData: *mut ::core::ffi::c_void,
            epsilon: f64,
            savedMean: *const ::core::ffi::c_void,
            savedInvVariance: *const ::core::ffi::c_void,
            activationDesc: cudnnActivationDescriptor_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetNormalizationForwardTrainingWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnNormMode_t,
            normOps: cudnnNormOps_t,
            algo: cudnnNormAlgo_t,
            xDesc: cudnnTensorDescriptor_t,
            zDesc: cudnnTensorDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            normScaleBiasDesc: cudnnTensorDescriptor_t,
            activationDesc: cudnnActivationDescriptor_t,
            normMeanVarDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetNormalizationBackwardWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnNormMode_t,
            normOps: cudnnNormOps_t,
            algo: cudnnNormAlgo_t,
            xDesc: cudnnTensorDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            dyDesc: cudnnTensorDescriptor_t,
            dzDesc: cudnnTensorDescriptor_t,
            dxDesc: cudnnTensorDescriptor_t,
            dNormScaleBiasDesc: cudnnTensorDescriptor_t,
            activationDesc: cudnnActivationDescriptor_t,
            normMeanVarDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetNormalizationTrainingReserveSpaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnNormMode_t,
            normOps: cudnnNormOps_t,
            algo: cudnnNormAlgo_t,
            activationDesc: cudnnActivationDescriptor_t,
            xDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnNormalizationForwardTraining: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnNormMode_t,
            normOps: cudnnNormOps_t,
            algo: cudnnNormAlgo_t,
            alpha: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            xData: *const ::core::ffi::c_void,
            normScaleBiasDesc: cudnnTensorDescriptor_t,
            normScale: *const ::core::ffi::c_void,
            normBias: *const ::core::ffi::c_void,
            exponentialAverageFactor: f64,
            normMeanVarDesc: cudnnTensorDescriptor_t,
            resultRunningMean: *mut ::core::ffi::c_void,
            resultRunningVariance: *mut ::core::ffi::c_void,
            epsilon: f64,
            resultSaveMean: *mut ::core::ffi::c_void,
            resultSaveInvVariance: *mut ::core::ffi::c_void,
            activationDesc: cudnnActivationDescriptor_t,
            zDesc: cudnnTensorDescriptor_t,
            zData: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            yData: *mut ::core::ffi::c_void,
            workspace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnNormalizationBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            mode: cudnnNormMode_t,
            normOps: cudnnNormOps_t,
            algo: cudnnNormAlgo_t,
            alphaDataDiff: *const ::core::ffi::c_void,
            betaDataDiff: *const ::core::ffi::c_void,
            alphaParamDiff: *const ::core::ffi::c_void,
            betaParamDiff: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            xData: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            yData: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dyData: *const ::core::ffi::c_void,
            dzDesc: cudnnTensorDescriptor_t,
            dzData: *mut ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dxData: *mut ::core::ffi::c_void,
            dNormScaleBiasDesc: cudnnTensorDescriptor_t,
            normScaleData: *const ::core::ffi::c_void,
            normBiasData: *const ::core::ffi::c_void,
            dNormScaleData: *mut ::core::ffi::c_void,
            dNormBiasData: *mut ::core::ffi::c_void,
            epsilon: f64,
            normMeanVarDesc: cudnnTensorDescriptor_t,
            savedMean: *const ::core::ffi::c_void,
            savedInvVariance: *const ::core::ffi::c_void,
            activationDesc: cudnnActivationDescriptor_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
            groupCnt: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSpatialTfGridGeneratorBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            stDesc: cudnnSpatialTransformerDescriptor_t,
            dgrid: *const ::core::ffi::c_void,
            dtheta: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSpatialTfSamplerBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            stDesc: cudnnSpatialTransformerDescriptor_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            alphaDgrid: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            grid: *const ::core::ffi::c_void,
            betaDgrid: *const ::core::ffi::c_void,
            dgrid: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDropoutBackward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            dropoutDesc: cudnnDropoutDescriptor_t,
            dydesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            dxdesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnOpsTrainVersionCheck:
        Result<unsafe extern "C" fn() -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnCreateRNNDescriptor: Result<
        unsafe extern "C" fn(rnnDesc: *mut cudnnRNNDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyRNNDescriptor: Result<
        unsafe extern "C" fn(rnnDesc: cudnnRNNDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNDescriptor_v8: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            algo: cudnnRNNAlgo_t,
            cellMode: cudnnRNNMode_t,
            biasMode: cudnnRNNBiasMode_t,
            dirMode: cudnnDirectionMode_t,
            inputMode: cudnnRNNInputMode_t,
            dataType: cudnnDataType_t,
            mathPrec: cudnnDataType_t,
            mathType: cudnnMathType_t,
            inputSize: i32,
            hiddenSize: i32,
            projSize: i32,
            numLayers: i32,
            dropoutDesc: cudnnDropoutDescriptor_t,
            auxFlags: u32,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNDescriptor_v8: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            algo: *mut cudnnRNNAlgo_t,
            cellMode: *mut cudnnRNNMode_t,
            biasMode: *mut cudnnRNNBiasMode_t,
            dirMode: *mut cudnnDirectionMode_t,
            inputMode: *mut cudnnRNNInputMode_t,
            dataType: *mut cudnnDataType_t,
            mathPrec: *mut cudnnDataType_t,
            mathType: *mut cudnnMathType_t,
            inputSize: *mut i32,
            hiddenSize: *mut i32,
            projSize: *mut i32,
            numLayers: *mut i32,
            dropoutDesc: *mut cudnnDropoutDescriptor_t,
            auxFlags: *mut u32,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNDescriptor_v6: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            hiddenSize: ::core::ffi::c_int,
            numLayers: ::core::ffi::c_int,
            dropoutDesc: cudnnDropoutDescriptor_t,
            inputMode: cudnnRNNInputMode_t,
            direction: cudnnDirectionMode_t,
            cellMode: cudnnRNNMode_t,
            algo: cudnnRNNAlgo_t,
            mathPrec: cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNDescriptor_v6: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            hiddenSize: *mut ::core::ffi::c_int,
            numLayers: *mut ::core::ffi::c_int,
            dropoutDesc: *mut cudnnDropoutDescriptor_t,
            inputMode: *mut cudnnRNNInputMode_t,
            direction: *mut cudnnDirectionMode_t,
            cellMode: *mut cudnnRNNMode_t,
            algo: *mut cudnnRNNAlgo_t,
            mathPrec: *mut cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNMatrixMathType: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            mType: cudnnMathType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNMatrixMathType: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            mType: *mut cudnnMathType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNBiasMode: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            biasMode: cudnnRNNBiasMode_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNBiasMode: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            biasMode: *mut cudnnRNNBiasMode_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNSetClip_v8: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            clipMode: cudnnRNNClipMode_t,
            clipNanOpt: cudnnNanPropagation_t,
            lclip: f64,
            rclip: f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNGetClip_v8: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            clipMode: *mut cudnnRNNClipMode_t,
            clipNanOpt: *mut cudnnNanPropagation_t,
            lclip: *mut f64,
            rclip: *mut f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNSetClip: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            clipMode: cudnnRNNClipMode_t,
            clipNanOpt: cudnnNanPropagation_t,
            lclip: f64,
            rclip: f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNGetClip: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            clipMode: *mut cudnnRNNClipMode_t,
            clipNanOpt: *mut cudnnNanPropagation_t,
            lclip: *mut f64,
            rclip: *mut f64,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNProjectionLayers: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            recProjSize: ::core::ffi::c_int,
            outProjSize: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNProjectionLayers: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            recProjSize: *mut ::core::ffi::c_int,
            outProjSize: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreatePersistentRNNPlan: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            minibatch: ::core::ffi::c_int,
            dataType: cudnnDataType_t,
            plan: *mut cudnnPersistentRNNPlan_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyPersistentRNNPlan: Result<
        unsafe extern "C" fn(plan: cudnnPersistentRNNPlan_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetPersistentRNNPlan: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            plan: cudnnPersistentRNNPlan_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBuildRNNDynamic: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            miniBatch: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNTrainingReserveSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNTempSpaceSizes: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            fwdMode: cudnnForwardMode_t,
            xDesc: cudnnRNNDataDescriptor_t,
            workSpaceSize: *mut usize,
            reserveSpaceSize: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNParamsSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            xDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
            dataType: cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNWeightSpaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            weightSpaceSize: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNLinLayerMatrixParams: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            pseudoLayer: ::core::ffi::c_int,
            xDesc: cudnnTensorDescriptor_t,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            linLayerID: ::core::ffi::c_int,
            linLayerMatDesc: cudnnFilterDescriptor_t,
            linLayerMat: *mut *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNLinLayerBiasParams: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            pseudoLayer: ::core::ffi::c_int,
            xDesc: cudnnTensorDescriptor_t,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            linLayerID: ::core::ffi::c_int,
            linLayerBiasDesc: cudnnFilterDescriptor_t,
            linLayerBias: *mut *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNWeightParams: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            pseudoLayer: i32,
            weightSpaceSize: usize,
            weightSpace: *const ::core::ffi::c_void,
            linLayerID: i32,
            mDesc: cudnnTensorDescriptor_t,
            mAddr: *mut *mut ::core::ffi::c_void,
            bDesc: cudnnTensorDescriptor_t,
            bAddr: *mut *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNForwardInference: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hyDesc: cudnnTensorDescriptor_t,
            hy: *mut ::core::ffi::c_void,
            cyDesc: cudnnTensorDescriptor_t,
            cy: *mut ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNPaddingMode: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            paddingMode: ::core::ffi::c_uint,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNPaddingMode: Result<
        unsafe extern "C" fn(
            rnnDesc: cudnnRNNDescriptor_t,
            paddingMode: *mut ::core::ffi::c_uint,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateRNNDataDescriptor: Result<
        unsafe extern "C" fn(rnnDataDesc: *mut cudnnRNNDataDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyRNNDataDescriptor: Result<
        unsafe extern "C" fn(rnnDataDesc: cudnnRNNDataDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNDataDescriptor: Result<
        unsafe extern "C" fn(
            rnnDataDesc: cudnnRNNDataDescriptor_t,
            dataType: cudnnDataType_t,
            layout: cudnnRNNDataLayout_t,
            maxSeqLength: ::core::ffi::c_int,
            batchSize: ::core::ffi::c_int,
            vectorSize: ::core::ffi::c_int,
            seqLengthArray: *const ::core::ffi::c_int,
            paddingFill: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNDataDescriptor: Result<
        unsafe extern "C" fn(
            rnnDataDesc: cudnnRNNDataDescriptor_t,
            dataType: *mut cudnnDataType_t,
            layout: *mut cudnnRNNDataLayout_t,
            maxSeqLength: *mut ::core::ffi::c_int,
            batchSize: *mut ::core::ffi::c_int,
            vectorSize: *mut ::core::ffi::c_int,
            arrayLengthRequested: ::core::ffi::c_int,
            seqLengthArray: *mut ::core::ffi::c_int,
            paddingFill: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNForwardInferenceEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            xDesc: cudnnRNNDataDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hyDesc: cudnnTensorDescriptor_t,
            hy: *mut ::core::ffi::c_void,
            cyDesc: cudnnTensorDescriptor_t,
            cy: *mut ::core::ffi::c_void,
            kDesc: cudnnRNNDataDescriptor_t,
            keys: *const ::core::ffi::c_void,
            cDesc: cudnnRNNDataDescriptor_t,
            cAttn: *mut ::core::ffi::c_void,
            iDesc: cudnnRNNDataDescriptor_t,
            iAttn: *mut ::core::ffi::c_void,
            qDesc: cudnnRNNDataDescriptor_t,
            queries: *mut ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            fwdMode: cudnnForwardMode_t,
            devSeqLengths: *const i32,
            xDesc: cudnnRNNDataDescriptor_t,
            x: *const ::core::ffi::c_void,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            hy: *mut ::core::ffi::c_void,
            cDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            cy: *mut ::core::ffi::c_void,
            weightSpaceSize: usize,
            weightSpace: *const ::core::ffi::c_void,
            workSpaceSize: usize,
            workSpace: *mut ::core::ffi::c_void,
            reserveSpaceSize: usize,
            reserveSpace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetRNNAlgorithmDescriptor: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            algoDesc: cudnnAlgorithmDescriptor_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNForwardInferenceAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindRNNForwardInferenceAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hyDesc: cudnnTensorDescriptor_t,
            hy: *mut ::core::ffi::c_void,
            cyDesc: cudnnTensorDescriptor_t,
            cy: *mut ::core::ffi::c_void,
            findIntensity: f32,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnAlgorithmPerformance_t,
            workspace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateSeqDataDescriptor: Result<
        unsafe extern "C" fn(seqDataDesc: *mut cudnnSeqDataDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroySeqDataDescriptor: Result<
        unsafe extern "C" fn(seqDataDesc: cudnnSeqDataDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetSeqDataDescriptor: Result<
        unsafe extern "C" fn(
            seqDataDesc: cudnnSeqDataDescriptor_t,
            dataType: cudnnDataType_t,
            nbDims: ::core::ffi::c_int,
            dimA: *const ::core::ffi::c_int,
            axes: *const cudnnSeqDataAxis_t,
            seqLengthArraySize: usize,
            seqLengthArray: *const ::core::ffi::c_int,
            paddingFill: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetSeqDataDescriptor: Result<
        unsafe extern "C" fn(
            seqDataDesc: cudnnSeqDataDescriptor_t,
            dataType: *mut cudnnDataType_t,
            nbDims: *mut ::core::ffi::c_int,
            nbDimsRequested: ::core::ffi::c_int,
            dimA: *mut ::core::ffi::c_int,
            axes: *mut cudnnSeqDataAxis_t,
            seqLengthArraySize: *mut usize,
            seqLengthSizeRequested: usize,
            seqLengthArray: *mut ::core::ffi::c_int,
            paddingFill: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateAttnDescriptor: Result<
        unsafe extern "C" fn(attnDesc: *mut cudnnAttnDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyAttnDescriptor: Result<
        unsafe extern "C" fn(attnDesc: cudnnAttnDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetAttnDescriptor: Result<
        unsafe extern "C" fn(
            attnDesc: cudnnAttnDescriptor_t,
            attnMode: ::core::ffi::c_uint,
            nHeads: ::core::ffi::c_int,
            smScaler: f64,
            dataType: cudnnDataType_t,
            computePrec: cudnnDataType_t,
            mathType: cudnnMathType_t,
            attnDropoutDesc: cudnnDropoutDescriptor_t,
            postDropoutDesc: cudnnDropoutDescriptor_t,
            qSize: ::core::ffi::c_int,
            kSize: ::core::ffi::c_int,
            vSize: ::core::ffi::c_int,
            qProjSize: ::core::ffi::c_int,
            kProjSize: ::core::ffi::c_int,
            vProjSize: ::core::ffi::c_int,
            oProjSize: ::core::ffi::c_int,
            qoMaxSeqLength: ::core::ffi::c_int,
            kvMaxSeqLength: ::core::ffi::c_int,
            maxBatchSize: ::core::ffi::c_int,
            maxBeamSize: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetAttnDescriptor: Result<
        unsafe extern "C" fn(
            attnDesc: cudnnAttnDescriptor_t,
            attnMode: *mut ::core::ffi::c_uint,
            nHeads: *mut ::core::ffi::c_int,
            smScaler: *mut f64,
            dataType: *mut cudnnDataType_t,
            computePrec: *mut cudnnDataType_t,
            mathType: *mut cudnnMathType_t,
            attnDropoutDesc: *mut cudnnDropoutDescriptor_t,
            postDropoutDesc: *mut cudnnDropoutDescriptor_t,
            qSize: *mut ::core::ffi::c_int,
            kSize: *mut ::core::ffi::c_int,
            vSize: *mut ::core::ffi::c_int,
            qProjSize: *mut ::core::ffi::c_int,
            kProjSize: *mut ::core::ffi::c_int,
            vProjSize: *mut ::core::ffi::c_int,
            oProjSize: *mut ::core::ffi::c_int,
            qoMaxSeqLength: *mut ::core::ffi::c_int,
            kvMaxSeqLength: *mut ::core::ffi::c_int,
            maxBatchSize: *mut ::core::ffi::c_int,
            maxBeamSize: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetMultiHeadAttnBuffers: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            attnDesc: cudnnAttnDescriptor_t,
            weightSizeInBytes: *mut usize,
            workSpaceSizeInBytes: *mut usize,
            reserveSpaceSizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetMultiHeadAttnWeights: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            attnDesc: cudnnAttnDescriptor_t,
            wKind: cudnnMultiHeadAttnWeightKind_t,
            weightSizeInBytes: usize,
            weights: *const ::core::ffi::c_void,
            wDesc: cudnnTensorDescriptor_t,
            wAddr: *mut *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnMultiHeadAttnForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            attnDesc: cudnnAttnDescriptor_t,
            currIdx: ::core::ffi::c_int,
            loWinIdx: *const ::core::ffi::c_int,
            hiWinIdx: *const ::core::ffi::c_int,
            devSeqLengthsQO: *const ::core::ffi::c_int,
            devSeqLengthsKV: *const ::core::ffi::c_int,
            qDesc: cudnnSeqDataDescriptor_t,
            queries: *const ::core::ffi::c_void,
            residuals: *const ::core::ffi::c_void,
            kDesc: cudnnSeqDataDescriptor_t,
            keys: *const ::core::ffi::c_void,
            vDesc: cudnnSeqDataDescriptor_t,
            values: *const ::core::ffi::c_void,
            oDesc: cudnnSeqDataDescriptor_t,
            out: *mut ::core::ffi::c_void,
            weightSizeInBytes: usize,
            weights: *const ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            workSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnAdvInferVersionCheck:
        Result<unsafe extern "C" fn() -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnRNNForwardTraining: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hyDesc: cudnnTensorDescriptor_t,
            hy: *mut ::core::ffi::c_void,
            cyDesc: cudnnTensorDescriptor_t,
            cy: *mut ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNBackwardData: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: *const cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            dhyDesc: cudnnTensorDescriptor_t,
            dhy: *const ::core::ffi::c_void,
            dcyDesc: cudnnTensorDescriptor_t,
            dcy: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            dxDesc: *const cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            dhxDesc: cudnnTensorDescriptor_t,
            dhx: *mut ::core::ffi::c_void,
            dcxDesc: cudnnTensorDescriptor_t,
            dcx: *mut ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNBackwardData_v8: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            devSeqLengths: *const i32,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *const ::core::ffi::c_void,
            dy: *const ::core::ffi::c_void,
            xDesc: cudnnRNNDataDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            hDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            dhy: *const ::core::ffi::c_void,
            dhx: *mut ::core::ffi::c_void,
            cDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            dcy: *const ::core::ffi::c_void,
            dcx: *mut ::core::ffi::c_void,
            weightSpaceSize: usize,
            weightSpace: *const ::core::ffi::c_void,
            workSpaceSize: usize,
            workSpace: *mut ::core::ffi::c_void,
            reserveSpaceSize: usize,
            reserveSpace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNBackwardWeights: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            workSpace: *const ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            dwDesc: cudnnFilterDescriptor_t,
            dw: *mut ::core::ffi::c_void,
            reserveSpace: *const ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNBackwardWeights_v8: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            addGrad: cudnnWgradMode_t,
            devSeqLengths: *const i32,
            xDesc: cudnnRNNDataDescriptor_t,
            x: *const ::core::ffi::c_void,
            hDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *const ::core::ffi::c_void,
            weightSpaceSize: usize,
            dweightSpace: *mut ::core::ffi::c_void,
            workSpaceSize: usize,
            workSpace: *mut ::core::ffi::c_void,
            reserveSpaceSize: usize,
            reserveSpace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNForwardTrainingEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            xDesc: cudnnRNNDataDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hyDesc: cudnnTensorDescriptor_t,
            hy: *mut ::core::ffi::c_void,
            cyDesc: cudnnTensorDescriptor_t,
            cy: *mut ::core::ffi::c_void,
            kDesc: cudnnRNNDataDescriptor_t,
            keys: *const ::core::ffi::c_void,
            cDesc: cudnnRNNDataDescriptor_t,
            cAttn: *mut ::core::ffi::c_void,
            iDesc: cudnnRNNDataDescriptor_t,
            iAttn: *mut ::core::ffi::c_void,
            qDesc: cudnnRNNDataDescriptor_t,
            queries: *mut ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNBackwardDataEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: cudnnRNNDataDescriptor_t,
            dy: *const ::core::ffi::c_void,
            dcDesc: cudnnRNNDataDescriptor_t,
            dcAttn: *const ::core::ffi::c_void,
            dhyDesc: cudnnTensorDescriptor_t,
            dhy: *const ::core::ffi::c_void,
            dcyDesc: cudnnTensorDescriptor_t,
            dcy: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            dxDesc: cudnnRNNDataDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            dhxDesc: cudnnTensorDescriptor_t,
            dhx: *mut ::core::ffi::c_void,
            dcxDesc: cudnnTensorDescriptor_t,
            dcx: *mut ::core::ffi::c_void,
            dkDesc: cudnnRNNDataDescriptor_t,
            dkeys: *mut ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnRNNBackwardWeightsEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            xDesc: cudnnRNNDataDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            yDesc: cudnnRNNDataDescriptor_t,
            y: *const ::core::ffi::c_void,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            dwDesc: cudnnFilterDescriptor_t,
            dw: *mut ::core::ffi::c_void,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNForwardTrainingAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindRNNForwardTrainingAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            hyDesc: cudnnTensorDescriptor_t,
            hy: *mut ::core::ffi::c_void,
            cyDesc: cudnnTensorDescriptor_t,
            cy: *mut ::core::ffi::c_void,
            findIntensity: f32,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnAlgorithmPerformance_t,
            workspace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNBackwardDataAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindRNNBackwardDataAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            dyDesc: *const cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            dhyDesc: cudnnTensorDescriptor_t,
            dhy: *const ::core::ffi::c_void,
            dcyDesc: cudnnTensorDescriptor_t,
            dcy: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            cxDesc: cudnnTensorDescriptor_t,
            cx: *const ::core::ffi::c_void,
            dxDesc: *const cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            dhxDesc: cudnnTensorDescriptor_t,
            dhx: *mut ::core::ffi::c_void,
            dcxDesc: cudnnTensorDescriptor_t,
            dcx: *mut ::core::ffi::c_void,
            findIntensity: f32,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnAlgorithmPerformance_t,
            workspace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetRNNBackwardWeightsAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindRNNBackwardWeightsAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            rnnDesc: cudnnRNNDescriptor_t,
            seqLength: ::core::ffi::c_int,
            xDesc: *const cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            hxDesc: cudnnTensorDescriptor_t,
            hx: *const ::core::ffi::c_void,
            yDesc: *const cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            findIntensity: f32,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnAlgorithmPerformance_t,
            workspace: *const ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            dwDesc: cudnnFilterDescriptor_t,
            dw: *mut ::core::ffi::c_void,
            reserveSpace: *const ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnMultiHeadAttnBackwardData: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            attnDesc: cudnnAttnDescriptor_t,
            loWinIdx: *const ::core::ffi::c_int,
            hiWinIdx: *const ::core::ffi::c_int,
            devSeqLengthsDQDO: *const ::core::ffi::c_int,
            devSeqLengthsDKDV: *const ::core::ffi::c_int,
            doDesc: cudnnSeqDataDescriptor_t,
            dout: *const ::core::ffi::c_void,
            dqDesc: cudnnSeqDataDescriptor_t,
            dqueries: *mut ::core::ffi::c_void,
            queries: *const ::core::ffi::c_void,
            dkDesc: cudnnSeqDataDescriptor_t,
            dkeys: *mut ::core::ffi::c_void,
            keys: *const ::core::ffi::c_void,
            dvDesc: cudnnSeqDataDescriptor_t,
            dvalues: *mut ::core::ffi::c_void,
            values: *const ::core::ffi::c_void,
            weightSizeInBytes: usize,
            weights: *const ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            workSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnMultiHeadAttnBackwardWeights: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            attnDesc: cudnnAttnDescriptor_t,
            addGrad: cudnnWgradMode_t,
            qDesc: cudnnSeqDataDescriptor_t,
            queries: *const ::core::ffi::c_void,
            kDesc: cudnnSeqDataDescriptor_t,
            keys: *const ::core::ffi::c_void,
            vDesc: cudnnSeqDataDescriptor_t,
            values: *const ::core::ffi::c_void,
            doDesc: cudnnSeqDataDescriptor_t,
            dout: *const ::core::ffi::c_void,
            weightSizeInBytes: usize,
            weights: *const ::core::ffi::c_void,
            dweights: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            workSpace: *mut ::core::ffi::c_void,
            reserveSpaceSizeInBytes: usize,
            reserveSpace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateCTCLossDescriptor: Result<
        unsafe extern "C" fn(ctcLossDesc: *mut cudnnCTCLossDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetCTCLossDescriptor: Result<
        unsafe extern "C" fn(
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            compType: cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetCTCLossDescriptorEx: Result<
        unsafe extern "C" fn(
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            compType: cudnnDataType_t,
            normMode: cudnnLossNormalizationMode_t,
            gradMode: cudnnNanPropagation_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetCTCLossDescriptor_v8: Result<
        unsafe extern "C" fn(
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            compType: cudnnDataType_t,
            normMode: cudnnLossNormalizationMode_t,
            gradMode: cudnnNanPropagation_t,
            maxLabelLength: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetCTCLossDescriptor: Result<
        unsafe extern "C" fn(
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            compType: *mut cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetCTCLossDescriptorEx: Result<
        unsafe extern "C" fn(
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            compType: *mut cudnnDataType_t,
            normMode: *mut cudnnLossNormalizationMode_t,
            gradMode: *mut cudnnNanPropagation_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetCTCLossDescriptor_v8: Result<
        unsafe extern "C" fn(
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            compType: *mut cudnnDataType_t,
            normMode: *mut cudnnLossNormalizationMode_t,
            gradMode: *mut cudnnNanPropagation_t,
            maxLabelLength: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyCTCLossDescriptor: Result<
        unsafe extern "C" fn(ctcLossDesc: cudnnCTCLossDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCTCLoss: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            probsDesc: cudnnTensorDescriptor_t,
            probs: *const ::core::ffi::c_void,
            hostLabels: *const ::core::ffi::c_int,
            hostLabelLengths: *const ::core::ffi::c_int,
            hostInputLengths: *const ::core::ffi::c_int,
            costs: *mut ::core::ffi::c_void,
            gradientsDesc: cudnnTensorDescriptor_t,
            gradients: *mut ::core::ffi::c_void,
            algo: cudnnCTCLossAlgo_t,
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            workspace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCTCLoss_v8: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algo: cudnnCTCLossAlgo_t,
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            probsDesc: cudnnTensorDescriptor_t,
            probs: *const ::core::ffi::c_void,
            labels: *const ::core::ffi::c_int,
            labelLengths: *const ::core::ffi::c_int,
            inputLengths: *const ::core::ffi::c_int,
            costs: *mut ::core::ffi::c_void,
            gradientsDesc: cudnnTensorDescriptor_t,
            gradients: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            workspace: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetCTCLossWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            probsDesc: cudnnTensorDescriptor_t,
            gradientsDesc: cudnnTensorDescriptor_t,
            labels: *const ::core::ffi::c_int,
            labelLengths: *const ::core::ffi::c_int,
            inputLengths: *const ::core::ffi::c_int,
            algo: cudnnCTCLossAlgo_t,
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetCTCLossWorkspaceSize_v8: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            algo: cudnnCTCLossAlgo_t,
            ctcLossDesc: cudnnCTCLossDescriptor_t,
            probsDesc: cudnnTensorDescriptor_t,
            gradientsDesc: cudnnTensorDescriptor_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnAdvTrainVersionCheck:
        Result<unsafe extern "C" fn() -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnCreateConvolutionDescriptor: Result<
        unsafe extern "C" fn(convDesc: *mut cudnnConvolutionDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyConvolutionDescriptor: Result<
        unsafe extern "C" fn(convDesc: cudnnConvolutionDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetConvolutionMathType: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            mathType: cudnnMathType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionMathType: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            mathType: *mut cudnnMathType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetConvolutionGroupCount: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            groupCount: ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionGroupCount: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            groupCount: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetConvolutionReorderType: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            reorderType: cudnnReorderType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionReorderType: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            reorderType: *mut cudnnReorderType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetConvolution2dDescriptor: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            pad_h: ::core::ffi::c_int,
            pad_w: ::core::ffi::c_int,
            u: ::core::ffi::c_int,
            v: ::core::ffi::c_int,
            dilation_h: ::core::ffi::c_int,
            dilation_w: ::core::ffi::c_int,
            mode: cudnnConvolutionMode_t,
            computeType: cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolution2dDescriptor: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            pad_h: *mut ::core::ffi::c_int,
            pad_w: *mut ::core::ffi::c_int,
            u: *mut ::core::ffi::c_int,
            v: *mut ::core::ffi::c_int,
            dilation_h: *mut ::core::ffi::c_int,
            dilation_w: *mut ::core::ffi::c_int,
            mode: *mut cudnnConvolutionMode_t,
            computeType: *mut cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetConvolutionNdDescriptor: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            arrayLength: ::core::ffi::c_int,
            padA: *const ::core::ffi::c_int,
            filterStrideA: *const ::core::ffi::c_int,
            dilationA: *const ::core::ffi::c_int,
            mode: cudnnConvolutionMode_t,
            computeType: cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionNdDescriptor: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            arrayLengthRequested: ::core::ffi::c_int,
            arrayLength: *mut ::core::ffi::c_int,
            padA: *mut ::core::ffi::c_int,
            strideA: *mut ::core::ffi::c_int,
            dilationA: *mut ::core::ffi::c_int,
            mode: *mut cudnnConvolutionMode_t,
            computeType: *mut cudnnDataType_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolution2dForwardOutputDim: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            inputTensorDesc: cudnnTensorDescriptor_t,
            filterDesc: cudnnFilterDescriptor_t,
            n: *mut ::core::ffi::c_int,
            c: *mut ::core::ffi::c_int,
            h: *mut ::core::ffi::c_int,
            w: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionNdForwardOutputDim: Result<
        unsafe extern "C" fn(
            convDesc: cudnnConvolutionDescriptor_t,
            inputTensorDesc: cudnnTensorDescriptor_t,
            filterDesc: cudnnFilterDescriptor_t,
            nbDims: ::core::ffi::c_int,
            tensorOuputDimA: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionForwardAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionForwardAlgorithm_v7: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            srcDesc: cudnnTensorDescriptor_t,
            filterDesc: cudnnFilterDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            destDesc: cudnnTensorDescriptor_t,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindConvolutionForwardAlgorithm: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            wDesc: cudnnFilterDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindConvolutionForwardAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnIm2Col: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            colBuffer: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnReorderFilterAndBias: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            filterDesc: cudnnFilterDescriptor_t,
            reorderType: cudnnReorderType_t,
            filterData: *const ::core::ffi::c_void,
            reorderedFilterData: *mut ::core::ffi::c_void,
            reorderBias: ::core::ffi::c_int,
            biasData: *const ::core::ffi::c_void,
            reorderedBiasData: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionForwardWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            wDesc: cudnnFilterDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            algo: cudnnConvolutionFwdAlgo_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnConvolutionForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            algo: cudnnConvolutionFwdAlgo_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            beta: *const ::core::ffi::c_void,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnConvolutionBiasActivationForward: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha1: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            algo: cudnnConvolutionFwdAlgo_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            alpha2: *const ::core::ffi::c_void,
            zDesc: cudnnTensorDescriptor_t,
            z: *const ::core::ffi::c_void,
            biasDesc: cudnnTensorDescriptor_t,
            bias: *const ::core::ffi::c_void,
            activationDesc: cudnnActivationDescriptor_t,
            yDesc: cudnnTensorDescriptor_t,
            y: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionBackwardDataAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindConvolutionBackwardDataAlgorithm: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            wDesc: cudnnFilterDescriptor_t,
            dyDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            dxDesc: cudnnTensorDescriptor_t,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindConvolutionBackwardDataAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionBackwardDataAlgorithm_v7: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            filterDesc: cudnnFilterDescriptor_t,
            diffDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            gradDesc: cudnnTensorDescriptor_t,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionBackwardDataWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            wDesc: cudnnFilterDescriptor_t,
            dyDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            dxDesc: cudnnTensorDescriptor_t,
            algo: cudnnConvolutionBwdDataAlgo_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnConvolutionBackwardData: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha: *const ::core::ffi::c_void,
            wDesc: cudnnFilterDescriptor_t,
            w: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            algo: cudnnConvolutionBwdDataAlgo_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            beta: *const ::core::ffi::c_void,
            dxDesc: cudnnTensorDescriptor_t,
            dx: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetFoldedConvBackwardDataDescriptors: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            filterDesc: cudnnFilterDescriptor_t,
            diffDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            gradDesc: cudnnTensorDescriptor_t,
            transformFormat: cudnnTensorFormat_t,
            foldedFilterDesc: cudnnFilterDescriptor_t,
            paddedDiffDesc: cudnnTensorDescriptor_t,
            foldedConvDesc: cudnnConvolutionDescriptor_t,
            foldedGradDesc: cudnnTensorDescriptor_t,
            filterFoldTransDesc: cudnnTensorTransformDescriptor_t,
            diffPadTransDesc: cudnnTensorTransformDescriptor_t,
            gradFoldTransDesc: cudnnTensorTransformDescriptor_t,
            gradUnfoldTransDesc: cudnnTensorTransformDescriptor_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCnnInferVersionCheck:
        Result<unsafe extern "C" fn() -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnGetConvolutionBackwardFilterAlgorithmMaxCount: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            count: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindConvolutionBackwardFilterAlgorithm: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            dyDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            dwDesc: cudnnFilterDescriptor_t,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFindConvolutionBackwardFilterAlgorithmEx: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            y: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            dwDesc: cudnnFilterDescriptor_t,
            dw: *mut ::core::ffi::c_void,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionBackwardFilterAlgorithm_v7: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            srcDesc: cudnnTensorDescriptor_t,
            diffDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            gradDesc: cudnnFilterDescriptor_t,
            requestedAlgoCount: ::core::ffi::c_int,
            returnedAlgoCount: *mut ::core::ffi::c_int,
            perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetConvolutionBackwardFilterWorkspaceSize: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            xDesc: cudnnTensorDescriptor_t,
            dyDesc: cudnnTensorDescriptor_t,
            convDesc: cudnnConvolutionDescriptor_t,
            gradDesc: cudnnFilterDescriptor_t,
            algo: cudnnConvolutionBwdFilterAlgo_t,
            sizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnConvolutionBackwardFilter: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha: *const ::core::ffi::c_void,
            xDesc: cudnnTensorDescriptor_t,
            x: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            convDesc: cudnnConvolutionDescriptor_t,
            algo: cudnnConvolutionBwdFilterAlgo_t,
            workSpace: *mut ::core::ffi::c_void,
            workSpaceSizeInBytes: usize,
            beta: *const ::core::ffi::c_void,
            dwDesc: cudnnFilterDescriptor_t,
            dw: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnConvolutionBackwardBias: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            alpha: *const ::core::ffi::c_void,
            dyDesc: cudnnTensorDescriptor_t,
            dy: *const ::core::ffi::c_void,
            beta: *const ::core::ffi::c_void,
            dbDesc: cudnnTensorDescriptor_t,
            db: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateFusedOpsConstParamPack: Result<
        unsafe extern "C" fn(
            constPack: *mut cudnnFusedOpsConstParamPack_t,
            ops: cudnnFusedOps_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyFusedOpsConstParamPack: Result<
        unsafe extern "C" fn(constPack: cudnnFusedOpsConstParamPack_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetFusedOpsConstParamPackAttribute: Result<
        unsafe extern "C" fn(
            constPack: cudnnFusedOpsConstParamPack_t,
            paramLabel: cudnnFusedOpsConstParamLabel_t,
            param: *const ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetFusedOpsConstParamPackAttribute: Result<
        unsafe extern "C" fn(
            constPack: cudnnFusedOpsConstParamPack_t,
            paramLabel: cudnnFusedOpsConstParamLabel_t,
            param: *mut ::core::ffi::c_void,
            isNULL: *mut ::core::ffi::c_int,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateFusedOpsVariantParamPack: Result<
        unsafe extern "C" fn(
            varPack: *mut cudnnFusedOpsVariantParamPack_t,
            ops: cudnnFusedOps_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyFusedOpsVariantParamPack: Result<
        unsafe extern "C" fn(varPack: cudnnFusedOpsVariantParamPack_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnSetFusedOpsVariantParamPackAttribute: Result<
        unsafe extern "C" fn(
            varPack: cudnnFusedOpsVariantParamPack_t,
            paramLabel: cudnnFusedOpsVariantParamLabel_t,
            ptr: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnGetFusedOpsVariantParamPackAttribute: Result<
        unsafe extern "C" fn(
            varPack: cudnnFusedOpsVariantParamPack_t,
            paramLabel: cudnnFusedOpsVariantParamLabel_t,
            ptr: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCreateFusedOpsPlan: Result<
        unsafe extern "C" fn(plan: *mut cudnnFusedOpsPlan_t, ops: cudnnFusedOps_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnDestroyFusedOpsPlan: Result<
        unsafe extern "C" fn(plan: cudnnFusedOpsPlan_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnMakeFusedOpsPlan: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            plan: cudnnFusedOpsPlan_t,
            constPack: cudnnFusedOpsConstParamPack_t,
            workspaceSizeInBytes: *mut usize,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnFusedOpsExecute: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            plan: cudnnFusedOpsPlan_t,
            varPack: cudnnFusedOpsVariantParamPack_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnCnnTrainVersionCheck:
        Result<unsafe extern "C" fn() -> cudnnStatus_t, ::libloading::Error>,
    pub cudnnBackendCreateDescriptor: Result<
        unsafe extern "C" fn(
            descriptorType: cudnnBackendDescriptorType_t,
            descriptor: *mut cudnnBackendDescriptor_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBackendDestroyDescriptor: Result<
        unsafe extern "C" fn(descriptor: cudnnBackendDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBackendInitialize: Result<
        unsafe extern "C" fn(descriptor: cudnnBackendDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBackendFinalize: Result<
        unsafe extern "C" fn(descriptor: cudnnBackendDescriptor_t) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBackendSetAttribute: Result<
        unsafe extern "C" fn(
            descriptor: cudnnBackendDescriptor_t,
            attributeName: cudnnBackendAttributeName_t,
            attributeType: cudnnBackendAttributeType_t,
            elementCount: i64,
            arrayOfElements: *const ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBackendGetAttribute: Result<
        unsafe extern "C" fn(
            descriptor: cudnnBackendDescriptor_t,
            attributeName: cudnnBackendAttributeName_t,
            attributeType: cudnnBackendAttributeType_t,
            requestedElementCount: i64,
            elementCount: *mut i64,
            arrayOfElements: *mut ::core::ffi::c_void,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
    pub cudnnBackendExecute: Result<
        unsafe extern "C" fn(
            handle: cudnnHandle_t,
            executionPlan: cudnnBackendDescriptor_t,
            variantPack: cudnnBackendDescriptor_t,
        ) -> cudnnStatus_t,
        ::libloading::Error,
    >,
}
impl Lib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let cudnnGetVersion = __library.get(b"cudnnGetVersion\0").map(|sym| *sym);
        let cudnnGetMaxDeviceVersion = __library.get(b"cudnnGetMaxDeviceVersion\0").map(|sym| *sym);
        let cudnnGetCudartVersion = __library.get(b"cudnnGetCudartVersion\0").map(|sym| *sym);
        let cudnnGetErrorString = __library.get(b"cudnnGetErrorString\0").map(|sym| *sym);
        let cudnnQueryRuntimeError = __library.get(b"cudnnQueryRuntimeError\0").map(|sym| *sym);
        let cudnnGetProperty = __library.get(b"cudnnGetProperty\0").map(|sym| *sym);
        let cudnnCreate = __library.get(b"cudnnCreate\0").map(|sym| *sym);
        let cudnnDestroy = __library.get(b"cudnnDestroy\0").map(|sym| *sym);
        let cudnnSetStream = __library.get(b"cudnnSetStream\0").map(|sym| *sym);
        let cudnnGetStream = __library.get(b"cudnnGetStream\0").map(|sym| *sym);
        let cudnnCreateTensorDescriptor = __library
            .get(b"cudnnCreateTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetTensor4dDescriptor = __library
            .get(b"cudnnSetTensor4dDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetTensor4dDescriptorEx = __library
            .get(b"cudnnSetTensor4dDescriptorEx\0")
            .map(|sym| *sym);
        let cudnnGetTensor4dDescriptor = __library
            .get(b"cudnnGetTensor4dDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetTensorNdDescriptor = __library
            .get(b"cudnnSetTensorNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetTensorNdDescriptorEx = __library
            .get(b"cudnnSetTensorNdDescriptorEx\0")
            .map(|sym| *sym);
        let cudnnGetTensorNdDescriptor = __library
            .get(b"cudnnGetTensorNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetTensorSizeInBytes = __library
            .get(b"cudnnGetTensorSizeInBytes\0")
            .map(|sym| *sym);
        let cudnnDestroyTensorDescriptor = __library
            .get(b"cudnnDestroyTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnInitTransformDest = __library.get(b"cudnnInitTransformDest\0").map(|sym| *sym);
        let cudnnCreateTensorTransformDescriptor = __library
            .get(b"cudnnCreateTensorTransformDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetTensorTransformDescriptor = __library
            .get(b"cudnnSetTensorTransformDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetTensorTransformDescriptor = __library
            .get(b"cudnnGetTensorTransformDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyTensorTransformDescriptor = __library
            .get(b"cudnnDestroyTensorTransformDescriptor\0")
            .map(|sym| *sym);
        let cudnnTransformTensor = __library.get(b"cudnnTransformTensor\0").map(|sym| *sym);
        let cudnnTransformTensorEx = __library.get(b"cudnnTransformTensorEx\0").map(|sym| *sym);
        let cudnnAddTensor = __library.get(b"cudnnAddTensor\0").map(|sym| *sym);
        let cudnnCreateOpTensorDescriptor = __library
            .get(b"cudnnCreateOpTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetOpTensorDescriptor = __library
            .get(b"cudnnSetOpTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetOpTensorDescriptor = __library
            .get(b"cudnnGetOpTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyOpTensorDescriptor = __library
            .get(b"cudnnDestroyOpTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnOpTensor = __library.get(b"cudnnOpTensor\0").map(|sym| *sym);
        let cudnnCreateReduceTensorDescriptor = __library
            .get(b"cudnnCreateReduceTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetReduceTensorDescriptor = __library
            .get(b"cudnnSetReduceTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetReduceTensorDescriptor = __library
            .get(b"cudnnGetReduceTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyReduceTensorDescriptor = __library
            .get(b"cudnnDestroyReduceTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetReductionIndicesSize = __library
            .get(b"cudnnGetReductionIndicesSize\0")
            .map(|sym| *sym);
        let cudnnGetReductionWorkspaceSize = __library
            .get(b"cudnnGetReductionWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnReduceTensor = __library.get(b"cudnnReduceTensor\0").map(|sym| *sym);
        let cudnnSetTensor = __library.get(b"cudnnSetTensor\0").map(|sym| *sym);
        let cudnnScaleTensor = __library.get(b"cudnnScaleTensor\0").map(|sym| *sym);
        let cudnnCreateFilterDescriptor = __library
            .get(b"cudnnCreateFilterDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetFilter4dDescriptor = __library
            .get(b"cudnnSetFilter4dDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetFilter4dDescriptor = __library
            .get(b"cudnnGetFilter4dDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetFilterNdDescriptor = __library
            .get(b"cudnnSetFilterNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetFilterNdDescriptor = __library
            .get(b"cudnnGetFilterNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetFilterSizeInBytes = __library
            .get(b"cudnnGetFilterSizeInBytes\0")
            .map(|sym| *sym);
        let cudnnTransformFilter = __library.get(b"cudnnTransformFilter\0").map(|sym| *sym);
        let cudnnDestroyFilterDescriptor = __library
            .get(b"cudnnDestroyFilterDescriptor\0")
            .map(|sym| *sym);
        let cudnnSoftmaxForward = __library.get(b"cudnnSoftmaxForward\0").map(|sym| *sym);
        let cudnnCreatePoolingDescriptor = __library
            .get(b"cudnnCreatePoolingDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetPooling2dDescriptor = __library
            .get(b"cudnnSetPooling2dDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetPooling2dDescriptor = __library
            .get(b"cudnnGetPooling2dDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetPoolingNdDescriptor = __library
            .get(b"cudnnSetPoolingNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetPoolingNdDescriptor = __library
            .get(b"cudnnGetPoolingNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetPoolingNdForwardOutputDim = __library
            .get(b"cudnnGetPoolingNdForwardOutputDim\0")
            .map(|sym| *sym);
        let cudnnGetPooling2dForwardOutputDim = __library
            .get(b"cudnnGetPooling2dForwardOutputDim\0")
            .map(|sym| *sym);
        let cudnnDestroyPoolingDescriptor = __library
            .get(b"cudnnDestroyPoolingDescriptor\0")
            .map(|sym| *sym);
        let cudnnPoolingForward = __library.get(b"cudnnPoolingForward\0").map(|sym| *sym);
        let cudnnCreateActivationDescriptor = __library
            .get(b"cudnnCreateActivationDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetActivationDescriptor = __library
            .get(b"cudnnSetActivationDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetActivationDescriptor = __library
            .get(b"cudnnGetActivationDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetActivationDescriptorSwishBeta = __library
            .get(b"cudnnSetActivationDescriptorSwishBeta\0")
            .map(|sym| *sym);
        let cudnnGetActivationDescriptorSwishBeta = __library
            .get(b"cudnnGetActivationDescriptorSwishBeta\0")
            .map(|sym| *sym);
        let cudnnDestroyActivationDescriptor = __library
            .get(b"cudnnDestroyActivationDescriptor\0")
            .map(|sym| *sym);
        let cudnnActivationForward = __library.get(b"cudnnActivationForward\0").map(|sym| *sym);
        let cudnnCreateLRNDescriptor = __library.get(b"cudnnCreateLRNDescriptor\0").map(|sym| *sym);
        let cudnnSetLRNDescriptor = __library.get(b"cudnnSetLRNDescriptor\0").map(|sym| *sym);
        let cudnnGetLRNDescriptor = __library.get(b"cudnnGetLRNDescriptor\0").map(|sym| *sym);
        let cudnnDestroyLRNDescriptor = __library
            .get(b"cudnnDestroyLRNDescriptor\0")
            .map(|sym| *sym);
        let cudnnLRNCrossChannelForward = __library
            .get(b"cudnnLRNCrossChannelForward\0")
            .map(|sym| *sym);
        let cudnnDivisiveNormalizationForward = __library
            .get(b"cudnnDivisiveNormalizationForward\0")
            .map(|sym| *sym);
        let cudnnDeriveBNTensorDescriptor = __library
            .get(b"cudnnDeriveBNTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnBatchNormalizationForwardInference = __library
            .get(b"cudnnBatchNormalizationForwardInference\0")
            .map(|sym| *sym);
        let cudnnDeriveNormTensorDescriptor = __library
            .get(b"cudnnDeriveNormTensorDescriptor\0")
            .map(|sym| *sym);
        let cudnnNormalizationForwardInference = __library
            .get(b"cudnnNormalizationForwardInference\0")
            .map(|sym| *sym);
        let cudnnCreateSpatialTransformerDescriptor = __library
            .get(b"cudnnCreateSpatialTransformerDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetSpatialTransformerNdDescriptor = __library
            .get(b"cudnnSetSpatialTransformerNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroySpatialTransformerDescriptor = __library
            .get(b"cudnnDestroySpatialTransformerDescriptor\0")
            .map(|sym| *sym);
        let cudnnSpatialTfGridGeneratorForward = __library
            .get(b"cudnnSpatialTfGridGeneratorForward\0")
            .map(|sym| *sym);
        let cudnnSpatialTfSamplerForward = __library
            .get(b"cudnnSpatialTfSamplerForward\0")
            .map(|sym| *sym);
        let cudnnCreateDropoutDescriptor = __library
            .get(b"cudnnCreateDropoutDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyDropoutDescriptor = __library
            .get(b"cudnnDestroyDropoutDescriptor\0")
            .map(|sym| *sym);
        let cudnnDropoutGetStatesSize = __library
            .get(b"cudnnDropoutGetStatesSize\0")
            .map(|sym| *sym);
        let cudnnDropoutGetReserveSpaceSize = __library
            .get(b"cudnnDropoutGetReserveSpaceSize\0")
            .map(|sym| *sym);
        let cudnnSetDropoutDescriptor = __library
            .get(b"cudnnSetDropoutDescriptor\0")
            .map(|sym| *sym);
        let cudnnRestoreDropoutDescriptor = __library
            .get(b"cudnnRestoreDropoutDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetDropoutDescriptor = __library
            .get(b"cudnnGetDropoutDescriptor\0")
            .map(|sym| *sym);
        let cudnnDropoutForward = __library.get(b"cudnnDropoutForward\0").map(|sym| *sym);
        let cudnnCreateAlgorithmDescriptor = __library
            .get(b"cudnnCreateAlgorithmDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetAlgorithmDescriptor = __library
            .get(b"cudnnSetAlgorithmDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetAlgorithmDescriptor = __library
            .get(b"cudnnGetAlgorithmDescriptor\0")
            .map(|sym| *sym);
        let cudnnCopyAlgorithmDescriptor = __library
            .get(b"cudnnCopyAlgorithmDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyAlgorithmDescriptor = __library
            .get(b"cudnnDestroyAlgorithmDescriptor\0")
            .map(|sym| *sym);
        let cudnnCreateAlgorithmPerformance = __library
            .get(b"cudnnCreateAlgorithmPerformance\0")
            .map(|sym| *sym);
        let cudnnSetAlgorithmPerformance = __library
            .get(b"cudnnSetAlgorithmPerformance\0")
            .map(|sym| *sym);
        let cudnnGetAlgorithmPerformance = __library
            .get(b"cudnnGetAlgorithmPerformance\0")
            .map(|sym| *sym);
        let cudnnDestroyAlgorithmPerformance = __library
            .get(b"cudnnDestroyAlgorithmPerformance\0")
            .map(|sym| *sym);
        let cudnnGetAlgorithmSpaceSize = __library
            .get(b"cudnnGetAlgorithmSpaceSize\0")
            .map(|sym| *sym);
        let cudnnSaveAlgorithm = __library.get(b"cudnnSaveAlgorithm\0").map(|sym| *sym);
        let cudnnRestoreAlgorithm = __library.get(b"cudnnRestoreAlgorithm\0").map(|sym| *sym);
        let cudnnSetCallback = __library.get(b"cudnnSetCallback\0").map(|sym| *sym);
        let cudnnGetCallback = __library.get(b"cudnnGetCallback\0").map(|sym| *sym);
        let cudnnOpsInferVersionCheck = __library
            .get(b"cudnnOpsInferVersionCheck\0")
            .map(|sym| *sym);
        let cudnnSoftmaxBackward = __library.get(b"cudnnSoftmaxBackward\0").map(|sym| *sym);
        let cudnnPoolingBackward = __library.get(b"cudnnPoolingBackward\0").map(|sym| *sym);
        let cudnnActivationBackward = __library.get(b"cudnnActivationBackward\0").map(|sym| *sym);
        let cudnnLRNCrossChannelBackward = __library
            .get(b"cudnnLRNCrossChannelBackward\0")
            .map(|sym| *sym);
        let cudnnDivisiveNormalizationBackward = __library
            .get(b"cudnnDivisiveNormalizationBackward\0")
            .map(|sym| *sym);
        let cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize = __library
            .get(b"cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnGetBatchNormalizationBackwardExWorkspaceSize = __library
            .get(b"cudnnGetBatchNormalizationBackwardExWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnGetBatchNormalizationTrainingExReserveSpaceSize = __library
            .get(b"cudnnGetBatchNormalizationTrainingExReserveSpaceSize\0")
            .map(|sym| *sym);
        let cudnnBatchNormalizationForwardTraining = __library
            .get(b"cudnnBatchNormalizationForwardTraining\0")
            .map(|sym| *sym);
        let cudnnBatchNormalizationForwardTrainingEx = __library
            .get(b"cudnnBatchNormalizationForwardTrainingEx\0")
            .map(|sym| *sym);
        let cudnnBatchNormalizationBackward = __library
            .get(b"cudnnBatchNormalizationBackward\0")
            .map(|sym| *sym);
        let cudnnBatchNormalizationBackwardEx = __library
            .get(b"cudnnBatchNormalizationBackwardEx\0")
            .map(|sym| *sym);
        let cudnnGetNormalizationForwardTrainingWorkspaceSize = __library
            .get(b"cudnnGetNormalizationForwardTrainingWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnGetNormalizationBackwardWorkspaceSize = __library
            .get(b"cudnnGetNormalizationBackwardWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnGetNormalizationTrainingReserveSpaceSize = __library
            .get(b"cudnnGetNormalizationTrainingReserveSpaceSize\0")
            .map(|sym| *sym);
        let cudnnNormalizationForwardTraining = __library
            .get(b"cudnnNormalizationForwardTraining\0")
            .map(|sym| *sym);
        let cudnnNormalizationBackward = __library
            .get(b"cudnnNormalizationBackward\0")
            .map(|sym| *sym);
        let cudnnSpatialTfGridGeneratorBackward = __library
            .get(b"cudnnSpatialTfGridGeneratorBackward\0")
            .map(|sym| *sym);
        let cudnnSpatialTfSamplerBackward = __library
            .get(b"cudnnSpatialTfSamplerBackward\0")
            .map(|sym| *sym);
        let cudnnDropoutBackward = __library.get(b"cudnnDropoutBackward\0").map(|sym| *sym);
        let cudnnOpsTrainVersionCheck = __library
            .get(b"cudnnOpsTrainVersionCheck\0")
            .map(|sym| *sym);
        let cudnnCreateRNNDescriptor = __library.get(b"cudnnCreateRNNDescriptor\0").map(|sym| *sym);
        let cudnnDestroyRNNDescriptor = __library
            .get(b"cudnnDestroyRNNDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetRNNDescriptor_v8 = __library.get(b"cudnnSetRNNDescriptor_v8\0").map(|sym| *sym);
        let cudnnGetRNNDescriptor_v8 = __library.get(b"cudnnGetRNNDescriptor_v8\0").map(|sym| *sym);
        let cudnnSetRNNDescriptor_v6 = __library.get(b"cudnnSetRNNDescriptor_v6\0").map(|sym| *sym);
        let cudnnGetRNNDescriptor_v6 = __library.get(b"cudnnGetRNNDescriptor_v6\0").map(|sym| *sym);
        let cudnnSetRNNMatrixMathType = __library
            .get(b"cudnnSetRNNMatrixMathType\0")
            .map(|sym| *sym);
        let cudnnGetRNNMatrixMathType = __library
            .get(b"cudnnGetRNNMatrixMathType\0")
            .map(|sym| *sym);
        let cudnnSetRNNBiasMode = __library.get(b"cudnnSetRNNBiasMode\0").map(|sym| *sym);
        let cudnnGetRNNBiasMode = __library.get(b"cudnnGetRNNBiasMode\0").map(|sym| *sym);
        let cudnnRNNSetClip_v8 = __library.get(b"cudnnRNNSetClip_v8\0").map(|sym| *sym);
        let cudnnRNNGetClip_v8 = __library.get(b"cudnnRNNGetClip_v8\0").map(|sym| *sym);
        let cudnnRNNSetClip = __library.get(b"cudnnRNNSetClip\0").map(|sym| *sym);
        let cudnnRNNGetClip = __library.get(b"cudnnRNNGetClip\0").map(|sym| *sym);
        let cudnnSetRNNProjectionLayers = __library
            .get(b"cudnnSetRNNProjectionLayers\0")
            .map(|sym| *sym);
        let cudnnGetRNNProjectionLayers = __library
            .get(b"cudnnGetRNNProjectionLayers\0")
            .map(|sym| *sym);
        let cudnnCreatePersistentRNNPlan = __library
            .get(b"cudnnCreatePersistentRNNPlan\0")
            .map(|sym| *sym);
        let cudnnDestroyPersistentRNNPlan = __library
            .get(b"cudnnDestroyPersistentRNNPlan\0")
            .map(|sym| *sym);
        let cudnnSetPersistentRNNPlan = __library
            .get(b"cudnnSetPersistentRNNPlan\0")
            .map(|sym| *sym);
        let cudnnBuildRNNDynamic = __library.get(b"cudnnBuildRNNDynamic\0").map(|sym| *sym);
        let cudnnGetRNNWorkspaceSize = __library.get(b"cudnnGetRNNWorkspaceSize\0").map(|sym| *sym);
        let cudnnGetRNNTrainingReserveSize = __library
            .get(b"cudnnGetRNNTrainingReserveSize\0")
            .map(|sym| *sym);
        let cudnnGetRNNTempSpaceSizes = __library
            .get(b"cudnnGetRNNTempSpaceSizes\0")
            .map(|sym| *sym);
        let cudnnGetRNNParamsSize = __library.get(b"cudnnGetRNNParamsSize\0").map(|sym| *sym);
        let cudnnGetRNNWeightSpaceSize = __library
            .get(b"cudnnGetRNNWeightSpaceSize\0")
            .map(|sym| *sym);
        let cudnnGetRNNLinLayerMatrixParams = __library
            .get(b"cudnnGetRNNLinLayerMatrixParams\0")
            .map(|sym| *sym);
        let cudnnGetRNNLinLayerBiasParams = __library
            .get(b"cudnnGetRNNLinLayerBiasParams\0")
            .map(|sym| *sym);
        let cudnnGetRNNWeightParams = __library.get(b"cudnnGetRNNWeightParams\0").map(|sym| *sym);
        let cudnnRNNForwardInference = __library.get(b"cudnnRNNForwardInference\0").map(|sym| *sym);
        let cudnnSetRNNPaddingMode = __library.get(b"cudnnSetRNNPaddingMode\0").map(|sym| *sym);
        let cudnnGetRNNPaddingMode = __library.get(b"cudnnGetRNNPaddingMode\0").map(|sym| *sym);
        let cudnnCreateRNNDataDescriptor = __library
            .get(b"cudnnCreateRNNDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyRNNDataDescriptor = __library
            .get(b"cudnnDestroyRNNDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetRNNDataDescriptor = __library
            .get(b"cudnnSetRNNDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetRNNDataDescriptor = __library
            .get(b"cudnnGetRNNDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnRNNForwardInferenceEx = __library
            .get(b"cudnnRNNForwardInferenceEx\0")
            .map(|sym| *sym);
        let cudnnRNNForward = __library.get(b"cudnnRNNForward\0").map(|sym| *sym);
        let cudnnSetRNNAlgorithmDescriptor = __library
            .get(b"cudnnSetRNNAlgorithmDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetRNNForwardInferenceAlgorithmMaxCount = __library
            .get(b"cudnnGetRNNForwardInferenceAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnFindRNNForwardInferenceAlgorithmEx = __library
            .get(b"cudnnFindRNNForwardInferenceAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnCreateSeqDataDescriptor = __library
            .get(b"cudnnCreateSeqDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroySeqDataDescriptor = __library
            .get(b"cudnnDestroySeqDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetSeqDataDescriptor = __library
            .get(b"cudnnSetSeqDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetSeqDataDescriptor = __library
            .get(b"cudnnGetSeqDataDescriptor\0")
            .map(|sym| *sym);
        let cudnnCreateAttnDescriptor = __library
            .get(b"cudnnCreateAttnDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyAttnDescriptor = __library
            .get(b"cudnnDestroyAttnDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetAttnDescriptor = __library.get(b"cudnnSetAttnDescriptor\0").map(|sym| *sym);
        let cudnnGetAttnDescriptor = __library.get(b"cudnnGetAttnDescriptor\0").map(|sym| *sym);
        let cudnnGetMultiHeadAttnBuffers = __library
            .get(b"cudnnGetMultiHeadAttnBuffers\0")
            .map(|sym| *sym);
        let cudnnGetMultiHeadAttnWeights = __library
            .get(b"cudnnGetMultiHeadAttnWeights\0")
            .map(|sym| *sym);
        let cudnnMultiHeadAttnForward = __library
            .get(b"cudnnMultiHeadAttnForward\0")
            .map(|sym| *sym);
        let cudnnAdvInferVersionCheck = __library
            .get(b"cudnnAdvInferVersionCheck\0")
            .map(|sym| *sym);
        let cudnnRNNForwardTraining = __library.get(b"cudnnRNNForwardTraining\0").map(|sym| *sym);
        let cudnnRNNBackwardData = __library.get(b"cudnnRNNBackwardData\0").map(|sym| *sym);
        let cudnnRNNBackwardData_v8 = __library.get(b"cudnnRNNBackwardData_v8\0").map(|sym| *sym);
        let cudnnRNNBackwardWeights = __library.get(b"cudnnRNNBackwardWeights\0").map(|sym| *sym);
        let cudnnRNNBackwardWeights_v8 = __library
            .get(b"cudnnRNNBackwardWeights_v8\0")
            .map(|sym| *sym);
        let cudnnRNNForwardTrainingEx = __library
            .get(b"cudnnRNNForwardTrainingEx\0")
            .map(|sym| *sym);
        let cudnnRNNBackwardDataEx = __library.get(b"cudnnRNNBackwardDataEx\0").map(|sym| *sym);
        let cudnnRNNBackwardWeightsEx = __library
            .get(b"cudnnRNNBackwardWeightsEx\0")
            .map(|sym| *sym);
        let cudnnGetRNNForwardTrainingAlgorithmMaxCount = __library
            .get(b"cudnnGetRNNForwardTrainingAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnFindRNNForwardTrainingAlgorithmEx = __library
            .get(b"cudnnFindRNNForwardTrainingAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnGetRNNBackwardDataAlgorithmMaxCount = __library
            .get(b"cudnnGetRNNBackwardDataAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnFindRNNBackwardDataAlgorithmEx = __library
            .get(b"cudnnFindRNNBackwardDataAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnGetRNNBackwardWeightsAlgorithmMaxCount = __library
            .get(b"cudnnGetRNNBackwardWeightsAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnFindRNNBackwardWeightsAlgorithmEx = __library
            .get(b"cudnnFindRNNBackwardWeightsAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnMultiHeadAttnBackwardData = __library
            .get(b"cudnnMultiHeadAttnBackwardData\0")
            .map(|sym| *sym);
        let cudnnMultiHeadAttnBackwardWeights = __library
            .get(b"cudnnMultiHeadAttnBackwardWeights\0")
            .map(|sym| *sym);
        let cudnnCreateCTCLossDescriptor = __library
            .get(b"cudnnCreateCTCLossDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetCTCLossDescriptor = __library
            .get(b"cudnnSetCTCLossDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetCTCLossDescriptorEx = __library
            .get(b"cudnnSetCTCLossDescriptorEx\0")
            .map(|sym| *sym);
        let cudnnSetCTCLossDescriptor_v8 = __library
            .get(b"cudnnSetCTCLossDescriptor_v8\0")
            .map(|sym| *sym);
        let cudnnGetCTCLossDescriptor = __library
            .get(b"cudnnGetCTCLossDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetCTCLossDescriptorEx = __library
            .get(b"cudnnGetCTCLossDescriptorEx\0")
            .map(|sym| *sym);
        let cudnnGetCTCLossDescriptor_v8 = __library
            .get(b"cudnnGetCTCLossDescriptor_v8\0")
            .map(|sym| *sym);
        let cudnnDestroyCTCLossDescriptor = __library
            .get(b"cudnnDestroyCTCLossDescriptor\0")
            .map(|sym| *sym);
        let cudnnCTCLoss = __library.get(b"cudnnCTCLoss\0").map(|sym| *sym);
        let cudnnCTCLoss_v8 = __library.get(b"cudnnCTCLoss_v8\0").map(|sym| *sym);
        let cudnnGetCTCLossWorkspaceSize = __library
            .get(b"cudnnGetCTCLossWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnGetCTCLossWorkspaceSize_v8 = __library
            .get(b"cudnnGetCTCLossWorkspaceSize_v8\0")
            .map(|sym| *sym);
        let cudnnAdvTrainVersionCheck = __library
            .get(b"cudnnAdvTrainVersionCheck\0")
            .map(|sym| *sym);
        let cudnnCreateConvolutionDescriptor = __library
            .get(b"cudnnCreateConvolutionDescriptor\0")
            .map(|sym| *sym);
        let cudnnDestroyConvolutionDescriptor = __library
            .get(b"cudnnDestroyConvolutionDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetConvolutionMathType = __library
            .get(b"cudnnSetConvolutionMathType\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionMathType = __library
            .get(b"cudnnGetConvolutionMathType\0")
            .map(|sym| *sym);
        let cudnnSetConvolutionGroupCount = __library
            .get(b"cudnnSetConvolutionGroupCount\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionGroupCount = __library
            .get(b"cudnnGetConvolutionGroupCount\0")
            .map(|sym| *sym);
        let cudnnSetConvolutionReorderType = __library
            .get(b"cudnnSetConvolutionReorderType\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionReorderType = __library
            .get(b"cudnnGetConvolutionReorderType\0")
            .map(|sym| *sym);
        let cudnnSetConvolution2dDescriptor = __library
            .get(b"cudnnSetConvolution2dDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetConvolution2dDescriptor = __library
            .get(b"cudnnGetConvolution2dDescriptor\0")
            .map(|sym| *sym);
        let cudnnSetConvolutionNdDescriptor = __library
            .get(b"cudnnSetConvolutionNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionNdDescriptor = __library
            .get(b"cudnnGetConvolutionNdDescriptor\0")
            .map(|sym| *sym);
        let cudnnGetConvolution2dForwardOutputDim = __library
            .get(b"cudnnGetConvolution2dForwardOutputDim\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionNdForwardOutputDim = __library
            .get(b"cudnnGetConvolutionNdForwardOutputDim\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionForwardAlgorithmMaxCount = __library
            .get(b"cudnnGetConvolutionForwardAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionForwardAlgorithm_v7 = __library
            .get(b"cudnnGetConvolutionForwardAlgorithm_v7\0")
            .map(|sym| *sym);
        let cudnnFindConvolutionForwardAlgorithm = __library
            .get(b"cudnnFindConvolutionForwardAlgorithm\0")
            .map(|sym| *sym);
        let cudnnFindConvolutionForwardAlgorithmEx = __library
            .get(b"cudnnFindConvolutionForwardAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnIm2Col = __library.get(b"cudnnIm2Col\0").map(|sym| *sym);
        let cudnnReorderFilterAndBias = __library
            .get(b"cudnnReorderFilterAndBias\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionForwardWorkspaceSize = __library
            .get(b"cudnnGetConvolutionForwardWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnConvolutionForward = __library.get(b"cudnnConvolutionForward\0").map(|sym| *sym);
        let cudnnConvolutionBiasActivationForward = __library
            .get(b"cudnnConvolutionBiasActivationForward\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionBackwardDataAlgorithmMaxCount = __library
            .get(b"cudnnGetConvolutionBackwardDataAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnFindConvolutionBackwardDataAlgorithm = __library
            .get(b"cudnnFindConvolutionBackwardDataAlgorithm\0")
            .map(|sym| *sym);
        let cudnnFindConvolutionBackwardDataAlgorithmEx = __library
            .get(b"cudnnFindConvolutionBackwardDataAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionBackwardDataAlgorithm_v7 = __library
            .get(b"cudnnGetConvolutionBackwardDataAlgorithm_v7\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionBackwardDataWorkspaceSize = __library
            .get(b"cudnnGetConvolutionBackwardDataWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnConvolutionBackwardData = __library
            .get(b"cudnnConvolutionBackwardData\0")
            .map(|sym| *sym);
        let cudnnGetFoldedConvBackwardDataDescriptors = __library
            .get(b"cudnnGetFoldedConvBackwardDataDescriptors\0")
            .map(|sym| *sym);
        let cudnnCnnInferVersionCheck = __library
            .get(b"cudnnCnnInferVersionCheck\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionBackwardFilterAlgorithmMaxCount = __library
            .get(b"cudnnGetConvolutionBackwardFilterAlgorithmMaxCount\0")
            .map(|sym| *sym);
        let cudnnFindConvolutionBackwardFilterAlgorithm = __library
            .get(b"cudnnFindConvolutionBackwardFilterAlgorithm\0")
            .map(|sym| *sym);
        let cudnnFindConvolutionBackwardFilterAlgorithmEx = __library
            .get(b"cudnnFindConvolutionBackwardFilterAlgorithmEx\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionBackwardFilterAlgorithm_v7 = __library
            .get(b"cudnnGetConvolutionBackwardFilterAlgorithm_v7\0")
            .map(|sym| *sym);
        let cudnnGetConvolutionBackwardFilterWorkspaceSize = __library
            .get(b"cudnnGetConvolutionBackwardFilterWorkspaceSize\0")
            .map(|sym| *sym);
        let cudnnConvolutionBackwardFilter = __library
            .get(b"cudnnConvolutionBackwardFilter\0")
            .map(|sym| *sym);
        let cudnnConvolutionBackwardBias = __library
            .get(b"cudnnConvolutionBackwardBias\0")
            .map(|sym| *sym);
        let cudnnCreateFusedOpsConstParamPack = __library
            .get(b"cudnnCreateFusedOpsConstParamPack\0")
            .map(|sym| *sym);
        let cudnnDestroyFusedOpsConstParamPack = __library
            .get(b"cudnnDestroyFusedOpsConstParamPack\0")
            .map(|sym| *sym);
        let cudnnSetFusedOpsConstParamPackAttribute = __library
            .get(b"cudnnSetFusedOpsConstParamPackAttribute\0")
            .map(|sym| *sym);
        let cudnnGetFusedOpsConstParamPackAttribute = __library
            .get(b"cudnnGetFusedOpsConstParamPackAttribute\0")
            .map(|sym| *sym);
        let cudnnCreateFusedOpsVariantParamPack = __library
            .get(b"cudnnCreateFusedOpsVariantParamPack\0")
            .map(|sym| *sym);
        let cudnnDestroyFusedOpsVariantParamPack = __library
            .get(b"cudnnDestroyFusedOpsVariantParamPack\0")
            .map(|sym| *sym);
        let cudnnSetFusedOpsVariantParamPackAttribute = __library
            .get(b"cudnnSetFusedOpsVariantParamPackAttribute\0")
            .map(|sym| *sym);
        let cudnnGetFusedOpsVariantParamPackAttribute = __library
            .get(b"cudnnGetFusedOpsVariantParamPackAttribute\0")
            .map(|sym| *sym);
        let cudnnCreateFusedOpsPlan = __library.get(b"cudnnCreateFusedOpsPlan\0").map(|sym| *sym);
        let cudnnDestroyFusedOpsPlan = __library.get(b"cudnnDestroyFusedOpsPlan\0").map(|sym| *sym);
        let cudnnMakeFusedOpsPlan = __library.get(b"cudnnMakeFusedOpsPlan\0").map(|sym| *sym);
        let cudnnFusedOpsExecute = __library.get(b"cudnnFusedOpsExecute\0").map(|sym| *sym);
        let cudnnCnnTrainVersionCheck = __library
            .get(b"cudnnCnnTrainVersionCheck\0")
            .map(|sym| *sym);
        let cudnnBackendCreateDescriptor = __library
            .get(b"cudnnBackendCreateDescriptor\0")
            .map(|sym| *sym);
        let cudnnBackendDestroyDescriptor = __library
            .get(b"cudnnBackendDestroyDescriptor\0")
            .map(|sym| *sym);
        let cudnnBackendInitialize = __library.get(b"cudnnBackendInitialize\0").map(|sym| *sym);
        let cudnnBackendFinalize = __library.get(b"cudnnBackendFinalize\0").map(|sym| *sym);
        let cudnnBackendSetAttribute = __library.get(b"cudnnBackendSetAttribute\0").map(|sym| *sym);
        let cudnnBackendGetAttribute = __library.get(b"cudnnBackendGetAttribute\0").map(|sym| *sym);
        let cudnnBackendExecute = __library.get(b"cudnnBackendExecute\0").map(|sym| *sym);
        Ok(Lib {
            __library,
            cudnnGetVersion,
            cudnnGetMaxDeviceVersion,
            cudnnGetCudartVersion,
            cudnnGetErrorString,
            cudnnQueryRuntimeError,
            cudnnGetProperty,
            cudnnCreate,
            cudnnDestroy,
            cudnnSetStream,
            cudnnGetStream,
            cudnnCreateTensorDescriptor,
            cudnnSetTensor4dDescriptor,
            cudnnSetTensor4dDescriptorEx,
            cudnnGetTensor4dDescriptor,
            cudnnSetTensorNdDescriptor,
            cudnnSetTensorNdDescriptorEx,
            cudnnGetTensorNdDescriptor,
            cudnnGetTensorSizeInBytes,
            cudnnDestroyTensorDescriptor,
            cudnnInitTransformDest,
            cudnnCreateTensorTransformDescriptor,
            cudnnSetTensorTransformDescriptor,
            cudnnGetTensorTransformDescriptor,
            cudnnDestroyTensorTransformDescriptor,
            cudnnTransformTensor,
            cudnnTransformTensorEx,
            cudnnAddTensor,
            cudnnCreateOpTensorDescriptor,
            cudnnSetOpTensorDescriptor,
            cudnnGetOpTensorDescriptor,
            cudnnDestroyOpTensorDescriptor,
            cudnnOpTensor,
            cudnnCreateReduceTensorDescriptor,
            cudnnSetReduceTensorDescriptor,
            cudnnGetReduceTensorDescriptor,
            cudnnDestroyReduceTensorDescriptor,
            cudnnGetReductionIndicesSize,
            cudnnGetReductionWorkspaceSize,
            cudnnReduceTensor,
            cudnnSetTensor,
            cudnnScaleTensor,
            cudnnCreateFilterDescriptor,
            cudnnSetFilter4dDescriptor,
            cudnnGetFilter4dDescriptor,
            cudnnSetFilterNdDescriptor,
            cudnnGetFilterNdDescriptor,
            cudnnGetFilterSizeInBytes,
            cudnnTransformFilter,
            cudnnDestroyFilterDescriptor,
            cudnnSoftmaxForward,
            cudnnCreatePoolingDescriptor,
            cudnnSetPooling2dDescriptor,
            cudnnGetPooling2dDescriptor,
            cudnnSetPoolingNdDescriptor,
            cudnnGetPoolingNdDescriptor,
            cudnnGetPoolingNdForwardOutputDim,
            cudnnGetPooling2dForwardOutputDim,
            cudnnDestroyPoolingDescriptor,
            cudnnPoolingForward,
            cudnnCreateActivationDescriptor,
            cudnnSetActivationDescriptor,
            cudnnGetActivationDescriptor,
            cudnnSetActivationDescriptorSwishBeta,
            cudnnGetActivationDescriptorSwishBeta,
            cudnnDestroyActivationDescriptor,
            cudnnActivationForward,
            cudnnCreateLRNDescriptor,
            cudnnSetLRNDescriptor,
            cudnnGetLRNDescriptor,
            cudnnDestroyLRNDescriptor,
            cudnnLRNCrossChannelForward,
            cudnnDivisiveNormalizationForward,
            cudnnDeriveBNTensorDescriptor,
            cudnnBatchNormalizationForwardInference,
            cudnnDeriveNormTensorDescriptor,
            cudnnNormalizationForwardInference,
            cudnnCreateSpatialTransformerDescriptor,
            cudnnSetSpatialTransformerNdDescriptor,
            cudnnDestroySpatialTransformerDescriptor,
            cudnnSpatialTfGridGeneratorForward,
            cudnnSpatialTfSamplerForward,
            cudnnCreateDropoutDescriptor,
            cudnnDestroyDropoutDescriptor,
            cudnnDropoutGetStatesSize,
            cudnnDropoutGetReserveSpaceSize,
            cudnnSetDropoutDescriptor,
            cudnnRestoreDropoutDescriptor,
            cudnnGetDropoutDescriptor,
            cudnnDropoutForward,
            cudnnCreateAlgorithmDescriptor,
            cudnnSetAlgorithmDescriptor,
            cudnnGetAlgorithmDescriptor,
            cudnnCopyAlgorithmDescriptor,
            cudnnDestroyAlgorithmDescriptor,
            cudnnCreateAlgorithmPerformance,
            cudnnSetAlgorithmPerformance,
            cudnnGetAlgorithmPerformance,
            cudnnDestroyAlgorithmPerformance,
            cudnnGetAlgorithmSpaceSize,
            cudnnSaveAlgorithm,
            cudnnRestoreAlgorithm,
            cudnnSetCallback,
            cudnnGetCallback,
            cudnnOpsInferVersionCheck,
            cudnnSoftmaxBackward,
            cudnnPoolingBackward,
            cudnnActivationBackward,
            cudnnLRNCrossChannelBackward,
            cudnnDivisiveNormalizationBackward,
            cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize,
            cudnnGetBatchNormalizationBackwardExWorkspaceSize,
            cudnnGetBatchNormalizationTrainingExReserveSpaceSize,
            cudnnBatchNormalizationForwardTraining,
            cudnnBatchNormalizationForwardTrainingEx,
            cudnnBatchNormalizationBackward,
            cudnnBatchNormalizationBackwardEx,
            cudnnGetNormalizationForwardTrainingWorkspaceSize,
            cudnnGetNormalizationBackwardWorkspaceSize,
            cudnnGetNormalizationTrainingReserveSpaceSize,
            cudnnNormalizationForwardTraining,
            cudnnNormalizationBackward,
            cudnnSpatialTfGridGeneratorBackward,
            cudnnSpatialTfSamplerBackward,
            cudnnDropoutBackward,
            cudnnOpsTrainVersionCheck,
            cudnnCreateRNNDescriptor,
            cudnnDestroyRNNDescriptor,
            cudnnSetRNNDescriptor_v8,
            cudnnGetRNNDescriptor_v8,
            cudnnSetRNNDescriptor_v6,
            cudnnGetRNNDescriptor_v6,
            cudnnSetRNNMatrixMathType,
            cudnnGetRNNMatrixMathType,
            cudnnSetRNNBiasMode,
            cudnnGetRNNBiasMode,
            cudnnRNNSetClip_v8,
            cudnnRNNGetClip_v8,
            cudnnRNNSetClip,
            cudnnRNNGetClip,
            cudnnSetRNNProjectionLayers,
            cudnnGetRNNProjectionLayers,
            cudnnCreatePersistentRNNPlan,
            cudnnDestroyPersistentRNNPlan,
            cudnnSetPersistentRNNPlan,
            cudnnBuildRNNDynamic,
            cudnnGetRNNWorkspaceSize,
            cudnnGetRNNTrainingReserveSize,
            cudnnGetRNNTempSpaceSizes,
            cudnnGetRNNParamsSize,
            cudnnGetRNNWeightSpaceSize,
            cudnnGetRNNLinLayerMatrixParams,
            cudnnGetRNNLinLayerBiasParams,
            cudnnGetRNNWeightParams,
            cudnnRNNForwardInference,
            cudnnSetRNNPaddingMode,
            cudnnGetRNNPaddingMode,
            cudnnCreateRNNDataDescriptor,
            cudnnDestroyRNNDataDescriptor,
            cudnnSetRNNDataDescriptor,
            cudnnGetRNNDataDescriptor,
            cudnnRNNForwardInferenceEx,
            cudnnRNNForward,
            cudnnSetRNNAlgorithmDescriptor,
            cudnnGetRNNForwardInferenceAlgorithmMaxCount,
            cudnnFindRNNForwardInferenceAlgorithmEx,
            cudnnCreateSeqDataDescriptor,
            cudnnDestroySeqDataDescriptor,
            cudnnSetSeqDataDescriptor,
            cudnnGetSeqDataDescriptor,
            cudnnCreateAttnDescriptor,
            cudnnDestroyAttnDescriptor,
            cudnnSetAttnDescriptor,
            cudnnGetAttnDescriptor,
            cudnnGetMultiHeadAttnBuffers,
            cudnnGetMultiHeadAttnWeights,
            cudnnMultiHeadAttnForward,
            cudnnAdvInferVersionCheck,
            cudnnRNNForwardTraining,
            cudnnRNNBackwardData,
            cudnnRNNBackwardData_v8,
            cudnnRNNBackwardWeights,
            cudnnRNNBackwardWeights_v8,
            cudnnRNNForwardTrainingEx,
            cudnnRNNBackwardDataEx,
            cudnnRNNBackwardWeightsEx,
            cudnnGetRNNForwardTrainingAlgorithmMaxCount,
            cudnnFindRNNForwardTrainingAlgorithmEx,
            cudnnGetRNNBackwardDataAlgorithmMaxCount,
            cudnnFindRNNBackwardDataAlgorithmEx,
            cudnnGetRNNBackwardWeightsAlgorithmMaxCount,
            cudnnFindRNNBackwardWeightsAlgorithmEx,
            cudnnMultiHeadAttnBackwardData,
            cudnnMultiHeadAttnBackwardWeights,
            cudnnCreateCTCLossDescriptor,
            cudnnSetCTCLossDescriptor,
            cudnnSetCTCLossDescriptorEx,
            cudnnSetCTCLossDescriptor_v8,
            cudnnGetCTCLossDescriptor,
            cudnnGetCTCLossDescriptorEx,
            cudnnGetCTCLossDescriptor_v8,
            cudnnDestroyCTCLossDescriptor,
            cudnnCTCLoss,
            cudnnCTCLoss_v8,
            cudnnGetCTCLossWorkspaceSize,
            cudnnGetCTCLossWorkspaceSize_v8,
            cudnnAdvTrainVersionCheck,
            cudnnCreateConvolutionDescriptor,
            cudnnDestroyConvolutionDescriptor,
            cudnnSetConvolutionMathType,
            cudnnGetConvolutionMathType,
            cudnnSetConvolutionGroupCount,
            cudnnGetConvolutionGroupCount,
            cudnnSetConvolutionReorderType,
            cudnnGetConvolutionReorderType,
            cudnnSetConvolution2dDescriptor,
            cudnnGetConvolution2dDescriptor,
            cudnnSetConvolutionNdDescriptor,
            cudnnGetConvolutionNdDescriptor,
            cudnnGetConvolution2dForwardOutputDim,
            cudnnGetConvolutionNdForwardOutputDim,
            cudnnGetConvolutionForwardAlgorithmMaxCount,
            cudnnGetConvolutionForwardAlgorithm_v7,
            cudnnFindConvolutionForwardAlgorithm,
            cudnnFindConvolutionForwardAlgorithmEx,
            cudnnIm2Col,
            cudnnReorderFilterAndBias,
            cudnnGetConvolutionForwardWorkspaceSize,
            cudnnConvolutionForward,
            cudnnConvolutionBiasActivationForward,
            cudnnGetConvolutionBackwardDataAlgorithmMaxCount,
            cudnnFindConvolutionBackwardDataAlgorithm,
            cudnnFindConvolutionBackwardDataAlgorithmEx,
            cudnnGetConvolutionBackwardDataAlgorithm_v7,
            cudnnGetConvolutionBackwardDataWorkspaceSize,
            cudnnConvolutionBackwardData,
            cudnnGetFoldedConvBackwardDataDescriptors,
            cudnnCnnInferVersionCheck,
            cudnnGetConvolutionBackwardFilterAlgorithmMaxCount,
            cudnnFindConvolutionBackwardFilterAlgorithm,
            cudnnFindConvolutionBackwardFilterAlgorithmEx,
            cudnnGetConvolutionBackwardFilterAlgorithm_v7,
            cudnnGetConvolutionBackwardFilterWorkspaceSize,
            cudnnConvolutionBackwardFilter,
            cudnnConvolutionBackwardBias,
            cudnnCreateFusedOpsConstParamPack,
            cudnnDestroyFusedOpsConstParamPack,
            cudnnSetFusedOpsConstParamPackAttribute,
            cudnnGetFusedOpsConstParamPackAttribute,
            cudnnCreateFusedOpsVariantParamPack,
            cudnnDestroyFusedOpsVariantParamPack,
            cudnnSetFusedOpsVariantParamPackAttribute,
            cudnnGetFusedOpsVariantParamPackAttribute,
            cudnnCreateFusedOpsPlan,
            cudnnDestroyFusedOpsPlan,
            cudnnMakeFusedOpsPlan,
            cudnnFusedOpsExecute,
            cudnnCnnTrainVersionCheck,
            cudnnBackendCreateDescriptor,
            cudnnBackendDestroyDescriptor,
            cudnnBackendInitialize,
            cudnnBackendFinalize,
            cudnnBackendSetAttribute,
            cudnnBackendGetAttribute,
            cudnnBackendExecute,
        })
    }
    pub unsafe fn cudnnGetVersion(&self) -> usize {
        (self
            .cudnnGetVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnGetMaxDeviceVersion(&self) -> usize {
        (self
            .cudnnGetMaxDeviceVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnGetCudartVersion(&self) -> usize {
        (self
            .cudnnGetCudartVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnGetErrorString(&self, status: cudnnStatus_t) -> *const ::core::ffi::c_char {
        (self
            .cudnnGetErrorString
            .as_ref()
            .expect("Expected function, got error."))(status)
    }
    pub unsafe fn cudnnQueryRuntimeError(
        &self,
        handle: cudnnHandle_t,
        rstatus: *mut cudnnStatus_t,
        mode: cudnnErrQueryMode_t,
        tag: *mut cudnnRuntimeTag_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnQueryRuntimeError
            .as_ref()
            .expect("Expected function, got error."))(handle, rstatus, mode, tag)
    }
    pub unsafe fn cudnnGetProperty(
        &self,
        type_: libraryPropertyType,
        value: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetProperty
            .as_ref()
            .expect("Expected function, got error."))(type_, value)
    }
    pub unsafe fn cudnnCreate(&self, handle: *mut cudnnHandle_t) -> cudnnStatus_t {
        (self
            .cudnnCreate
            .as_ref()
            .expect("Expected function, got error."))(handle)
    }
    pub unsafe fn cudnnDestroy(&self, handle: cudnnHandle_t) -> cudnnStatus_t {
        (self
            .cudnnDestroy
            .as_ref()
            .expect("Expected function, got error."))(handle)
    }
    pub unsafe fn cudnnSetStream(
        &self,
        handle: cudnnHandle_t,
        streamId: cudaStream_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetStream
            .as_ref()
            .expect("Expected function, got error."))(handle, streamId)
    }
    pub unsafe fn cudnnGetStream(
        &self,
        handle: cudnnHandle_t,
        streamId: *mut cudaStream_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetStream
            .as_ref()
            .expect("Expected function, got error."))(handle, streamId)
    }
    pub unsafe fn cudnnCreateTensorDescriptor(
        &self,
        tensorDesc: *mut cudnnTensorDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(tensorDesc)
    }
    pub unsafe fn cudnnSetTensor4dDescriptor(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        format: cudnnTensorFormat_t,
        dataType: cudnnDataType_t,
        n: ::core::ffi::c_int,
        c: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetTensor4dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            tensorDesc, format, dataType, n, c, h, w
        )
    }
    pub unsafe fn cudnnSetTensor4dDescriptorEx(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        dataType: cudnnDataType_t,
        n: ::core::ffi::c_int,
        c: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        nStride: ::core::ffi::c_int,
        cStride: ::core::ffi::c_int,
        hStride: ::core::ffi::c_int,
        wStride: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetTensor4dDescriptorEx
            .as_ref()
            .expect("Expected function, got error."))(
            tensorDesc, dataType, n, c, h, w, nStride, cStride, hStride, wStride,
        )
    }
    pub unsafe fn cudnnGetTensor4dDescriptor(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        dataType: *mut cudnnDataType_t,
        n: *mut ::core::ffi::c_int,
        c: *mut ::core::ffi::c_int,
        h: *mut ::core::ffi::c_int,
        w: *mut ::core::ffi::c_int,
        nStride: *mut ::core::ffi::c_int,
        cStride: *mut ::core::ffi::c_int,
        hStride: *mut ::core::ffi::c_int,
        wStride: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetTensor4dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            tensorDesc, dataType, n, c, h, w, nStride, cStride, hStride, wStride,
        )
    }
    pub unsafe fn cudnnSetTensorNdDescriptor(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        dataType: cudnnDataType_t,
        nbDims: ::core::ffi::c_int,
        dimA: *const ::core::ffi::c_int,
        strideA: *const ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetTensorNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            tensorDesc, dataType, nbDims, dimA, strideA
        )
    }
    pub unsafe fn cudnnSetTensorNdDescriptorEx(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        format: cudnnTensorFormat_t,
        dataType: cudnnDataType_t,
        nbDims: ::core::ffi::c_int,
        dimA: *const ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetTensorNdDescriptorEx
            .as_ref()
            .expect("Expected function, got error."))(
            tensorDesc, format, dataType, nbDims, dimA
        )
    }
    pub unsafe fn cudnnGetTensorNdDescriptor(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        nbDimsRequested: ::core::ffi::c_int,
        dataType: *mut cudnnDataType_t,
        nbDims: *mut ::core::ffi::c_int,
        dimA: *mut ::core::ffi::c_int,
        strideA: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetTensorNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            tensorDesc,
            nbDimsRequested,
            dataType,
            nbDims,
            dimA,
            strideA,
        )
    }
    pub unsafe fn cudnnGetTensorSizeInBytes(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
        size: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetTensorSizeInBytes
            .as_ref()
            .expect("Expected function, got error."))(tensorDesc, size)
    }
    pub unsafe fn cudnnDestroyTensorDescriptor(
        &self,
        tensorDesc: cudnnTensorDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(tensorDesc)
    }
    pub unsafe fn cudnnInitTransformDest(
        &self,
        transformDesc: cudnnTensorTransformDescriptor_t,
        srcDesc: cudnnTensorDescriptor_t,
        destDesc: cudnnTensorDescriptor_t,
        destSizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnInitTransformDest
            .as_ref()
            .expect("Expected function, got error."))(
            transformDesc,
            srcDesc,
            destDesc,
            destSizeInBytes,
        )
    }
    pub unsafe fn cudnnCreateTensorTransformDescriptor(
        &self,
        transformDesc: *mut cudnnTensorTransformDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateTensorTransformDescriptor
            .as_ref()
            .expect("Expected function, got error."))(transformDesc)
    }
    pub unsafe fn cudnnSetTensorTransformDescriptor(
        &self,
        transformDesc: cudnnTensorTransformDescriptor_t,
        nbDims: u32,
        destFormat: cudnnTensorFormat_t,
        padBeforeA: *const i32,
        padAfterA: *const i32,
        foldA: *const u32,
        direction: cudnnFoldingDirection_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetTensorTransformDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            transformDesc,
            nbDims,
            destFormat,
            padBeforeA,
            padAfterA,
            foldA,
            direction,
        )
    }
    pub unsafe fn cudnnGetTensorTransformDescriptor(
        &self,
        transformDesc: cudnnTensorTransformDescriptor_t,
        nbDimsRequested: u32,
        destFormat: *mut cudnnTensorFormat_t,
        padBeforeA: *mut i32,
        padAfterA: *mut i32,
        foldA: *mut u32,
        direction: *mut cudnnFoldingDirection_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetTensorTransformDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            transformDesc,
            nbDimsRequested,
            destFormat,
            padBeforeA,
            padAfterA,
            foldA,
            direction,
        )
    }
    pub unsafe fn cudnnDestroyTensorTransformDescriptor(
        &self,
        transformDesc: cudnnTensorTransformDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyTensorTransformDescriptor
            .as_ref()
            .expect("Expected function, got error."))(transformDesc)
    }
    pub unsafe fn cudnnTransformTensor(
        &self,
        handle: cudnnHandle_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnTransformTensor
            .as_ref()
            .expect("Expected function, got error."))(
            handle, alpha, xDesc, x, beta, yDesc, y
        )
    }
    pub unsafe fn cudnnTransformTensorEx(
        &self,
        handle: cudnnHandle_t,
        transDesc: cudnnTensorTransformDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        srcDesc: cudnnTensorDescriptor_t,
        srcData: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        destDesc: cudnnTensorDescriptor_t,
        destData: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnTransformTensorEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle, transDesc, alpha, srcDesc, srcData, beta, destDesc, destData,
        )
    }
    pub unsafe fn cudnnAddTensor(
        &self,
        handle: cudnnHandle_t,
        alpha: *const ::core::ffi::c_void,
        aDesc: cudnnTensorDescriptor_t,
        A: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        cDesc: cudnnTensorDescriptor_t,
        C: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnAddTensor
            .as_ref()
            .expect("Expected function, got error."))(
            handle, alpha, aDesc, A, beta, cDesc, C
        )
    }
    pub unsafe fn cudnnCreateOpTensorDescriptor(
        &self,
        opTensorDesc: *mut cudnnOpTensorDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateOpTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(opTensorDesc)
    }
    pub unsafe fn cudnnSetOpTensorDescriptor(
        &self,
        opTensorDesc: cudnnOpTensorDescriptor_t,
        opTensorOp: cudnnOpTensorOp_t,
        opTensorCompType: cudnnDataType_t,
        opTensorNanOpt: cudnnNanPropagation_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetOpTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            opTensorDesc,
            opTensorOp,
            opTensorCompType,
            opTensorNanOpt,
        )
    }
    pub unsafe fn cudnnGetOpTensorDescriptor(
        &self,
        opTensorDesc: cudnnOpTensorDescriptor_t,
        opTensorOp: *mut cudnnOpTensorOp_t,
        opTensorCompType: *mut cudnnDataType_t,
        opTensorNanOpt: *mut cudnnNanPropagation_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetOpTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            opTensorDesc,
            opTensorOp,
            opTensorCompType,
            opTensorNanOpt,
        )
    }
    pub unsafe fn cudnnDestroyOpTensorDescriptor(
        &self,
        opTensorDesc: cudnnOpTensorDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyOpTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(opTensorDesc)
    }
    pub unsafe fn cudnnOpTensor(
        &self,
        handle: cudnnHandle_t,
        opTensorDesc: cudnnOpTensorDescriptor_t,
        alpha1: *const ::core::ffi::c_void,
        aDesc: cudnnTensorDescriptor_t,
        A: *const ::core::ffi::c_void,
        alpha2: *const ::core::ffi::c_void,
        bDesc: cudnnTensorDescriptor_t,
        B: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        cDesc: cudnnTensorDescriptor_t,
        C: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnOpTensor
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            opTensorDesc,
            alpha1,
            aDesc,
            A,
            alpha2,
            bDesc,
            B,
            beta,
            cDesc,
            C,
        )
    }
    pub unsafe fn cudnnCreateReduceTensorDescriptor(
        &self,
        reduceTensorDesc: *mut cudnnReduceTensorDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateReduceTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(reduceTensorDesc)
    }
    pub unsafe fn cudnnSetReduceTensorDescriptor(
        &self,
        reduceTensorDesc: cudnnReduceTensorDescriptor_t,
        reduceTensorOp: cudnnReduceTensorOp_t,
        reduceTensorCompType: cudnnDataType_t,
        reduceTensorNanOpt: cudnnNanPropagation_t,
        reduceTensorIndices: cudnnReduceTensorIndices_t,
        reduceTensorIndicesType: cudnnIndicesType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetReduceTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            reduceTensorDesc,
            reduceTensorOp,
            reduceTensorCompType,
            reduceTensorNanOpt,
            reduceTensorIndices,
            reduceTensorIndicesType,
        )
    }
    pub unsafe fn cudnnGetReduceTensorDescriptor(
        &self,
        reduceTensorDesc: cudnnReduceTensorDescriptor_t,
        reduceTensorOp: *mut cudnnReduceTensorOp_t,
        reduceTensorCompType: *mut cudnnDataType_t,
        reduceTensorNanOpt: *mut cudnnNanPropagation_t,
        reduceTensorIndices: *mut cudnnReduceTensorIndices_t,
        reduceTensorIndicesType: *mut cudnnIndicesType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetReduceTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            reduceTensorDesc,
            reduceTensorOp,
            reduceTensorCompType,
            reduceTensorNanOpt,
            reduceTensorIndices,
            reduceTensorIndicesType,
        )
    }
    pub unsafe fn cudnnDestroyReduceTensorDescriptor(
        &self,
        reduceTensorDesc: cudnnReduceTensorDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyReduceTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(reduceTensorDesc)
    }
    pub unsafe fn cudnnGetReductionIndicesSize(
        &self,
        handle: cudnnHandle_t,
        reduceTensorDesc: cudnnReduceTensorDescriptor_t,
        aDesc: cudnnTensorDescriptor_t,
        cDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetReductionIndicesSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            reduceTensorDesc,
            aDesc,
            cDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnGetReductionWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        reduceTensorDesc: cudnnReduceTensorDescriptor_t,
        aDesc: cudnnTensorDescriptor_t,
        cDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetReductionWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            reduceTensorDesc,
            aDesc,
            cDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnReduceTensor(
        &self,
        handle: cudnnHandle_t,
        reduceTensorDesc: cudnnReduceTensorDescriptor_t,
        indices: *mut ::core::ffi::c_void,
        indicesSizeInBytes: usize,
        workspace: *mut ::core::ffi::c_void,
        workspaceSizeInBytes: usize,
        alpha: *const ::core::ffi::c_void,
        aDesc: cudnnTensorDescriptor_t,
        A: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        cDesc: cudnnTensorDescriptor_t,
        C: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnReduceTensor
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            reduceTensorDesc,
            indices,
            indicesSizeInBytes,
            workspace,
            workspaceSizeInBytes,
            alpha,
            aDesc,
            A,
            beta,
            cDesc,
            C,
        )
    }
    pub unsafe fn cudnnSetTensor(
        &self,
        handle: cudnnHandle_t,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        valuePtr: *const ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetTensor
            .as_ref()
            .expect("Expected function, got error."))(handle, yDesc, y, valuePtr)
    }
    pub unsafe fn cudnnScaleTensor(
        &self,
        handle: cudnnHandle_t,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        alpha: *const ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnScaleTensor
            .as_ref()
            .expect("Expected function, got error."))(handle, yDesc, y, alpha)
    }
    pub unsafe fn cudnnCreateFilterDescriptor(
        &self,
        filterDesc: *mut cudnnFilterDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateFilterDescriptor
            .as_ref()
            .expect("Expected function, got error."))(filterDesc)
    }
    pub unsafe fn cudnnSetFilter4dDescriptor(
        &self,
        filterDesc: cudnnFilterDescriptor_t,
        dataType: cudnnDataType_t,
        format: cudnnTensorFormat_t,
        k: ::core::ffi::c_int,
        c: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetFilter4dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            filterDesc, dataType, format, k, c, h, w
        )
    }
    pub unsafe fn cudnnGetFilter4dDescriptor(
        &self,
        filterDesc: cudnnFilterDescriptor_t,
        dataType: *mut cudnnDataType_t,
        format: *mut cudnnTensorFormat_t,
        k: *mut ::core::ffi::c_int,
        c: *mut ::core::ffi::c_int,
        h: *mut ::core::ffi::c_int,
        w: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetFilter4dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            filterDesc, dataType, format, k, c, h, w
        )
    }
    pub unsafe fn cudnnSetFilterNdDescriptor(
        &self,
        filterDesc: cudnnFilterDescriptor_t,
        dataType: cudnnDataType_t,
        format: cudnnTensorFormat_t,
        nbDims: ::core::ffi::c_int,
        filterDimA: *const ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetFilterNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            filterDesc, dataType, format, nbDims, filterDimA,
        )
    }
    pub unsafe fn cudnnGetFilterNdDescriptor(
        &self,
        filterDesc: cudnnFilterDescriptor_t,
        nbDimsRequested: ::core::ffi::c_int,
        dataType: *mut cudnnDataType_t,
        format: *mut cudnnTensorFormat_t,
        nbDims: *mut ::core::ffi::c_int,
        filterDimA: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetFilterNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            filterDesc,
            nbDimsRequested,
            dataType,
            format,
            nbDims,
            filterDimA,
        )
    }
    pub unsafe fn cudnnGetFilterSizeInBytes(
        &self,
        filterDesc: cudnnFilterDescriptor_t,
        size: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetFilterSizeInBytes
            .as_ref()
            .expect("Expected function, got error."))(filterDesc, size)
    }
    pub unsafe fn cudnnTransformFilter(
        &self,
        handle: cudnnHandle_t,
        transDesc: cudnnTensorTransformDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        srcDesc: cudnnFilterDescriptor_t,
        srcData: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        destDesc: cudnnFilterDescriptor_t,
        destData: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnTransformFilter
            .as_ref()
            .expect("Expected function, got error."))(
            handle, transDesc, alpha, srcDesc, srcData, beta, destDesc, destData,
        )
    }
    pub unsafe fn cudnnDestroyFilterDescriptor(
        &self,
        filterDesc: cudnnFilterDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyFilterDescriptor
            .as_ref()
            .expect("Expected function, got error."))(filterDesc)
    }
    pub unsafe fn cudnnSoftmaxForward(
        &self,
        handle: cudnnHandle_t,
        algo: cudnnSoftmaxAlgorithm_t,
        mode: cudnnSoftmaxMode_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSoftmaxForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, algo, mode, alpha, xDesc, x, beta, yDesc, y,
        )
    }
    pub unsafe fn cudnnCreatePoolingDescriptor(
        &self,
        poolingDesc: *mut cudnnPoolingDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreatePoolingDescriptor
            .as_ref()
            .expect("Expected function, got error."))(poolingDesc)
    }
    pub unsafe fn cudnnSetPooling2dDescriptor(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
        mode: cudnnPoolingMode_t,
        maxpoolingNanOpt: cudnnNanPropagation_t,
        windowHeight: ::core::ffi::c_int,
        windowWidth: ::core::ffi::c_int,
        verticalPadding: ::core::ffi::c_int,
        horizontalPadding: ::core::ffi::c_int,
        verticalStride: ::core::ffi::c_int,
        horizontalStride: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetPooling2dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            poolingDesc,
            mode,
            maxpoolingNanOpt,
            windowHeight,
            windowWidth,
            verticalPadding,
            horizontalPadding,
            verticalStride,
            horizontalStride,
        )
    }
    pub unsafe fn cudnnGetPooling2dDescriptor(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
        mode: *mut cudnnPoolingMode_t,
        maxpoolingNanOpt: *mut cudnnNanPropagation_t,
        windowHeight: *mut ::core::ffi::c_int,
        windowWidth: *mut ::core::ffi::c_int,
        verticalPadding: *mut ::core::ffi::c_int,
        horizontalPadding: *mut ::core::ffi::c_int,
        verticalStride: *mut ::core::ffi::c_int,
        horizontalStride: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetPooling2dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            poolingDesc,
            mode,
            maxpoolingNanOpt,
            windowHeight,
            windowWidth,
            verticalPadding,
            horizontalPadding,
            verticalStride,
            horizontalStride,
        )
    }
    pub unsafe fn cudnnSetPoolingNdDescriptor(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
        mode: cudnnPoolingMode_t,
        maxpoolingNanOpt: cudnnNanPropagation_t,
        nbDims: ::core::ffi::c_int,
        windowDimA: *const ::core::ffi::c_int,
        paddingA: *const ::core::ffi::c_int,
        strideA: *const ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetPoolingNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            poolingDesc,
            mode,
            maxpoolingNanOpt,
            nbDims,
            windowDimA,
            paddingA,
            strideA,
        )
    }
    pub unsafe fn cudnnGetPoolingNdDescriptor(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
        nbDimsRequested: ::core::ffi::c_int,
        mode: *mut cudnnPoolingMode_t,
        maxpoolingNanOpt: *mut cudnnNanPropagation_t,
        nbDims: *mut ::core::ffi::c_int,
        windowDimA: *mut ::core::ffi::c_int,
        paddingA: *mut ::core::ffi::c_int,
        strideA: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetPoolingNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            poolingDesc,
            nbDimsRequested,
            mode,
            maxpoolingNanOpt,
            nbDims,
            windowDimA,
            paddingA,
            strideA,
        )
    }
    pub unsafe fn cudnnGetPoolingNdForwardOutputDim(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
        inputTensorDesc: cudnnTensorDescriptor_t,
        nbDims: ::core::ffi::c_int,
        outputTensorDimA: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetPoolingNdForwardOutputDim
            .as_ref()
            .expect("Expected function, got error."))(
            poolingDesc,
            inputTensorDesc,
            nbDims,
            outputTensorDimA,
        )
    }
    pub unsafe fn cudnnGetPooling2dForwardOutputDim(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
        inputTensorDesc: cudnnTensorDescriptor_t,
        n: *mut ::core::ffi::c_int,
        c: *mut ::core::ffi::c_int,
        h: *mut ::core::ffi::c_int,
        w: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetPooling2dForwardOutputDim
            .as_ref()
            .expect("Expected function, got error."))(
            poolingDesc, inputTensorDesc, n, c, h, w
        )
    }
    pub unsafe fn cudnnDestroyPoolingDescriptor(
        &self,
        poolingDesc: cudnnPoolingDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyPoolingDescriptor
            .as_ref()
            .expect("Expected function, got error."))(poolingDesc)
    }
    pub unsafe fn cudnnPoolingForward(
        &self,
        handle: cudnnHandle_t,
        poolingDesc: cudnnPoolingDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnPoolingForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            poolingDesc,
            alpha,
            xDesc,
            x,
            beta,
            yDesc,
            y,
        )
    }
    pub unsafe fn cudnnCreateActivationDescriptor(
        &self,
        activationDesc: *mut cudnnActivationDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateActivationDescriptor
            .as_ref()
            .expect("Expected function, got error."))(activationDesc)
    }
    pub unsafe fn cudnnSetActivationDescriptor(
        &self,
        activationDesc: cudnnActivationDescriptor_t,
        mode: cudnnActivationMode_t,
        reluNanOpt: cudnnNanPropagation_t,
        coef: f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetActivationDescriptor
            .as_ref()
            .expect("Expected function, got error."))(activationDesc, mode, reluNanOpt, coef)
    }
    pub unsafe fn cudnnGetActivationDescriptor(
        &self,
        activationDesc: cudnnActivationDescriptor_t,
        mode: *mut cudnnActivationMode_t,
        reluNanOpt: *mut cudnnNanPropagation_t,
        coef: *mut f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetActivationDescriptor
            .as_ref()
            .expect("Expected function, got error."))(activationDesc, mode, reluNanOpt, coef)
    }
    pub unsafe fn cudnnSetActivationDescriptorSwishBeta(
        &self,
        activationDesc: cudnnActivationDescriptor_t,
        swish_beta: f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetActivationDescriptorSwishBeta
            .as_ref()
            .expect("Expected function, got error."))(activationDesc, swish_beta)
    }
    pub unsafe fn cudnnGetActivationDescriptorSwishBeta(
        &self,
        activationDesc: cudnnActivationDescriptor_t,
        swish_beta: *mut f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetActivationDescriptorSwishBeta
            .as_ref()
            .expect("Expected function, got error."))(activationDesc, swish_beta)
    }
    pub unsafe fn cudnnDestroyActivationDescriptor(
        &self,
        activationDesc: cudnnActivationDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyActivationDescriptor
            .as_ref()
            .expect("Expected function, got error."))(activationDesc)
    }
    pub unsafe fn cudnnActivationForward(
        &self,
        handle: cudnnHandle_t,
        activationDesc: cudnnActivationDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnActivationForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            activationDesc,
            alpha,
            xDesc,
            x,
            beta,
            yDesc,
            y,
        )
    }
    pub unsafe fn cudnnCreateLRNDescriptor(
        &self,
        normDesc: *mut cudnnLRNDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateLRNDescriptor
            .as_ref()
            .expect("Expected function, got error."))(normDesc)
    }
    pub unsafe fn cudnnSetLRNDescriptor(
        &self,
        normDesc: cudnnLRNDescriptor_t,
        lrnN: ::core::ffi::c_uint,
        lrnAlpha: f64,
        lrnBeta: f64,
        lrnK: f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetLRNDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            normDesc, lrnN, lrnAlpha, lrnBeta, lrnK
        )
    }
    pub unsafe fn cudnnGetLRNDescriptor(
        &self,
        normDesc: cudnnLRNDescriptor_t,
        lrnN: *mut ::core::ffi::c_uint,
        lrnAlpha: *mut f64,
        lrnBeta: *mut f64,
        lrnK: *mut f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetLRNDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            normDesc, lrnN, lrnAlpha, lrnBeta, lrnK
        )
    }
    pub unsafe fn cudnnDestroyLRNDescriptor(&self, lrnDesc: cudnnLRNDescriptor_t) -> cudnnStatus_t {
        (self
            .cudnnDestroyLRNDescriptor
            .as_ref()
            .expect("Expected function, got error."))(lrnDesc)
    }
    pub unsafe fn cudnnLRNCrossChannelForward(
        &self,
        handle: cudnnHandle_t,
        normDesc: cudnnLRNDescriptor_t,
        lrnMode: cudnnLRNMode_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnLRNCrossChannelForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, normDesc, lrnMode, alpha, xDesc, x, beta, yDesc, y,
        )
    }
    pub unsafe fn cudnnDivisiveNormalizationForward(
        &self,
        handle: cudnnHandle_t,
        normDesc: cudnnLRNDescriptor_t,
        mode: cudnnDivNormMode_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        means: *const ::core::ffi::c_void,
        temp: *mut ::core::ffi::c_void,
        temp2: *mut ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnDivisiveNormalizationForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, normDesc, mode, alpha, xDesc, x, means, temp, temp2, beta, yDesc, y,
        )
    }
    pub unsafe fn cudnnDeriveBNTensorDescriptor(
        &self,
        derivedBnDesc: cudnnTensorDescriptor_t,
        xDesc: cudnnTensorDescriptor_t,
        mode: cudnnBatchNormMode_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDeriveBNTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(derivedBnDesc, xDesc, mode)
    }
    pub unsafe fn cudnnBatchNormalizationForwardInference(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        alpha: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
        bnScale: *const ::core::ffi::c_void,
        bnBias: *const ::core::ffi::c_void,
        estimatedMean: *const ::core::ffi::c_void,
        estimatedVariance: *const ::core::ffi::c_void,
        epsilon: f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnBatchNormalizationForwardInference
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            alpha,
            beta,
            xDesc,
            x,
            yDesc,
            y,
            bnScaleBiasMeanVarDesc,
            bnScale,
            bnBias,
            estimatedMean,
            estimatedVariance,
            epsilon,
        )
    }
    pub unsafe fn cudnnDeriveNormTensorDescriptor(
        &self,
        derivedNormScaleBiasDesc: cudnnTensorDescriptor_t,
        derivedNormMeanVarDesc: cudnnTensorDescriptor_t,
        xDesc: cudnnTensorDescriptor_t,
        mode: cudnnNormMode_t,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnDeriveNormTensorDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            derivedNormScaleBiasDesc,
            derivedNormMeanVarDesc,
            xDesc,
            mode,
            groupCnt,
        )
    }
    pub unsafe fn cudnnNormalizationForwardInference(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnNormMode_t,
        normOps: cudnnNormOps_t,
        algo: cudnnNormAlgo_t,
        alpha: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        normScaleBiasDesc: cudnnTensorDescriptor_t,
        normScale: *const ::core::ffi::c_void,
        normBias: *const ::core::ffi::c_void,
        normMeanVarDesc: cudnnTensorDescriptor_t,
        estimatedMean: *const ::core::ffi::c_void,
        estimatedVariance: *const ::core::ffi::c_void,
        zDesc: cudnnTensorDescriptor_t,
        z: *const ::core::ffi::c_void,
        activationDesc: cudnnActivationDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        epsilon: f64,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnNormalizationForwardInference
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            normOps,
            algo,
            alpha,
            beta,
            xDesc,
            x,
            normScaleBiasDesc,
            normScale,
            normBias,
            normMeanVarDesc,
            estimatedMean,
            estimatedVariance,
            zDesc,
            z,
            activationDesc,
            yDesc,
            y,
            epsilon,
            groupCnt,
        )
    }
    pub unsafe fn cudnnCreateSpatialTransformerDescriptor(
        &self,
        stDesc: *mut cudnnSpatialTransformerDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateSpatialTransformerDescriptor
            .as_ref()
            .expect("Expected function, got error."))(stDesc)
    }
    pub unsafe fn cudnnSetSpatialTransformerNdDescriptor(
        &self,
        stDesc: cudnnSpatialTransformerDescriptor_t,
        samplerType: cudnnSamplerType_t,
        dataType: cudnnDataType_t,
        nbDims: ::core::ffi::c_int,
        dimA: *const ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetSpatialTransformerNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            stDesc, samplerType, dataType, nbDims, dimA
        )
    }
    pub unsafe fn cudnnDestroySpatialTransformerDescriptor(
        &self,
        stDesc: cudnnSpatialTransformerDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroySpatialTransformerDescriptor
            .as_ref()
            .expect("Expected function, got error."))(stDesc)
    }
    pub unsafe fn cudnnSpatialTfGridGeneratorForward(
        &self,
        handle: cudnnHandle_t,
        stDesc: cudnnSpatialTransformerDescriptor_t,
        theta: *const ::core::ffi::c_void,
        grid: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSpatialTfGridGeneratorForward
            .as_ref()
            .expect("Expected function, got error."))(handle, stDesc, theta, grid)
    }
    pub unsafe fn cudnnSpatialTfSamplerForward(
        &self,
        handle: cudnnHandle_t,
        stDesc: cudnnSpatialTransformerDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        grid: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSpatialTfSamplerForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, stDesc, alpha, xDesc, x, grid, beta, yDesc, y,
        )
    }
    pub unsafe fn cudnnCreateDropoutDescriptor(
        &self,
        dropoutDesc: *mut cudnnDropoutDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateDropoutDescriptor
            .as_ref()
            .expect("Expected function, got error."))(dropoutDesc)
    }
    pub unsafe fn cudnnDestroyDropoutDescriptor(
        &self,
        dropoutDesc: cudnnDropoutDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyDropoutDescriptor
            .as_ref()
            .expect("Expected function, got error."))(dropoutDesc)
    }
    pub unsafe fn cudnnDropoutGetStatesSize(
        &self,
        handle: cudnnHandle_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnDropoutGetStatesSize
            .as_ref()
            .expect("Expected function, got error."))(handle, sizeInBytes)
    }
    pub unsafe fn cudnnDropoutGetReserveSpaceSize(
        &self,
        xdesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnDropoutGetReserveSpaceSize
            .as_ref()
            .expect("Expected function, got error."))(xdesc, sizeInBytes)
    }
    pub unsafe fn cudnnSetDropoutDescriptor(
        &self,
        dropoutDesc: cudnnDropoutDescriptor_t,
        handle: cudnnHandle_t,
        dropout: f32,
        states: *mut ::core::ffi::c_void,
        stateSizeInBytes: usize,
        seed: ::core::ffi::c_ulonglong,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetDropoutDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            dropoutDesc,
            handle,
            dropout,
            states,
            stateSizeInBytes,
            seed,
        )
    }
    pub unsafe fn cudnnRestoreDropoutDescriptor(
        &self,
        dropoutDesc: cudnnDropoutDescriptor_t,
        handle: cudnnHandle_t,
        dropout: f32,
        states: *mut ::core::ffi::c_void,
        stateSizeInBytes: usize,
        seed: ::core::ffi::c_ulonglong,
    ) -> cudnnStatus_t {
        (self
            .cudnnRestoreDropoutDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            dropoutDesc,
            handle,
            dropout,
            states,
            stateSizeInBytes,
            seed,
        )
    }
    pub unsafe fn cudnnGetDropoutDescriptor(
        &self,
        dropoutDesc: cudnnDropoutDescriptor_t,
        handle: cudnnHandle_t,
        dropout: *mut f32,
        states: *mut *mut ::core::ffi::c_void,
        seed: *mut ::core::ffi::c_ulonglong,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetDropoutDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            dropoutDesc, handle, dropout, states, seed
        )
    }
    pub unsafe fn cudnnDropoutForward(
        &self,
        handle: cudnnHandle_t,
        dropoutDesc: cudnnDropoutDescriptor_t,
        xdesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        ydesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnDropoutForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            dropoutDesc,
            xdesc,
            x,
            ydesc,
            y,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnCreateAlgorithmDescriptor(
        &self,
        algoDesc: *mut cudnnAlgorithmDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateAlgorithmDescriptor
            .as_ref()
            .expect("Expected function, got error."))(algoDesc)
    }
    pub unsafe fn cudnnSetAlgorithmDescriptor(
        &self,
        algoDesc: cudnnAlgorithmDescriptor_t,
        algorithm: cudnnAlgorithm_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetAlgorithmDescriptor
            .as_ref()
            .expect("Expected function, got error."))(algoDesc, algorithm)
    }
    pub unsafe fn cudnnGetAlgorithmDescriptor(
        &self,
        algoDesc: cudnnAlgorithmDescriptor_t,
        algorithm: *mut cudnnAlgorithm_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetAlgorithmDescriptor
            .as_ref()
            .expect("Expected function, got error."))(algoDesc, algorithm)
    }
    pub unsafe fn cudnnCopyAlgorithmDescriptor(
        &self,
        src: cudnnAlgorithmDescriptor_t,
        dest: cudnnAlgorithmDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCopyAlgorithmDescriptor
            .as_ref()
            .expect("Expected function, got error."))(src, dest)
    }
    pub unsafe fn cudnnDestroyAlgorithmDescriptor(
        &self,
        algoDesc: cudnnAlgorithmDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyAlgorithmDescriptor
            .as_ref()
            .expect("Expected function, got error."))(algoDesc)
    }
    pub unsafe fn cudnnCreateAlgorithmPerformance(
        &self,
        algoPerf: *mut cudnnAlgorithmPerformance_t,
        numberToCreate: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateAlgorithmPerformance
            .as_ref()
            .expect("Expected function, got error."))(algoPerf, numberToCreate)
    }
    pub unsafe fn cudnnSetAlgorithmPerformance(
        &self,
        algoPerf: cudnnAlgorithmPerformance_t,
        algoDesc: cudnnAlgorithmDescriptor_t,
        status: cudnnStatus_t,
        time: f32,
        memory: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetAlgorithmPerformance
            .as_ref()
            .expect("Expected function, got error."))(
            algoPerf, algoDesc, status, time, memory
        )
    }
    pub unsafe fn cudnnGetAlgorithmPerformance(
        &self,
        algoPerf: cudnnAlgorithmPerformance_t,
        algoDesc: *mut cudnnAlgorithmDescriptor_t,
        status: *mut cudnnStatus_t,
        time: *mut f32,
        memory: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetAlgorithmPerformance
            .as_ref()
            .expect("Expected function, got error."))(
            algoPerf, algoDesc, status, time, memory
        )
    }
    pub unsafe fn cudnnDestroyAlgorithmPerformance(
        &self,
        algoPerf: *mut cudnnAlgorithmPerformance_t,
        numberToDestroy: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyAlgorithmPerformance
            .as_ref()
            .expect("Expected function, got error."))(algoPerf, numberToDestroy)
    }
    pub unsafe fn cudnnGetAlgorithmSpaceSize(
        &self,
        handle: cudnnHandle_t,
        algoDesc: cudnnAlgorithmDescriptor_t,
        algoSpaceSizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetAlgorithmSpaceSize
            .as_ref()
            .expect("Expected function, got error."))(handle, algoDesc, algoSpaceSizeInBytes)
    }
    pub unsafe fn cudnnSaveAlgorithm(
        &self,
        handle: cudnnHandle_t,
        algoDesc: cudnnAlgorithmDescriptor_t,
        algoSpace: *mut ::core::ffi::c_void,
        algoSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnSaveAlgorithm
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            algoDesc,
            algoSpace,
            algoSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRestoreAlgorithm(
        &self,
        handle: cudnnHandle_t,
        algoSpace: *mut ::core::ffi::c_void,
        algoSpaceSizeInBytes: usize,
        algoDesc: cudnnAlgorithmDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnRestoreAlgorithm
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            algoSpace,
            algoSpaceSizeInBytes,
            algoDesc,
        )
    }
    pub unsafe fn cudnnSetCallback(
        &self,
        mask: ::core::ffi::c_uint,
        udata: *mut ::core::ffi::c_void,
        fptr: cudnnCallback_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetCallback
            .as_ref()
            .expect("Expected function, got error."))(mask, udata, fptr)
    }
    pub unsafe fn cudnnGetCallback(
        &self,
        mask: *mut ::core::ffi::c_uint,
        udata: *mut *mut ::core::ffi::c_void,
        fptr: *mut cudnnCallback_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetCallback
            .as_ref()
            .expect("Expected function, got error."))(mask, udata, fptr)
    }
    pub unsafe fn cudnnOpsInferVersionCheck(&self) -> cudnnStatus_t {
        (self
            .cudnnOpsInferVersionCheck
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnSoftmaxBackward(
        &self,
        handle: cudnnHandle_t,
        algo: cudnnSoftmaxAlgorithm_t,
        mode: cudnnSoftmaxMode_t,
        alpha: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSoftmaxBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, algo, mode, alpha, yDesc, y, dyDesc, dy, beta, dxDesc, dx,
        )
    }
    pub unsafe fn cudnnPoolingBackward(
        &self,
        handle: cudnnHandle_t,
        poolingDesc: cudnnPoolingDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnPoolingBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            poolingDesc,
            alpha,
            yDesc,
            y,
            dyDesc,
            dy,
            xDesc,
            x,
            beta,
            dxDesc,
            dx,
        )
    }
    pub unsafe fn cudnnActivationBackward(
        &self,
        handle: cudnnHandle_t,
        activationDesc: cudnnActivationDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnActivationBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            activationDesc,
            alpha,
            yDesc,
            y,
            dyDesc,
            dy,
            xDesc,
            x,
            beta,
            dxDesc,
            dx,
        )
    }
    pub unsafe fn cudnnLRNCrossChannelBackward(
        &self,
        handle: cudnnHandle_t,
        normDesc: cudnnLRNDescriptor_t,
        lrnMode: cudnnLRNMode_t,
        alpha: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnLRNCrossChannelBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, normDesc, lrnMode, alpha, yDesc, y, dyDesc, dy, xDesc, x, beta, dxDesc, dx,
        )
    }
    pub unsafe fn cudnnDivisiveNormalizationBackward(
        &self,
        handle: cudnnHandle_t,
        normDesc: cudnnLRNDescriptor_t,
        mode: cudnnDivNormMode_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        means: *const ::core::ffi::c_void,
        dy: *const ::core::ffi::c_void,
        temp: *mut ::core::ffi::c_void,
        temp2: *mut ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dXdMeansDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        dMeans: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnDivisiveNormalizationBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            normDesc,
            mode,
            alpha,
            xDesc,
            x,
            means,
            dy,
            temp,
            temp2,
            beta,
            dXdMeansDesc,
            dx,
            dMeans,
        )
    }
    pub unsafe fn cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        bnOps: cudnnBatchNormOps_t,
        xDesc: cudnnTensorDescriptor_t,
        zDesc: cudnnTensorDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
        activationDesc: cudnnActivationDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            bnOps,
            xDesc,
            zDesc,
            yDesc,
            bnScaleBiasMeanVarDesc,
            activationDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnGetBatchNormalizationBackwardExWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        bnOps: cudnnBatchNormOps_t,
        xDesc: cudnnTensorDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        dyDesc: cudnnTensorDescriptor_t,
        dzDesc: cudnnTensorDescriptor_t,
        dxDesc: cudnnTensorDescriptor_t,
        dBnScaleBiasDesc: cudnnTensorDescriptor_t,
        activationDesc: cudnnActivationDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetBatchNormalizationBackwardExWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            bnOps,
            xDesc,
            yDesc,
            dyDesc,
            dzDesc,
            dxDesc,
            dBnScaleBiasDesc,
            activationDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnGetBatchNormalizationTrainingExReserveSpaceSize(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        bnOps: cudnnBatchNormOps_t,
        activationDesc: cudnnActivationDescriptor_t,
        xDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetBatchNormalizationTrainingExReserveSpaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            bnOps,
            activationDesc,
            xDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnBatchNormalizationForwardTraining(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        alpha: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
        bnScale: *const ::core::ffi::c_void,
        bnBias: *const ::core::ffi::c_void,
        exponentialAverageFactor: f64,
        resultRunningMean: *mut ::core::ffi::c_void,
        resultRunningVariance: *mut ::core::ffi::c_void,
        epsilon: f64,
        resultSaveMean: *mut ::core::ffi::c_void,
        resultSaveInvVariance: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnBatchNormalizationForwardTraining
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            alpha,
            beta,
            xDesc,
            x,
            yDesc,
            y,
            bnScaleBiasMeanVarDesc,
            bnScale,
            bnBias,
            exponentialAverageFactor,
            resultRunningMean,
            resultRunningVariance,
            epsilon,
            resultSaveMean,
            resultSaveInvVariance,
        )
    }
    pub unsafe fn cudnnBatchNormalizationForwardTrainingEx(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        bnOps: cudnnBatchNormOps_t,
        alpha: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        xData: *const ::core::ffi::c_void,
        zDesc: cudnnTensorDescriptor_t,
        zData: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        yData: *mut ::core::ffi::c_void,
        bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t,
        bnScale: *const ::core::ffi::c_void,
        bnBias: *const ::core::ffi::c_void,
        exponentialAverageFactor: f64,
        resultRunningMean: *mut ::core::ffi::c_void,
        resultRunningVariance: *mut ::core::ffi::c_void,
        epsilon: f64,
        resultSaveMean: *mut ::core::ffi::c_void,
        resultSaveInvVariance: *mut ::core::ffi::c_void,
        activationDesc: cudnnActivationDescriptor_t,
        workspace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnBatchNormalizationForwardTrainingEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            bnOps,
            alpha,
            beta,
            xDesc,
            xData,
            zDesc,
            zData,
            yDesc,
            yData,
            bnScaleBiasMeanVarDesc,
            bnScale,
            bnBias,
            exponentialAverageFactor,
            resultRunningMean,
            resultRunningVariance,
            epsilon,
            resultSaveMean,
            resultSaveInvVariance,
            activationDesc,
            workspace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnBatchNormalizationBackward(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        alphaDataDiff: *const ::core::ffi::c_void,
        betaDataDiff: *const ::core::ffi::c_void,
        alphaParamDiff: *const ::core::ffi::c_void,
        betaParamDiff: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        dBnScaleBiasDesc: cudnnTensorDescriptor_t,
        bnScale: *const ::core::ffi::c_void,
        dBnScaleResult: *mut ::core::ffi::c_void,
        dBnBiasResult: *mut ::core::ffi::c_void,
        epsilon: f64,
        savedMean: *const ::core::ffi::c_void,
        savedInvVariance: *const ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnBatchNormalizationBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            alphaDataDiff,
            betaDataDiff,
            alphaParamDiff,
            betaParamDiff,
            xDesc,
            x,
            dyDesc,
            dy,
            dxDesc,
            dx,
            dBnScaleBiasDesc,
            bnScale,
            dBnScaleResult,
            dBnBiasResult,
            epsilon,
            savedMean,
            savedInvVariance,
        )
    }
    pub unsafe fn cudnnBatchNormalizationBackwardEx(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnBatchNormMode_t,
        bnOps: cudnnBatchNormOps_t,
        alphaDataDiff: *const ::core::ffi::c_void,
        betaDataDiff: *const ::core::ffi::c_void,
        alphaParamDiff: *const ::core::ffi::c_void,
        betaParamDiff: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        xData: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        yData: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dyData: *const ::core::ffi::c_void,
        dzDesc: cudnnTensorDescriptor_t,
        dzData: *mut ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dxData: *mut ::core::ffi::c_void,
        dBnScaleBiasDesc: cudnnTensorDescriptor_t,
        bnScaleData: *const ::core::ffi::c_void,
        bnBiasData: *const ::core::ffi::c_void,
        dBnScaleData: *mut ::core::ffi::c_void,
        dBnBiasData: *mut ::core::ffi::c_void,
        epsilon: f64,
        savedMean: *const ::core::ffi::c_void,
        savedInvVariance: *const ::core::ffi::c_void,
        activationDesc: cudnnActivationDescriptor_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnBatchNormalizationBackwardEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            bnOps,
            alphaDataDiff,
            betaDataDiff,
            alphaParamDiff,
            betaParamDiff,
            xDesc,
            xData,
            yDesc,
            yData,
            dyDesc,
            dyData,
            dzDesc,
            dzData,
            dxDesc,
            dxData,
            dBnScaleBiasDesc,
            bnScaleData,
            bnBiasData,
            dBnScaleData,
            dBnBiasData,
            epsilon,
            savedMean,
            savedInvVariance,
            activationDesc,
            workSpace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetNormalizationForwardTrainingWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnNormMode_t,
        normOps: cudnnNormOps_t,
        algo: cudnnNormAlgo_t,
        xDesc: cudnnTensorDescriptor_t,
        zDesc: cudnnTensorDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        normScaleBiasDesc: cudnnTensorDescriptor_t,
        activationDesc: cudnnActivationDescriptor_t,
        normMeanVarDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetNormalizationForwardTrainingWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            normOps,
            algo,
            xDesc,
            zDesc,
            yDesc,
            normScaleBiasDesc,
            activationDesc,
            normMeanVarDesc,
            sizeInBytes,
            groupCnt,
        )
    }
    pub unsafe fn cudnnGetNormalizationBackwardWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnNormMode_t,
        normOps: cudnnNormOps_t,
        algo: cudnnNormAlgo_t,
        xDesc: cudnnTensorDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        dyDesc: cudnnTensorDescriptor_t,
        dzDesc: cudnnTensorDescriptor_t,
        dxDesc: cudnnTensorDescriptor_t,
        dNormScaleBiasDesc: cudnnTensorDescriptor_t,
        activationDesc: cudnnActivationDescriptor_t,
        normMeanVarDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetNormalizationBackwardWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            normOps,
            algo,
            xDesc,
            yDesc,
            dyDesc,
            dzDesc,
            dxDesc,
            dNormScaleBiasDesc,
            activationDesc,
            normMeanVarDesc,
            sizeInBytes,
            groupCnt,
        )
    }
    pub unsafe fn cudnnGetNormalizationTrainingReserveSpaceSize(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnNormMode_t,
        normOps: cudnnNormOps_t,
        algo: cudnnNormAlgo_t,
        activationDesc: cudnnActivationDescriptor_t,
        xDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetNormalizationTrainingReserveSpaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            normOps,
            algo,
            activationDesc,
            xDesc,
            sizeInBytes,
            groupCnt,
        )
    }
    pub unsafe fn cudnnNormalizationForwardTraining(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnNormMode_t,
        normOps: cudnnNormOps_t,
        algo: cudnnNormAlgo_t,
        alpha: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        xData: *const ::core::ffi::c_void,
        normScaleBiasDesc: cudnnTensorDescriptor_t,
        normScale: *const ::core::ffi::c_void,
        normBias: *const ::core::ffi::c_void,
        exponentialAverageFactor: f64,
        normMeanVarDesc: cudnnTensorDescriptor_t,
        resultRunningMean: *mut ::core::ffi::c_void,
        resultRunningVariance: *mut ::core::ffi::c_void,
        epsilon: f64,
        resultSaveMean: *mut ::core::ffi::c_void,
        resultSaveInvVariance: *mut ::core::ffi::c_void,
        activationDesc: cudnnActivationDescriptor_t,
        zDesc: cudnnTensorDescriptor_t,
        zData: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        yData: *mut ::core::ffi::c_void,
        workspace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnNormalizationForwardTraining
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            normOps,
            algo,
            alpha,
            beta,
            xDesc,
            xData,
            normScaleBiasDesc,
            normScale,
            normBias,
            exponentialAverageFactor,
            normMeanVarDesc,
            resultRunningMean,
            resultRunningVariance,
            epsilon,
            resultSaveMean,
            resultSaveInvVariance,
            activationDesc,
            zDesc,
            zData,
            yDesc,
            yData,
            workspace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
            groupCnt,
        )
    }
    pub unsafe fn cudnnNormalizationBackward(
        &self,
        handle: cudnnHandle_t,
        mode: cudnnNormMode_t,
        normOps: cudnnNormOps_t,
        algo: cudnnNormAlgo_t,
        alphaDataDiff: *const ::core::ffi::c_void,
        betaDataDiff: *const ::core::ffi::c_void,
        alphaParamDiff: *const ::core::ffi::c_void,
        betaParamDiff: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        xData: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        yData: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dyData: *const ::core::ffi::c_void,
        dzDesc: cudnnTensorDescriptor_t,
        dzData: *mut ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dxData: *mut ::core::ffi::c_void,
        dNormScaleBiasDesc: cudnnTensorDescriptor_t,
        normScaleData: *const ::core::ffi::c_void,
        normBiasData: *const ::core::ffi::c_void,
        dNormScaleData: *mut ::core::ffi::c_void,
        dNormBiasData: *mut ::core::ffi::c_void,
        epsilon: f64,
        normMeanVarDesc: cudnnTensorDescriptor_t,
        savedMean: *const ::core::ffi::c_void,
        savedInvVariance: *const ::core::ffi::c_void,
        activationDesc: cudnnActivationDescriptor_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
        groupCnt: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnNormalizationBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            mode,
            normOps,
            algo,
            alphaDataDiff,
            betaDataDiff,
            alphaParamDiff,
            betaParamDiff,
            xDesc,
            xData,
            yDesc,
            yData,
            dyDesc,
            dyData,
            dzDesc,
            dzData,
            dxDesc,
            dxData,
            dNormScaleBiasDesc,
            normScaleData,
            normBiasData,
            dNormScaleData,
            dNormBiasData,
            epsilon,
            normMeanVarDesc,
            savedMean,
            savedInvVariance,
            activationDesc,
            workSpace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
            groupCnt,
        )
    }
    pub unsafe fn cudnnSpatialTfGridGeneratorBackward(
        &self,
        handle: cudnnHandle_t,
        stDesc: cudnnSpatialTransformerDescriptor_t,
        dgrid: *const ::core::ffi::c_void,
        dtheta: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSpatialTfGridGeneratorBackward
            .as_ref()
            .expect("Expected function, got error."))(handle, stDesc, dgrid, dtheta)
    }
    pub unsafe fn cudnnSpatialTfSamplerBackward(
        &self,
        handle: cudnnHandle_t,
        stDesc: cudnnSpatialTransformerDescriptor_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        alphaDgrid: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        grid: *const ::core::ffi::c_void,
        betaDgrid: *const ::core::ffi::c_void,
        dgrid: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSpatialTfSamplerBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle, stDesc, alpha, xDesc, x, beta, dxDesc, dx, alphaDgrid, dyDesc, dy, grid,
            betaDgrid, dgrid,
        )
    }
    pub unsafe fn cudnnDropoutBackward(
        &self,
        handle: cudnnHandle_t,
        dropoutDesc: cudnnDropoutDescriptor_t,
        dydesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        dxdesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnDropoutBackward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            dropoutDesc,
            dydesc,
            dy,
            dxdesc,
            dx,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnOpsTrainVersionCheck(&self) -> cudnnStatus_t {
        (self
            .cudnnOpsTrainVersionCheck
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnCreateRNNDescriptor(
        &self,
        rnnDesc: *mut cudnnRNNDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateRNNDescriptor
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc)
    }
    pub unsafe fn cudnnDestroyRNNDescriptor(&self, rnnDesc: cudnnRNNDescriptor_t) -> cudnnStatus_t {
        (self
            .cudnnDestroyRNNDescriptor
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc)
    }
    pub unsafe fn cudnnSetRNNDescriptor_v8(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        algo: cudnnRNNAlgo_t,
        cellMode: cudnnRNNMode_t,
        biasMode: cudnnRNNBiasMode_t,
        dirMode: cudnnDirectionMode_t,
        inputMode: cudnnRNNInputMode_t,
        dataType: cudnnDataType_t,
        mathPrec: cudnnDataType_t,
        mathType: cudnnMathType_t,
        inputSize: i32,
        hiddenSize: i32,
        projSize: i32,
        numLayers: i32,
        dropoutDesc: cudnnDropoutDescriptor_t,
        auxFlags: u32,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNDescriptor_v8
            .as_ref()
            .expect("Expected function, got error."))(
            rnnDesc,
            algo,
            cellMode,
            biasMode,
            dirMode,
            inputMode,
            dataType,
            mathPrec,
            mathType,
            inputSize,
            hiddenSize,
            projSize,
            numLayers,
            dropoutDesc,
            auxFlags,
        )
    }
    pub unsafe fn cudnnGetRNNDescriptor_v8(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        algo: *mut cudnnRNNAlgo_t,
        cellMode: *mut cudnnRNNMode_t,
        biasMode: *mut cudnnRNNBiasMode_t,
        dirMode: *mut cudnnDirectionMode_t,
        inputMode: *mut cudnnRNNInputMode_t,
        dataType: *mut cudnnDataType_t,
        mathPrec: *mut cudnnDataType_t,
        mathType: *mut cudnnMathType_t,
        inputSize: *mut i32,
        hiddenSize: *mut i32,
        projSize: *mut i32,
        numLayers: *mut i32,
        dropoutDesc: *mut cudnnDropoutDescriptor_t,
        auxFlags: *mut u32,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNDescriptor_v8
            .as_ref()
            .expect("Expected function, got error."))(
            rnnDesc,
            algo,
            cellMode,
            biasMode,
            dirMode,
            inputMode,
            dataType,
            mathPrec,
            mathType,
            inputSize,
            hiddenSize,
            projSize,
            numLayers,
            dropoutDesc,
            auxFlags,
        )
    }
    pub unsafe fn cudnnSetRNNDescriptor_v6(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        hiddenSize: ::core::ffi::c_int,
        numLayers: ::core::ffi::c_int,
        dropoutDesc: cudnnDropoutDescriptor_t,
        inputMode: cudnnRNNInputMode_t,
        direction: cudnnDirectionMode_t,
        cellMode: cudnnRNNMode_t,
        algo: cudnnRNNAlgo_t,
        mathPrec: cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNDescriptor_v6
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            hiddenSize,
            numLayers,
            dropoutDesc,
            inputMode,
            direction,
            cellMode,
            algo,
            mathPrec,
        )
    }
    pub unsafe fn cudnnGetRNNDescriptor_v6(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        hiddenSize: *mut ::core::ffi::c_int,
        numLayers: *mut ::core::ffi::c_int,
        dropoutDesc: *mut cudnnDropoutDescriptor_t,
        inputMode: *mut cudnnRNNInputMode_t,
        direction: *mut cudnnDirectionMode_t,
        cellMode: *mut cudnnRNNMode_t,
        algo: *mut cudnnRNNAlgo_t,
        mathPrec: *mut cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNDescriptor_v6
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            hiddenSize,
            numLayers,
            dropoutDesc,
            inputMode,
            direction,
            cellMode,
            algo,
            mathPrec,
        )
    }
    pub unsafe fn cudnnSetRNNMatrixMathType(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        mType: cudnnMathType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNMatrixMathType
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, mType)
    }
    pub unsafe fn cudnnGetRNNMatrixMathType(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        mType: *mut cudnnMathType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNMatrixMathType
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, mType)
    }
    pub unsafe fn cudnnSetRNNBiasMode(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        biasMode: cudnnRNNBiasMode_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNBiasMode
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, biasMode)
    }
    pub unsafe fn cudnnGetRNNBiasMode(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        biasMode: *mut cudnnRNNBiasMode_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNBiasMode
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, biasMode)
    }
    pub unsafe fn cudnnRNNSetClip_v8(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        clipMode: cudnnRNNClipMode_t,
        clipNanOpt: cudnnNanPropagation_t,
        lclip: f64,
        rclip: f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNSetClip_v8
            .as_ref()
            .expect("Expected function, got error."))(
            rnnDesc, clipMode, clipNanOpt, lclip, rclip
        )
    }
    pub unsafe fn cudnnRNNGetClip_v8(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        clipMode: *mut cudnnRNNClipMode_t,
        clipNanOpt: *mut cudnnNanPropagation_t,
        lclip: *mut f64,
        rclip: *mut f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNGetClip_v8
            .as_ref()
            .expect("Expected function, got error."))(
            rnnDesc, clipMode, clipNanOpt, lclip, rclip
        )
    }
    pub unsafe fn cudnnRNNSetClip(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        clipMode: cudnnRNNClipMode_t,
        clipNanOpt: cudnnNanPropagation_t,
        lclip: f64,
        rclip: f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNSetClip
            .as_ref()
            .expect("Expected function, got error."))(
            handle, rnnDesc, clipMode, clipNanOpt, lclip, rclip,
        )
    }
    pub unsafe fn cudnnRNNGetClip(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        clipMode: *mut cudnnRNNClipMode_t,
        clipNanOpt: *mut cudnnNanPropagation_t,
        lclip: *mut f64,
        rclip: *mut f64,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNGetClip
            .as_ref()
            .expect("Expected function, got error."))(
            handle, rnnDesc, clipMode, clipNanOpt, lclip, rclip,
        )
    }
    pub unsafe fn cudnnSetRNNProjectionLayers(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        recProjSize: ::core::ffi::c_int,
        outProjSize: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNProjectionLayers
            .as_ref()
            .expect("Expected function, got error."))(
            handle, rnnDesc, recProjSize, outProjSize
        )
    }
    pub unsafe fn cudnnGetRNNProjectionLayers(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        recProjSize: *mut ::core::ffi::c_int,
        outProjSize: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNProjectionLayers
            .as_ref()
            .expect("Expected function, got error."))(
            handle, rnnDesc, recProjSize, outProjSize
        )
    }
    pub unsafe fn cudnnCreatePersistentRNNPlan(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        minibatch: ::core::ffi::c_int,
        dataType: cudnnDataType_t,
        plan: *mut cudnnPersistentRNNPlan_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreatePersistentRNNPlan
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, minibatch, dataType, plan)
    }
    pub unsafe fn cudnnDestroyPersistentRNNPlan(
        &self,
        plan: cudnnPersistentRNNPlan_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyPersistentRNNPlan
            .as_ref()
            .expect("Expected function, got error."))(plan)
    }
    pub unsafe fn cudnnSetPersistentRNNPlan(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        plan: cudnnPersistentRNNPlan_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetPersistentRNNPlan
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, plan)
    }
    pub unsafe fn cudnnBuildRNNDynamic(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        miniBatch: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnBuildRNNDynamic
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, miniBatch)
    }
    pub unsafe fn cudnnGetRNNWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnGetRNNTrainingReserveSize(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNTrainingReserveSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnGetRNNTempSpaceSizes(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        fwdMode: cudnnForwardMode_t,
        xDesc: cudnnRNNDataDescriptor_t,
        workSpaceSize: *mut usize,
        reserveSpaceSize: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNTempSpaceSizes
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            fwdMode,
            xDesc,
            workSpaceSize,
            reserveSpaceSize,
        )
    }
    pub unsafe fn cudnnGetRNNParamsSize(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        xDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
        dataType: cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNParamsSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle, rnnDesc, xDesc, sizeInBytes, dataType
        )
    }
    pub unsafe fn cudnnGetRNNWeightSpaceSize(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        weightSpaceSize: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNWeightSpaceSize
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, weightSpaceSize)
    }
    pub unsafe fn cudnnGetRNNLinLayerMatrixParams(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        pseudoLayer: ::core::ffi::c_int,
        xDesc: cudnnTensorDescriptor_t,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        linLayerID: ::core::ffi::c_int,
        linLayerMatDesc: cudnnFilterDescriptor_t,
        linLayerMat: *mut *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNLinLayerMatrixParams
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            pseudoLayer,
            xDesc,
            wDesc,
            w,
            linLayerID,
            linLayerMatDesc,
            linLayerMat,
        )
    }
    pub unsafe fn cudnnGetRNNLinLayerBiasParams(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        pseudoLayer: ::core::ffi::c_int,
        xDesc: cudnnTensorDescriptor_t,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        linLayerID: ::core::ffi::c_int,
        linLayerBiasDesc: cudnnFilterDescriptor_t,
        linLayerBias: *mut *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNLinLayerBiasParams
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            pseudoLayer,
            xDesc,
            wDesc,
            w,
            linLayerID,
            linLayerBiasDesc,
            linLayerBias,
        )
    }
    pub unsafe fn cudnnGetRNNWeightParams(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        pseudoLayer: i32,
        weightSpaceSize: usize,
        weightSpace: *const ::core::ffi::c_void,
        linLayerID: i32,
        mDesc: cudnnTensorDescriptor_t,
        mAddr: *mut *mut ::core::ffi::c_void,
        bDesc: cudnnTensorDescriptor_t,
        bAddr: *mut *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNWeightParams
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            pseudoLayer,
            weightSpaceSize,
            weightSpace,
            linLayerID,
            mDesc,
            mAddr,
            bDesc,
            bAddr,
        )
    }
    pub unsafe fn cudnnRNNForwardInference(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hyDesc: cudnnTensorDescriptor_t,
        hy: *mut ::core::ffi::c_void,
        cyDesc: cudnnTensorDescriptor_t,
        cy: *mut ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNForwardInference
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            x,
            hxDesc,
            hx,
            cxDesc,
            cx,
            wDesc,
            w,
            yDesc,
            y,
            hyDesc,
            hy,
            cyDesc,
            cy,
            workSpace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnSetRNNPaddingMode(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        paddingMode: ::core::ffi::c_uint,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNPaddingMode
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, paddingMode)
    }
    pub unsafe fn cudnnGetRNNPaddingMode(
        &self,
        rnnDesc: cudnnRNNDescriptor_t,
        paddingMode: *mut ::core::ffi::c_uint,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNPaddingMode
            .as_ref()
            .expect("Expected function, got error."))(rnnDesc, paddingMode)
    }
    pub unsafe fn cudnnCreateRNNDataDescriptor(
        &self,
        rnnDataDesc: *mut cudnnRNNDataDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateRNNDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(rnnDataDesc)
    }
    pub unsafe fn cudnnDestroyRNNDataDescriptor(
        &self,
        rnnDataDesc: cudnnRNNDataDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyRNNDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(rnnDataDesc)
    }
    pub unsafe fn cudnnSetRNNDataDescriptor(
        &self,
        rnnDataDesc: cudnnRNNDataDescriptor_t,
        dataType: cudnnDataType_t,
        layout: cudnnRNNDataLayout_t,
        maxSeqLength: ::core::ffi::c_int,
        batchSize: ::core::ffi::c_int,
        vectorSize: ::core::ffi::c_int,
        seqLengthArray: *const ::core::ffi::c_int,
        paddingFill: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            rnnDataDesc,
            dataType,
            layout,
            maxSeqLength,
            batchSize,
            vectorSize,
            seqLengthArray,
            paddingFill,
        )
    }
    pub unsafe fn cudnnGetRNNDataDescriptor(
        &self,
        rnnDataDesc: cudnnRNNDataDescriptor_t,
        dataType: *mut cudnnDataType_t,
        layout: *mut cudnnRNNDataLayout_t,
        maxSeqLength: *mut ::core::ffi::c_int,
        batchSize: *mut ::core::ffi::c_int,
        vectorSize: *mut ::core::ffi::c_int,
        arrayLengthRequested: ::core::ffi::c_int,
        seqLengthArray: *mut ::core::ffi::c_int,
        paddingFill: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            rnnDataDesc,
            dataType,
            layout,
            maxSeqLength,
            batchSize,
            vectorSize,
            arrayLengthRequested,
            seqLengthArray,
            paddingFill,
        )
    }
    pub unsafe fn cudnnRNNForwardInferenceEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        xDesc: cudnnRNNDataDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hyDesc: cudnnTensorDescriptor_t,
        hy: *mut ::core::ffi::c_void,
        cyDesc: cudnnTensorDescriptor_t,
        cy: *mut ::core::ffi::c_void,
        kDesc: cudnnRNNDataDescriptor_t,
        keys: *const ::core::ffi::c_void,
        cDesc: cudnnRNNDataDescriptor_t,
        cAttn: *mut ::core::ffi::c_void,
        iDesc: cudnnRNNDataDescriptor_t,
        iAttn: *mut ::core::ffi::c_void,
        qDesc: cudnnRNNDataDescriptor_t,
        queries: *mut ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNForwardInferenceEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            xDesc,
            x,
            hxDesc,
            hx,
            cxDesc,
            cx,
            wDesc,
            w,
            yDesc,
            y,
            hyDesc,
            hy,
            cyDesc,
            cy,
            kDesc,
            keys,
            cDesc,
            cAttn,
            iDesc,
            iAttn,
            qDesc,
            queries,
            workSpace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRNNForward(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        fwdMode: cudnnForwardMode_t,
        devSeqLengths: *const i32,
        xDesc: cudnnRNNDataDescriptor_t,
        x: *const ::core::ffi::c_void,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        hy: *mut ::core::ffi::c_void,
        cDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        cy: *mut ::core::ffi::c_void,
        weightSpaceSize: usize,
        weightSpace: *const ::core::ffi::c_void,
        workSpaceSize: usize,
        workSpace: *mut ::core::ffi::c_void,
        reserveSpaceSize: usize,
        reserveSpace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            fwdMode,
            devSeqLengths,
            xDesc,
            x,
            yDesc,
            y,
            hDesc,
            hx,
            hy,
            cDesc,
            cx,
            cy,
            weightSpaceSize,
            weightSpace,
            workSpaceSize,
            workSpace,
            reserveSpaceSize,
            reserveSpace,
        )
    }
    pub unsafe fn cudnnSetRNNAlgorithmDescriptor(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        algoDesc: cudnnAlgorithmDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetRNNAlgorithmDescriptor
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, algoDesc)
    }
    pub unsafe fn cudnnGetRNNForwardInferenceAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNForwardInferenceAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, count)
    }
    pub unsafe fn cudnnFindRNNForwardInferenceAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hyDesc: cudnnTensorDescriptor_t,
        hy: *mut ::core::ffi::c_void,
        cyDesc: cudnnTensorDescriptor_t,
        cy: *mut ::core::ffi::c_void,
        findIntensity: f32,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnAlgorithmPerformance_t,
        workspace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindRNNForwardInferenceAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            x,
            hxDesc,
            hx,
            cxDesc,
            cx,
            wDesc,
            w,
            yDesc,
            y,
            hyDesc,
            hy,
            cyDesc,
            cy,
            findIntensity,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workspace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnCreateSeqDataDescriptor(
        &self,
        seqDataDesc: *mut cudnnSeqDataDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateSeqDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(seqDataDesc)
    }
    pub unsafe fn cudnnDestroySeqDataDescriptor(
        &self,
        seqDataDesc: cudnnSeqDataDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroySeqDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(seqDataDesc)
    }
    pub unsafe fn cudnnSetSeqDataDescriptor(
        &self,
        seqDataDesc: cudnnSeqDataDescriptor_t,
        dataType: cudnnDataType_t,
        nbDims: ::core::ffi::c_int,
        dimA: *const ::core::ffi::c_int,
        axes: *const cudnnSeqDataAxis_t,
        seqLengthArraySize: usize,
        seqLengthArray: *const ::core::ffi::c_int,
        paddingFill: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetSeqDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            seqDataDesc,
            dataType,
            nbDims,
            dimA,
            axes,
            seqLengthArraySize,
            seqLengthArray,
            paddingFill,
        )
    }
    pub unsafe fn cudnnGetSeqDataDescriptor(
        &self,
        seqDataDesc: cudnnSeqDataDescriptor_t,
        dataType: *mut cudnnDataType_t,
        nbDims: *mut ::core::ffi::c_int,
        nbDimsRequested: ::core::ffi::c_int,
        dimA: *mut ::core::ffi::c_int,
        axes: *mut cudnnSeqDataAxis_t,
        seqLengthArraySize: *mut usize,
        seqLengthSizeRequested: usize,
        seqLengthArray: *mut ::core::ffi::c_int,
        paddingFill: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetSeqDataDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            seqDataDesc,
            dataType,
            nbDims,
            nbDimsRequested,
            dimA,
            axes,
            seqLengthArraySize,
            seqLengthSizeRequested,
            seqLengthArray,
            paddingFill,
        )
    }
    pub unsafe fn cudnnCreateAttnDescriptor(
        &self,
        attnDesc: *mut cudnnAttnDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateAttnDescriptor
            .as_ref()
            .expect("Expected function, got error."))(attnDesc)
    }
    pub unsafe fn cudnnDestroyAttnDescriptor(
        &self,
        attnDesc: cudnnAttnDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyAttnDescriptor
            .as_ref()
            .expect("Expected function, got error."))(attnDesc)
    }
    pub unsafe fn cudnnSetAttnDescriptor(
        &self,
        attnDesc: cudnnAttnDescriptor_t,
        attnMode: ::core::ffi::c_uint,
        nHeads: ::core::ffi::c_int,
        smScaler: f64,
        dataType: cudnnDataType_t,
        computePrec: cudnnDataType_t,
        mathType: cudnnMathType_t,
        attnDropoutDesc: cudnnDropoutDescriptor_t,
        postDropoutDesc: cudnnDropoutDescriptor_t,
        qSize: ::core::ffi::c_int,
        kSize: ::core::ffi::c_int,
        vSize: ::core::ffi::c_int,
        qProjSize: ::core::ffi::c_int,
        kProjSize: ::core::ffi::c_int,
        vProjSize: ::core::ffi::c_int,
        oProjSize: ::core::ffi::c_int,
        qoMaxSeqLength: ::core::ffi::c_int,
        kvMaxSeqLength: ::core::ffi::c_int,
        maxBatchSize: ::core::ffi::c_int,
        maxBeamSize: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetAttnDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            attnDesc,
            attnMode,
            nHeads,
            smScaler,
            dataType,
            computePrec,
            mathType,
            attnDropoutDesc,
            postDropoutDesc,
            qSize,
            kSize,
            vSize,
            qProjSize,
            kProjSize,
            vProjSize,
            oProjSize,
            qoMaxSeqLength,
            kvMaxSeqLength,
            maxBatchSize,
            maxBeamSize,
        )
    }
    pub unsafe fn cudnnGetAttnDescriptor(
        &self,
        attnDesc: cudnnAttnDescriptor_t,
        attnMode: *mut ::core::ffi::c_uint,
        nHeads: *mut ::core::ffi::c_int,
        smScaler: *mut f64,
        dataType: *mut cudnnDataType_t,
        computePrec: *mut cudnnDataType_t,
        mathType: *mut cudnnMathType_t,
        attnDropoutDesc: *mut cudnnDropoutDescriptor_t,
        postDropoutDesc: *mut cudnnDropoutDescriptor_t,
        qSize: *mut ::core::ffi::c_int,
        kSize: *mut ::core::ffi::c_int,
        vSize: *mut ::core::ffi::c_int,
        qProjSize: *mut ::core::ffi::c_int,
        kProjSize: *mut ::core::ffi::c_int,
        vProjSize: *mut ::core::ffi::c_int,
        oProjSize: *mut ::core::ffi::c_int,
        qoMaxSeqLength: *mut ::core::ffi::c_int,
        kvMaxSeqLength: *mut ::core::ffi::c_int,
        maxBatchSize: *mut ::core::ffi::c_int,
        maxBeamSize: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetAttnDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            attnDesc,
            attnMode,
            nHeads,
            smScaler,
            dataType,
            computePrec,
            mathType,
            attnDropoutDesc,
            postDropoutDesc,
            qSize,
            kSize,
            vSize,
            qProjSize,
            kProjSize,
            vProjSize,
            oProjSize,
            qoMaxSeqLength,
            kvMaxSeqLength,
            maxBatchSize,
            maxBeamSize,
        )
    }
    pub unsafe fn cudnnGetMultiHeadAttnBuffers(
        &self,
        handle: cudnnHandle_t,
        attnDesc: cudnnAttnDescriptor_t,
        weightSizeInBytes: *mut usize,
        workSpaceSizeInBytes: *mut usize,
        reserveSpaceSizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetMultiHeadAttnBuffers
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            attnDesc,
            weightSizeInBytes,
            workSpaceSizeInBytes,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetMultiHeadAttnWeights(
        &self,
        handle: cudnnHandle_t,
        attnDesc: cudnnAttnDescriptor_t,
        wKind: cudnnMultiHeadAttnWeightKind_t,
        weightSizeInBytes: usize,
        weights: *const ::core::ffi::c_void,
        wDesc: cudnnTensorDescriptor_t,
        wAddr: *mut *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetMultiHeadAttnWeights
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            attnDesc,
            wKind,
            weightSizeInBytes,
            weights,
            wDesc,
            wAddr,
        )
    }
    pub unsafe fn cudnnMultiHeadAttnForward(
        &self,
        handle: cudnnHandle_t,
        attnDesc: cudnnAttnDescriptor_t,
        currIdx: ::core::ffi::c_int,
        loWinIdx: *const ::core::ffi::c_int,
        hiWinIdx: *const ::core::ffi::c_int,
        devSeqLengthsQO: *const ::core::ffi::c_int,
        devSeqLengthsKV: *const ::core::ffi::c_int,
        qDesc: cudnnSeqDataDescriptor_t,
        queries: *const ::core::ffi::c_void,
        residuals: *const ::core::ffi::c_void,
        kDesc: cudnnSeqDataDescriptor_t,
        keys: *const ::core::ffi::c_void,
        vDesc: cudnnSeqDataDescriptor_t,
        values: *const ::core::ffi::c_void,
        oDesc: cudnnSeqDataDescriptor_t,
        out: *mut ::core::ffi::c_void,
        weightSizeInBytes: usize,
        weights: *const ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        workSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnMultiHeadAttnForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            attnDesc,
            currIdx,
            loWinIdx,
            hiWinIdx,
            devSeqLengthsQO,
            devSeqLengthsKV,
            qDesc,
            queries,
            residuals,
            kDesc,
            keys,
            vDesc,
            values,
            oDesc,
            out,
            weightSizeInBytes,
            weights,
            workSpaceSizeInBytes,
            workSpace,
            reserveSpaceSizeInBytes,
            reserveSpace,
        )
    }
    pub unsafe fn cudnnAdvInferVersionCheck(&self) -> cudnnStatus_t {
        (self
            .cudnnAdvInferVersionCheck
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnRNNForwardTraining(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hyDesc: cudnnTensorDescriptor_t,
        hy: *mut ::core::ffi::c_void,
        cyDesc: cudnnTensorDescriptor_t,
        cy: *mut ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNForwardTraining
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            x,
            hxDesc,
            hx,
            cxDesc,
            cx,
            wDesc,
            w,
            yDesc,
            y,
            hyDesc,
            hy,
            cyDesc,
            cy,
            workSpace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRNNBackwardData(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: *const cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        dhyDesc: cudnnTensorDescriptor_t,
        dhy: *const ::core::ffi::c_void,
        dcyDesc: cudnnTensorDescriptor_t,
        dcy: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        dxDesc: *const cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        dhxDesc: cudnnTensorDescriptor_t,
        dhx: *mut ::core::ffi::c_void,
        dcxDesc: cudnnTensorDescriptor_t,
        dcx: *mut ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNBackwardData
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            yDesc,
            y,
            dyDesc,
            dy,
            dhyDesc,
            dhy,
            dcyDesc,
            dcy,
            wDesc,
            w,
            hxDesc,
            hx,
            cxDesc,
            cx,
            dxDesc,
            dx,
            dhxDesc,
            dhx,
            dcxDesc,
            dcx,
            workSpace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRNNBackwardData_v8(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        devSeqLengths: *const i32,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *const ::core::ffi::c_void,
        dy: *const ::core::ffi::c_void,
        xDesc: cudnnRNNDataDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        hDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        dhy: *const ::core::ffi::c_void,
        dhx: *mut ::core::ffi::c_void,
        cDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        dcy: *const ::core::ffi::c_void,
        dcx: *mut ::core::ffi::c_void,
        weightSpaceSize: usize,
        weightSpace: *const ::core::ffi::c_void,
        workSpaceSize: usize,
        workSpace: *mut ::core::ffi::c_void,
        reserveSpaceSize: usize,
        reserveSpace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNBackwardData_v8
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            devSeqLengths,
            yDesc,
            y,
            dy,
            xDesc,
            dx,
            hDesc,
            hx,
            dhy,
            dhx,
            cDesc,
            cx,
            dcy,
            dcx,
            weightSpaceSize,
            weightSpace,
            workSpaceSize,
            workSpace,
            reserveSpaceSize,
            reserveSpace,
        )
    }
    pub unsafe fn cudnnRNNBackwardWeights(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        workSpace: *const ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        dwDesc: cudnnFilterDescriptor_t,
        dw: *mut ::core::ffi::c_void,
        reserveSpace: *const ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNBackwardWeights
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            x,
            hxDesc,
            hx,
            yDesc,
            y,
            workSpace,
            workSpaceSizeInBytes,
            dwDesc,
            dw,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRNNBackwardWeights_v8(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        addGrad: cudnnWgradMode_t,
        devSeqLengths: *const i32,
        xDesc: cudnnRNNDataDescriptor_t,
        x: *const ::core::ffi::c_void,
        hDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *const ::core::ffi::c_void,
        weightSpaceSize: usize,
        dweightSpace: *mut ::core::ffi::c_void,
        workSpaceSize: usize,
        workSpace: *mut ::core::ffi::c_void,
        reserveSpaceSize: usize,
        reserveSpace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNBackwardWeights_v8
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            addGrad,
            devSeqLengths,
            xDesc,
            x,
            hDesc,
            hx,
            yDesc,
            y,
            weightSpaceSize,
            dweightSpace,
            workSpaceSize,
            workSpace,
            reserveSpaceSize,
            reserveSpace,
        )
    }
    pub unsafe fn cudnnRNNForwardTrainingEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        xDesc: cudnnRNNDataDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hyDesc: cudnnTensorDescriptor_t,
        hy: *mut ::core::ffi::c_void,
        cyDesc: cudnnTensorDescriptor_t,
        cy: *mut ::core::ffi::c_void,
        kDesc: cudnnRNNDataDescriptor_t,
        keys: *const ::core::ffi::c_void,
        cDesc: cudnnRNNDataDescriptor_t,
        cAttn: *mut ::core::ffi::c_void,
        iDesc: cudnnRNNDataDescriptor_t,
        iAttn: *mut ::core::ffi::c_void,
        qDesc: cudnnRNNDataDescriptor_t,
        queries: *mut ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNForwardTrainingEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            xDesc,
            x,
            hxDesc,
            hx,
            cxDesc,
            cx,
            wDesc,
            w,
            yDesc,
            y,
            hyDesc,
            hy,
            cyDesc,
            cy,
            kDesc,
            keys,
            cDesc,
            cAttn,
            iDesc,
            iAttn,
            qDesc,
            queries,
            workSpace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRNNBackwardDataEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: cudnnRNNDataDescriptor_t,
        dy: *const ::core::ffi::c_void,
        dcDesc: cudnnRNNDataDescriptor_t,
        dcAttn: *const ::core::ffi::c_void,
        dhyDesc: cudnnTensorDescriptor_t,
        dhy: *const ::core::ffi::c_void,
        dcyDesc: cudnnTensorDescriptor_t,
        dcy: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        dxDesc: cudnnRNNDataDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        dhxDesc: cudnnTensorDescriptor_t,
        dhx: *mut ::core::ffi::c_void,
        dcxDesc: cudnnTensorDescriptor_t,
        dcx: *mut ::core::ffi::c_void,
        dkDesc: cudnnRNNDataDescriptor_t,
        dkeys: *mut ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNBackwardDataEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            yDesc,
            y,
            dyDesc,
            dy,
            dcDesc,
            dcAttn,
            dhyDesc,
            dhy,
            dcyDesc,
            dcy,
            wDesc,
            w,
            hxDesc,
            hx,
            cxDesc,
            cx,
            dxDesc,
            dx,
            dhxDesc,
            dhx,
            dcxDesc,
            dcx,
            dkDesc,
            dkeys,
            workSpace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnRNNBackwardWeightsEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        xDesc: cudnnRNNDataDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        yDesc: cudnnRNNDataDescriptor_t,
        y: *const ::core::ffi::c_void,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        dwDesc: cudnnFilterDescriptor_t,
        dw: *mut ::core::ffi::c_void,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnRNNBackwardWeightsEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            xDesc,
            x,
            hxDesc,
            hx,
            yDesc,
            y,
            workSpace,
            workSpaceSizeInBytes,
            dwDesc,
            dw,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetRNNForwardTrainingAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNForwardTrainingAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, count)
    }
    pub unsafe fn cudnnFindRNNForwardTrainingAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        hyDesc: cudnnTensorDescriptor_t,
        hy: *mut ::core::ffi::c_void,
        cyDesc: cudnnTensorDescriptor_t,
        cy: *mut ::core::ffi::c_void,
        findIntensity: f32,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnAlgorithmPerformance_t,
        workspace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindRNNForwardTrainingAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            x,
            hxDesc,
            hx,
            cxDesc,
            cx,
            wDesc,
            w,
            yDesc,
            y,
            hyDesc,
            hy,
            cyDesc,
            cy,
            findIntensity,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workspace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetRNNBackwardDataAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNBackwardDataAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, count)
    }
    pub unsafe fn cudnnFindRNNBackwardDataAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        dyDesc: *const cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        dhyDesc: cudnnTensorDescriptor_t,
        dhy: *const ::core::ffi::c_void,
        dcyDesc: cudnnTensorDescriptor_t,
        dcy: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        cxDesc: cudnnTensorDescriptor_t,
        cx: *const ::core::ffi::c_void,
        dxDesc: *const cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        dhxDesc: cudnnTensorDescriptor_t,
        dhx: *mut ::core::ffi::c_void,
        dcxDesc: cudnnTensorDescriptor_t,
        dcx: *mut ::core::ffi::c_void,
        findIntensity: f32,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnAlgorithmPerformance_t,
        workspace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindRNNBackwardDataAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            yDesc,
            y,
            dyDesc,
            dy,
            dhyDesc,
            dhy,
            dcyDesc,
            dcy,
            wDesc,
            w,
            hxDesc,
            hx,
            cxDesc,
            cx,
            dxDesc,
            dx,
            dhxDesc,
            dhx,
            dcxDesc,
            dcx,
            findIntensity,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workspace,
            workSpaceSizeInBytes,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetRNNBackwardWeightsAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetRNNBackwardWeightsAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, rnnDesc, count)
    }
    pub unsafe fn cudnnFindRNNBackwardWeightsAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        rnnDesc: cudnnRNNDescriptor_t,
        seqLength: ::core::ffi::c_int,
        xDesc: *const cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        hxDesc: cudnnTensorDescriptor_t,
        hx: *const ::core::ffi::c_void,
        yDesc: *const cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        findIntensity: f32,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnAlgorithmPerformance_t,
        workspace: *const ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        dwDesc: cudnnFilterDescriptor_t,
        dw: *mut ::core::ffi::c_void,
        reserveSpace: *const ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindRNNBackwardWeightsAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            rnnDesc,
            seqLength,
            xDesc,
            x,
            hxDesc,
            hx,
            yDesc,
            y,
            findIntensity,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workspace,
            workSpaceSizeInBytes,
            dwDesc,
            dw,
            reserveSpace,
            reserveSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnMultiHeadAttnBackwardData(
        &self,
        handle: cudnnHandle_t,
        attnDesc: cudnnAttnDescriptor_t,
        loWinIdx: *const ::core::ffi::c_int,
        hiWinIdx: *const ::core::ffi::c_int,
        devSeqLengthsDQDO: *const ::core::ffi::c_int,
        devSeqLengthsDKDV: *const ::core::ffi::c_int,
        doDesc: cudnnSeqDataDescriptor_t,
        dout: *const ::core::ffi::c_void,
        dqDesc: cudnnSeqDataDescriptor_t,
        dqueries: *mut ::core::ffi::c_void,
        queries: *const ::core::ffi::c_void,
        dkDesc: cudnnSeqDataDescriptor_t,
        dkeys: *mut ::core::ffi::c_void,
        keys: *const ::core::ffi::c_void,
        dvDesc: cudnnSeqDataDescriptor_t,
        dvalues: *mut ::core::ffi::c_void,
        values: *const ::core::ffi::c_void,
        weightSizeInBytes: usize,
        weights: *const ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        workSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnMultiHeadAttnBackwardData
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            attnDesc,
            loWinIdx,
            hiWinIdx,
            devSeqLengthsDQDO,
            devSeqLengthsDKDV,
            doDesc,
            dout,
            dqDesc,
            dqueries,
            queries,
            dkDesc,
            dkeys,
            keys,
            dvDesc,
            dvalues,
            values,
            weightSizeInBytes,
            weights,
            workSpaceSizeInBytes,
            workSpace,
            reserveSpaceSizeInBytes,
            reserveSpace,
        )
    }
    pub unsafe fn cudnnMultiHeadAttnBackwardWeights(
        &self,
        handle: cudnnHandle_t,
        attnDesc: cudnnAttnDescriptor_t,
        addGrad: cudnnWgradMode_t,
        qDesc: cudnnSeqDataDescriptor_t,
        queries: *const ::core::ffi::c_void,
        kDesc: cudnnSeqDataDescriptor_t,
        keys: *const ::core::ffi::c_void,
        vDesc: cudnnSeqDataDescriptor_t,
        values: *const ::core::ffi::c_void,
        doDesc: cudnnSeqDataDescriptor_t,
        dout: *const ::core::ffi::c_void,
        weightSizeInBytes: usize,
        weights: *const ::core::ffi::c_void,
        dweights: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        workSpace: *mut ::core::ffi::c_void,
        reserveSpaceSizeInBytes: usize,
        reserveSpace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnMultiHeadAttnBackwardWeights
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            attnDesc,
            addGrad,
            qDesc,
            queries,
            kDesc,
            keys,
            vDesc,
            values,
            doDesc,
            dout,
            weightSizeInBytes,
            weights,
            dweights,
            workSpaceSizeInBytes,
            workSpace,
            reserveSpaceSizeInBytes,
            reserveSpace,
        )
    }
    pub unsafe fn cudnnCreateCTCLossDescriptor(
        &self,
        ctcLossDesc: *mut cudnnCTCLossDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateCTCLossDescriptor
            .as_ref()
            .expect("Expected function, got error."))(ctcLossDesc)
    }
    pub unsafe fn cudnnSetCTCLossDescriptor(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        compType: cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetCTCLossDescriptor
            .as_ref()
            .expect("Expected function, got error."))(ctcLossDesc, compType)
    }
    pub unsafe fn cudnnSetCTCLossDescriptorEx(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        compType: cudnnDataType_t,
        normMode: cudnnLossNormalizationMode_t,
        gradMode: cudnnNanPropagation_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetCTCLossDescriptorEx
            .as_ref()
            .expect("Expected function, got error."))(
            ctcLossDesc, compType, normMode, gradMode
        )
    }
    pub unsafe fn cudnnSetCTCLossDescriptor_v8(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        compType: cudnnDataType_t,
        normMode: cudnnLossNormalizationMode_t,
        gradMode: cudnnNanPropagation_t,
        maxLabelLength: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetCTCLossDescriptor_v8
            .as_ref()
            .expect("Expected function, got error."))(
            ctcLossDesc,
            compType,
            normMode,
            gradMode,
            maxLabelLength,
        )
    }
    pub unsafe fn cudnnGetCTCLossDescriptor(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        compType: *mut cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetCTCLossDescriptor
            .as_ref()
            .expect("Expected function, got error."))(ctcLossDesc, compType)
    }
    pub unsafe fn cudnnGetCTCLossDescriptorEx(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        compType: *mut cudnnDataType_t,
        normMode: *mut cudnnLossNormalizationMode_t,
        gradMode: *mut cudnnNanPropagation_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetCTCLossDescriptorEx
            .as_ref()
            .expect("Expected function, got error."))(
            ctcLossDesc, compType, normMode, gradMode
        )
    }
    pub unsafe fn cudnnGetCTCLossDescriptor_v8(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        compType: *mut cudnnDataType_t,
        normMode: *mut cudnnLossNormalizationMode_t,
        gradMode: *mut cudnnNanPropagation_t,
        maxLabelLength: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetCTCLossDescriptor_v8
            .as_ref()
            .expect("Expected function, got error."))(
            ctcLossDesc,
            compType,
            normMode,
            gradMode,
            maxLabelLength,
        )
    }
    pub unsafe fn cudnnDestroyCTCLossDescriptor(
        &self,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyCTCLossDescriptor
            .as_ref()
            .expect("Expected function, got error."))(ctcLossDesc)
    }
    pub unsafe fn cudnnCTCLoss(
        &self,
        handle: cudnnHandle_t,
        probsDesc: cudnnTensorDescriptor_t,
        probs: *const ::core::ffi::c_void,
        hostLabels: *const ::core::ffi::c_int,
        hostLabelLengths: *const ::core::ffi::c_int,
        hostInputLengths: *const ::core::ffi::c_int,
        costs: *mut ::core::ffi::c_void,
        gradientsDesc: cudnnTensorDescriptor_t,
        gradients: *mut ::core::ffi::c_void,
        algo: cudnnCTCLossAlgo_t,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        workspace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnCTCLoss
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            probsDesc,
            probs,
            hostLabels,
            hostLabelLengths,
            hostInputLengths,
            costs,
            gradientsDesc,
            gradients,
            algo,
            ctcLossDesc,
            workspace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnCTCLoss_v8(
        &self,
        handle: cudnnHandle_t,
        algo: cudnnCTCLossAlgo_t,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        probsDesc: cudnnTensorDescriptor_t,
        probs: *const ::core::ffi::c_void,
        labels: *const ::core::ffi::c_int,
        labelLengths: *const ::core::ffi::c_int,
        inputLengths: *const ::core::ffi::c_int,
        costs: *mut ::core::ffi::c_void,
        gradientsDesc: cudnnTensorDescriptor_t,
        gradients: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        workspace: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnCTCLoss_v8
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            algo,
            ctcLossDesc,
            probsDesc,
            probs,
            labels,
            labelLengths,
            inputLengths,
            costs,
            gradientsDesc,
            gradients,
            workSpaceSizeInBytes,
            workspace,
        )
    }
    pub unsafe fn cudnnGetCTCLossWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        probsDesc: cudnnTensorDescriptor_t,
        gradientsDesc: cudnnTensorDescriptor_t,
        labels: *const ::core::ffi::c_int,
        labelLengths: *const ::core::ffi::c_int,
        inputLengths: *const ::core::ffi::c_int,
        algo: cudnnCTCLossAlgo_t,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetCTCLossWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            probsDesc,
            gradientsDesc,
            labels,
            labelLengths,
            inputLengths,
            algo,
            ctcLossDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnGetCTCLossWorkspaceSize_v8(
        &self,
        handle: cudnnHandle_t,
        algo: cudnnCTCLossAlgo_t,
        ctcLossDesc: cudnnCTCLossDescriptor_t,
        probsDesc: cudnnTensorDescriptor_t,
        gradientsDesc: cudnnTensorDescriptor_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetCTCLossWorkspaceSize_v8
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            algo,
            ctcLossDesc,
            probsDesc,
            gradientsDesc,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnAdvTrainVersionCheck(&self) -> cudnnStatus_t {
        (self
            .cudnnAdvTrainVersionCheck
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnCreateConvolutionDescriptor(
        &self,
        convDesc: *mut cudnnConvolutionDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateConvolutionDescriptor
            .as_ref()
            .expect("Expected function, got error."))(convDesc)
    }
    pub unsafe fn cudnnDestroyConvolutionDescriptor(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyConvolutionDescriptor
            .as_ref()
            .expect("Expected function, got error."))(convDesc)
    }
    pub unsafe fn cudnnSetConvolutionMathType(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        mathType: cudnnMathType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetConvolutionMathType
            .as_ref()
            .expect("Expected function, got error."))(convDesc, mathType)
    }
    pub unsafe fn cudnnGetConvolutionMathType(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        mathType: *mut cudnnMathType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionMathType
            .as_ref()
            .expect("Expected function, got error."))(convDesc, mathType)
    }
    pub unsafe fn cudnnSetConvolutionGroupCount(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        groupCount: ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetConvolutionGroupCount
            .as_ref()
            .expect("Expected function, got error."))(convDesc, groupCount)
    }
    pub unsafe fn cudnnGetConvolutionGroupCount(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        groupCount: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionGroupCount
            .as_ref()
            .expect("Expected function, got error."))(convDesc, groupCount)
    }
    pub unsafe fn cudnnSetConvolutionReorderType(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        reorderType: cudnnReorderType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetConvolutionReorderType
            .as_ref()
            .expect("Expected function, got error."))(convDesc, reorderType)
    }
    pub unsafe fn cudnnGetConvolutionReorderType(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        reorderType: *mut cudnnReorderType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionReorderType
            .as_ref()
            .expect("Expected function, got error."))(convDesc, reorderType)
    }
    pub unsafe fn cudnnSetConvolution2dDescriptor(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        pad_h: ::core::ffi::c_int,
        pad_w: ::core::ffi::c_int,
        u: ::core::ffi::c_int,
        v: ::core::ffi::c_int,
        dilation_h: ::core::ffi::c_int,
        dilation_w: ::core::ffi::c_int,
        mode: cudnnConvolutionMode_t,
        computeType: cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetConvolution2dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            convDesc,
            pad_h,
            pad_w,
            u,
            v,
            dilation_h,
            dilation_w,
            mode,
            computeType,
        )
    }
    pub unsafe fn cudnnGetConvolution2dDescriptor(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        pad_h: *mut ::core::ffi::c_int,
        pad_w: *mut ::core::ffi::c_int,
        u: *mut ::core::ffi::c_int,
        v: *mut ::core::ffi::c_int,
        dilation_h: *mut ::core::ffi::c_int,
        dilation_w: *mut ::core::ffi::c_int,
        mode: *mut cudnnConvolutionMode_t,
        computeType: *mut cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolution2dDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            convDesc,
            pad_h,
            pad_w,
            u,
            v,
            dilation_h,
            dilation_w,
            mode,
            computeType,
        )
    }
    pub unsafe fn cudnnSetConvolutionNdDescriptor(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        arrayLength: ::core::ffi::c_int,
        padA: *const ::core::ffi::c_int,
        filterStrideA: *const ::core::ffi::c_int,
        dilationA: *const ::core::ffi::c_int,
        mode: cudnnConvolutionMode_t,
        computeType: cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetConvolutionNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            convDesc,
            arrayLength,
            padA,
            filterStrideA,
            dilationA,
            mode,
            computeType,
        )
    }
    pub unsafe fn cudnnGetConvolutionNdDescriptor(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        arrayLengthRequested: ::core::ffi::c_int,
        arrayLength: *mut ::core::ffi::c_int,
        padA: *mut ::core::ffi::c_int,
        strideA: *mut ::core::ffi::c_int,
        dilationA: *mut ::core::ffi::c_int,
        mode: *mut cudnnConvolutionMode_t,
        computeType: *mut cudnnDataType_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionNdDescriptor
            .as_ref()
            .expect("Expected function, got error."))(
            convDesc,
            arrayLengthRequested,
            arrayLength,
            padA,
            strideA,
            dilationA,
            mode,
            computeType,
        )
    }
    pub unsafe fn cudnnGetConvolution2dForwardOutputDim(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        inputTensorDesc: cudnnTensorDescriptor_t,
        filterDesc: cudnnFilterDescriptor_t,
        n: *mut ::core::ffi::c_int,
        c: *mut ::core::ffi::c_int,
        h: *mut ::core::ffi::c_int,
        w: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolution2dForwardOutputDim
            .as_ref()
            .expect("Expected function, got error."))(
            convDesc,
            inputTensorDesc,
            filterDesc,
            n,
            c,
            h,
            w,
        )
    }
    pub unsafe fn cudnnGetConvolutionNdForwardOutputDim(
        &self,
        convDesc: cudnnConvolutionDescriptor_t,
        inputTensorDesc: cudnnTensorDescriptor_t,
        filterDesc: cudnnFilterDescriptor_t,
        nbDims: ::core::ffi::c_int,
        tensorOuputDimA: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionNdForwardOutputDim
            .as_ref()
            .expect("Expected function, got error."))(
            convDesc,
            inputTensorDesc,
            filterDesc,
            nbDims,
            tensorOuputDimA,
        )
    }
    pub unsafe fn cudnnGetConvolutionForwardAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionForwardAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, count)
    }
    pub unsafe fn cudnnGetConvolutionForwardAlgorithm_v7(
        &self,
        handle: cudnnHandle_t,
        srcDesc: cudnnTensorDescriptor_t,
        filterDesc: cudnnFilterDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        destDesc: cudnnTensorDescriptor_t,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionForwardAlgorithm_v7
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            srcDesc,
            filterDesc,
            convDesc,
            destDesc,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
        )
    }
    pub unsafe fn cudnnFindConvolutionForwardAlgorithm(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        wDesc: cudnnFilterDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindConvolutionForwardAlgorithm
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            xDesc,
            wDesc,
            convDesc,
            yDesc,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
        )
    }
    pub unsafe fn cudnnFindConvolutionForwardAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionFwdAlgoPerf_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindConvolutionForwardAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            xDesc,
            x,
            wDesc,
            w,
            convDesc,
            yDesc,
            y,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workSpace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnIm2Col(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        colBuffer: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnIm2Col
            .as_ref()
            .expect("Expected function, got error."))(
            handle, xDesc, x, wDesc, convDesc, colBuffer
        )
    }
    pub unsafe fn cudnnReorderFilterAndBias(
        &self,
        handle: cudnnHandle_t,
        filterDesc: cudnnFilterDescriptor_t,
        reorderType: cudnnReorderType_t,
        filterData: *const ::core::ffi::c_void,
        reorderedFilterData: *mut ::core::ffi::c_void,
        reorderBias: ::core::ffi::c_int,
        biasData: *const ::core::ffi::c_void,
        reorderedBiasData: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnReorderFilterAndBias
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            filterDesc,
            reorderType,
            filterData,
            reorderedFilterData,
            reorderBias,
            biasData,
            reorderedBiasData,
        )
    }
    pub unsafe fn cudnnGetConvolutionForwardWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        wDesc: cudnnFilterDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        algo: cudnnConvolutionFwdAlgo_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionForwardWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            xDesc,
            wDesc,
            convDesc,
            yDesc,
            algo,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnConvolutionForward(
        &self,
        handle: cudnnHandle_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionFwdAlgo_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        beta: *const ::core::ffi::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnConvolutionForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            alpha,
            xDesc,
            x,
            wDesc,
            w,
            convDesc,
            algo,
            workSpace,
            workSpaceSizeInBytes,
            beta,
            yDesc,
            y,
        )
    }
    pub unsafe fn cudnnConvolutionBiasActivationForward(
        &self,
        handle: cudnnHandle_t,
        alpha1: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionFwdAlgo_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        alpha2: *const ::core::ffi::c_void,
        zDesc: cudnnTensorDescriptor_t,
        z: *const ::core::ffi::c_void,
        biasDesc: cudnnTensorDescriptor_t,
        bias: *const ::core::ffi::c_void,
        activationDesc: cudnnActivationDescriptor_t,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnConvolutionBiasActivationForward
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            alpha1,
            xDesc,
            x,
            wDesc,
            w,
            convDesc,
            algo,
            workSpace,
            workSpaceSizeInBytes,
            alpha2,
            zDesc,
            z,
            biasDesc,
            bias,
            activationDesc,
            yDesc,
            y,
        )
    }
    pub unsafe fn cudnnGetConvolutionBackwardDataAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionBackwardDataAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, count)
    }
    pub unsafe fn cudnnFindConvolutionBackwardDataAlgorithm(
        &self,
        handle: cudnnHandle_t,
        wDesc: cudnnFilterDescriptor_t,
        dyDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        dxDesc: cudnnTensorDescriptor_t,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindConvolutionBackwardDataAlgorithm
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            wDesc,
            dyDesc,
            convDesc,
            dxDesc,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
        )
    }
    pub unsafe fn cudnnFindConvolutionBackwardDataAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindConvolutionBackwardDataAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            wDesc,
            w,
            dyDesc,
            dy,
            convDesc,
            dxDesc,
            dx,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workSpace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetConvolutionBackwardDataAlgorithm_v7(
        &self,
        handle: cudnnHandle_t,
        filterDesc: cudnnFilterDescriptor_t,
        diffDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        gradDesc: cudnnTensorDescriptor_t,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionBwdDataAlgoPerf_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionBackwardDataAlgorithm_v7
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            filterDesc,
            diffDesc,
            convDesc,
            gradDesc,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
        )
    }
    pub unsafe fn cudnnGetConvolutionBackwardDataWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        wDesc: cudnnFilterDescriptor_t,
        dyDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        dxDesc: cudnnTensorDescriptor_t,
        algo: cudnnConvolutionBwdDataAlgo_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionBackwardDataWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            wDesc,
            dyDesc,
            convDesc,
            dxDesc,
            algo,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnConvolutionBackwardData(
        &self,
        handle: cudnnHandle_t,
        alpha: *const ::core::ffi::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionBwdDataAlgo_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        beta: *const ::core::ffi::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnConvolutionBackwardData
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            alpha,
            wDesc,
            w,
            dyDesc,
            dy,
            convDesc,
            algo,
            workSpace,
            workSpaceSizeInBytes,
            beta,
            dxDesc,
            dx,
        )
    }
    pub unsafe fn cudnnGetFoldedConvBackwardDataDescriptors(
        &self,
        handle: cudnnHandle_t,
        filterDesc: cudnnFilterDescriptor_t,
        diffDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        gradDesc: cudnnTensorDescriptor_t,
        transformFormat: cudnnTensorFormat_t,
        foldedFilterDesc: cudnnFilterDescriptor_t,
        paddedDiffDesc: cudnnTensorDescriptor_t,
        foldedConvDesc: cudnnConvolutionDescriptor_t,
        foldedGradDesc: cudnnTensorDescriptor_t,
        filterFoldTransDesc: cudnnTensorTransformDescriptor_t,
        diffPadTransDesc: cudnnTensorTransformDescriptor_t,
        gradFoldTransDesc: cudnnTensorTransformDescriptor_t,
        gradUnfoldTransDesc: cudnnTensorTransformDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetFoldedConvBackwardDataDescriptors
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            filterDesc,
            diffDesc,
            convDesc,
            gradDesc,
            transformFormat,
            foldedFilterDesc,
            paddedDiffDesc,
            foldedConvDesc,
            foldedGradDesc,
            filterFoldTransDesc,
            diffPadTransDesc,
            gradFoldTransDesc,
            gradUnfoldTransDesc,
        )
    }
    pub unsafe fn cudnnCnnInferVersionCheck(&self) -> cudnnStatus_t {
        (self
            .cudnnCnnInferVersionCheck
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnGetConvolutionBackwardFilterAlgorithmMaxCount(
        &self,
        handle: cudnnHandle_t,
        count: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionBackwardFilterAlgorithmMaxCount
            .as_ref()
            .expect("Expected function, got error."))(handle, count)
    }
    pub unsafe fn cudnnFindConvolutionBackwardFilterAlgorithm(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        dyDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        dwDesc: cudnnFilterDescriptor_t,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindConvolutionBackwardFilterAlgorithm
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            xDesc,
            dyDesc,
            convDesc,
            dwDesc,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
        )
    }
    pub unsafe fn cudnnFindConvolutionBackwardFilterAlgorithmEx(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        y: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        dwDesc: cudnnFilterDescriptor_t,
        dw: *mut ::core::ffi::c_void,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnFindConvolutionBackwardFilterAlgorithmEx
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            xDesc,
            x,
            dyDesc,
            y,
            convDesc,
            dwDesc,
            dw,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
            workSpace,
            workSpaceSizeInBytes,
        )
    }
    pub unsafe fn cudnnGetConvolutionBackwardFilterAlgorithm_v7(
        &self,
        handle: cudnnHandle_t,
        srcDesc: cudnnTensorDescriptor_t,
        diffDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        gradDesc: cudnnFilterDescriptor_t,
        requestedAlgoCount: ::core::ffi::c_int,
        returnedAlgoCount: *mut ::core::ffi::c_int,
        perfResults: *mut cudnnConvolutionBwdFilterAlgoPerf_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionBackwardFilterAlgorithm_v7
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            srcDesc,
            diffDesc,
            convDesc,
            gradDesc,
            requestedAlgoCount,
            returnedAlgoCount,
            perfResults,
        )
    }
    pub unsafe fn cudnnGetConvolutionBackwardFilterWorkspaceSize(
        &self,
        handle: cudnnHandle_t,
        xDesc: cudnnTensorDescriptor_t,
        dyDesc: cudnnTensorDescriptor_t,
        convDesc: cudnnConvolutionDescriptor_t,
        gradDesc: cudnnFilterDescriptor_t,
        algo: cudnnConvolutionBwdFilterAlgo_t,
        sizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetConvolutionBackwardFilterWorkspaceSize
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            xDesc,
            dyDesc,
            convDesc,
            gradDesc,
            algo,
            sizeInBytes,
        )
    }
    pub unsafe fn cudnnConvolutionBackwardFilter(
        &self,
        handle: cudnnHandle_t,
        alpha: *const ::core::ffi::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionBwdFilterAlgo_t,
        workSpace: *mut ::core::ffi::c_void,
        workSpaceSizeInBytes: usize,
        beta: *const ::core::ffi::c_void,
        dwDesc: cudnnFilterDescriptor_t,
        dw: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnConvolutionBackwardFilter
            .as_ref()
            .expect("Expected function, got error."))(
            handle,
            alpha,
            xDesc,
            x,
            dyDesc,
            dy,
            convDesc,
            algo,
            workSpace,
            workSpaceSizeInBytes,
            beta,
            dwDesc,
            dw,
        )
    }
    pub unsafe fn cudnnConvolutionBackwardBias(
        &self,
        handle: cudnnHandle_t,
        alpha: *const ::core::ffi::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::core::ffi::c_void,
        beta: *const ::core::ffi::c_void,
        dbDesc: cudnnTensorDescriptor_t,
        db: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnConvolutionBackwardBias
            .as_ref()
            .expect("Expected function, got error."))(
            handle, alpha, dyDesc, dy, beta, dbDesc, db
        )
    }
    pub unsafe fn cudnnCreateFusedOpsConstParamPack(
        &self,
        constPack: *mut cudnnFusedOpsConstParamPack_t,
        ops: cudnnFusedOps_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateFusedOpsConstParamPack
            .as_ref()
            .expect("Expected function, got error."))(constPack, ops)
    }
    pub unsafe fn cudnnDestroyFusedOpsConstParamPack(
        &self,
        constPack: cudnnFusedOpsConstParamPack_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyFusedOpsConstParamPack
            .as_ref()
            .expect("Expected function, got error."))(constPack)
    }
    pub unsafe fn cudnnSetFusedOpsConstParamPackAttribute(
        &self,
        constPack: cudnnFusedOpsConstParamPack_t,
        paramLabel: cudnnFusedOpsConstParamLabel_t,
        param: *const ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetFusedOpsConstParamPackAttribute
            .as_ref()
            .expect("Expected function, got error."))(constPack, paramLabel, param)
    }
    pub unsafe fn cudnnGetFusedOpsConstParamPackAttribute(
        &self,
        constPack: cudnnFusedOpsConstParamPack_t,
        paramLabel: cudnnFusedOpsConstParamLabel_t,
        param: *mut ::core::ffi::c_void,
        isNULL: *mut ::core::ffi::c_int,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetFusedOpsConstParamPackAttribute
            .as_ref()
            .expect("Expected function, got error."))(constPack, paramLabel, param, isNULL)
    }
    pub unsafe fn cudnnCreateFusedOpsVariantParamPack(
        &self,
        varPack: *mut cudnnFusedOpsVariantParamPack_t,
        ops: cudnnFusedOps_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateFusedOpsVariantParamPack
            .as_ref()
            .expect("Expected function, got error."))(varPack, ops)
    }
    pub unsafe fn cudnnDestroyFusedOpsVariantParamPack(
        &self,
        varPack: cudnnFusedOpsVariantParamPack_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnDestroyFusedOpsVariantParamPack
            .as_ref()
            .expect("Expected function, got error."))(varPack)
    }
    pub unsafe fn cudnnSetFusedOpsVariantParamPackAttribute(
        &self,
        varPack: cudnnFusedOpsVariantParamPack_t,
        paramLabel: cudnnFusedOpsVariantParamLabel_t,
        ptr: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnSetFusedOpsVariantParamPackAttribute
            .as_ref()
            .expect("Expected function, got error."))(varPack, paramLabel, ptr)
    }
    pub unsafe fn cudnnGetFusedOpsVariantParamPackAttribute(
        &self,
        varPack: cudnnFusedOpsVariantParamPack_t,
        paramLabel: cudnnFusedOpsVariantParamLabel_t,
        ptr: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnGetFusedOpsVariantParamPackAttribute
            .as_ref()
            .expect("Expected function, got error."))(varPack, paramLabel, ptr)
    }
    pub unsafe fn cudnnCreateFusedOpsPlan(
        &self,
        plan: *mut cudnnFusedOpsPlan_t,
        ops: cudnnFusedOps_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnCreateFusedOpsPlan
            .as_ref()
            .expect("Expected function, got error."))(plan, ops)
    }
    pub unsafe fn cudnnDestroyFusedOpsPlan(&self, plan: cudnnFusedOpsPlan_t) -> cudnnStatus_t {
        (self
            .cudnnDestroyFusedOpsPlan
            .as_ref()
            .expect("Expected function, got error."))(plan)
    }
    pub unsafe fn cudnnMakeFusedOpsPlan(
        &self,
        handle: cudnnHandle_t,
        plan: cudnnFusedOpsPlan_t,
        constPack: cudnnFusedOpsConstParamPack_t,
        workspaceSizeInBytes: *mut usize,
    ) -> cudnnStatus_t {
        (self
            .cudnnMakeFusedOpsPlan
            .as_ref()
            .expect("Expected function, got error."))(
            handle, plan, constPack, workspaceSizeInBytes
        )
    }
    pub unsafe fn cudnnFusedOpsExecute(
        &self,
        handle: cudnnHandle_t,
        plan: cudnnFusedOpsPlan_t,
        varPack: cudnnFusedOpsVariantParamPack_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnFusedOpsExecute
            .as_ref()
            .expect("Expected function, got error."))(handle, plan, varPack)
    }
    pub unsafe fn cudnnCnnTrainVersionCheck(&self) -> cudnnStatus_t {
        (self
            .cudnnCnnTrainVersionCheck
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudnnBackendCreateDescriptor(
        &self,
        descriptorType: cudnnBackendDescriptorType_t,
        descriptor: *mut cudnnBackendDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendCreateDescriptor
            .as_ref()
            .expect("Expected function, got error."))(descriptorType, descriptor)
    }
    pub unsafe fn cudnnBackendDestroyDescriptor(
        &self,
        descriptor: cudnnBackendDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendDestroyDescriptor
            .as_ref()
            .expect("Expected function, got error."))(descriptor)
    }
    pub unsafe fn cudnnBackendInitialize(
        &self,
        descriptor: cudnnBackendDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendInitialize
            .as_ref()
            .expect("Expected function, got error."))(descriptor)
    }
    pub unsafe fn cudnnBackendFinalize(
        &self,
        descriptor: cudnnBackendDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendFinalize
            .as_ref()
            .expect("Expected function, got error."))(descriptor)
    }
    pub unsafe fn cudnnBackendSetAttribute(
        &self,
        descriptor: cudnnBackendDescriptor_t,
        attributeName: cudnnBackendAttributeName_t,
        attributeType: cudnnBackendAttributeType_t,
        elementCount: i64,
        arrayOfElements: *const ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(
            descriptor,
            attributeName,
            attributeType,
            elementCount,
            arrayOfElements,
        )
    }
    pub unsafe fn cudnnBackendGetAttribute(
        &self,
        descriptor: cudnnBackendDescriptor_t,
        attributeName: cudnnBackendAttributeName_t,
        attributeType: cudnnBackendAttributeType_t,
        requestedElementCount: i64,
        elementCount: *mut i64,
        arrayOfElements: *mut ::core::ffi::c_void,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(
            descriptor,
            attributeName,
            attributeType,
            requestedElementCount,
            elementCount,
            arrayOfElements,
        )
    }
    pub unsafe fn cudnnBackendExecute(
        &self,
        handle: cudnnHandle_t,
        executionPlan: cudnnBackendDescriptor_t,
        variantPack: cudnnBackendDescriptor_t,
    ) -> cudnnStatus_t {
        (self
            .cudnnBackendExecute
            .as_ref()
            .expect("Expected function, got error."))(handle, executionPlan, variantPack)
    }
}
