/* automatically generated by rust-bindgen 0.71.1 */

pub const cudaHostAllocDefault: u32 = 0;
pub const cudaHostAllocPortable: u32 = 1;
pub const cudaHostAllocMapped: u32 = 2;
pub const cudaHostAllocWriteCombined: u32 = 4;
pub const cudaHostRegisterDefault: u32 = 0;
pub const cudaHostRegisterPortable: u32 = 1;
pub const cudaHostRegisterMapped: u32 = 2;
pub const cudaHostRegisterIoMemory: u32 = 4;
pub const cudaHostRegisterReadOnly: u32 = 8;
pub const cudaPeerAccessDefault: u32 = 0;
pub const cudaStreamDefault: u32 = 0;
pub const cudaStreamNonBlocking: u32 = 1;
pub const cudaEventDefault: u32 = 0;
pub const cudaEventBlockingSync: u32 = 1;
pub const cudaEventDisableTiming: u32 = 2;
pub const cudaEventInterprocess: u32 = 4;
pub const cudaEventRecordDefault: u32 = 0;
pub const cudaEventRecordExternal: u32 = 1;
pub const cudaEventWaitDefault: u32 = 0;
pub const cudaEventWaitExternal: u32 = 1;
pub const cudaDeviceScheduleAuto: u32 = 0;
pub const cudaDeviceScheduleSpin: u32 = 1;
pub const cudaDeviceScheduleYield: u32 = 2;
pub const cudaDeviceScheduleBlockingSync: u32 = 4;
pub const cudaDeviceBlockingSync: u32 = 4;
pub const cudaDeviceScheduleMask: u32 = 7;
pub const cudaDeviceMapHost: u32 = 8;
pub const cudaDeviceLmemResizeToMax: u32 = 16;
pub const cudaDeviceSyncMemops: u32 = 128;
pub const cudaDeviceMask: u32 = 255;
pub const cudaArrayDefault: u32 = 0;
pub const cudaArrayLayered: u32 = 1;
pub const cudaArraySurfaceLoadStore: u32 = 2;
pub const cudaArrayCubemap: u32 = 4;
pub const cudaArrayTextureGather: u32 = 8;
pub const cudaArrayColorAttachment: u32 = 32;
pub const cudaArraySparse: u32 = 64;
pub const cudaArrayDeferredMapping: u32 = 128;
pub const cudaIpcMemLazyEnablePeerAccess: u32 = 1;
pub const cudaMemAttachGlobal: u32 = 1;
pub const cudaMemAttachHost: u32 = 2;
pub const cudaMemAttachSingle: u32 = 4;
pub const cudaOccupancyDefault: u32 = 0;
pub const cudaOccupancyDisableCachingOverride: u32 = 1;
pub const cudaInitDeviceFlagsAreValid: u32 = 1;
pub const cudaCooperativeLaunchMultiDeviceNoPreSync: u32 = 1;
pub const cudaCooperativeLaunchMultiDeviceNoPostSync: u32 = 2;
pub const cudaArraySparsePropertiesSingleMipTail: u32 = 1;
pub const cudaMemPoolCreateUsageHwDecompress: u32 = 2;
pub const CUDA_IPC_HANDLE_SIZE: u32 = 64;
pub const cudaExternalMemoryDedicated: u32 = 1;
pub const cudaExternalSemaphoreSignalSkipNvSciBufMemSync: u32 = 1;
pub const cudaExternalSemaphoreWaitSkipNvSciBufMemSync: u32 = 2;
pub const cudaNvSciSyncAttrSignal: u32 = 1;
pub const cudaNvSciSyncAttrWait: u32 = 2;
pub const cudaGraphKernelNodePortDefault: u32 = 0;
pub const cudaGraphKernelNodePortProgrammatic: u32 = 1;
pub const cudaGraphKernelNodePortLaunchCompletion: u32 = 2;
pub const cudaSurfaceType1D: u32 = 1;
pub const cudaSurfaceType2D: u32 = 2;
pub const cudaSurfaceType3D: u32 = 3;
pub const cudaSurfaceTypeCubemap: u32 = 12;
pub const cudaSurfaceType1DLayered: u32 = 241;
pub const cudaSurfaceType2DLayered: u32 = 242;
pub const cudaSurfaceTypeCubemapLayered: u32 = 252;
pub const cudaTextureType1D: u32 = 1;
pub const cudaTextureType2D: u32 = 2;
pub const cudaTextureType3D: u32 = 3;
pub const cudaTextureTypeCubemap: u32 = 12;
pub const cudaTextureType1DLayered: u32 = 241;
pub const cudaTextureType2DLayered: u32 = 242;
pub const cudaTextureTypeCubemapLayered: u32 = 252;
pub const CUDART_VERSION: u32 = 12080;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaRoundMode {
    cudaRoundNearest = 0,
    cudaRoundZero = 1,
    cudaRoundPosInf = 2,
    cudaRoundMinInf = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct dim3 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dim3"][::core::mem::size_of::<dim3>() - 12usize];
    ["Alignment of dim3"][::core::mem::align_of::<dim3>() - 4usize];
    ["Offset of field: dim3::x"][::core::mem::offset_of!(dim3, x) - 0usize];
    ["Offset of field: dim3::y"][::core::mem::offset_of!(dim3, y) - 4usize];
    ["Offset of field: dim3::z"][::core::mem::offset_of!(dim3, z) - 8usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaError {
    cudaSuccess = 0,
    cudaErrorInvalidValue = 1,
    cudaErrorMemoryAllocation = 2,
    cudaErrorInitializationError = 3,
    cudaErrorCudartUnloading = 4,
    cudaErrorProfilerDisabled = 5,
    cudaErrorProfilerNotInitialized = 6,
    cudaErrorProfilerAlreadyStarted = 7,
    cudaErrorProfilerAlreadyStopped = 8,
    cudaErrorInvalidConfiguration = 9,
    cudaErrorInvalidPitchValue = 12,
    cudaErrorInvalidSymbol = 13,
    cudaErrorInvalidHostPointer = 16,
    cudaErrorInvalidDevicePointer = 17,
    cudaErrorInvalidTexture = 18,
    cudaErrorInvalidTextureBinding = 19,
    cudaErrorInvalidChannelDescriptor = 20,
    cudaErrorInvalidMemcpyDirection = 21,
    cudaErrorAddressOfConstant = 22,
    cudaErrorTextureFetchFailed = 23,
    cudaErrorTextureNotBound = 24,
    cudaErrorSynchronizationError = 25,
    cudaErrorInvalidFilterSetting = 26,
    cudaErrorInvalidNormSetting = 27,
    cudaErrorMixedDeviceExecution = 28,
    cudaErrorNotYetImplemented = 31,
    cudaErrorMemoryValueTooLarge = 32,
    cudaErrorStubLibrary = 34,
    cudaErrorInsufficientDriver = 35,
    cudaErrorCallRequiresNewerDriver = 36,
    cudaErrorInvalidSurface = 37,
    cudaErrorDuplicateVariableName = 43,
    cudaErrorDuplicateTextureName = 44,
    cudaErrorDuplicateSurfaceName = 45,
    cudaErrorDevicesUnavailable = 46,
    cudaErrorIncompatibleDriverContext = 49,
    cudaErrorMissingConfiguration = 52,
    cudaErrorPriorLaunchFailure = 53,
    cudaErrorLaunchMaxDepthExceeded = 65,
    cudaErrorLaunchFileScopedTex = 66,
    cudaErrorLaunchFileScopedSurf = 67,
    cudaErrorSyncDepthExceeded = 68,
    cudaErrorLaunchPendingCountExceeded = 69,
    cudaErrorInvalidDeviceFunction = 98,
    cudaErrorNoDevice = 100,
    cudaErrorInvalidDevice = 101,
    cudaErrorDeviceNotLicensed = 102,
    cudaErrorSoftwareValidityNotEstablished = 103,
    cudaErrorStartupFailure = 127,
    cudaErrorInvalidKernelImage = 200,
    cudaErrorDeviceUninitialized = 201,
    cudaErrorMapBufferObjectFailed = 205,
    cudaErrorUnmapBufferObjectFailed = 206,
    cudaErrorArrayIsMapped = 207,
    cudaErrorAlreadyMapped = 208,
    cudaErrorNoKernelImageForDevice = 209,
    cudaErrorAlreadyAcquired = 210,
    cudaErrorNotMapped = 211,
    cudaErrorNotMappedAsArray = 212,
    cudaErrorNotMappedAsPointer = 213,
    cudaErrorECCUncorrectable = 214,
    cudaErrorUnsupportedLimit = 215,
    cudaErrorDeviceAlreadyInUse = 216,
    cudaErrorPeerAccessUnsupported = 217,
    cudaErrorInvalidPtx = 218,
    cudaErrorInvalidGraphicsContext = 219,
    cudaErrorNvlinkUncorrectable = 220,
    cudaErrorJitCompilerNotFound = 221,
    cudaErrorUnsupportedPtxVersion = 222,
    cudaErrorJitCompilationDisabled = 223,
    cudaErrorUnsupportedExecAffinity = 224,
    cudaErrorUnsupportedDevSideSync = 225,
    cudaErrorContained = 226,
    cudaErrorInvalidSource = 300,
    cudaErrorFileNotFound = 301,
    cudaErrorSharedObjectSymbolNotFound = 302,
    cudaErrorSharedObjectInitFailed = 303,
    cudaErrorOperatingSystem = 304,
    cudaErrorInvalidResourceHandle = 400,
    cudaErrorIllegalState = 401,
    cudaErrorLossyQuery = 402,
    cudaErrorSymbolNotFound = 500,
    cudaErrorNotReady = 600,
    cudaErrorIllegalAddress = 700,
    cudaErrorLaunchOutOfResources = 701,
    cudaErrorLaunchTimeout = 702,
    cudaErrorLaunchIncompatibleTexturing = 703,
    cudaErrorPeerAccessAlreadyEnabled = 704,
    cudaErrorPeerAccessNotEnabled = 705,
    cudaErrorSetOnActiveProcess = 708,
    cudaErrorContextIsDestroyed = 709,
    cudaErrorAssert = 710,
    cudaErrorTooManyPeers = 711,
    cudaErrorHostMemoryAlreadyRegistered = 712,
    cudaErrorHostMemoryNotRegistered = 713,
    cudaErrorHardwareStackError = 714,
    cudaErrorIllegalInstruction = 715,
    cudaErrorMisalignedAddress = 716,
    cudaErrorInvalidAddressSpace = 717,
    cudaErrorInvalidPc = 718,
    cudaErrorLaunchFailure = 719,
    cudaErrorCooperativeLaunchTooLarge = 720,
    cudaErrorTensorMemoryLeak = 721,
    cudaErrorNotPermitted = 800,
    cudaErrorNotSupported = 801,
    cudaErrorSystemNotReady = 802,
    cudaErrorSystemDriverMismatch = 803,
    cudaErrorCompatNotSupportedOnDevice = 804,
    cudaErrorMpsConnectionFailed = 805,
    cudaErrorMpsRpcFailure = 806,
    cudaErrorMpsServerNotReady = 807,
    cudaErrorMpsMaxClientsReached = 808,
    cudaErrorMpsMaxConnectionsReached = 809,
    cudaErrorMpsClientTerminated = 810,
    cudaErrorCdpNotSupported = 811,
    cudaErrorCdpVersionMismatch = 812,
    cudaErrorStreamCaptureUnsupported = 900,
    cudaErrorStreamCaptureInvalidated = 901,
    cudaErrorStreamCaptureMerge = 902,
    cudaErrorStreamCaptureUnmatched = 903,
    cudaErrorStreamCaptureUnjoined = 904,
    cudaErrorStreamCaptureIsolation = 905,
    cudaErrorStreamCaptureImplicit = 906,
    cudaErrorCapturedEvent = 907,
    cudaErrorStreamCaptureWrongThread = 908,
    cudaErrorTimeout = 909,
    cudaErrorGraphExecUpdateFailure = 910,
    cudaErrorExternalDevice = 911,
    cudaErrorInvalidClusterSize = 912,
    cudaErrorFunctionNotLoaded = 913,
    cudaErrorInvalidResourceType = 914,
    cudaErrorInvalidResourceConfiguration = 915,
    cudaErrorUnknown = 999,
    cudaErrorApiFailureBase = 10000,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaChannelFormatKind {
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3,
    cudaChannelFormatKindNV12 = 4,
    cudaChannelFormatKindUnsignedNormalized8X1 = 5,
    cudaChannelFormatKindUnsignedNormalized8X2 = 6,
    cudaChannelFormatKindUnsignedNormalized8X4 = 7,
    cudaChannelFormatKindUnsignedNormalized16X1 = 8,
    cudaChannelFormatKindUnsignedNormalized16X2 = 9,
    cudaChannelFormatKindUnsignedNormalized16X4 = 10,
    cudaChannelFormatKindSignedNormalized8X1 = 11,
    cudaChannelFormatKindSignedNormalized8X2 = 12,
    cudaChannelFormatKindSignedNormalized8X4 = 13,
    cudaChannelFormatKindSignedNormalized16X1 = 14,
    cudaChannelFormatKindSignedNormalized16X2 = 15,
    cudaChannelFormatKindSignedNormalized16X4 = 16,
    cudaChannelFormatKindUnsignedBlockCompressed1 = 17,
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18,
    cudaChannelFormatKindUnsignedBlockCompressed2 = 19,
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20,
    cudaChannelFormatKindUnsignedBlockCompressed3 = 21,
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22,
    cudaChannelFormatKindUnsignedBlockCompressed4 = 23,
    cudaChannelFormatKindSignedBlockCompressed4 = 24,
    cudaChannelFormatKindUnsignedBlockCompressed5 = 25,
    cudaChannelFormatKindSignedBlockCompressed5 = 26,
    cudaChannelFormatKindUnsignedBlockCompressed6H = 27,
    cudaChannelFormatKindSignedBlockCompressed6H = 28,
    cudaChannelFormatKindUnsignedBlockCompressed7 = 29,
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30,
    cudaChannelFormatKindUnsignedNormalized1010102 = 31,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChannelFormatDesc {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
    pub z: ::core::ffi::c_int,
    pub w: ::core::ffi::c_int,
    pub f: cudaChannelFormatKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaChannelFormatDesc"][::core::mem::size_of::<cudaChannelFormatDesc>() - 20usize];
    ["Alignment of cudaChannelFormatDesc"]
        [::core::mem::align_of::<cudaChannelFormatDesc>() - 4usize];
    ["Offset of field: cudaChannelFormatDesc::x"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, x) - 0usize];
    ["Offset of field: cudaChannelFormatDesc::y"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, y) - 4usize];
    ["Offset of field: cudaChannelFormatDesc::z"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, z) - 8usize];
    ["Offset of field: cudaChannelFormatDesc::w"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, w) - 12usize];
    ["Offset of field: cudaChannelFormatDesc::f"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, f) - 16usize];
};
impl Default for cudaChannelFormatDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaArray {
    _unused: [u8; 0],
}
pub type cudaArray_t = *mut cudaArray;
pub type cudaArray_const_t = *const cudaArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaMipmappedArray {
    _unused: [u8; 0],
}
pub type cudaMipmappedArray_t = *mut cudaMipmappedArray;
pub type cudaMipmappedArray_const_t = *const cudaMipmappedArray;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties {
    pub tileExtent: cudaArraySparseProperties__bindgen_ty_1,
    pub miptailFirstLevel: ::core::ffi::c_uint,
    pub miptailSize: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties__bindgen_ty_1 {
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub depth: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaArraySparseProperties__bindgen_ty_1"]
        [::core::mem::size_of::<cudaArraySparseProperties__bindgen_ty_1>() - 12usize];
    ["Alignment of cudaArraySparseProperties__bindgen_ty_1"]
        [::core::mem::align_of::<cudaArraySparseProperties__bindgen_ty_1>() - 4usize];
    ["Offset of field: cudaArraySparseProperties__bindgen_ty_1::width"]
        [::core::mem::offset_of!(cudaArraySparseProperties__bindgen_ty_1, width) - 0usize];
    ["Offset of field: cudaArraySparseProperties__bindgen_ty_1::height"]
        [::core::mem::offset_of!(cudaArraySparseProperties__bindgen_ty_1, height) - 4usize];
    ["Offset of field: cudaArraySparseProperties__bindgen_ty_1::depth"]
        [::core::mem::offset_of!(cudaArraySparseProperties__bindgen_ty_1, depth) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaArraySparseProperties"]
        [::core::mem::size_of::<cudaArraySparseProperties>() - 48usize];
    ["Alignment of cudaArraySparseProperties"]
        [::core::mem::align_of::<cudaArraySparseProperties>() - 8usize];
    ["Offset of field: cudaArraySparseProperties::tileExtent"]
        [::core::mem::offset_of!(cudaArraySparseProperties, tileExtent) - 0usize];
    ["Offset of field: cudaArraySparseProperties::miptailFirstLevel"]
        [::core::mem::offset_of!(cudaArraySparseProperties, miptailFirstLevel) - 12usize];
    ["Offset of field: cudaArraySparseProperties::miptailSize"]
        [::core::mem::offset_of!(cudaArraySparseProperties, miptailSize) - 16usize];
    ["Offset of field: cudaArraySparseProperties::flags"]
        [::core::mem::offset_of!(cudaArraySparseProperties, flags) - 24usize];
    ["Offset of field: cudaArraySparseProperties::reserved"]
        [::core::mem::offset_of!(cudaArraySparseProperties, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayMemoryRequirements {
    pub size: usize,
    pub alignment: usize,
    pub reserved: [::core::ffi::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaArrayMemoryRequirements"]
        [::core::mem::size_of::<cudaArrayMemoryRequirements>() - 32usize];
    ["Alignment of cudaArrayMemoryRequirements"]
        [::core::mem::align_of::<cudaArrayMemoryRequirements>() - 8usize];
    ["Offset of field: cudaArrayMemoryRequirements::size"]
        [::core::mem::offset_of!(cudaArrayMemoryRequirements, size) - 0usize];
    ["Offset of field: cudaArrayMemoryRequirements::alignment"]
        [::core::mem::offset_of!(cudaArrayMemoryRequirements, alignment) - 8usize];
    ["Offset of field: cudaArrayMemoryRequirements::reserved"]
        [::core::mem::offset_of!(cudaArrayMemoryRequirements, reserved) - 16usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryType {
    cudaMemoryTypeUnregistered = 0,
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2,
    cudaMemoryTypeManaged = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpyKind {
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPitchedPtr {
    pub ptr: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub xsize: usize,
    pub ysize: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaPitchedPtr"][::core::mem::size_of::<cudaPitchedPtr>() - 32usize];
    ["Alignment of cudaPitchedPtr"][::core::mem::align_of::<cudaPitchedPtr>() - 8usize];
    ["Offset of field: cudaPitchedPtr::ptr"][::core::mem::offset_of!(cudaPitchedPtr, ptr) - 0usize];
    ["Offset of field: cudaPitchedPtr::pitch"]
        [::core::mem::offset_of!(cudaPitchedPtr, pitch) - 8usize];
    ["Offset of field: cudaPitchedPtr::xsize"]
        [::core::mem::offset_of!(cudaPitchedPtr, xsize) - 16usize];
    ["Offset of field: cudaPitchedPtr::ysize"]
        [::core::mem::offset_of!(cudaPitchedPtr, ysize) - 24usize];
};
impl Default for cudaPitchedPtr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExtent {
    pub width: usize,
    pub height: usize,
    pub depth: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExtent"][::core::mem::size_of::<cudaExtent>() - 24usize];
    ["Alignment of cudaExtent"][::core::mem::align_of::<cudaExtent>() - 8usize];
    ["Offset of field: cudaExtent::width"][::core::mem::offset_of!(cudaExtent, width) - 0usize];
    ["Offset of field: cudaExtent::height"][::core::mem::offset_of!(cudaExtent, height) - 8usize];
    ["Offset of field: cudaExtent::depth"][::core::mem::offset_of!(cudaExtent, depth) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPos {
    pub x: usize,
    pub y: usize,
    pub z: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaPos"][::core::mem::size_of::<cudaPos>() - 24usize];
    ["Alignment of cudaPos"][::core::mem::align_of::<cudaPos>() - 8usize];
    ["Offset of field: cudaPos::x"][::core::mem::offset_of!(cudaPos, x) - 0usize];
    ["Offset of field: cudaPos::y"][::core::mem::offset_of!(cudaPos, y) - 8usize];
    ["Offset of field: cudaPos::z"][::core::mem::offset_of!(cudaPos, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub extent: cudaExtent,
    pub kind: cudaMemcpyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DParms"][::core::mem::size_of::<cudaMemcpy3DParms>() - 160usize];
    ["Alignment of cudaMemcpy3DParms"][::core::mem::align_of::<cudaMemcpy3DParms>() - 8usize];
    ["Offset of field: cudaMemcpy3DParms::srcArray"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, srcArray) - 0usize];
    ["Offset of field: cudaMemcpy3DParms::srcPos"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, srcPos) - 8usize];
    ["Offset of field: cudaMemcpy3DParms::srcPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, srcPtr) - 32usize];
    ["Offset of field: cudaMemcpy3DParms::dstArray"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, dstArray) - 64usize];
    ["Offset of field: cudaMemcpy3DParms::dstPos"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, dstPos) - 72usize];
    ["Offset of field: cudaMemcpy3DParms::dstPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, dstPtr) - 96usize];
    ["Offset of field: cudaMemcpy3DParms::extent"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, extent) - 128usize];
    ["Offset of field: cudaMemcpy3DParms::kind"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, kind) - 152usize];
};
impl Default for cudaMemcpy3DParms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyNodeParams {
    pub flags: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 3usize],
    pub copyParams: cudaMemcpy3DParms,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpyNodeParams"][::core::mem::size_of::<cudaMemcpyNodeParams>() - 176usize];
    ["Alignment of cudaMemcpyNodeParams"][::core::mem::align_of::<cudaMemcpyNodeParams>() - 8usize];
    ["Offset of field: cudaMemcpyNodeParams::flags"]
        [::core::mem::offset_of!(cudaMemcpyNodeParams, flags) - 0usize];
    ["Offset of field: cudaMemcpyNodeParams::reserved"]
        [::core::mem::offset_of!(cudaMemcpyNodeParams, reserved) - 4usize];
    ["Offset of field: cudaMemcpyNodeParams::copyParams"]
        [::core::mem::offset_of!(cudaMemcpyNodeParams, copyParams) - 16usize];
};
impl Default for cudaMemcpyNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeerParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub srcDevice: ::core::ffi::c_int,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub dstDevice: ::core::ffi::c_int,
    pub extent: cudaExtent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DPeerParms"][::core::mem::size_of::<cudaMemcpy3DPeerParms>() - 168usize];
    ["Alignment of cudaMemcpy3DPeerParms"]
        [::core::mem::align_of::<cudaMemcpy3DPeerParms>() - 8usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcArray"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcArray) - 0usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcPos"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcPos) - 8usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcPtr) - 32usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcDevice"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcDevice) - 64usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstArray"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstArray) - 72usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstPos"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstPos) - 80usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstPtr) - 104usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstDevice"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstDevice) - 136usize];
    ["Offset of field: cudaMemcpy3DPeerParms::extent"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, extent) - 144usize];
};
impl Default for cudaMemcpy3DPeerParms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetParams {
    pub dst: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub value: ::core::ffi::c_uint,
    pub elementSize: ::core::ffi::c_uint,
    pub width: usize,
    pub height: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemsetParams"][::core::mem::size_of::<cudaMemsetParams>() - 40usize];
    ["Alignment of cudaMemsetParams"][::core::mem::align_of::<cudaMemsetParams>() - 8usize];
    ["Offset of field: cudaMemsetParams::dst"]
        [::core::mem::offset_of!(cudaMemsetParams, dst) - 0usize];
    ["Offset of field: cudaMemsetParams::pitch"]
        [::core::mem::offset_of!(cudaMemsetParams, pitch) - 8usize];
    ["Offset of field: cudaMemsetParams::value"]
        [::core::mem::offset_of!(cudaMemsetParams, value) - 16usize];
    ["Offset of field: cudaMemsetParams::elementSize"]
        [::core::mem::offset_of!(cudaMemsetParams, elementSize) - 20usize];
    ["Offset of field: cudaMemsetParams::width"]
        [::core::mem::offset_of!(cudaMemsetParams, width) - 24usize];
    ["Offset of field: cudaMemsetParams::height"]
        [::core::mem::offset_of!(cudaMemsetParams, height) - 32usize];
};
impl Default for cudaMemsetParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetParamsV2 {
    pub dst: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub value: ::core::ffi::c_uint,
    pub elementSize: ::core::ffi::c_uint,
    pub width: usize,
    pub height: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemsetParamsV2"][::core::mem::size_of::<cudaMemsetParamsV2>() - 40usize];
    ["Alignment of cudaMemsetParamsV2"][::core::mem::align_of::<cudaMemsetParamsV2>() - 8usize];
    ["Offset of field: cudaMemsetParamsV2::dst"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, dst) - 0usize];
    ["Offset of field: cudaMemsetParamsV2::pitch"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, pitch) - 8usize];
    ["Offset of field: cudaMemsetParamsV2::value"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, value) - 16usize];
    ["Offset of field: cudaMemsetParamsV2::elementSize"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, elementSize) - 20usize];
    ["Offset of field: cudaMemsetParamsV2::width"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, width) - 24usize];
    ["Offset of field: cudaMemsetParamsV2::height"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, height) - 32usize];
};
impl Default for cudaMemsetParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaAccessProperty {
    cudaAccessPropertyNormal = 0,
    cudaAccessPropertyStreaming = 1,
    cudaAccessPropertyPersisting = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaAccessPolicyWindow {
    pub base_ptr: *mut ::core::ffi::c_void,
    pub num_bytes: usize,
    pub hitRatio: f32,
    pub hitProp: cudaAccessProperty,
    pub missProp: cudaAccessProperty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAccessPolicyWindow"][::core::mem::size_of::<cudaAccessPolicyWindow>() - 32usize];
    ["Alignment of cudaAccessPolicyWindow"]
        [::core::mem::align_of::<cudaAccessPolicyWindow>() - 8usize];
    ["Offset of field: cudaAccessPolicyWindow::base_ptr"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, base_ptr) - 0usize];
    ["Offset of field: cudaAccessPolicyWindow::num_bytes"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, num_bytes) - 8usize];
    ["Offset of field: cudaAccessPolicyWindow::hitRatio"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, hitRatio) - 16usize];
    ["Offset of field: cudaAccessPolicyWindow::hitProp"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, hitProp) - 20usize];
    ["Offset of field: cudaAccessPolicyWindow::missProp"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, missProp) - 24usize];
};
impl Default for cudaAccessPolicyWindow {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostFn_t =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostNodeParams {
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaHostNodeParams"][::core::mem::size_of::<cudaHostNodeParams>() - 16usize];
    ["Alignment of cudaHostNodeParams"][::core::mem::align_of::<cudaHostNodeParams>() - 8usize];
    ["Offset of field: cudaHostNodeParams::fn_"]
        [::core::mem::offset_of!(cudaHostNodeParams, fn_) - 0usize];
    ["Offset of field: cudaHostNodeParams::userData"]
        [::core::mem::offset_of!(cudaHostNodeParams, userData) - 8usize];
};
impl Default for cudaHostNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostNodeParamsV2 {
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaHostNodeParamsV2"][::core::mem::size_of::<cudaHostNodeParamsV2>() - 16usize];
    ["Alignment of cudaHostNodeParamsV2"][::core::mem::align_of::<cudaHostNodeParamsV2>() - 8usize];
    ["Offset of field: cudaHostNodeParamsV2::fn_"]
        [::core::mem::offset_of!(cudaHostNodeParamsV2, fn_) - 0usize];
    ["Offset of field: cudaHostNodeParamsV2::userData"]
        [::core::mem::offset_of!(cudaHostNodeParamsV2, userData) - 8usize];
};
impl Default for cudaHostNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone = 0,
    cudaStreamCaptureStatusActive = 1,
    cudaStreamCaptureStatusInvalidated = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaClusterSchedulingPolicy {
    cudaClusterSchedulingPolicyDefault = 0,
    cudaClusterSchedulingPolicySpread = 1,
    cudaClusterSchedulingPolicyLoadBalancing = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamUpdateCaptureDependenciesFlags {
    cudaStreamAddCaptureDependencies = 0,
    cudaStreamSetCaptureDependencies = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaUserObjectFlags {
    cudaUserObjectNoDestructorSync = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaUserObjectRetainFlags {
    cudaGraphUserObjectMove = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaGraphicsResource {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsRegisterFlags {
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsMapFlags {
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsCubeFace {
    cudaGraphicsCubeFacePositiveX = 0,
    cudaGraphicsCubeFaceNegativeX = 1,
    cudaGraphicsCubeFacePositiveY = 2,
    cudaGraphicsCubeFaceNegativeY = 3,
    cudaGraphicsCubeFacePositiveZ = 4,
    cudaGraphicsCubeFaceNegativeZ = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceType {
    cudaResourceTypeArray = 0,
    cudaResourceTypeMipmappedArray = 1,
    cudaResourceTypeLinear = 2,
    cudaResourceTypePitch2D = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceViewFormat {
    cudaResViewFormatNone = 0,
    cudaResViewFormatUnsignedChar1 = 1,
    cudaResViewFormatUnsignedChar2 = 2,
    cudaResViewFormatUnsignedChar4 = 3,
    cudaResViewFormatSignedChar1 = 4,
    cudaResViewFormatSignedChar2 = 5,
    cudaResViewFormatSignedChar4 = 6,
    cudaResViewFormatUnsignedShort1 = 7,
    cudaResViewFormatUnsignedShort2 = 8,
    cudaResViewFormatUnsignedShort4 = 9,
    cudaResViewFormatSignedShort1 = 10,
    cudaResViewFormatSignedShort2 = 11,
    cudaResViewFormatSignedShort4 = 12,
    cudaResViewFormatUnsignedInt1 = 13,
    cudaResViewFormatUnsignedInt2 = 14,
    cudaResViewFormatUnsignedInt4 = 15,
    cudaResViewFormatSignedInt1 = 16,
    cudaResViewFormatSignedInt2 = 17,
    cudaResViewFormatSignedInt4 = 18,
    cudaResViewFormatHalf1 = 19,
    cudaResViewFormatHalf2 = 20,
    cudaResViewFormatHalf4 = 21,
    cudaResViewFormatFloat1 = 22,
    cudaResViewFormatFloat2 = 23,
    cudaResViewFormatFloat4 = 24,
    cudaResViewFormatUnsignedBlockCompressed1 = 25,
    cudaResViewFormatUnsignedBlockCompressed2 = 26,
    cudaResViewFormatUnsignedBlockCompressed3 = 27,
    cudaResViewFormatUnsignedBlockCompressed4 = 28,
    cudaResViewFormatSignedBlockCompressed4 = 29,
    cudaResViewFormatUnsignedBlockCompressed5 = 30,
    cudaResViewFormatSignedBlockCompressed5 = 31,
    cudaResViewFormatUnsignedBlockCompressed6H = 32,
    cudaResViewFormatSignedBlockCompressed6H = 33,
    cudaResViewFormatUnsignedBlockCompressed7 = 34,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaResourceDesc {
    pub resType: cudaResourceType,
    pub res: cudaResourceDesc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaResourceDesc__bindgen_ty_1 {
    pub array: cudaResourceDesc__bindgen_ty_1__bindgen_ty_1,
    pub mipmap: cudaResourceDesc__bindgen_ty_1__bindgen_ty_2,
    pub linear: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3,
    pub pitch2D: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    pub array: cudaArray_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_1::array"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1, array) - 0usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    pub mipmap: cudaMipmappedArray_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_2::mipmap"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2, mipmap) - 0usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    pub devPtr: *mut ::core::ffi::c_void,
    pub desc: cudaChannelFormatDesc,
    pub sizeInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>() - 40usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3::devPtr"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3, devPtr) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3::desc"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3, desc) - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3::sizeInBytes"][::core::mem::offset_of!(
        cudaResourceDesc__bindgen_ty_1__bindgen_ty_3,
        sizeInBytes
    ) - 32usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    pub devPtr: *mut ::core::ffi::c_void,
    pub desc: cudaChannelFormatDesc,
    pub width: usize,
    pub height: usize,
    pub pitchInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_4"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>() - 56usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_4"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::devPtr"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, devPtr) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::desc"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, desc) - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::width"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, width) - 32usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::height"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, height) - 40usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::pitchInBytes"][::core::mem::offset_of!(
        cudaResourceDesc__bindgen_ty_1__bindgen_ty_4,
        pitchInBytes
    ) - 48usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1>() - 56usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::array"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, array) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::mipmap"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, mipmap) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::linear"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, linear) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::pitch2D"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, pitch2D) - 0usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc"][::core::mem::size_of::<cudaResourceDesc>() - 64usize];
    ["Alignment of cudaResourceDesc"][::core::mem::align_of::<cudaResourceDesc>() - 8usize];
    ["Offset of field: cudaResourceDesc::resType"]
        [::core::mem::offset_of!(cudaResourceDesc, resType) - 0usize];
    ["Offset of field: cudaResourceDesc::res"]
        [::core::mem::offset_of!(cudaResourceDesc, res) - 8usize];
};
impl Default for cudaResourceDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceViewDesc {
    pub format: cudaResourceViewFormat,
    pub width: usize,
    pub height: usize,
    pub depth: usize,
    pub firstMipmapLevel: ::core::ffi::c_uint,
    pub lastMipmapLevel: ::core::ffi::c_uint,
    pub firstLayer: ::core::ffi::c_uint,
    pub lastLayer: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceViewDesc"][::core::mem::size_of::<cudaResourceViewDesc>() - 48usize];
    ["Alignment of cudaResourceViewDesc"][::core::mem::align_of::<cudaResourceViewDesc>() - 8usize];
    ["Offset of field: cudaResourceViewDesc::format"]
        [::core::mem::offset_of!(cudaResourceViewDesc, format) - 0usize];
    ["Offset of field: cudaResourceViewDesc::width"]
        [::core::mem::offset_of!(cudaResourceViewDesc, width) - 8usize];
    ["Offset of field: cudaResourceViewDesc::height"]
        [::core::mem::offset_of!(cudaResourceViewDesc, height) - 16usize];
    ["Offset of field: cudaResourceViewDesc::depth"]
        [::core::mem::offset_of!(cudaResourceViewDesc, depth) - 24usize];
    ["Offset of field: cudaResourceViewDesc::firstMipmapLevel"]
        [::core::mem::offset_of!(cudaResourceViewDesc, firstMipmapLevel) - 32usize];
    ["Offset of field: cudaResourceViewDesc::lastMipmapLevel"]
        [::core::mem::offset_of!(cudaResourceViewDesc, lastMipmapLevel) - 36usize];
    ["Offset of field: cudaResourceViewDesc::firstLayer"]
        [::core::mem::offset_of!(cudaResourceViewDesc, firstLayer) - 40usize];
    ["Offset of field: cudaResourceViewDesc::lastLayer"]
        [::core::mem::offset_of!(cudaResourceViewDesc, lastLayer) - 44usize];
};
impl Default for cudaResourceViewDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPointerAttributes {
    pub type_: cudaMemoryType,
    pub device: ::core::ffi::c_int,
    pub devicePointer: *mut ::core::ffi::c_void,
    pub hostPointer: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaPointerAttributes"][::core::mem::size_of::<cudaPointerAttributes>() - 24usize];
    ["Alignment of cudaPointerAttributes"]
        [::core::mem::align_of::<cudaPointerAttributes>() - 8usize];
    ["Offset of field: cudaPointerAttributes::type_"]
        [::core::mem::offset_of!(cudaPointerAttributes, type_) - 0usize];
    ["Offset of field: cudaPointerAttributes::device"]
        [::core::mem::offset_of!(cudaPointerAttributes, device) - 4usize];
    ["Offset of field: cudaPointerAttributes::devicePointer"]
        [::core::mem::offset_of!(cudaPointerAttributes, devicePointer) - 8usize];
    ["Offset of field: cudaPointerAttributes::hostPointer"]
        [::core::mem::offset_of!(cudaPointerAttributes, hostPointer) - 16usize];
};
impl Default for cudaPointerAttributes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncAttributes {
    pub sharedSizeBytes: usize,
    pub constSizeBytes: usize,
    pub localSizeBytes: usize,
    pub maxThreadsPerBlock: ::core::ffi::c_int,
    pub numRegs: ::core::ffi::c_int,
    pub ptxVersion: ::core::ffi::c_int,
    pub binaryVersion: ::core::ffi::c_int,
    pub cacheModeCA: ::core::ffi::c_int,
    pub maxDynamicSharedSizeBytes: ::core::ffi::c_int,
    pub preferredShmemCarveout: ::core::ffi::c_int,
    pub clusterDimMustBeSet: ::core::ffi::c_int,
    pub requiredClusterWidth: ::core::ffi::c_int,
    pub requiredClusterHeight: ::core::ffi::c_int,
    pub requiredClusterDepth: ::core::ffi::c_int,
    pub clusterSchedulingPolicyPreference: ::core::ffi::c_int,
    pub nonPortableClusterSizeAllowed: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaFuncAttributes"][::core::mem::size_of::<cudaFuncAttributes>() - 144usize];
    ["Alignment of cudaFuncAttributes"][::core::mem::align_of::<cudaFuncAttributes>() - 8usize];
    ["Offset of field: cudaFuncAttributes::sharedSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, sharedSizeBytes) - 0usize];
    ["Offset of field: cudaFuncAttributes::constSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, constSizeBytes) - 8usize];
    ["Offset of field: cudaFuncAttributes::localSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, localSizeBytes) - 16usize];
    ["Offset of field: cudaFuncAttributes::maxThreadsPerBlock"]
        [::core::mem::offset_of!(cudaFuncAttributes, maxThreadsPerBlock) - 24usize];
    ["Offset of field: cudaFuncAttributes::numRegs"]
        [::core::mem::offset_of!(cudaFuncAttributes, numRegs) - 28usize];
    ["Offset of field: cudaFuncAttributes::ptxVersion"]
        [::core::mem::offset_of!(cudaFuncAttributes, ptxVersion) - 32usize];
    ["Offset of field: cudaFuncAttributes::binaryVersion"]
        [::core::mem::offset_of!(cudaFuncAttributes, binaryVersion) - 36usize];
    ["Offset of field: cudaFuncAttributes::cacheModeCA"]
        [::core::mem::offset_of!(cudaFuncAttributes, cacheModeCA) - 40usize];
    ["Offset of field: cudaFuncAttributes::maxDynamicSharedSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, maxDynamicSharedSizeBytes) - 44usize];
    ["Offset of field: cudaFuncAttributes::preferredShmemCarveout"]
        [::core::mem::offset_of!(cudaFuncAttributes, preferredShmemCarveout) - 48usize];
    ["Offset of field: cudaFuncAttributes::clusterDimMustBeSet"]
        [::core::mem::offset_of!(cudaFuncAttributes, clusterDimMustBeSet) - 52usize];
    ["Offset of field: cudaFuncAttributes::requiredClusterWidth"]
        [::core::mem::offset_of!(cudaFuncAttributes, requiredClusterWidth) - 56usize];
    ["Offset of field: cudaFuncAttributes::requiredClusterHeight"]
        [::core::mem::offset_of!(cudaFuncAttributes, requiredClusterHeight) - 60usize];
    ["Offset of field: cudaFuncAttributes::requiredClusterDepth"]
        [::core::mem::offset_of!(cudaFuncAttributes, requiredClusterDepth) - 64usize];
    ["Offset of field: cudaFuncAttributes::clusterSchedulingPolicyPreference"]
        [::core::mem::offset_of!(cudaFuncAttributes, clusterSchedulingPolicyPreference) - 68usize];
    ["Offset of field: cudaFuncAttributes::nonPortableClusterSizeAllowed"]
        [::core::mem::offset_of!(cudaFuncAttributes, nonPortableClusterSizeAllowed) - 72usize];
    ["Offset of field: cudaFuncAttributes::reserved"]
        [::core::mem::offset_of!(cudaFuncAttributes, reserved) - 76usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncAttribute {
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
    cudaFuncAttributePreferredSharedMemoryCarveout = 9,
    cudaFuncAttributeClusterDimMustBeSet = 10,
    cudaFuncAttributeRequiredClusterWidth = 11,
    cudaFuncAttributeRequiredClusterHeight = 12,
    cudaFuncAttributeRequiredClusterDepth = 13,
    cudaFuncAttributeNonPortableClusterSizeAllowed = 14,
    cudaFuncAttributeClusterSchedulingPolicyPreference = 15,
    cudaFuncAttributeMax = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncCache {
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedMemConfig {
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedCarveout {
    cudaSharedmemCarveoutDefault = -1,
    cudaSharedmemCarveoutMaxShared = 100,
    cudaSharedmemCarveoutMaxL1 = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaComputeMode {
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLimit {
    cudaLimitStackSize = 0,
    cudaLimitPrintfFifoSize = 1,
    cudaLimitMallocHeapSize = 2,
    cudaLimitDevRuntimeSyncDepth = 3,
    cudaLimitDevRuntimePendingLaunchCount = 4,
    cudaLimitMaxL2FetchGranularity = 5,
    cudaLimitPersistingL2CacheSize = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryAdvise {
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemRangeAttribute {
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4,
    cudaMemRangeAttributePreferredLocationType = 5,
    cudaMemRangeAttributePreferredLocationId = 6,
    cudaMemRangeAttributeLastPrefetchLocationType = 7,
    cudaMemRangeAttributeLastPrefetchLocationId = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesOptions {
    cudaFlushGPUDirectRDMAWritesOptionHost = 1,
    cudaFlushGPUDirectRDMAWritesOptionMemOps = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGPUDirectRDMAWritesOrdering {
    cudaGPUDirectRDMAWritesOrderingNone = 0,
    cudaGPUDirectRDMAWritesOrderingOwner = 100,
    cudaGPUDirectRDMAWritesOrderingAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner = 100,
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0,
}
impl cudaDeviceAttr {
    pub const cudaDevAttrMaxTimelineSemaphoreInteropSupported: cudaDeviceAttr =
        cudaDeviceAttr::cudaDevAttrTimelineSemaphoreInteropSupported;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceAttr {
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
    cudaDevAttrReserved92 = 92,
    cudaDevAttrReserved93 = 93,
    cudaDevAttrReserved94 = 94,
    cudaDevAttrCooperativeLaunch = 95,
    cudaDevAttrCooperativeMultiDeviceLaunch = 96,
    cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
    cudaDevAttrCanFlushRemoteWrites = 98,
    cudaDevAttrHostRegisterSupported = 99,
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100,
    cudaDevAttrDirectManagedMemAccessFromHost = 101,
    cudaDevAttrMaxBlocksPerMultiprocessor = 106,
    cudaDevAttrMaxPersistingL2CacheSize = 108,
    cudaDevAttrMaxAccessPolicyWindowSize = 109,
    cudaDevAttrReservedSharedMemoryPerBlock = 111,
    cudaDevAttrSparseCudaArraySupported = 112,
    cudaDevAttrHostRegisterReadOnlySupported = 113,
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,
    cudaDevAttrMemoryPoolsSupported = 115,
    cudaDevAttrGPUDirectRDMASupported = 116,
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117,
    cudaDevAttrGPUDirectRDMAWritesOrdering = 118,
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119,
    cudaDevAttrClusterLaunch = 120,
    cudaDevAttrDeferredMappingCudaArraySupported = 121,
    cudaDevAttrReserved122 = 122,
    cudaDevAttrReserved123 = 123,
    cudaDevAttrReserved124 = 124,
    cudaDevAttrIpcEventSupport = 125,
    cudaDevAttrMemSyncDomainCount = 126,
    cudaDevAttrReserved127 = 127,
    cudaDevAttrReserved128 = 128,
    cudaDevAttrReserved129 = 129,
    cudaDevAttrNumaConfig = 130,
    cudaDevAttrNumaId = 131,
    cudaDevAttrReserved132 = 132,
    cudaDevAttrMpsEnabled = 133,
    cudaDevAttrHostNumaId = 134,
    cudaDevAttrD3D12CigSupported = 135,
    cudaDevAttrGpuPciDeviceId = 139,
    cudaDevAttrGpuPciSubsystemId = 140,
    cudaDevAttrHostNumaMultinodeIpcSupported = 143,
    cudaDevAttrMax = 144,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemPoolAttr {
    cudaMemPoolReuseFollowEventDependencies = 1,
    cudaMemPoolReuseAllowOpportunistic = 2,
    cudaMemPoolReuseAllowInternalDependencies = 3,
    cudaMemPoolAttrReleaseThreshold = 4,
    cudaMemPoolAttrReservedMemCurrent = 5,
    cudaMemPoolAttrReservedMemHigh = 6,
    cudaMemPoolAttrUsedMemCurrent = 7,
    cudaMemPoolAttrUsedMemHigh = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1,
    cudaMemLocationTypeHost = 2,
    cudaMemLocationTypeHostNuma = 3,
    cudaMemLocationTypeHostNumaCurrent = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemLocation {
    pub type_: cudaMemLocationType,
    pub id: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemLocation"][::core::mem::size_of::<cudaMemLocation>() - 8usize];
    ["Alignment of cudaMemLocation"][::core::mem::align_of::<cudaMemLocation>() - 4usize];
    ["Offset of field: cudaMemLocation::type_"]
        [::core::mem::offset_of!(cudaMemLocation, type_) - 0usize];
    ["Offset of field: cudaMemLocation::id"][::core::mem::offset_of!(cudaMemLocation, id) - 4usize];
};
impl Default for cudaMemLocation {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone = 0,
    cudaMemAccessFlagsProtRead = 1,
    cudaMemAccessFlagsProtReadWrite = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAccessDesc {
    pub location: cudaMemLocation,
    pub flags: cudaMemAccessFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemAccessDesc"][::core::mem::size_of::<cudaMemAccessDesc>() - 12usize];
    ["Alignment of cudaMemAccessDesc"][::core::mem::align_of::<cudaMemAccessDesc>() - 4usize];
    ["Offset of field: cudaMemAccessDesc::location"]
        [::core::mem::offset_of!(cudaMemAccessDesc, location) - 0usize];
    ["Offset of field: cudaMemAccessDesc::flags"]
        [::core::mem::offset_of!(cudaMemAccessDesc, flags) - 8usize];
};
impl Default for cudaMemAccessDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0,
    cudaMemAllocationTypePinned = 1,
    cudaMemAllocationTypeMax = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationHandleType {
    cudaMemHandleTypeNone = 0,
    cudaMemHandleTypePosixFileDescriptor = 1,
    cudaMemHandleTypeWin32 = 2,
    cudaMemHandleTypeWin32Kmt = 4,
    cudaMemHandleTypeFabric = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolProps {
    pub allocType: cudaMemAllocationType,
    pub handleTypes: cudaMemAllocationHandleType,
    pub location: cudaMemLocation,
    pub win32SecurityAttributes: *mut ::core::ffi::c_void,
    pub maxSize: usize,
    pub usage: ::core::ffi::c_ushort,
    pub reserved: [::core::ffi::c_uchar; 54usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemPoolProps"][::core::mem::size_of::<cudaMemPoolProps>() - 88usize];
    ["Alignment of cudaMemPoolProps"][::core::mem::align_of::<cudaMemPoolProps>() - 8usize];
    ["Offset of field: cudaMemPoolProps::allocType"]
        [::core::mem::offset_of!(cudaMemPoolProps, allocType) - 0usize];
    ["Offset of field: cudaMemPoolProps::handleTypes"]
        [::core::mem::offset_of!(cudaMemPoolProps, handleTypes) - 4usize];
    ["Offset of field: cudaMemPoolProps::location"]
        [::core::mem::offset_of!(cudaMemPoolProps, location) - 8usize];
    ["Offset of field: cudaMemPoolProps::win32SecurityAttributes"]
        [::core::mem::offset_of!(cudaMemPoolProps, win32SecurityAttributes) - 16usize];
    ["Offset of field: cudaMemPoolProps::maxSize"]
        [::core::mem::offset_of!(cudaMemPoolProps, maxSize) - 24usize];
    ["Offset of field: cudaMemPoolProps::usage"]
        [::core::mem::offset_of!(cudaMemPoolProps, usage) - 32usize];
    ["Offset of field: cudaMemPoolProps::reserved"]
        [::core::mem::offset_of!(cudaMemPoolProps, reserved) - 34usize];
};
impl Default for cudaMemPoolProps {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolPtrExportData {
    pub reserved: [::core::ffi::c_uchar; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemPoolPtrExportData"]
        [::core::mem::size_of::<cudaMemPoolPtrExportData>() - 64usize];
    ["Alignment of cudaMemPoolPtrExportData"]
        [::core::mem::align_of::<cudaMemPoolPtrExportData>() - 1usize];
    ["Offset of field: cudaMemPoolPtrExportData::reserved"]
        [::core::mem::offset_of!(cudaMemPoolPtrExportData, reserved) - 0usize];
};
impl Default for cudaMemPoolPtrExportData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAllocNodeParams {
    pub poolProps: cudaMemPoolProps,
    pub accessDescs: *const cudaMemAccessDesc,
    pub accessDescCount: usize,
    pub bytesize: usize,
    pub dptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemAllocNodeParams"][::core::mem::size_of::<cudaMemAllocNodeParams>() - 120usize];
    ["Alignment of cudaMemAllocNodeParams"]
        [::core::mem::align_of::<cudaMemAllocNodeParams>() - 8usize];
    ["Offset of field: cudaMemAllocNodeParams::poolProps"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, poolProps) - 0usize];
    ["Offset of field: cudaMemAllocNodeParams::accessDescs"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, accessDescs) - 88usize];
    ["Offset of field: cudaMemAllocNodeParams::accessDescCount"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, accessDescCount) - 96usize];
    ["Offset of field: cudaMemAllocNodeParams::bytesize"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, bytesize) - 104usize];
    ["Offset of field: cudaMemAllocNodeParams::dptr"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, dptr) - 112usize];
};
impl Default for cudaMemAllocNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAllocNodeParamsV2 {
    pub poolProps: cudaMemPoolProps,
    pub accessDescs: *const cudaMemAccessDesc,
    pub accessDescCount: usize,
    pub bytesize: usize,
    pub dptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemAllocNodeParamsV2"]
        [::core::mem::size_of::<cudaMemAllocNodeParamsV2>() - 120usize];
    ["Alignment of cudaMemAllocNodeParamsV2"]
        [::core::mem::align_of::<cudaMemAllocNodeParamsV2>() - 8usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::poolProps"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, poolProps) - 0usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::accessDescs"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, accessDescs) - 88usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::accessDescCount"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, accessDescCount) - 96usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::bytesize"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, bytesize) - 104usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::dptr"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, dptr) - 112usize];
};
impl Default for cudaMemAllocNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemFreeNodeParams {
    pub dptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemFreeNodeParams"][::core::mem::size_of::<cudaMemFreeNodeParams>() - 8usize];
    ["Alignment of cudaMemFreeNodeParams"]
        [::core::mem::align_of::<cudaMemFreeNodeParams>() - 8usize];
    ["Offset of field: cudaMemFreeNodeParams::dptr"]
        [::core::mem::offset_of!(cudaMemFreeNodeParams, dptr) - 0usize];
};
impl Default for cudaMemFreeNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphMemAttributeType {
    cudaGraphMemAttrUsedMemCurrent = 0,
    cudaGraphMemAttrUsedMemHigh = 1,
    cudaGraphMemAttrReservedMemCurrent = 2,
    cudaGraphMemAttrReservedMemHigh = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpyFlags {
    cudaMemcpyFlagDefault = 0,
    cudaMemcpyFlagPreferOverlapWithCompute = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpySrcAccessOrder {
    cudaMemcpySrcAccessOrderInvalid = 0,
    cudaMemcpySrcAccessOrderStream = 1,
    cudaMemcpySrcAccessOrderDuringApiCall = 2,
    cudaMemcpySrcAccessOrderAny = 3,
    cudaMemcpySrcAccessOrderMax = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyAttributes {
    pub srcAccessOrder: cudaMemcpySrcAccessOrder,
    pub srcLocHint: cudaMemLocation,
    pub dstLocHint: cudaMemLocation,
    pub flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpyAttributes"][::core::mem::size_of::<cudaMemcpyAttributes>() - 24usize];
    ["Alignment of cudaMemcpyAttributes"][::core::mem::align_of::<cudaMemcpyAttributes>() - 4usize];
    ["Offset of field: cudaMemcpyAttributes::srcAccessOrder"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, srcAccessOrder) - 0usize];
    ["Offset of field: cudaMemcpyAttributes::srcLocHint"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, srcLocHint) - 4usize];
    ["Offset of field: cudaMemcpyAttributes::dstLocHint"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, dstLocHint) - 12usize];
    ["Offset of field: cudaMemcpyAttributes::flags"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, flags) - 20usize];
};
impl Default for cudaMemcpyAttributes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpy3DOperandType {
    cudaMemcpyOperandTypePointer = 1,
    cudaMemcpyOperandTypeArray = 2,
    cudaMemcpyOperandTypeMax = 2147483647,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOffset3D {
    pub x: usize,
    pub y: usize,
    pub z: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaOffset3D"][::core::mem::size_of::<cudaOffset3D>() - 24usize];
    ["Alignment of cudaOffset3D"][::core::mem::align_of::<cudaOffset3D>() - 8usize];
    ["Offset of field: cudaOffset3D::x"][::core::mem::offset_of!(cudaOffset3D, x) - 0usize];
    ["Offset of field: cudaOffset3D::y"][::core::mem::offset_of!(cudaOffset3D, y) - 8usize];
    ["Offset of field: cudaOffset3D::z"][::core::mem::offset_of!(cudaOffset3D, z) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaMemcpy3DOperand {
    pub type_: cudaMemcpy3DOperandType,
    pub op: cudaMemcpy3DOperand__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaMemcpy3DOperand__bindgen_ty_1 {
    pub ptr: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
    pub array: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 {
    pub ptr: *mut ::core::ffi::c_void,
    pub rowLength: usize,
    pub layerHeight: usize,
    pub locHint: cudaMemLocation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::ptr"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1, ptr) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::rowLength"][::core::mem::offset_of!(
        cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
        rowLength
    ) - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::layerHeight"][::core::mem::offset_of!(
        cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
        layerHeight
    ) - 16usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::locHint"][::core::mem::offset_of!(
        cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
        locHint
    ) - 24usize];
};
impl Default for cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 {
    pub array: cudaArray_t,
    pub offset: cudaOffset3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2::array"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2, array) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2::offset"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2, offset) - 8usize];
};
impl Default for cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand__bindgen_ty_1"]
        [::core::mem::size_of::<cudaMemcpy3DOperand__bindgen_ty_1>() - 32usize];
    ["Alignment of cudaMemcpy3DOperand__bindgen_ty_1"]
        [::core::mem::align_of::<cudaMemcpy3DOperand__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1::ptr"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1, ptr) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1::array"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1, array) - 0usize];
};
impl Default for cudaMemcpy3DOperand__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand"][::core::mem::size_of::<cudaMemcpy3DOperand>() - 40usize];
    ["Alignment of cudaMemcpy3DOperand"][::core::mem::align_of::<cudaMemcpy3DOperand>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand::type_"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand, type_) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand::op"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand, op) - 8usize];
};
impl Default for cudaMemcpy3DOperand {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaMemcpy3DBatchOp {
    pub src: cudaMemcpy3DOperand,
    pub dst: cudaMemcpy3DOperand,
    pub extent: cudaExtent,
    pub srcAccessOrder: cudaMemcpySrcAccessOrder,
    pub flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DBatchOp"][::core::mem::size_of::<cudaMemcpy3DBatchOp>() - 112usize];
    ["Alignment of cudaMemcpy3DBatchOp"][::core::mem::align_of::<cudaMemcpy3DBatchOp>() - 8usize];
    ["Offset of field: cudaMemcpy3DBatchOp::src"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, src) - 0usize];
    ["Offset of field: cudaMemcpy3DBatchOp::dst"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, dst) - 40usize];
    ["Offset of field: cudaMemcpy3DBatchOp::extent"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, extent) - 80usize];
    ["Offset of field: cudaMemcpy3DBatchOp::srcAccessOrder"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, srcAccessOrder) - 104usize];
    ["Offset of field: cudaMemcpy3DBatchOp::flags"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, flags) - 108usize];
};
impl Default for cudaMemcpy3DBatchOp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3,
    cudaDevP2PAttrCudaArrayAccessSupported = 4,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUuuid_st {
    pub bytes: [::core::ffi::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CUuuid_st"][::core::mem::size_of::<CUuuid_st>() - 16usize];
    ["Alignment of CUuuid_st"][::core::mem::align_of::<CUuuid_st>() - 1usize];
    ["Offset of field: CUuuid_st::bytes"][::core::mem::offset_of!(CUuuid_st, bytes) - 0usize];
};
pub type cudaUUID_t = CUuuid_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceProp {
    pub name: [::core::ffi::c_char; 256usize],
    pub uuid: cudaUUID_t,
    pub luid: [::core::ffi::c_char; 8usize],
    pub luidDeviceNodeMask: ::core::ffi::c_uint,
    pub totalGlobalMem: usize,
    pub sharedMemPerBlock: usize,
    pub regsPerBlock: ::core::ffi::c_int,
    pub warpSize: ::core::ffi::c_int,
    pub memPitch: usize,
    pub maxThreadsPerBlock: ::core::ffi::c_int,
    pub maxThreadsDim: [::core::ffi::c_int; 3usize],
    pub maxGridSize: [::core::ffi::c_int; 3usize],
    pub clockRate: ::core::ffi::c_int,
    pub totalConstMem: usize,
    pub major: ::core::ffi::c_int,
    pub minor: ::core::ffi::c_int,
    pub textureAlignment: usize,
    pub texturePitchAlignment: usize,
    pub deviceOverlap: ::core::ffi::c_int,
    pub multiProcessorCount: ::core::ffi::c_int,
    pub kernelExecTimeoutEnabled: ::core::ffi::c_int,
    pub integrated: ::core::ffi::c_int,
    pub canMapHostMemory: ::core::ffi::c_int,
    pub computeMode: ::core::ffi::c_int,
    pub maxTexture1D: ::core::ffi::c_int,
    pub maxTexture1DMipmap: ::core::ffi::c_int,
    pub maxTexture1DLinear: ::core::ffi::c_int,
    pub maxTexture2D: [::core::ffi::c_int; 2usize],
    pub maxTexture2DMipmap: [::core::ffi::c_int; 2usize],
    pub maxTexture2DLinear: [::core::ffi::c_int; 3usize],
    pub maxTexture2DGather: [::core::ffi::c_int; 2usize],
    pub maxTexture3D: [::core::ffi::c_int; 3usize],
    pub maxTexture3DAlt: [::core::ffi::c_int; 3usize],
    pub maxTextureCubemap: ::core::ffi::c_int,
    pub maxTexture1DLayered: [::core::ffi::c_int; 2usize],
    pub maxTexture2DLayered: [::core::ffi::c_int; 3usize],
    pub maxTextureCubemapLayered: [::core::ffi::c_int; 2usize],
    pub maxSurface1D: ::core::ffi::c_int,
    pub maxSurface2D: [::core::ffi::c_int; 2usize],
    pub maxSurface3D: [::core::ffi::c_int; 3usize],
    pub maxSurface1DLayered: [::core::ffi::c_int; 2usize],
    pub maxSurface2DLayered: [::core::ffi::c_int; 3usize],
    pub maxSurfaceCubemap: ::core::ffi::c_int,
    pub maxSurfaceCubemapLayered: [::core::ffi::c_int; 2usize],
    pub surfaceAlignment: usize,
    pub concurrentKernels: ::core::ffi::c_int,
    pub ECCEnabled: ::core::ffi::c_int,
    pub pciBusID: ::core::ffi::c_int,
    pub pciDeviceID: ::core::ffi::c_int,
    pub pciDomainID: ::core::ffi::c_int,
    pub tccDriver: ::core::ffi::c_int,
    pub asyncEngineCount: ::core::ffi::c_int,
    pub unifiedAddressing: ::core::ffi::c_int,
    pub memoryClockRate: ::core::ffi::c_int,
    pub memoryBusWidth: ::core::ffi::c_int,
    pub l2CacheSize: ::core::ffi::c_int,
    pub persistingL2CacheMaxSize: ::core::ffi::c_int,
    pub maxThreadsPerMultiProcessor: ::core::ffi::c_int,
    pub streamPrioritiesSupported: ::core::ffi::c_int,
    pub globalL1CacheSupported: ::core::ffi::c_int,
    pub localL1CacheSupported: ::core::ffi::c_int,
    pub sharedMemPerMultiprocessor: usize,
    pub regsPerMultiprocessor: ::core::ffi::c_int,
    pub managedMemory: ::core::ffi::c_int,
    pub isMultiGpuBoard: ::core::ffi::c_int,
    pub multiGpuBoardGroupID: ::core::ffi::c_int,
    pub hostNativeAtomicSupported: ::core::ffi::c_int,
    pub singleToDoublePrecisionPerfRatio: ::core::ffi::c_int,
    pub pageableMemoryAccess: ::core::ffi::c_int,
    pub concurrentManagedAccess: ::core::ffi::c_int,
    pub computePreemptionSupported: ::core::ffi::c_int,
    pub canUseHostPointerForRegisteredMem: ::core::ffi::c_int,
    pub cooperativeLaunch: ::core::ffi::c_int,
    pub cooperativeMultiDeviceLaunch: ::core::ffi::c_int,
    pub sharedMemPerBlockOptin: usize,
    pub pageableMemoryAccessUsesHostPageTables: ::core::ffi::c_int,
    pub directManagedMemAccessFromHost: ::core::ffi::c_int,
    pub maxBlocksPerMultiProcessor: ::core::ffi::c_int,
    pub accessPolicyMaxWindowSize: ::core::ffi::c_int,
    pub reservedSharedMemPerBlock: usize,
    pub hostRegisterSupported: ::core::ffi::c_int,
    pub sparseCudaArraySupported: ::core::ffi::c_int,
    pub hostRegisterReadOnlySupported: ::core::ffi::c_int,
    pub timelineSemaphoreInteropSupported: ::core::ffi::c_int,
    pub memoryPoolsSupported: ::core::ffi::c_int,
    pub gpuDirectRDMASupported: ::core::ffi::c_int,
    pub gpuDirectRDMAFlushWritesOptions: ::core::ffi::c_uint,
    pub gpuDirectRDMAWritesOrdering: ::core::ffi::c_int,
    pub memoryPoolSupportedHandleTypes: ::core::ffi::c_uint,
    pub deferredMappingCudaArraySupported: ::core::ffi::c_int,
    pub ipcEventSupported: ::core::ffi::c_int,
    pub clusterLaunch: ::core::ffi::c_int,
    pub unifiedFunctionPointers: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 63usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaDeviceProp"][::core::mem::size_of::<cudaDeviceProp>() - 1032usize];
    ["Alignment of cudaDeviceProp"][::core::mem::align_of::<cudaDeviceProp>() - 8usize];
    ["Offset of field: cudaDeviceProp::name"]
        [::core::mem::offset_of!(cudaDeviceProp, name) - 0usize];
    ["Offset of field: cudaDeviceProp::uuid"]
        [::core::mem::offset_of!(cudaDeviceProp, uuid) - 256usize];
    ["Offset of field: cudaDeviceProp::luid"]
        [::core::mem::offset_of!(cudaDeviceProp, luid) - 272usize];
    ["Offset of field: cudaDeviceProp::luidDeviceNodeMask"]
        [::core::mem::offset_of!(cudaDeviceProp, luidDeviceNodeMask) - 280usize];
    ["Offset of field: cudaDeviceProp::totalGlobalMem"]
        [::core::mem::offset_of!(cudaDeviceProp, totalGlobalMem) - 288usize];
    ["Offset of field: cudaDeviceProp::sharedMemPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, sharedMemPerBlock) - 296usize];
    ["Offset of field: cudaDeviceProp::regsPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, regsPerBlock) - 304usize];
    ["Offset of field: cudaDeviceProp::warpSize"]
        [::core::mem::offset_of!(cudaDeviceProp, warpSize) - 308usize];
    ["Offset of field: cudaDeviceProp::memPitch"]
        [::core::mem::offset_of!(cudaDeviceProp, memPitch) - 312usize];
    ["Offset of field: cudaDeviceProp::maxThreadsPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, maxThreadsPerBlock) - 320usize];
    ["Offset of field: cudaDeviceProp::maxThreadsDim"]
        [::core::mem::offset_of!(cudaDeviceProp, maxThreadsDim) - 324usize];
    ["Offset of field: cudaDeviceProp::maxGridSize"]
        [::core::mem::offset_of!(cudaDeviceProp, maxGridSize) - 336usize];
    ["Offset of field: cudaDeviceProp::clockRate"]
        [::core::mem::offset_of!(cudaDeviceProp, clockRate) - 348usize];
    ["Offset of field: cudaDeviceProp::totalConstMem"]
        [::core::mem::offset_of!(cudaDeviceProp, totalConstMem) - 352usize];
    ["Offset of field: cudaDeviceProp::major"]
        [::core::mem::offset_of!(cudaDeviceProp, major) - 360usize];
    ["Offset of field: cudaDeviceProp::minor"]
        [::core::mem::offset_of!(cudaDeviceProp, minor) - 364usize];
    ["Offset of field: cudaDeviceProp::textureAlignment"]
        [::core::mem::offset_of!(cudaDeviceProp, textureAlignment) - 368usize];
    ["Offset of field: cudaDeviceProp::texturePitchAlignment"]
        [::core::mem::offset_of!(cudaDeviceProp, texturePitchAlignment) - 376usize];
    ["Offset of field: cudaDeviceProp::deviceOverlap"]
        [::core::mem::offset_of!(cudaDeviceProp, deviceOverlap) - 384usize];
    ["Offset of field: cudaDeviceProp::multiProcessorCount"]
        [::core::mem::offset_of!(cudaDeviceProp, multiProcessorCount) - 388usize];
    ["Offset of field: cudaDeviceProp::kernelExecTimeoutEnabled"]
        [::core::mem::offset_of!(cudaDeviceProp, kernelExecTimeoutEnabled) - 392usize];
    ["Offset of field: cudaDeviceProp::integrated"]
        [::core::mem::offset_of!(cudaDeviceProp, integrated) - 396usize];
    ["Offset of field: cudaDeviceProp::canMapHostMemory"]
        [::core::mem::offset_of!(cudaDeviceProp, canMapHostMemory) - 400usize];
    ["Offset of field: cudaDeviceProp::computeMode"]
        [::core::mem::offset_of!(cudaDeviceProp, computeMode) - 404usize];
    ["Offset of field: cudaDeviceProp::maxTexture1D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1D) - 408usize];
    ["Offset of field: cudaDeviceProp::maxTexture1DMipmap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1DMipmap) - 412usize];
    ["Offset of field: cudaDeviceProp::maxTexture1DLinear"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1DLinear) - 416usize];
    ["Offset of field: cudaDeviceProp::maxTexture2D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2D) - 420usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DMipmap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DMipmap) - 428usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DLinear"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DLinear) - 436usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DGather"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DGather) - 448usize];
    ["Offset of field: cudaDeviceProp::maxTexture3D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture3D) - 456usize];
    ["Offset of field: cudaDeviceProp::maxTexture3DAlt"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture3DAlt) - 468usize];
    ["Offset of field: cudaDeviceProp::maxTextureCubemap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTextureCubemap) - 480usize];
    ["Offset of field: cudaDeviceProp::maxTexture1DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1DLayered) - 484usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DLayered) - 492usize];
    ["Offset of field: cudaDeviceProp::maxTextureCubemapLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTextureCubemapLayered) - 504usize];
    ["Offset of field: cudaDeviceProp::maxSurface1D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface1D) - 512usize];
    ["Offset of field: cudaDeviceProp::maxSurface2D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface2D) - 516usize];
    ["Offset of field: cudaDeviceProp::maxSurface3D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface3D) - 524usize];
    ["Offset of field: cudaDeviceProp::maxSurface1DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface1DLayered) - 536usize];
    ["Offset of field: cudaDeviceProp::maxSurface2DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface2DLayered) - 544usize];
    ["Offset of field: cudaDeviceProp::maxSurfaceCubemap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurfaceCubemap) - 556usize];
    ["Offset of field: cudaDeviceProp::maxSurfaceCubemapLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurfaceCubemapLayered) - 560usize];
    ["Offset of field: cudaDeviceProp::surfaceAlignment"]
        [::core::mem::offset_of!(cudaDeviceProp, surfaceAlignment) - 568usize];
    ["Offset of field: cudaDeviceProp::concurrentKernels"]
        [::core::mem::offset_of!(cudaDeviceProp, concurrentKernels) - 576usize];
    ["Offset of field: cudaDeviceProp::ECCEnabled"]
        [::core::mem::offset_of!(cudaDeviceProp, ECCEnabled) - 580usize];
    ["Offset of field: cudaDeviceProp::pciBusID"]
        [::core::mem::offset_of!(cudaDeviceProp, pciBusID) - 584usize];
    ["Offset of field: cudaDeviceProp::pciDeviceID"]
        [::core::mem::offset_of!(cudaDeviceProp, pciDeviceID) - 588usize];
    ["Offset of field: cudaDeviceProp::pciDomainID"]
        [::core::mem::offset_of!(cudaDeviceProp, pciDomainID) - 592usize];
    ["Offset of field: cudaDeviceProp::tccDriver"]
        [::core::mem::offset_of!(cudaDeviceProp, tccDriver) - 596usize];
    ["Offset of field: cudaDeviceProp::asyncEngineCount"]
        [::core::mem::offset_of!(cudaDeviceProp, asyncEngineCount) - 600usize];
    ["Offset of field: cudaDeviceProp::unifiedAddressing"]
        [::core::mem::offset_of!(cudaDeviceProp, unifiedAddressing) - 604usize];
    ["Offset of field: cudaDeviceProp::memoryClockRate"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryClockRate) - 608usize];
    ["Offset of field: cudaDeviceProp::memoryBusWidth"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryBusWidth) - 612usize];
    ["Offset of field: cudaDeviceProp::l2CacheSize"]
        [::core::mem::offset_of!(cudaDeviceProp, l2CacheSize) - 616usize];
    ["Offset of field: cudaDeviceProp::persistingL2CacheMaxSize"]
        [::core::mem::offset_of!(cudaDeviceProp, persistingL2CacheMaxSize) - 620usize];
    ["Offset of field: cudaDeviceProp::maxThreadsPerMultiProcessor"]
        [::core::mem::offset_of!(cudaDeviceProp, maxThreadsPerMultiProcessor) - 624usize];
    ["Offset of field: cudaDeviceProp::streamPrioritiesSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, streamPrioritiesSupported) - 628usize];
    ["Offset of field: cudaDeviceProp::globalL1CacheSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, globalL1CacheSupported) - 632usize];
    ["Offset of field: cudaDeviceProp::localL1CacheSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, localL1CacheSupported) - 636usize];
    ["Offset of field: cudaDeviceProp::sharedMemPerMultiprocessor"]
        [::core::mem::offset_of!(cudaDeviceProp, sharedMemPerMultiprocessor) - 640usize];
    ["Offset of field: cudaDeviceProp::regsPerMultiprocessor"]
        [::core::mem::offset_of!(cudaDeviceProp, regsPerMultiprocessor) - 648usize];
    ["Offset of field: cudaDeviceProp::managedMemory"]
        [::core::mem::offset_of!(cudaDeviceProp, managedMemory) - 652usize];
    ["Offset of field: cudaDeviceProp::isMultiGpuBoard"]
        [::core::mem::offset_of!(cudaDeviceProp, isMultiGpuBoard) - 656usize];
    ["Offset of field: cudaDeviceProp::multiGpuBoardGroupID"]
        [::core::mem::offset_of!(cudaDeviceProp, multiGpuBoardGroupID) - 660usize];
    ["Offset of field: cudaDeviceProp::hostNativeAtomicSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, hostNativeAtomicSupported) - 664usize];
    ["Offset of field: cudaDeviceProp::singleToDoublePrecisionPerfRatio"]
        [::core::mem::offset_of!(cudaDeviceProp, singleToDoublePrecisionPerfRatio) - 668usize];
    ["Offset of field: cudaDeviceProp::pageableMemoryAccess"]
        [::core::mem::offset_of!(cudaDeviceProp, pageableMemoryAccess) - 672usize];
    ["Offset of field: cudaDeviceProp::concurrentManagedAccess"]
        [::core::mem::offset_of!(cudaDeviceProp, concurrentManagedAccess) - 676usize];
    ["Offset of field: cudaDeviceProp::computePreemptionSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, computePreemptionSupported) - 680usize];
    ["Offset of field: cudaDeviceProp::canUseHostPointerForRegisteredMem"]
        [::core::mem::offset_of!(cudaDeviceProp, canUseHostPointerForRegisteredMem) - 684usize];
    ["Offset of field: cudaDeviceProp::cooperativeLaunch"]
        [::core::mem::offset_of!(cudaDeviceProp, cooperativeLaunch) - 688usize];
    ["Offset of field: cudaDeviceProp::cooperativeMultiDeviceLaunch"]
        [::core::mem::offset_of!(cudaDeviceProp, cooperativeMultiDeviceLaunch) - 692usize];
    ["Offset of field: cudaDeviceProp::sharedMemPerBlockOptin"]
        [::core::mem::offset_of!(cudaDeviceProp, sharedMemPerBlockOptin) - 696usize];
    ["Offset of field: cudaDeviceProp::pageableMemoryAccessUsesHostPageTables"][::core::mem::offset_of!(
        cudaDeviceProp,
        pageableMemoryAccessUsesHostPageTables
    ) - 704usize];
    ["Offset of field: cudaDeviceProp::directManagedMemAccessFromHost"]
        [::core::mem::offset_of!(cudaDeviceProp, directManagedMemAccessFromHost) - 708usize];
    ["Offset of field: cudaDeviceProp::maxBlocksPerMultiProcessor"]
        [::core::mem::offset_of!(cudaDeviceProp, maxBlocksPerMultiProcessor) - 712usize];
    ["Offset of field: cudaDeviceProp::accessPolicyMaxWindowSize"]
        [::core::mem::offset_of!(cudaDeviceProp, accessPolicyMaxWindowSize) - 716usize];
    ["Offset of field: cudaDeviceProp::reservedSharedMemPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, reservedSharedMemPerBlock) - 720usize];
    ["Offset of field: cudaDeviceProp::hostRegisterSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, hostRegisterSupported) - 728usize];
    ["Offset of field: cudaDeviceProp::sparseCudaArraySupported"]
        [::core::mem::offset_of!(cudaDeviceProp, sparseCudaArraySupported) - 732usize];
    ["Offset of field: cudaDeviceProp::hostRegisterReadOnlySupported"]
        [::core::mem::offset_of!(cudaDeviceProp, hostRegisterReadOnlySupported) - 736usize];
    ["Offset of field: cudaDeviceProp::timelineSemaphoreInteropSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, timelineSemaphoreInteropSupported) - 740usize];
    ["Offset of field: cudaDeviceProp::memoryPoolsSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryPoolsSupported) - 744usize];
    ["Offset of field: cudaDeviceProp::gpuDirectRDMASupported"]
        [::core::mem::offset_of!(cudaDeviceProp, gpuDirectRDMASupported) - 748usize];
    ["Offset of field: cudaDeviceProp::gpuDirectRDMAFlushWritesOptions"]
        [::core::mem::offset_of!(cudaDeviceProp, gpuDirectRDMAFlushWritesOptions) - 752usize];
    ["Offset of field: cudaDeviceProp::gpuDirectRDMAWritesOrdering"]
        [::core::mem::offset_of!(cudaDeviceProp, gpuDirectRDMAWritesOrdering) - 756usize];
    ["Offset of field: cudaDeviceProp::memoryPoolSupportedHandleTypes"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryPoolSupportedHandleTypes) - 760usize];
    ["Offset of field: cudaDeviceProp::deferredMappingCudaArraySupported"]
        [::core::mem::offset_of!(cudaDeviceProp, deferredMappingCudaArraySupported) - 764usize];
    ["Offset of field: cudaDeviceProp::ipcEventSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, ipcEventSupported) - 768usize];
    ["Offset of field: cudaDeviceProp::clusterLaunch"]
        [::core::mem::offset_of!(cudaDeviceProp, clusterLaunch) - 772usize];
    ["Offset of field: cudaDeviceProp::unifiedFunctionPointers"]
        [::core::mem::offset_of!(cudaDeviceProp, unifiedFunctionPointers) - 776usize];
    ["Offset of field: cudaDeviceProp::reserved"]
        [::core::mem::offset_of!(cudaDeviceProp, reserved) - 780usize];
};
impl Default for cudaDeviceProp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcEventHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaIpcEventHandle_st"][::core::mem::size_of::<cudaIpcEventHandle_st>() - 64usize];
    ["Alignment of cudaIpcEventHandle_st"]
        [::core::mem::align_of::<cudaIpcEventHandle_st>() - 1usize];
    ["Offset of field: cudaIpcEventHandle_st::reserved"]
        [::core::mem::offset_of!(cudaIpcEventHandle_st, reserved) - 0usize];
};
impl Default for cudaIpcEventHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcEventHandle_t = cudaIpcEventHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcMemHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaIpcMemHandle_st"][::core::mem::size_of::<cudaIpcMemHandle_st>() - 64usize];
    ["Alignment of cudaIpcMemHandle_st"][::core::mem::align_of::<cudaIpcMemHandle_st>() - 1usize];
    ["Offset of field: cudaIpcMemHandle_st::reserved"]
        [::core::mem::offset_of!(cudaIpcMemHandle_st, reserved) - 0usize];
};
impl Default for cudaIpcMemHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcMemHandle_t = cudaIpcMemHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemFabricHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemFabricHandle_st"][::core::mem::size_of::<cudaMemFabricHandle_st>() - 64usize];
    ["Alignment of cudaMemFabricHandle_st"]
        [::core::mem::align_of::<cudaMemFabricHandle_st>() - 1usize];
    ["Offset of field: cudaMemFabricHandle_st::reserved"]
        [::core::mem::offset_of!(cudaMemFabricHandle_st, reserved) - 0usize];
};
impl Default for cudaMemFabricHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemFabricHandle_t = cudaMemFabricHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalMemoryHandleType {
    cudaExternalMemoryHandleTypeOpaqueFd = 1,
    cudaExternalMemoryHandleTypeOpaqueWin32 = 2,
    cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalMemoryHandleTypeD3D12Heap = 4,
    cudaExternalMemoryHandleTypeD3D12Resource = 5,
    cudaExternalMemoryHandleTypeD3D11Resource = 6,
    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    cudaExternalMemoryHandleTypeNvSciBuf = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalMemoryHandleDesc {
    pub type_: cudaExternalMemoryHandleType,
    pub handle: cudaExternalMemoryHandleDesc__bindgen_ty_1,
    pub size: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    pub fd: ::core::ffi::c_int,
    pub win32: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciBufObject: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1"][::core::mem::align_of::<
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1::handle"][::core::mem::offset_of!(
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
        handle
    )
        - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1::name"][::core::mem::offset_of!(
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
        name
    ) - 8usize];
};
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryHandleDesc__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>() - 16usize];
    ["Alignment of cudaExternalMemoryHandleDesc__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1::fd"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1::win32"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc__bindgen_ty_1, win32) - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1::nvSciBufObject"][::core::mem::offset_of!(
        cudaExternalMemoryHandleDesc__bindgen_ty_1,
        nvSciBufObject
    ) - 0usize];
};
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryHandleDesc"]
        [::core::mem::size_of::<cudaExternalMemoryHandleDesc>() - 40usize];
    ["Alignment of cudaExternalMemoryHandleDesc"]
        [::core::mem::align_of::<cudaExternalMemoryHandleDesc>() - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::type_"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, type_) - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::handle"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, handle) - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::size"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, size) - 24usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::flags"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, flags) - 32usize];
};
impl Default for cudaExternalMemoryHandleDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryBufferDesc {
    pub offset: ::core::ffi::c_ulonglong,
    pub size: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryBufferDesc"]
        [::core::mem::size_of::<cudaExternalMemoryBufferDesc>() - 24usize];
    ["Alignment of cudaExternalMemoryBufferDesc"]
        [::core::mem::align_of::<cudaExternalMemoryBufferDesc>() - 8usize];
    ["Offset of field: cudaExternalMemoryBufferDesc::offset"]
        [::core::mem::offset_of!(cudaExternalMemoryBufferDesc, offset) - 0usize];
    ["Offset of field: cudaExternalMemoryBufferDesc::size"]
        [::core::mem::offset_of!(cudaExternalMemoryBufferDesc, size) - 8usize];
    ["Offset of field: cudaExternalMemoryBufferDesc::flags"]
        [::core::mem::offset_of!(cudaExternalMemoryBufferDesc, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryMipmappedArrayDesc {
    pub offset: ::core::ffi::c_ulonglong,
    pub formatDesc: cudaChannelFormatDesc,
    pub extent: cudaExtent,
    pub flags: ::core::ffi::c_uint,
    pub numLevels: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryMipmappedArrayDesc"]
        [::core::mem::size_of::<cudaExternalMemoryMipmappedArrayDesc>() - 64usize];
    ["Alignment of cudaExternalMemoryMipmappedArrayDesc"]
        [::core::mem::align_of::<cudaExternalMemoryMipmappedArrayDesc>() - 8usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::offset"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, offset) - 0usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::formatDesc"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, formatDesc) - 8usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::extent"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, extent) - 32usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::flags"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, flags) - 56usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::numLevels"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, numLevels) - 60usize];
};
impl Default for cudaExternalMemoryMipmappedArrayDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalSemaphoreHandleType {
    cudaExternalSemaphoreHandleTypeOpaqueFd = 1,
    cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2,
    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalSemaphoreHandleTypeD3D12Fence = 4,
    cudaExternalSemaphoreHandleTypeD3D11Fence = 5,
    cudaExternalSemaphoreHandleTypeNvSciSync = 6,
    cudaExternalSemaphoreHandleTypeKeyedMutex = 7,
    cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreHandleDesc {
    pub type_: cudaExternalSemaphoreHandleType,
    pub handle: cudaExternalSemaphoreHandleDesc__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    pub fd: ::core::ffi::c_int,
    pub win32: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSyncObj: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1::handle"][::core::mem::offset_of!(
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
        handle
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1::name"][::core::mem::offset_of!(
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 8usize];
};
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreHandleDesc__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>() - 16usize];
    ["Alignment of cudaExternalSemaphoreHandleDesc__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1::fd"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1::win32"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1, win32) - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1::nvSciSyncObj"][::core::mem::offset_of!(
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1,
        nvSciSyncObj
    ) - 0usize];
};
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreHandleDesc"]
        [::core::mem::size_of::<cudaExternalSemaphoreHandleDesc>() - 32usize];
    ["Alignment of cudaExternalSemaphoreHandleDesc"]
        [::core::mem::align_of::<cudaExternalSemaphoreHandleDesc>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc::type_"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc, type_) - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc::handle"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc, handle) - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc, flags) - 24usize];
};
impl Default for cudaExternalSemaphoreHandleDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1 {
    pub params: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(
        ) - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(
        ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2::reserved"] [:: core :: mem :: offset_of ! (cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 , reserved) - 0usize] ;
};
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(
        ) - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(
        ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>() - 24usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
        fence
    ) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
        keyedMutex
    )
        - 16usize];
};
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1>() - 32usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams_v1, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams_v1, flags) - 24usize];
};
impl Default for cudaExternalSemaphoreSignalParams_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1 {
    pub params: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
        reserved
    )
        - 0usize];
};
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
    pub timeoutMs: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
    >() - 16usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3::timeoutMs"] [:: core :: mem :: offset_of ! (cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 , timeoutMs) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>() - 32usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1::fence"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
        keyedMutex
    ) - 16usize];
};
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1>() - 40usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams_v1, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams_v1, flags) - 32usize];
};
impl Default for cudaExternalSemaphoreWaitParams_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams {
    pub params: cudaExternalSemaphoreSignalParams__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::core::ffi::c_uint; 12usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2"][::core::mem::size_of::<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
        reserved
    )
        - 0usize];
};
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3"][::core::mem::size_of::<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>() - 72usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::fence"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1,
        keyedMutex
    ) - 16usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1,
        reserved
    ) - 24usize];
};
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams>() - 144usize];
    ["Alignment of cudaExternalSemaphoreSignalParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams, flags) - 72usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams::reserved"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams, reserved) - 76usize];
};
impl Default for cudaExternalSemaphoreSignalParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams {
    pub params: cudaExternalSemaphoreWaitParams__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::core::ffi::c_uint; 10usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
        reserved
    )
        - 0usize];
};
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
    pub timeoutMs: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    >() - 16usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3::timeoutMs"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
        timeoutMs
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>() - 72usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::fence"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1,
        keyedMutex
    ) - 16usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1,
        reserved
    ) - 32usize];
};
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams>() - 144usize];
    ["Alignment of cudaExternalSemaphoreWaitParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams, flags) - 72usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams::reserved"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams, reserved) - 76usize];
};
impl Default for cudaExternalSemaphoreWaitParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::cudaError as cudaError_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUevent_st {
    _unused: [u8; 0],
}
pub type cudaEvent_t = *mut CUevent_st;
pub type cudaGraphicsResource_t = *mut cudaGraphicsResource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalMemory_st {
    _unused: [u8; 0],
}
pub type cudaExternalMemory_t = *mut CUexternalMemory_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalSemaphore_st {
    _unused: [u8; 0],
}
pub type cudaExternalSemaphore_t = *mut CUexternalSemaphore_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraph_st {
    _unused: [u8; 0],
}
pub type cudaGraph_t = *mut CUgraph_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphNode_st {
    _unused: [u8; 0],
}
pub type cudaGraphNode_t = *mut CUgraphNode_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUuserObject_st {
    _unused: [u8; 0],
}
pub type cudaUserObject_t = *mut CUuserObject_st;
pub type cudaGraphConditionalHandle = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUfunc_st {
    _unused: [u8; 0],
}
pub type cudaFunction_t = *mut CUfunc_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUkern_st {
    _unused: [u8; 0],
}
pub type cudaKernel_t = *mut CUkern_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaJitOption {
    cudaJitMaxRegisters = 0,
    cudaJitThreadsPerBlock = 1,
    cudaJitWallTime = 2,
    cudaJitInfoLogBuffer = 3,
    cudaJitInfoLogBufferSizeBytes = 4,
    cudaJitErrorLogBuffer = 5,
    cudaJitErrorLogBufferSizeBytes = 6,
    cudaJitOptimizationLevel = 7,
    cudaJitFallbackStrategy = 10,
    cudaJitGenerateDebugInfo = 11,
    cudaJitLogVerbose = 12,
    cudaJitGenerateLineInfo = 13,
    cudaJitCacheMode = 14,
    cudaJitPositionIndependentCode = 30,
    cudaJitMinCtaPerSm = 31,
    cudaJitMaxThreadsPerBlock = 32,
    cudaJitOverrideDirectiveValues = 33,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLibraryOption {
    cudaLibraryHostUniversalFunctionAndDataTable = 0,
    cudaLibraryBinaryIsPreserved = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudalibraryHostUniversalFunctionAndDataTable {
    pub functionTable: *mut ::core::ffi::c_void,
    pub functionWindowSize: usize,
    pub dataTable: *mut ::core::ffi::c_void,
    pub dataWindowSize: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudalibraryHostUniversalFunctionAndDataTable"]
        [::core::mem::size_of::<cudalibraryHostUniversalFunctionAndDataTable>() - 32usize];
    ["Alignment of cudalibraryHostUniversalFunctionAndDataTable"]
        [::core::mem::align_of::<cudalibraryHostUniversalFunctionAndDataTable>() - 8usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::functionTable"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        functionTable
    ) - 0usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::functionWindowSize"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        functionWindowSize
    )
        - 8usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::dataTable"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        dataTable
    ) - 16usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::dataWindowSize"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        dataWindowSize
    ) - 24usize];
};
impl Default for cudalibraryHostUniversalFunctionAndDataTable {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaJit_CacheMode {
    cudaJitCacheOptionNone = 0,
    cudaJitCacheOptionCG = 1,
    cudaJitCacheOptionCA = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaJit_Fallback {
    cudaPreferPtx = 0,
    cudaPreferBinary = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUlib_st {
    _unused: [u8; 0],
}
pub type cudaLibrary_t = *mut CUlib_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemPoolHandle_st {
    _unused: [u8; 0],
}
pub type cudaMemPool_t = *mut CUmemPoolHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaCGScope {
    cudaCGScopeInvalid = 0,
    cudaCGScopeGrid = 1,
    cudaCGScopeMultiGrid = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchParams {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::core::ffi::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchParams"][::core::mem::size_of::<cudaLaunchParams>() - 56usize];
    ["Alignment of cudaLaunchParams"][::core::mem::align_of::<cudaLaunchParams>() - 8usize];
    ["Offset of field: cudaLaunchParams::func"]
        [::core::mem::offset_of!(cudaLaunchParams, func) - 0usize];
    ["Offset of field: cudaLaunchParams::gridDim"]
        [::core::mem::offset_of!(cudaLaunchParams, gridDim) - 8usize];
    ["Offset of field: cudaLaunchParams::blockDim"]
        [::core::mem::offset_of!(cudaLaunchParams, blockDim) - 20usize];
    ["Offset of field: cudaLaunchParams::args"]
        [::core::mem::offset_of!(cudaLaunchParams, args) - 32usize];
    ["Offset of field: cudaLaunchParams::sharedMem"]
        [::core::mem::offset_of!(cudaLaunchParams, sharedMem) - 40usize];
    ["Offset of field: cudaLaunchParams::stream"]
        [::core::mem::offset_of!(cudaLaunchParams, stream) - 48usize];
};
impl Default for cudaLaunchParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaKernelNodeParams {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub sharedMemBytes: ::core::ffi::c_uint,
    pub kernelParams: *mut *mut ::core::ffi::c_void,
    pub extra: *mut *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaKernelNodeParams"][::core::mem::size_of::<cudaKernelNodeParams>() - 56usize];
    ["Alignment of cudaKernelNodeParams"][::core::mem::align_of::<cudaKernelNodeParams>() - 8usize];
    ["Offset of field: cudaKernelNodeParams::func"]
        [::core::mem::offset_of!(cudaKernelNodeParams, func) - 0usize];
    ["Offset of field: cudaKernelNodeParams::gridDim"]
        [::core::mem::offset_of!(cudaKernelNodeParams, gridDim) - 8usize];
    ["Offset of field: cudaKernelNodeParams::blockDim"]
        [::core::mem::offset_of!(cudaKernelNodeParams, blockDim) - 20usize];
    ["Offset of field: cudaKernelNodeParams::sharedMemBytes"]
        [::core::mem::offset_of!(cudaKernelNodeParams, sharedMemBytes) - 32usize];
    ["Offset of field: cudaKernelNodeParams::kernelParams"]
        [::core::mem::offset_of!(cudaKernelNodeParams, kernelParams) - 40usize];
    ["Offset of field: cudaKernelNodeParams::extra"]
        [::core::mem::offset_of!(cudaKernelNodeParams, extra) - 48usize];
};
impl Default for cudaKernelNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaKernelNodeParamsV2 {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub sharedMemBytes: ::core::ffi::c_uint,
    pub kernelParams: *mut *mut ::core::ffi::c_void,
    pub extra: *mut *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaKernelNodeParamsV2"][::core::mem::size_of::<cudaKernelNodeParamsV2>() - 56usize];
    ["Alignment of cudaKernelNodeParamsV2"]
        [::core::mem::align_of::<cudaKernelNodeParamsV2>() - 8usize];
    ["Offset of field: cudaKernelNodeParamsV2::func"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, func) - 0usize];
    ["Offset of field: cudaKernelNodeParamsV2::gridDim"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, gridDim) - 8usize];
    ["Offset of field: cudaKernelNodeParamsV2::blockDim"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, blockDim) - 20usize];
    ["Offset of field: cudaKernelNodeParamsV2::sharedMemBytes"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, sharedMemBytes) - 32usize];
    ["Offset of field: cudaKernelNodeParamsV2::kernelParams"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, kernelParams) - 40usize];
    ["Offset of field: cudaKernelNodeParamsV2::extra"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, extra) - 48usize];
};
impl Default for cudaKernelNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalNodeParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalNodeParams>() - 24usize];
    ["Alignment of cudaExternalSemaphoreSignalNodeParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalNodeParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParams::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParams, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParams::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParams, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParams::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParams, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreSignalNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalNodeParamsV2 {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalNodeParamsV2"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalNodeParamsV2>() - 24usize];
    ["Alignment of cudaExternalSemaphoreSignalNodeParamsV2"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalNodeParamsV2>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParamsV2::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParamsV2, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParamsV2::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParamsV2, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParamsV2::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParamsV2, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreSignalNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitNodeParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitNodeParams>() - 24usize];
    ["Alignment of cudaExternalSemaphoreWaitNodeParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitNodeParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParams::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParams, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParams::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParams, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParams::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParams, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreWaitNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitNodeParamsV2 {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitNodeParamsV2"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitNodeParamsV2>() - 24usize];
    ["Alignment of cudaExternalSemaphoreWaitNodeParamsV2"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitNodeParamsV2>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParamsV2::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParamsV2, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParamsV2::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParamsV2, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParamsV2::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParamsV2, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreWaitNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphConditionalHandleFlags {
    cudaGraphCondAssignDefault = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphConditionalNodeType {
    cudaGraphCondTypeIf = 0,
    cudaGraphCondTypeWhile = 1,
    cudaGraphCondTypeSwitch = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaConditionalNodeParams {
    pub handle: cudaGraphConditionalHandle,
    pub type_: cudaGraphConditionalNodeType,
    pub size: ::core::ffi::c_uint,
    pub phGraph_out: *mut cudaGraph_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaConditionalNodeParams"]
        [::core::mem::size_of::<cudaConditionalNodeParams>() - 24usize];
    ["Alignment of cudaConditionalNodeParams"]
        [::core::mem::align_of::<cudaConditionalNodeParams>() - 8usize];
    ["Offset of field: cudaConditionalNodeParams::handle"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, handle) - 0usize];
    ["Offset of field: cudaConditionalNodeParams::type_"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, type_) - 8usize];
    ["Offset of field: cudaConditionalNodeParams::size"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, size) - 12usize];
    ["Offset of field: cudaConditionalNodeParams::phGraph_out"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, phGraph_out) - 16usize];
};
impl Default for cudaConditionalNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphNodeType {
    cudaGraphNodeTypeKernel = 0,
    cudaGraphNodeTypeMemcpy = 1,
    cudaGraphNodeTypeMemset = 2,
    cudaGraphNodeTypeHost = 3,
    cudaGraphNodeTypeGraph = 4,
    cudaGraphNodeTypeEmpty = 5,
    cudaGraphNodeTypeWaitEvent = 6,
    cudaGraphNodeTypeEventRecord = 7,
    cudaGraphNodeTypeExtSemaphoreSignal = 8,
    cudaGraphNodeTypeExtSemaphoreWait = 9,
    cudaGraphNodeTypeMemAlloc = 10,
    cudaGraphNodeTypeMemFree = 11,
    cudaGraphNodeTypeConditional = 13,
    cudaGraphNodeTypeCount = 14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChildGraphNodeParams {
    pub graph: cudaGraph_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaChildGraphNodeParams"]
        [::core::mem::size_of::<cudaChildGraphNodeParams>() - 8usize];
    ["Alignment of cudaChildGraphNodeParams"]
        [::core::mem::align_of::<cudaChildGraphNodeParams>() - 8usize];
    ["Offset of field: cudaChildGraphNodeParams::graph"]
        [::core::mem::offset_of!(cudaChildGraphNodeParams, graph) - 0usize];
};
impl Default for cudaChildGraphNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventRecordNodeParams {
    pub event: cudaEvent_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaEventRecordNodeParams"]
        [::core::mem::size_of::<cudaEventRecordNodeParams>() - 8usize];
    ["Alignment of cudaEventRecordNodeParams"]
        [::core::mem::align_of::<cudaEventRecordNodeParams>() - 8usize];
    ["Offset of field: cudaEventRecordNodeParams::event"]
        [::core::mem::offset_of!(cudaEventRecordNodeParams, event) - 0usize];
};
impl Default for cudaEventRecordNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventWaitNodeParams {
    pub event: cudaEvent_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaEventWaitNodeParams"][::core::mem::size_of::<cudaEventWaitNodeParams>() - 8usize];
    ["Alignment of cudaEventWaitNodeParams"]
        [::core::mem::align_of::<cudaEventWaitNodeParams>() - 8usize];
    ["Offset of field: cudaEventWaitNodeParams::event"]
        [::core::mem::offset_of!(cudaEventWaitNodeParams, event) - 0usize];
};
impl Default for cudaEventWaitNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaGraphNodeParams {
    pub type_: cudaGraphNodeType,
    pub reserved0: [::core::ffi::c_int; 3usize],
    pub __bindgen_anon_1: cudaGraphNodeParams__bindgen_ty_1,
    pub reserved2: ::core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaGraphNodeParams__bindgen_ty_1 {
    pub reserved1: [::core::ffi::c_longlong; 29usize],
    pub kernel: cudaKernelNodeParamsV2,
    pub memcpy: cudaMemcpyNodeParams,
    pub memset: cudaMemsetParamsV2,
    pub host: cudaHostNodeParamsV2,
    pub graph: cudaChildGraphNodeParams,
    pub eventWait: cudaEventWaitNodeParams,
    pub eventRecord: cudaEventRecordNodeParams,
    pub extSemSignal: cudaExternalSemaphoreSignalNodeParamsV2,
    pub extSemWait: cudaExternalSemaphoreWaitNodeParamsV2,
    pub alloc: cudaMemAllocNodeParamsV2,
    pub free: cudaMemFreeNodeParams,
    pub conditional: cudaConditionalNodeParams,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphNodeParams__bindgen_ty_1"]
        [::core::mem::size_of::<cudaGraphNodeParams__bindgen_ty_1>() - 232usize];
    ["Alignment of cudaGraphNodeParams__bindgen_ty_1"]
        [::core::mem::align_of::<cudaGraphNodeParams__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::reserved1"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, reserved1) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::kernel"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, kernel) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::memcpy"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, memcpy) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::memset"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, memset) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::host"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, host) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::graph"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, graph) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::eventWait"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, eventWait) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::eventRecord"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, eventRecord) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::extSemSignal"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, extSemSignal) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::extSemWait"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, extSemWait) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::alloc"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, alloc) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::free"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, free) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::conditional"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, conditional) - 0usize];
};
impl Default for cudaGraphNodeParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphNodeParams"][::core::mem::size_of::<cudaGraphNodeParams>() - 256usize];
    ["Alignment of cudaGraphNodeParams"][::core::mem::align_of::<cudaGraphNodeParams>() - 8usize];
    ["Offset of field: cudaGraphNodeParams::type_"]
        [::core::mem::offset_of!(cudaGraphNodeParams, type_) - 0usize];
    ["Offset of field: cudaGraphNodeParams::reserved0"]
        [::core::mem::offset_of!(cudaGraphNodeParams, reserved0) - 4usize];
    ["Offset of field: cudaGraphNodeParams::reserved2"]
        [::core::mem::offset_of!(cudaGraphNodeParams, reserved2) - 248usize];
};
impl Default for cudaGraphNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphDependencyType_enum {
    cudaGraphDependencyTypeDefault = 0,
    cudaGraphDependencyTypeProgrammatic = 1,
}
pub use self::cudaGraphDependencyType_enum as cudaGraphDependencyType;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphEdgeData_st {
    pub from_port: ::core::ffi::c_uchar,
    pub to_port: ::core::ffi::c_uchar,
    pub type_: ::core::ffi::c_uchar,
    pub reserved: [::core::ffi::c_uchar; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphEdgeData_st"][::core::mem::size_of::<cudaGraphEdgeData_st>() - 8usize];
    ["Alignment of cudaGraphEdgeData_st"][::core::mem::align_of::<cudaGraphEdgeData_st>() - 1usize];
    ["Offset of field: cudaGraphEdgeData_st::from_port"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, from_port) - 0usize];
    ["Offset of field: cudaGraphEdgeData_st::to_port"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, to_port) - 1usize];
    ["Offset of field: cudaGraphEdgeData_st::type_"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, type_) - 2usize];
    ["Offset of field: cudaGraphEdgeData_st::reserved"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, reserved) - 3usize];
};
pub type cudaGraphEdgeData = cudaGraphEdgeData_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphExec_st {
    _unused: [u8; 0],
}
pub type cudaGraphExec_t = *mut CUgraphExec_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess = 0,
    cudaGraphExecUpdateError = 1,
    cudaGraphExecUpdateErrorTopologyChanged = 2,
    cudaGraphExecUpdateErrorNodeTypeChanged = 3,
    cudaGraphExecUpdateErrorFunctionChanged = 4,
    cudaGraphExecUpdateErrorParametersChanged = 5,
    cudaGraphExecUpdateErrorNotSupported = 6,
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7,
    cudaGraphExecUpdateErrorAttributesChanged = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphInstantiateResult {
    cudaGraphInstantiateSuccess = 0,
    cudaGraphInstantiateError = 1,
    cudaGraphInstantiateInvalidStructure = 2,
    cudaGraphInstantiateNodeOperationNotSupported = 3,
    cudaGraphInstantiateMultipleDevicesNotSupported = 4,
    cudaGraphInstantiateConditionalHandleUnused = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiateParams_st {
    pub flags: ::core::ffi::c_ulonglong,
    pub uploadStream: cudaStream_t,
    pub errNode_out: cudaGraphNode_t,
    pub result_out: cudaGraphInstantiateResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphInstantiateParams_st"]
        [::core::mem::size_of::<cudaGraphInstantiateParams_st>() - 32usize];
    ["Alignment of cudaGraphInstantiateParams_st"]
        [::core::mem::align_of::<cudaGraphInstantiateParams_st>() - 8usize];
    ["Offset of field: cudaGraphInstantiateParams_st::flags"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, flags) - 0usize];
    ["Offset of field: cudaGraphInstantiateParams_st::uploadStream"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, uploadStream) - 8usize];
    ["Offset of field: cudaGraphInstantiateParams_st::errNode_out"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, errNode_out) - 16usize];
    ["Offset of field: cudaGraphInstantiateParams_st::result_out"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, result_out) - 24usize];
};
impl Default for cudaGraphInstantiateParams_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiateParams = cudaGraphInstantiateParams_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecUpdateResultInfo_st {
    pub result: cudaGraphExecUpdateResult,
    pub errorNode: cudaGraphNode_t,
    pub errorFromNode: cudaGraphNode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphExecUpdateResultInfo_st"]
        [::core::mem::size_of::<cudaGraphExecUpdateResultInfo_st>() - 24usize];
    ["Alignment of cudaGraphExecUpdateResultInfo_st"]
        [::core::mem::align_of::<cudaGraphExecUpdateResultInfo_st>() - 8usize];
    ["Offset of field: cudaGraphExecUpdateResultInfo_st::result"]
        [::core::mem::offset_of!(cudaGraphExecUpdateResultInfo_st, result) - 0usize];
    ["Offset of field: cudaGraphExecUpdateResultInfo_st::errorNode"]
        [::core::mem::offset_of!(cudaGraphExecUpdateResultInfo_st, errorNode) - 8usize];
    ["Offset of field: cudaGraphExecUpdateResultInfo_st::errorFromNode"]
        [::core::mem::offset_of!(cudaGraphExecUpdateResultInfo_st, errorFromNode) - 16usize];
};
impl Default for cudaGraphExecUpdateResultInfo_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecUpdateResultInfo = cudaGraphExecUpdateResultInfo_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphDeviceUpdatableNode_st {
    _unused: [u8; 0],
}
pub type cudaGraphDeviceNode_t = *mut CUgraphDeviceUpdatableNode_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphKernelNodeField {
    cudaGraphKernelNodeFieldInvalid = 0,
    cudaGraphKernelNodeFieldGridDim = 1,
    cudaGraphKernelNodeFieldParam = 2,
    cudaGraphKernelNodeFieldEnabled = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaGraphKernelNodeUpdate {
    pub node: cudaGraphDeviceNode_t,
    pub field: cudaGraphKernelNodeField,
    pub updateData: cudaGraphKernelNodeUpdate__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaGraphKernelNodeUpdate__bindgen_ty_1 {
    pub gridDim: dim3,
    pub param: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
    pub isEnabled: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 {
    pub pValue: *const ::core::ffi::c_void,
    pub offset: usize,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1::pValue"][::core::mem::offset_of!(
        cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
        pValue
    ) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1::offset"][::core::mem::offset_of!(
        cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
        offset
    ) - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1::size"][::core::mem::offset_of!(
        cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 16usize];
};
impl Default for cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphKernelNodeUpdate__bindgen_ty_1"]
        [::core::mem::size_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1>() - 24usize];
    ["Alignment of cudaGraphKernelNodeUpdate__bindgen_ty_1"]
        [::core::mem::align_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1::gridDim"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate__bindgen_ty_1, gridDim) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1::param"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate__bindgen_ty_1, param) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1::isEnabled"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate__bindgen_ty_1, isEnabled) - 0usize];
};
impl Default for cudaGraphKernelNodeUpdate__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphKernelNodeUpdate"]
        [::core::mem::size_of::<cudaGraphKernelNodeUpdate>() - 40usize];
    ["Alignment of cudaGraphKernelNodeUpdate"]
        [::core::mem::align_of::<cudaGraphKernelNodeUpdate>() - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate::node"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate, node) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate::field"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate, field) - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate::updateData"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate, updateData) - 16usize];
};
impl Default for cudaGraphKernelNodeUpdate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGetDriverEntryPointFlags {
    cudaEnableDefault = 0,
    cudaEnableLegacyStream = 1,
    cudaEnablePerThreadDefaultStream = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDriverEntryPointQueryResult {
    cudaDriverEntryPointSuccess = 0,
    cudaDriverEntryPointSymbolNotFound = 1,
    cudaDriverEntryPointVersionNotSufficent = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphDebugDotFlags {
    cudaGraphDebugDotFlagsVerbose = 1,
    cudaGraphDebugDotFlagsKernelNodeParams = 4,
    cudaGraphDebugDotFlagsMemcpyNodeParams = 8,
    cudaGraphDebugDotFlagsMemsetNodeParams = 16,
    cudaGraphDebugDotFlagsHostNodeParams = 32,
    cudaGraphDebugDotFlagsEventNodeParams = 64,
    cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128,
    cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256,
    cudaGraphDebugDotFlagsKernelNodeAttributes = 512,
    cudaGraphDebugDotFlagsHandles = 1024,
    cudaGraphDebugDotFlagsConditionalNodeParams = 32768,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphInstantiateFlags {
    cudaGraphInstantiateFlagAutoFreeOnLaunch = 1,
    cudaGraphInstantiateFlagUpload = 2,
    cudaGraphInstantiateFlagDeviceLaunch = 4,
    cudaGraphInstantiateFlagUseNodePriority = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLaunchMemSyncDomain {
    cudaLaunchMemSyncDomainDefault = 0,
    cudaLaunchMemSyncDomainRemote = 1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchMemSyncDomainMap_st {
    pub default_: ::core::ffi::c_uchar,
    pub remote: ::core::ffi::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchMemSyncDomainMap_st"]
        [::core::mem::size_of::<cudaLaunchMemSyncDomainMap_st>() - 2usize];
    ["Alignment of cudaLaunchMemSyncDomainMap_st"]
        [::core::mem::align_of::<cudaLaunchMemSyncDomainMap_st>() - 1usize];
    ["Offset of field: cudaLaunchMemSyncDomainMap_st::default_"]
        [::core::mem::offset_of!(cudaLaunchMemSyncDomainMap_st, default_) - 0usize];
    ["Offset of field: cudaLaunchMemSyncDomainMap_st::remote"]
        [::core::mem::offset_of!(cudaLaunchMemSyncDomainMap_st, remote) - 1usize];
};
pub type cudaLaunchMemSyncDomainMap = cudaLaunchMemSyncDomainMap_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLaunchAttributeID {
    cudaLaunchAttributeIgnore = 0,
    cudaLaunchAttributeAccessPolicyWindow = 1,
    cudaLaunchAttributeCooperative = 2,
    cudaLaunchAttributeSynchronizationPolicy = 3,
    cudaLaunchAttributeClusterDimension = 4,
    cudaLaunchAttributeClusterSchedulingPolicyPreference = 5,
    cudaLaunchAttributeProgrammaticStreamSerialization = 6,
    cudaLaunchAttributeProgrammaticEvent = 7,
    cudaLaunchAttributePriority = 8,
    cudaLaunchAttributeMemSyncDomainMap = 9,
    cudaLaunchAttributeMemSyncDomain = 10,
    cudaLaunchAttributePreferredClusterDimension = 11,
    cudaLaunchAttributeLaunchCompletionEvent = 12,
    cudaLaunchAttributeDeviceUpdatableKernelNode = 13,
    cudaLaunchAttributePreferredSharedMemoryCarveout = 14,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaLaunchAttributeValue {
    pub pad: [::core::ffi::c_char; 64usize],
    pub accessPolicyWindow: cudaAccessPolicyWindow,
    pub cooperative: ::core::ffi::c_int,
    pub syncPolicy: cudaSynchronizationPolicy,
    pub clusterDim: cudaLaunchAttributeValue__bindgen_ty_1,
    pub clusterSchedulingPolicyPreference: cudaClusterSchedulingPolicy,
    pub programmaticStreamSerializationAllowed: ::core::ffi::c_int,
    pub programmaticEvent: cudaLaunchAttributeValue__bindgen_ty_2,
    pub priority: ::core::ffi::c_int,
    pub memSyncDomainMap: cudaLaunchMemSyncDomainMap,
    pub memSyncDomain: cudaLaunchMemSyncDomain,
    pub preferredClusterDim: cudaLaunchAttributeValue__bindgen_ty_3,
    pub launchCompletionEvent: cudaLaunchAttributeValue__bindgen_ty_4,
    pub deviceUpdatableKernelNode: cudaLaunchAttributeValue__bindgen_ty_5,
    pub sharedMemCarveout: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_1 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_1"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_1>() - 12usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_1"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_1>() - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_1::x"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_1, x) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_1::y"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_1, y) - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_1::z"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_1, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_2 {
    pub event: cudaEvent_t,
    pub flags: ::core::ffi::c_int,
    pub triggerAtBlockStart: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_2"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_2>() - 16usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_2"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_2>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_2::event"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_2, event) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_2::flags"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_2, flags) - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_2::triggerAtBlockStart"][::core::mem::offset_of!(
        cudaLaunchAttributeValue__bindgen_ty_2,
        triggerAtBlockStart
    ) - 12usize];
};
impl Default for cudaLaunchAttributeValue__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_3 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_3"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_3>() - 12usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_3"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_3>() - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_3::x"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_3, x) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_3::y"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_3, y) - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_3::z"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_3, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_4 {
    pub event: cudaEvent_t,
    pub flags: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_4"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_4>() - 16usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_4"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_4>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_4::event"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_4, event) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_4::flags"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_4, flags) - 8usize];
};
impl Default for cudaLaunchAttributeValue__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_5 {
    pub deviceUpdatable: ::core::ffi::c_int,
    pub devNode: cudaGraphDeviceNode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_5"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_5>() - 16usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_5"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_5>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_5::deviceUpdatable"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_5, deviceUpdatable) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_5::devNode"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_5, devNode) - 8usize];
};
impl Default for cudaLaunchAttributeValue__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue"]
        [::core::mem::size_of::<cudaLaunchAttributeValue>() - 64usize];
    ["Alignment of cudaLaunchAttributeValue"]
        [::core::mem::align_of::<cudaLaunchAttributeValue>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue::pad"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, pad) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::accessPolicyWindow"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, accessPolicyWindow) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::cooperative"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, cooperative) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::syncPolicy"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, syncPolicy) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::clusterDim"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, clusterDim) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::clusterSchedulingPolicyPreference"][::core::mem::offset_of!(
        cudaLaunchAttributeValue,
        clusterSchedulingPolicyPreference
    ) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::programmaticStreamSerializationAllowed"][::core::mem::offset_of!(
        cudaLaunchAttributeValue,
        programmaticStreamSerializationAllowed
    )
        - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::programmaticEvent"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, programmaticEvent) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::priority"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, priority) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::memSyncDomainMap"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, memSyncDomainMap) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::memSyncDomain"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, memSyncDomain) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::preferredClusterDim"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, preferredClusterDim) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::launchCompletionEvent"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, launchCompletionEvent) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::deviceUpdatableKernelNode"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, deviceUpdatableKernelNode) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::sharedMemCarveout"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, sharedMemCarveout) - 0usize];
};
impl Default for cudaLaunchAttributeValue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaLaunchAttribute_st {
    pub id: cudaLaunchAttributeID,
    pub pad: [::core::ffi::c_char; 4usize],
    pub val: cudaLaunchAttributeValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttribute_st"][::core::mem::size_of::<cudaLaunchAttribute_st>() - 72usize];
    ["Alignment of cudaLaunchAttribute_st"]
        [::core::mem::align_of::<cudaLaunchAttribute_st>() - 8usize];
    ["Offset of field: cudaLaunchAttribute_st::id"]
        [::core::mem::offset_of!(cudaLaunchAttribute_st, id) - 0usize];
    ["Offset of field: cudaLaunchAttribute_st::pad"]
        [::core::mem::offset_of!(cudaLaunchAttribute_st, pad) - 4usize];
    ["Offset of field: cudaLaunchAttribute_st::val"]
        [::core::mem::offset_of!(cudaLaunchAttribute_st, val) - 8usize];
};
impl Default for cudaLaunchAttribute_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchAttribute = cudaLaunchAttribute_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchConfig_st {
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub dynamicSmemBytes: usize,
    pub stream: cudaStream_t,
    pub attrs: *mut cudaLaunchAttribute,
    pub numAttrs: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchConfig_st"][::core::mem::size_of::<cudaLaunchConfig_st>() - 56usize];
    ["Alignment of cudaLaunchConfig_st"][::core::mem::align_of::<cudaLaunchConfig_st>() - 8usize];
    ["Offset of field: cudaLaunchConfig_st::gridDim"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, gridDim) - 0usize];
    ["Offset of field: cudaLaunchConfig_st::blockDim"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, blockDim) - 12usize];
    ["Offset of field: cudaLaunchConfig_st::dynamicSmemBytes"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, dynamicSmemBytes) - 24usize];
    ["Offset of field: cudaLaunchConfig_st::stream"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, stream) - 32usize];
    ["Offset of field: cudaLaunchConfig_st::attrs"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, attrs) - 40usize];
    ["Offset of field: cudaLaunchConfig_st::numAttrs"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, numAttrs) - 48usize];
};
impl Default for cudaLaunchConfig_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchConfig_t = cudaLaunchConfig_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceNumaConfig {
    cudaDeviceNumaConfigNone = 0,
    cudaDeviceNumaConfigNumaNode = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaAsyncCallbackEntry {
    _unused: [u8; 0],
}
pub type cudaAsyncCallbackHandle_t = *mut cudaAsyncCallbackEntry;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaAsyncNotificationType_enum {
    cudaAsyncNotificationTypeOverBudget = 1,
}
pub use self::cudaAsyncNotificationType_enum as cudaAsyncNotificationType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaAsyncNotificationInfo {
    pub type_: cudaAsyncNotificationType,
    pub info: cudaAsyncNotificationInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaAsyncNotificationInfo__bindgen_ty_1 {
    pub overBudget: cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1 {
    pub bytesOverBudget: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1::bytesOverBudget"][::core::mem::offset_of!(
        cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1,
        bytesOverBudget
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAsyncNotificationInfo__bindgen_ty_1"]
        [::core::mem::size_of::<cudaAsyncNotificationInfo__bindgen_ty_1>() - 8usize];
    ["Alignment of cudaAsyncNotificationInfo__bindgen_ty_1"]
        [::core::mem::align_of::<cudaAsyncNotificationInfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaAsyncNotificationInfo__bindgen_ty_1::overBudget"]
        [::core::mem::offset_of!(cudaAsyncNotificationInfo__bindgen_ty_1, overBudget) - 0usize];
};
impl Default for cudaAsyncNotificationInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAsyncNotificationInfo"]
        [::core::mem::size_of::<cudaAsyncNotificationInfo>() - 16usize];
    ["Alignment of cudaAsyncNotificationInfo"]
        [::core::mem::align_of::<cudaAsyncNotificationInfo>() - 8usize];
    ["Offset of field: cudaAsyncNotificationInfo::type_"]
        [::core::mem::offset_of!(cudaAsyncNotificationInfo, type_) - 0usize];
    ["Offset of field: cudaAsyncNotificationInfo::info"]
        [::core::mem::offset_of!(cudaAsyncNotificationInfo, info) - 8usize];
};
impl Default for cudaAsyncNotificationInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaAsyncNotificationInfo_t = cudaAsyncNotificationInfo;
pub type cudaAsyncCallback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut cudaAsyncNotificationInfo_t,
        arg2: *mut ::core::ffi::c_void,
        arg3: cudaAsyncCallbackHandle_t,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSurfaceBoundaryMode {
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSurfaceFormatMode {
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1,
}
pub type cudaSurfaceObject_t = ::core::ffi::c_ulonglong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureAddressMode {
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureFilterMode {
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureReadMode {
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaTextureDesc {
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub filterMode: cudaTextureFilterMode,
    pub readMode: cudaTextureReadMode,
    pub sRGB: ::core::ffi::c_int,
    pub borderColor: [f32; 4usize],
    pub normalizedCoords: ::core::ffi::c_int,
    pub maxAnisotropy: ::core::ffi::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
    pub disableTrilinearOptimization: ::core::ffi::c_int,
    pub seamlessCubemap: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaTextureDesc"][::core::mem::size_of::<cudaTextureDesc>() - 72usize];
    ["Alignment of cudaTextureDesc"][::core::mem::align_of::<cudaTextureDesc>() - 4usize];
    ["Offset of field: cudaTextureDesc::addressMode"]
        [::core::mem::offset_of!(cudaTextureDesc, addressMode) - 0usize];
    ["Offset of field: cudaTextureDesc::filterMode"]
        [::core::mem::offset_of!(cudaTextureDesc, filterMode) - 12usize];
    ["Offset of field: cudaTextureDesc::readMode"]
        [::core::mem::offset_of!(cudaTextureDesc, readMode) - 16usize];
    ["Offset of field: cudaTextureDesc::sRGB"]
        [::core::mem::offset_of!(cudaTextureDesc, sRGB) - 20usize];
    ["Offset of field: cudaTextureDesc::borderColor"]
        [::core::mem::offset_of!(cudaTextureDesc, borderColor) - 24usize];
    ["Offset of field: cudaTextureDesc::normalizedCoords"]
        [::core::mem::offset_of!(cudaTextureDesc, normalizedCoords) - 40usize];
    ["Offset of field: cudaTextureDesc::maxAnisotropy"]
        [::core::mem::offset_of!(cudaTextureDesc, maxAnisotropy) - 44usize];
    ["Offset of field: cudaTextureDesc::mipmapFilterMode"]
        [::core::mem::offset_of!(cudaTextureDesc, mipmapFilterMode) - 48usize];
    ["Offset of field: cudaTextureDesc::mipmapLevelBias"]
        [::core::mem::offset_of!(cudaTextureDesc, mipmapLevelBias) - 52usize];
    ["Offset of field: cudaTextureDesc::minMipmapLevelClamp"]
        [::core::mem::offset_of!(cudaTextureDesc, minMipmapLevelClamp) - 56usize];
    ["Offset of field: cudaTextureDesc::maxMipmapLevelClamp"]
        [::core::mem::offset_of!(cudaTextureDesc, maxMipmapLevelClamp) - 60usize];
    ["Offset of field: cudaTextureDesc::disableTrilinearOptimization"]
        [::core::mem::offset_of!(cudaTextureDesc, disableTrilinearOptimization) - 64usize];
    ["Offset of field: cudaTextureDesc::seamlessCubemap"]
        [::core::mem::offset_of!(cudaTextureDesc, seamlessCubemap) - 68usize];
};
impl Default for cudaTextureDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaTextureObject_t = ::core::ffi::c_ulonglong;
impl cudaDataType_t {
    pub const CUDA_R_8F_UE4M3: cudaDataType_t = cudaDataType_t::CUDA_R_8F_E4M3;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDataType_t {
    CUDA_R_16F = 2,
    CUDA_C_16F = 6,
    CUDA_R_16BF = 14,
    CUDA_C_16BF = 15,
    CUDA_R_32F = 0,
    CUDA_C_32F = 4,
    CUDA_R_64F = 1,
    CUDA_C_64F = 5,
    CUDA_R_4I = 16,
    CUDA_C_4I = 17,
    CUDA_R_4U = 18,
    CUDA_C_4U = 19,
    CUDA_R_8I = 3,
    CUDA_C_8I = 7,
    CUDA_R_8U = 8,
    CUDA_C_8U = 9,
    CUDA_R_16I = 20,
    CUDA_C_16I = 21,
    CUDA_R_16U = 22,
    CUDA_C_16U = 23,
    CUDA_R_32I = 10,
    CUDA_C_32I = 11,
    CUDA_R_32U = 12,
    CUDA_C_32U = 13,
    CUDA_R_64I = 24,
    CUDA_C_64I = 25,
    CUDA_R_64U = 26,
    CUDA_C_64U = 27,
    CUDA_R_8F_E4M3 = 28,
    CUDA_R_8F_E5M2 = 29,
    CUDA_R_8F_UE8M0 = 30,
    CUDA_R_6F_E2M3 = 31,
    CUDA_R_6F_E3M2 = 32,
    CUDA_R_4F_E2M1 = 33,
}
pub use self::cudaDataType_t as cudaDataType;
unsafe extern "C" {
    pub fn cudaDeviceReset() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceSynchronize() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceSetLimit(limit: cudaLimit, value: usize) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetLimit(pValue: *mut usize, limit: cudaLimit) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetTexture1DLinearMaxWidth(
        maxWidthInElements: *mut usize,
        fmtDesc: *const cudaChannelFormatDesc,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetCacheConfig(pCacheConfig: *mut cudaFuncCache) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetStreamPriorityRange(
        leastPriority: *mut ::core::ffi::c_int,
        greatestPriority: *mut ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceSetCacheConfig(cacheConfig: cudaFuncCache) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetByPCIBusId(
        device: *mut ::core::ffi::c_int,
        pciBusId: *const ::core::ffi::c_char,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetPCIBusId(
        pciBusId: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaIpcGetEventHandle(
        handle: *mut cudaIpcEventHandle_t,
        event: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaIpcOpenEventHandle(
        event: *mut cudaEvent_t,
        handle: cudaIpcEventHandle_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaIpcGetMemHandle(
        handle: *mut cudaIpcMemHandle_t,
        devPtr: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaIpcOpenMemHandle(
        devPtr: *mut *mut ::core::ffi::c_void,
        handle: cudaIpcMemHandle_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaIpcCloseMemHandle(devPtr: *mut ::core::ffi::c_void) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceFlushGPUDirectRDMAWrites(
        target: cudaFlushGPUDirectRDMAWritesTarget,
        scope: cudaFlushGPUDirectRDMAWritesScope,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceRegisterAsyncNotification(
        device: ::core::ffi::c_int,
        callbackFunc: cudaAsyncCallback,
        userData: *mut ::core::ffi::c_void,
        callback: *mut cudaAsyncCallbackHandle_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceUnregisterAsyncNotification(
        device: ::core::ffi::c_int,
        callback: cudaAsyncCallbackHandle_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetSharedMemConfig(pConfig: *mut cudaSharedMemConfig) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceSetSharedMemConfig(config: cudaSharedMemConfig) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadExit() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadSynchronize() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadSetLimit(limit: cudaLimit, value: usize) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadGetLimit(pValue: *mut usize, limit: cudaLimit) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadGetCacheConfig(pCacheConfig: *mut cudaFuncCache) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadSetCacheConfig(cacheConfig: cudaFuncCache) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetLastError() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaPeekAtLastError() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetErrorName(error: cudaError_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn cudaGetErrorString(error: cudaError_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn cudaGetDeviceCount(count: *mut ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetDeviceProperties_v2(
        prop: *mut cudaDeviceProp,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetAttribute(
        value: *mut ::core::ffi::c_int,
        attr: cudaDeviceAttr,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetDefaultMemPool(
        memPool: *mut cudaMemPool_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceSetMemPool(device: ::core::ffi::c_int, memPool: cudaMemPool_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetMemPool(
        memPool: *mut cudaMemPool_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetNvSciSyncAttributes(
        nvSciSyncAttrList: *mut ::core::ffi::c_void,
        device: ::core::ffi::c_int,
        flags: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetP2PAttribute(
        value: *mut ::core::ffi::c_int,
        attr: cudaDeviceP2PAttr,
        srcDevice: ::core::ffi::c_int,
        dstDevice: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaChooseDevice(
        device: *mut ::core::ffi::c_int,
        prop: *const cudaDeviceProp,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaInitDevice(
        device: ::core::ffi::c_int,
        deviceFlags: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaSetDevice(device: ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetDevice(device: *mut ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaSetValidDevices(
        device_arr: *mut ::core::ffi::c_int,
        len: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaSetDeviceFlags(flags: ::core::ffi::c_uint) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetDeviceFlags(flags: *mut ::core::ffi::c_uint) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamCreate(pStream: *mut cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamCreateWithFlags(
        pStream: *mut cudaStream_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamCreateWithPriority(
        pStream: *mut cudaStream_t,
        flags: ::core::ffi::c_uint,
        priority: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetPriority(
        hStream: cudaStream_t,
        priority: *mut ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetFlags(
        hStream: cudaStream_t,
        flags: *mut ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetId(
        hStream: cudaStream_t,
        streamId: *mut ::core::ffi::c_ulonglong,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetDevice(
        hStream: cudaStream_t,
        device: *mut ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaCtxResetPersistingL2Cache() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamCopyAttributes(dst: cudaStream_t, src: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetAttribute(
        hStream: cudaStream_t,
        attr: cudaLaunchAttributeID,
        value_out: *mut cudaLaunchAttributeValue,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamSetAttribute(
        hStream: cudaStream_t,
        attr: cudaLaunchAttributeID,
        value: *const cudaLaunchAttributeValue,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamDestroy(stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamWaitEvent(
        stream: cudaStream_t,
        event: cudaEvent_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
pub type cudaStreamCallback_t = ::core::option::Option<
    unsafe extern "C" fn(
        stream: cudaStream_t,
        status: cudaError_t,
        userData: *mut ::core::ffi::c_void,
    ),
>;
unsafe extern "C" {
    pub fn cudaStreamAddCallback(
        stream: cudaStream_t,
        callback: cudaStreamCallback_t,
        userData: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamSynchronize(stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamQuery(stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamAttachMemAsync(
        stream: cudaStream_t,
        devPtr: *mut ::core::ffi::c_void,
        length: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamBeginCapture(stream: cudaStream_t, mode: cudaStreamCaptureMode)
        -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamBeginCaptureToGraph(
        stream: cudaStream_t,
        graph: cudaGraph_t,
        dependencies: *const cudaGraphNode_t,
        dependencyData: *const cudaGraphEdgeData,
        numDependencies: usize,
        mode: cudaStreamCaptureMode,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaThreadExchangeStreamCaptureMode(mode: *mut cudaStreamCaptureMode) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamEndCapture(stream: cudaStream_t, pGraph: *mut cudaGraph_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamIsCapturing(
        stream: cudaStream_t,
        pCaptureStatus: *mut cudaStreamCaptureStatus,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetCaptureInfo_v2(
        stream: cudaStream_t,
        captureStatus_out: *mut cudaStreamCaptureStatus,
        id_out: *mut ::core::ffi::c_ulonglong,
        graph_out: *mut cudaGraph_t,
        dependencies_out: *mut *const cudaGraphNode_t,
        numDependencies_out: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamGetCaptureInfo_v3(
        stream: cudaStream_t,
        captureStatus_out: *mut cudaStreamCaptureStatus,
        id_out: *mut ::core::ffi::c_ulonglong,
        graph_out: *mut cudaGraph_t,
        dependencies_out: *mut *const cudaGraphNode_t,
        edgeData_out: *mut *const cudaGraphEdgeData,
        numDependencies_out: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamUpdateCaptureDependencies(
        stream: cudaStream_t,
        dependencies: *mut cudaGraphNode_t,
        numDependencies: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaStreamUpdateCaptureDependencies_v2(
        stream: cudaStream_t,
        dependencies: *mut cudaGraphNode_t,
        dependencyData: *const cudaGraphEdgeData,
        numDependencies: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventCreate(event: *mut cudaEvent_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventCreateWithFlags(
        event: *mut cudaEvent_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventRecord(event: cudaEvent_t, stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventRecordWithFlags(
        event: cudaEvent_t,
        stream: cudaStream_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventQuery(event: cudaEvent_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventSynchronize(event: cudaEvent_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventDestroy(event: cudaEvent_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventElapsedTime(ms: *mut f32, start: cudaEvent_t, end: cudaEvent_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaEventElapsedTime_v2(
        ms: *mut f32,
        start: cudaEvent_t,
        end: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaImportExternalMemory(
        extMem_out: *mut cudaExternalMemory_t,
        memHandleDesc: *const cudaExternalMemoryHandleDesc,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaExternalMemoryGetMappedBuffer(
        devPtr: *mut *mut ::core::ffi::c_void,
        extMem: cudaExternalMemory_t,
        bufferDesc: *const cudaExternalMemoryBufferDesc,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaExternalMemoryGetMappedMipmappedArray(
        mipmap: *mut cudaMipmappedArray_t,
        extMem: cudaExternalMemory_t,
        mipmapDesc: *const cudaExternalMemoryMipmappedArrayDesc,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDestroyExternalMemory(extMem: cudaExternalMemory_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaImportExternalSemaphore(
        extSem_out: *mut cudaExternalSemaphore_t,
        semHandleDesc: *const cudaExternalSemaphoreHandleDesc,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaSignalExternalSemaphoresAsync_v2(
        extSemArray: *const cudaExternalSemaphore_t,
        paramsArray: *const cudaExternalSemaphoreSignalParams,
        numExtSems: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaWaitExternalSemaphoresAsync_v2(
        extSemArray: *const cudaExternalSemaphore_t,
        paramsArray: *const cudaExternalSemaphoreWaitParams,
        numExtSems: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDestroyExternalSemaphore(extSem: cudaExternalSemaphore_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLaunchKernel(
        func: *const ::core::ffi::c_void,
        gridDim: dim3,
        blockDim: dim3,
        args: *mut *mut ::core::ffi::c_void,
        sharedMem: usize,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLaunchKernelExC(
        config: *const cudaLaunchConfig_t,
        func: *const ::core::ffi::c_void,
        args: *mut *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLaunchCooperativeKernel(
        func: *const ::core::ffi::c_void,
        gridDim: dim3,
        blockDim: dim3,
        args: *mut *mut ::core::ffi::c_void,
        sharedMem: usize,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLaunchCooperativeKernelMultiDevice(
        launchParamsList: *mut cudaLaunchParams,
        numDevices: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFuncSetCacheConfig(
        func: *const ::core::ffi::c_void,
        cacheConfig: cudaFuncCache,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFuncGetAttributes(
        attr: *mut cudaFuncAttributes,
        func: *const ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFuncSetAttribute(
        func: *const ::core::ffi::c_void,
        attr: cudaFuncAttribute,
        value: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFuncGetName(
        name: *mut *const ::core::ffi::c_char,
        func: *const ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFuncGetParamInfo(
        func: *const ::core::ffi::c_void,
        paramIndex: usize,
        paramOffset: *mut usize,
        paramSize: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaSetDoubleForDevice(d: *mut f64) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaSetDoubleForHost(d: *mut f64) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLaunchHostFunc(
        stream: cudaStream_t,
        fn_: cudaHostFn_t,
        userData: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFuncSetSharedMemConfig(
        func: *const ::core::ffi::c_void,
        config: cudaSharedMemConfig,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaOccupancyMaxActiveBlocksPerMultiprocessor(
        numBlocks: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        blockSize: ::core::ffi::c_int,
        dynamicSMemSize: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaOccupancyAvailableDynamicSMemPerBlock(
        dynamicSmemSize: *mut usize,
        func: *const ::core::ffi::c_void,
        numBlocks: ::core::ffi::c_int,
        blockSize: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
        numBlocks: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        blockSize: ::core::ffi::c_int,
        dynamicSMemSize: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaOccupancyMaxPotentialClusterSize(
        clusterSize: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        launchConfig: *const cudaLaunchConfig_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaOccupancyMaxActiveClusters(
        numClusters: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        launchConfig: *const cudaLaunchConfig_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocManaged(
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMalloc(devPtr: *mut *mut ::core::ffi::c_void, size: usize) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocHost(ptr: *mut *mut ::core::ffi::c_void, size: usize) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocPitch(
        devPtr: *mut *mut ::core::ffi::c_void,
        pitch: *mut usize,
        width: usize,
        height: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocArray(
        array: *mut cudaArray_t,
        desc: *const cudaChannelFormatDesc,
        width: usize,
        height: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFree(devPtr: *mut ::core::ffi::c_void) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFreeHost(ptr: *mut ::core::ffi::c_void) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFreeArray(array: cudaArray_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFreeMipmappedArray(mipmappedArray: cudaMipmappedArray_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaHostAlloc(
        pHost: *mut *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaHostRegister(
        ptr: *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaHostUnregister(ptr: *mut ::core::ffi::c_void) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaHostGetDevicePointer(
        pDevice: *mut *mut ::core::ffi::c_void,
        pHost: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaHostGetFlags(
        pFlags: *mut ::core::ffi::c_uint,
        pHost: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMalloc3D(pitchedDevPtr: *mut cudaPitchedPtr, extent: cudaExtent) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMalloc3DArray(
        array: *mut cudaArray_t,
        desc: *const cudaChannelFormatDesc,
        extent: cudaExtent,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocMipmappedArray(
        mipmappedArray: *mut cudaMipmappedArray_t,
        desc: *const cudaChannelFormatDesc,
        extent: cudaExtent,
        numLevels: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetMipmappedArrayLevel(
        levelArray: *mut cudaArray_t,
        mipmappedArray: cudaMipmappedArray_const_t,
        level: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy3D(p: *const cudaMemcpy3DParms) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy3DPeer(p: *const cudaMemcpy3DPeerParms) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy3DAsync(p: *const cudaMemcpy3DParms, stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy3DPeerAsync(
        p: *const cudaMemcpy3DPeerParms,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemGetInfo(free: *mut usize, total: *mut usize) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaArrayGetInfo(
        desc: *mut cudaChannelFormatDesc,
        extent: *mut cudaExtent,
        flags: *mut ::core::ffi::c_uint,
        array: cudaArray_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaArrayGetPlane(
        pPlaneArray: *mut cudaArray_t,
        hArray: cudaArray_t,
        planeIdx: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaArrayGetMemoryRequirements(
        memoryRequirements: *mut cudaArrayMemoryRequirements,
        array: cudaArray_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMipmappedArrayGetMemoryRequirements(
        memoryRequirements: *mut cudaArrayMemoryRequirements,
        mipmap: cudaMipmappedArray_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaArrayGetSparseProperties(
        sparseProperties: *mut cudaArraySparseProperties,
        array: cudaArray_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMipmappedArrayGetSparseProperties(
        sparseProperties: *mut cudaArraySparseProperties,
        mipmap: cudaMipmappedArray_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy(
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyPeer(
        dst: *mut ::core::ffi::c_void,
        dstDevice: ::core::ffi::c_int,
        src: *const ::core::ffi::c_void,
        srcDevice: ::core::ffi::c_int,
        count: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2D(
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2DToArray(
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2DFromArray(
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2DArrayToArray(
        dst: cudaArray_t,
        wOffsetDst: usize,
        hOffsetDst: usize,
        src: cudaArray_const_t,
        wOffsetSrc: usize,
        hOffsetSrc: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyToSymbol(
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyFromSymbol(
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyAsync(
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyPeerAsync(
        dst: *mut ::core::ffi::c_void,
        dstDevice: ::core::ffi::c_int,
        src: *const ::core::ffi::c_void,
        srcDevice: ::core::ffi::c_int,
        count: usize,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyBatchAsync(
        dsts: *mut *mut ::core::ffi::c_void,
        srcs: *mut *mut ::core::ffi::c_void,
        sizes: *mut usize,
        count: usize,
        attrs: *mut cudaMemcpyAttributes,
        attrsIdxs: *mut usize,
        numAttrs: usize,
        failIdx: *mut usize,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy3DBatchAsync(
        numOps: usize,
        opList: *mut cudaMemcpy3DBatchOp,
        failIdx: *mut usize,
        flags: ::core::ffi::c_ulonglong,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2DAsync(
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2DToArrayAsync(
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpy2DFromArrayAsync(
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyToSymbolAsync(
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyFromSymbolAsync(
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemset(
        devPtr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        count: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemset2D(
        devPtr: *mut ::core::ffi::c_void,
        pitch: usize,
        value: ::core::ffi::c_int,
        width: usize,
        height: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemset3D(
        pitchedDevPtr: cudaPitchedPtr,
        value: ::core::ffi::c_int,
        extent: cudaExtent,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemsetAsync(
        devPtr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        count: usize,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemset2DAsync(
        devPtr: *mut ::core::ffi::c_void,
        pitch: usize,
        value: ::core::ffi::c_int,
        width: usize,
        height: usize,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemset3DAsync(
        pitchedDevPtr: cudaPitchedPtr,
        value: ::core::ffi::c_int,
        extent: cudaExtent,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetSymbolAddress(
        devPtr: *mut *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetSymbolSize(size: *mut usize, symbol: *const ::core::ffi::c_void) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPrefetchAsync(
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        dstDevice: ::core::ffi::c_int,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPrefetchAsync_v2(
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        location: cudaMemLocation,
        flags: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemAdvise(
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        advice: cudaMemoryAdvise,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemAdvise_v2(
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        advice: cudaMemoryAdvise,
        location: cudaMemLocation,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemRangeGetAttribute(
        data: *mut ::core::ffi::c_void,
        dataSize: usize,
        attribute: cudaMemRangeAttribute,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemRangeGetAttributes(
        data: *mut *mut ::core::ffi::c_void,
        dataSizes: *mut usize,
        attributes: *mut cudaMemRangeAttribute,
        numAttributes: usize,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyToArray(
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyFromArray(
        dst: *mut ::core::ffi::c_void,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyArrayToArray(
        dst: cudaArray_t,
        wOffsetDst: usize,
        hOffsetDst: usize,
        src: cudaArray_const_t,
        wOffsetSrc: usize,
        hOffsetSrc: usize,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyToArrayAsync(
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemcpyFromArrayAsync(
        dst: *mut ::core::ffi::c_void,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocAsync(
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
        hStream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaFreeAsync(devPtr: *mut ::core::ffi::c_void, hStream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolTrimTo(memPool: cudaMemPool_t, minBytesToKeep: usize) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolSetAttribute(
        memPool: cudaMemPool_t,
        attr: cudaMemPoolAttr,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolGetAttribute(
        memPool: cudaMemPool_t,
        attr: cudaMemPoolAttr,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolSetAccess(
        memPool: cudaMemPool_t,
        descList: *const cudaMemAccessDesc,
        count: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolGetAccess(
        flags: *mut cudaMemAccessFlags,
        memPool: cudaMemPool_t,
        location: *mut cudaMemLocation,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolCreate(
        memPool: *mut cudaMemPool_t,
        poolProps: *const cudaMemPoolProps,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolDestroy(memPool: cudaMemPool_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMallocFromPoolAsync(
        ptr: *mut *mut ::core::ffi::c_void,
        size: usize,
        memPool: cudaMemPool_t,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolExportToShareableHandle(
        shareableHandle: *mut ::core::ffi::c_void,
        memPool: cudaMemPool_t,
        handleType: cudaMemAllocationHandleType,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolImportFromShareableHandle(
        memPool: *mut cudaMemPool_t,
        shareableHandle: *mut ::core::ffi::c_void,
        handleType: cudaMemAllocationHandleType,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolExportPointer(
        exportData: *mut cudaMemPoolPtrExportData,
        ptr: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaMemPoolImportPointer(
        ptr: *mut *mut ::core::ffi::c_void,
        memPool: cudaMemPool_t,
        exportData: *mut cudaMemPoolPtrExportData,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaPointerGetAttributes(
        attributes: *mut cudaPointerAttributes,
        ptr: *const ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceCanAccessPeer(
        canAccessPeer: *mut ::core::ffi::c_int,
        device: ::core::ffi::c_int,
        peerDevice: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceEnablePeerAccess(
        peerDevice: ::core::ffi::c_int,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceDisablePeerAccess(peerDevice: ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsUnregisterResource(resource: cudaGraphicsResource_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsResourceSetMapFlags(
        resource: cudaGraphicsResource_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsMapResources(
        count: ::core::ffi::c_int,
        resources: *mut cudaGraphicsResource_t,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsUnmapResources(
        count: ::core::ffi::c_int,
        resources: *mut cudaGraphicsResource_t,
        stream: cudaStream_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsResourceGetMappedPointer(
        devPtr: *mut *mut ::core::ffi::c_void,
        size: *mut usize,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsSubResourceGetMappedArray(
        array: *mut cudaArray_t,
        resource: cudaGraphicsResource_t,
        arrayIndex: ::core::ffi::c_uint,
        mipLevel: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphicsResourceGetMappedMipmappedArray(
        mipmappedArray: *mut cudaMipmappedArray_t,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetChannelDesc(
        desc: *mut cudaChannelFormatDesc,
        array: cudaArray_const_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaCreateChannelDesc(
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        z: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        f: cudaChannelFormatKind,
    ) -> cudaChannelFormatDesc;
}
unsafe extern "C" {
    pub fn cudaCreateTextureObject(
        pTexObject: *mut cudaTextureObject_t,
        pResDesc: *const cudaResourceDesc,
        pTexDesc: *const cudaTextureDesc,
        pResViewDesc: *const cudaResourceViewDesc,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDestroyTextureObject(texObject: cudaTextureObject_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetTextureObjectResourceDesc(
        pResDesc: *mut cudaResourceDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetTextureObjectTextureDesc(
        pTexDesc: *mut cudaTextureDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetTextureObjectResourceViewDesc(
        pResViewDesc: *mut cudaResourceViewDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaCreateSurfaceObject(
        pSurfObject: *mut cudaSurfaceObject_t,
        pResDesc: *const cudaResourceDesc,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDestroySurfaceObject(surfObject: cudaSurfaceObject_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetSurfaceObjectResourceDesc(
        pResDesc: *mut cudaResourceDesc,
        surfObject: cudaSurfaceObject_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDriverGetVersion(driverVersion: *mut ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaRuntimeGetVersion(runtimeVersion: *mut ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphCreate(pGraph: *mut cudaGraph_t, flags: ::core::ffi::c_uint) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddKernelNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphKernelNodeGetParams(
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaKernelNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphKernelNodeSetParams(
        node: cudaGraphNode_t,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphKernelNodeCopyAttributes(
        hSrc: cudaGraphNode_t,
        hDst: cudaGraphNode_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphKernelNodeGetAttribute(
        hNode: cudaGraphNode_t,
        attr: cudaLaunchAttributeID,
        value_out: *mut cudaLaunchAttributeValue,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphKernelNodeSetAttribute(
        hNode: cudaGraphNode_t,
        attr: cudaLaunchAttributeID,
        value: *const cudaLaunchAttributeValue,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemcpyNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pCopyParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemcpyNodeToSymbol(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemcpyNodeFromSymbol(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemcpyNode1D(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemcpyNodeGetParams(
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaMemcpy3DParms,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemcpyNodeSetParams(
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemcpyNodeSetParamsToSymbol(
        node: cudaGraphNode_t,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemcpyNodeSetParamsFromSymbol(
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemcpyNodeSetParams1D(
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemsetNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pMemsetParams: *const cudaMemsetParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemsetNodeGetParams(
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaMemsetParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemsetNodeSetParams(
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemsetParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddHostNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphHostNodeGetParams(
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaHostNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphHostNodeSetParams(
        node: cudaGraphNode_t,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddChildGraphNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        childGraph: cudaGraph_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphChildGraphNodeGetGraph(
        node: cudaGraphNode_t,
        pGraph: *mut cudaGraph_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddEmptyNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddEventRecordNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        event: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphEventRecordNodeGetEvent(
        node: cudaGraphNode_t,
        event_out: *mut cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphEventRecordNodeSetEvent(
        node: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddEventWaitNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        event: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphEventWaitNodeGetEvent(
        node: cudaGraphNode_t,
        event_out: *mut cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphEventWaitNodeSetEvent(node: cudaGraphNode_t, event: cudaEvent_t)
        -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddExternalSemaphoresSignalNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExternalSemaphoresSignalNodeGetParams(
        hNode: cudaGraphNode_t,
        params_out: *mut cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExternalSemaphoresSignalNodeSetParams(
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddExternalSemaphoresWaitNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExternalSemaphoresWaitNodeGetParams(
        hNode: cudaGraphNode_t,
        params_out: *mut cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExternalSemaphoresWaitNodeSetParams(
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemAllocNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *mut cudaMemAllocNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemAllocNodeGetParams(
        node: cudaGraphNode_t,
        params_out: *mut cudaMemAllocNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddMemFreeNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dptr: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphMemFreeNodeGetParams(
        node: cudaGraphNode_t,
        dptr_out: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGraphMemTrim(device: ::core::ffi::c_int) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceGetGraphMemAttribute(
        device: ::core::ffi::c_int,
        attr: cudaGraphMemAttributeType,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaDeviceSetGraphMemAttribute(
        device: ::core::ffi::c_int,
        attr: cudaGraphMemAttributeType,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphClone(pGraphClone: *mut cudaGraph_t, originalGraph: cudaGraph_t)
        -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeFindInClone(
        pNode: *mut cudaGraphNode_t,
        originalNode: cudaGraphNode_t,
        clonedGraph: cudaGraph_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeGetType(
        node: cudaGraphNode_t,
        pType: *mut cudaGraphNodeType,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphGetNodes(
        graph: cudaGraph_t,
        nodes: *mut cudaGraphNode_t,
        numNodes: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphGetRootNodes(
        graph: cudaGraph_t,
        pRootNodes: *mut cudaGraphNode_t,
        pNumRootNodes: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphGetEdges(
        graph: cudaGraph_t,
        from: *mut cudaGraphNode_t,
        to: *mut cudaGraphNode_t,
        numEdges: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphGetEdges_v2(
        graph: cudaGraph_t,
        from: *mut cudaGraphNode_t,
        to: *mut cudaGraphNode_t,
        edgeData: *mut cudaGraphEdgeData,
        numEdges: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeGetDependencies(
        node: cudaGraphNode_t,
        pDependencies: *mut cudaGraphNode_t,
        pNumDependencies: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeGetDependencies_v2(
        node: cudaGraphNode_t,
        pDependencies: *mut cudaGraphNode_t,
        edgeData: *mut cudaGraphEdgeData,
        pNumDependencies: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeGetDependentNodes(
        node: cudaGraphNode_t,
        pDependentNodes: *mut cudaGraphNode_t,
        pNumDependentNodes: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeGetDependentNodes_v2(
        node: cudaGraphNode_t,
        pDependentNodes: *mut cudaGraphNode_t,
        edgeData: *mut cudaGraphEdgeData,
        pNumDependentNodes: *mut usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddDependencies(
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddDependencies_v2(
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        edgeData: *const cudaGraphEdgeData,
        numDependencies: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphRemoveDependencies(
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphRemoveDependencies_v2(
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        edgeData: *const cudaGraphEdgeData,
        numDependencies: usize,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphDestroyNode(node: cudaGraphNode_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphInstantiate(
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        flags: ::core::ffi::c_ulonglong,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphInstantiateWithFlags(
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        flags: ::core::ffi::c_ulonglong,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphInstantiateWithParams(
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        instantiateParams: *mut cudaGraphInstantiateParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecGetFlags(
        graphExec: cudaGraphExec_t,
        flags: *mut ::core::ffi::c_ulonglong,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecKernelNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecMemcpyNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecMemcpyNodeSetParamsToSymbol(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecMemcpyNodeSetParamsFromSymbol(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecMemcpyNodeSetParams1D(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecMemsetNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemsetParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecHostNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecChildGraphNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        childGraph: cudaGraph_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecEventRecordNodeSetEvent(
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecEventWaitNodeSetEvent(
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecExternalSemaphoresSignalNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecExternalSemaphoresWaitNodeSetParams(
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeSetEnabled(
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        isEnabled: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeGetEnabled(
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        isEnabled: *mut ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecUpdate(
        hGraphExec: cudaGraphExec_t,
        hGraph: cudaGraph_t,
        resultInfo: *mut cudaGraphExecUpdateResultInfo,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphUpload(graphExec: cudaGraphExec_t, stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphLaunch(graphExec: cudaGraphExec_t, stream: cudaStream_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecDestroy(graphExec: cudaGraphExec_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphDestroy(graph: cudaGraph_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphDebugDotPrint(
        graph: cudaGraph_t,
        path: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaUserObjectCreate(
        object_out: *mut cudaUserObject_t,
        ptr: *mut ::core::ffi::c_void,
        destroy: cudaHostFn_t,
        initialRefcount: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaUserObjectRetain(
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaUserObjectRelease(
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphRetainUserObject(
        graph: cudaGraph_t,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphReleaseUserObject(
        graph: cudaGraph_t,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddNode(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphAddNode_v2(
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        dependencyData: *const cudaGraphEdgeData,
        numDependencies: usize,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphNodeSetParams(
        node: cudaGraphNode_t,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphExecNodeSetParams(
        graphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGraphConditionalHandleCreate(
        pHandle_out: *mut cudaGraphConditionalHandle,
        graph: cudaGraph_t,
        defaultLaunchValue: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetDriverEntryPoint(
        symbol: *const ::core::ffi::c_char,
        funcPtr: *mut *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_ulonglong,
        driverStatus: *mut cudaDriverEntryPointQueryResult,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetDriverEntryPointByVersion(
        symbol: *const ::core::ffi::c_char,
        funcPtr: *mut *mut ::core::ffi::c_void,
        cudaVersion: ::core::ffi::c_uint,
        flags: ::core::ffi::c_ulonglong,
        driverStatus: *mut cudaDriverEntryPointQueryResult,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryLoadData(
        library: *mut cudaLibrary_t,
        code: *const ::core::ffi::c_void,
        jitOptions: *mut cudaJitOption,
        jitOptionsValues: *mut *mut ::core::ffi::c_void,
        numJitOptions: ::core::ffi::c_uint,
        libraryOptions: *mut cudaLibraryOption,
        libraryOptionValues: *mut *mut ::core::ffi::c_void,
        numLibraryOptions: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryLoadFromFile(
        library: *mut cudaLibrary_t,
        fileName: *const ::core::ffi::c_char,
        jitOptions: *mut cudaJitOption,
        jitOptionsValues: *mut *mut ::core::ffi::c_void,
        numJitOptions: ::core::ffi::c_uint,
        libraryOptions: *mut cudaLibraryOption,
        libraryOptionValues: *mut *mut ::core::ffi::c_void,
        numLibraryOptions: ::core::ffi::c_uint,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryUnload(library: cudaLibrary_t) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryGetKernel(
        pKernel: *mut cudaKernel_t,
        library: cudaLibrary_t,
        name: *const ::core::ffi::c_char,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryGetGlobal(
        dptr: *mut *mut ::core::ffi::c_void,
        bytes: *mut usize,
        library: cudaLibrary_t,
        name: *const ::core::ffi::c_char,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryGetManaged(
        dptr: *mut *mut ::core::ffi::c_void,
        bytes: *mut usize,
        library: cudaLibrary_t,
        name: *const ::core::ffi::c_char,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryGetUnifiedFunction(
        fptr: *mut *mut ::core::ffi::c_void,
        library: cudaLibrary_t,
        symbol: *const ::core::ffi::c_char,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryGetKernelCount(
        count: *mut ::core::ffi::c_uint,
        lib: cudaLibrary_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaLibraryEnumerateKernels(
        kernels: *mut cudaKernel_t,
        numKernels: ::core::ffi::c_uint,
        lib: cudaLibrary_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaKernelSetAttributeForDevice(
        kernel: cudaKernel_t,
        attr: cudaFuncAttribute,
        value: ::core::ffi::c_int,
        device: ::core::ffi::c_int,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetExportTable(
        ppExportTable: *mut *const ::core::ffi::c_void,
        pExportTableId: *const cudaUUID_t,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetFuncBySymbol(
        functionPtr: *mut cudaFunction_t,
        symbolPtr: *const ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaGetKernel(
        kernelPtr: *mut cudaKernel_t,
        entryFuncAddr: *const ::core::ffi::c_void,
    ) -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaProfilerStart() -> cudaError_t;
}
unsafe extern "C" {
    pub fn cudaProfilerStop() -> cudaError_t;
}
