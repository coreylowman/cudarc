// AUTOGENERATED UNIFIED CUDA BINDINGS
// This file combines bindings from multiple CUDA versions

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

extern "C" {
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaArrayGetInfo (desc : * mut cudaChannelFormatDesc , extent : * mut cudaExtent , flags : * mut :: core :: ffi :: c_uint , array : cudaArray_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaArrayGetMemoryRequirements (memoryRequirements : * mut cudaArrayMemoryRequirements , array : cudaArray_t , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaArrayGetPlane (pPlaneArray : * mut cudaArray_t , hArray : cudaArray_t , planeIdx : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaArrayGetSparseProperties (sparseProperties : * mut cudaArraySparseProperties , array : cudaArray_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaBindSurfaceToArray (surfref : * const surfaceReference , array : cudaArray_const_t , desc : * const cudaChannelFormatDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaBindTexture (offset : * mut usize , texref : * const textureReference , devPtr : * const :: core :: ffi :: c_void , desc : * const cudaChannelFormatDesc , size : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaBindTexture2D (offset : * mut usize , texref : * const textureReference , devPtr : * const :: core :: ffi :: c_void , desc : * const cudaChannelFormatDesc , width : usize , height : usize , pitch : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaBindTextureToArray (texref : * const textureReference , array : cudaArray_const_t , desc : * const cudaChannelFormatDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaBindTextureToMipmappedArray (texref : * const textureReference , mipmappedArray : cudaMipmappedArray_const_t , desc : * const cudaChannelFormatDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaChooseDevice (device : * mut :: core :: ffi :: c_int , prop : * const cudaDeviceProp ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaCreateChannelDesc (x : :: core :: ffi :: c_int , y : :: core :: ffi :: c_int , z : :: core :: ffi :: c_int , w : :: core :: ffi :: c_int , f : cudaChannelFormatKind ,) -> cudaChannelFormatDesc ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaCreateSurfaceObject (pSurfObject : * mut cudaSurfaceObject_t , pResDesc : * const cudaResourceDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaCreateTextureObject (pTexObject : * mut cudaTextureObject_t , pResDesc : * const cudaResourceDesc , pTexDesc : * const cudaTextureDesc , pResViewDesc : * const cudaResourceViewDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11080"))]
pub fn cudaCreateTextureObject_v2 (pTexObject : * mut cudaTextureObject_t , pResDesc : * const cudaResourceDesc , pTexDesc : * const cudaTextureDesc_v2 , pResViewDesc : * const cudaResourceViewDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaCtxResetPersistingL2Cache () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDestroyExternalMemory (extMem : cudaExternalMemory_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDestroyExternalSemaphore (extSem : cudaExternalSemaphore_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDestroySurfaceObject (surfObject : cudaSurfaceObject_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDestroyTextureObject (texObject : cudaTextureObject_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceCanAccessPeer (canAccessPeer : * mut :: core :: ffi :: c_int , device : :: core :: ffi :: c_int , peerDevice : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceDisablePeerAccess (peerDevice : :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceEnablePeerAccess (peerDevice : :: core :: ffi :: c_int , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceFlushGPUDirectRDMAWrites (target : cudaFlushGPUDirectRDMAWritesTarget , scope : cudaFlushGPUDirectRDMAWritesScope ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetAttribute (value : * mut :: core :: ffi :: c_int , attr : cudaDeviceAttr , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetByPCIBusId (device : * mut :: core :: ffi :: c_int , pciBusId : * const :: core :: ffi :: c_char ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetCacheConfig (pCacheConfig : * mut cudaFuncCache) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetDefaultMemPool (memPool : * mut cudaMemPool_t , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetGraphMemAttribute (device : :: core :: ffi :: c_int , attr : cudaGraphMemAttributeType , value : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetLimit (pValue : * mut usize , limit : cudaLimit) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetMemPool (memPool : * mut cudaMemPool_t , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetNvSciSyncAttributes (nvSciSyncAttrList : * mut :: core :: ffi :: c_void , device : :: core :: ffi :: c_int , flags : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetP2PAttribute (value : * mut :: core :: ffi :: c_int , attr : cudaDeviceP2PAttr , srcDevice : :: core :: ffi :: c_int , dstDevice : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetPCIBusId (pciBusId : * mut :: core :: ffi :: c_char , len : :: core :: ffi :: c_int , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetSharedMemConfig (pConfig : * mut cudaSharedMemConfig) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetStreamPriorityRange (leastPriority : * mut :: core :: ffi :: c_int , greatestPriority : * mut :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGetTexture1DLinearMaxWidth (maxWidthInElements : * mut usize , fmtDesc : * const cudaChannelFormatDesc , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceGraphMemTrim (device : :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceRegisterAsyncNotification (device : :: core :: ffi :: c_int , callbackFunc : cudaAsyncCallback , userData : * mut :: core :: ffi :: c_void , callback : * mut cudaAsyncCallbackHandle_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceReset () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceSetCacheConfig (cacheConfig : cudaFuncCache) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceSetGraphMemAttribute (device : :: core :: ffi :: c_int , attr : cudaGraphMemAttributeType , value : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceSetLimit (limit : cudaLimit , value : usize) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceSetMemPool (device : :: core :: ffi :: c_int , memPool : cudaMemPool_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceSetSharedMemConfig (config : cudaSharedMemConfig) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceSynchronize () -> cudaError_t ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDeviceUnregisterAsyncNotification (device : :: core :: ffi :: c_int , callback : cudaAsyncCallbackHandle_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaDriverGetVersion (driverVersion : * mut :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventCreate (event : * mut cudaEvent_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventCreateWithFlags (event : * mut cudaEvent_t , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventDestroy (event : cudaEvent_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventElapsedTime (ms : * mut f32 , start : cudaEvent_t , end : cudaEvent_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaEventElapsedTime_v2 (ms : * mut f32 , start : cudaEvent_t , end : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventQuery (event : cudaEvent_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventRecord (event : cudaEvent_t , stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventRecordWithFlags (event : cudaEvent_t , stream : cudaStream_t , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaEventSynchronize (event : cudaEvent_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaExternalMemoryGetMappedBuffer (devPtr : * mut * mut :: core :: ffi :: c_void , extMem : cudaExternalMemory_t , bufferDesc : * const cudaExternalMemoryBufferDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaExternalMemoryGetMappedMipmappedArray (mipmap : * mut cudaMipmappedArray_t , extMem : cudaExternalMemory_t , mipmapDesc : * const cudaExternalMemoryMipmappedArrayDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFree (devPtr : * mut :: core :: ffi :: c_void) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFreeArray (array : cudaArray_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFreeAsync (devPtr : * mut :: core :: ffi :: c_void , hStream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFreeHost (ptr : * mut :: core :: ffi :: c_void) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFreeMipmappedArray (mipmappedArray : cudaMipmappedArray_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFuncGetAttributes (attr : * mut cudaFuncAttributes , func : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFuncGetName (name : * mut * const :: core :: ffi :: c_char , func : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFuncGetParamInfo (func : * const :: core :: ffi :: c_void , paramIndex : usize , paramOffset : * mut usize , paramSize : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFuncSetAttribute (func : * const :: core :: ffi :: c_void , attr : cudaFuncAttribute , value : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFuncSetCacheConfig (func : * const :: core :: ffi :: c_void , cacheConfig : cudaFuncCache ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaFuncSetSharedMemConfig (func : * const :: core :: ffi :: c_void , config : cudaSharedMemConfig ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetChannelDesc (desc : * mut cudaChannelFormatDesc , array : cudaArray_const_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetDevice (device : * mut :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetDeviceCount (count : * mut :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetDeviceFlags (flags : * mut :: core :: ffi :: c_uint) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaGetDeviceProperties (prop : * mut cudaDeviceProp , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetDeviceProperties_v2 (prop : * mut cudaDeviceProp , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000"))]
pub fn cudaGetDriverEntryPoint (symbol : * const :: core :: ffi :: c_char , funcPtr : * mut * mut :: core :: ffi :: c_void , flags : :: core :: ffi :: c_ulonglong ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetDriverEntryPoint (symbol : * const :: core :: ffi :: c_char , funcPtr : * mut * mut :: core :: ffi :: c_void , flags : :: core :: ffi :: c_ulonglong , driverStatus : * mut cudaDriverEntryPointQueryResult ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetDriverEntryPointByVersion (symbol : * const :: core :: ffi :: c_char , funcPtr : * mut * mut :: core :: ffi :: c_void , cudaVersion : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_ulonglong , driverStatus : * mut cudaDriverEntryPointQueryResult ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetErrorName (error : cudaError_t) -> * const :: core :: ffi :: c_char ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetErrorString (error : cudaError_t) -> * const :: core :: ffi :: c_char ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetExportTable (ppExportTable : * mut * const :: core :: ffi :: c_void , pExportTableId : * const cudaUUID_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetFuncBySymbol (functionPtr : * mut cudaFunction_t , symbolPtr : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetKernel (kernelPtr : * mut cudaKernel_t , entryFuncAddr : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetLastError () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetMipmappedArrayLevel (levelArray : * mut cudaArray_t , mipmappedArray : cudaMipmappedArray_const_t , level : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetSurfaceObjectResourceDesc (pResDesc : * mut cudaResourceDesc , surfObject : cudaSurfaceObject_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaGetSurfaceReference (surfref : * mut * const surfaceReference , symbol : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetSymbolAddress (devPtr : * mut * mut :: core :: ffi :: c_void , symbol : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetSymbolSize (size : * mut usize , symbol : * const :: core :: ffi :: c_void) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaGetTextureAlignmentOffset (offset : * mut usize , texref : * const textureReference ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetTextureObjectResourceDesc (pResDesc : * mut cudaResourceDesc , texObject : cudaTextureObject_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetTextureObjectResourceViewDesc (pResViewDesc : * mut cudaResourceViewDesc , texObject : cudaTextureObject_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGetTextureObjectTextureDesc (pTexDesc : * mut cudaTextureDesc , texObject : cudaTextureObject_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11080"))]
pub fn cudaGetTextureObjectTextureDesc_v2 (pTexDesc : * mut cudaTextureDesc_v2 , texObject : cudaTextureObject_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaGetTextureReference (texref : * mut * const textureReference , symbol : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddChildGraphNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , childGraph : cudaGraph_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddDependencies (graph : cudaGraph_t , from : * const cudaGraphNode_t , to : * const cudaGraphNode_t , numDependencies : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddDependencies_v2 (graph : cudaGraph_t , from : * const cudaGraphNode_t , to : * const cudaGraphNode_t , edgeData : * const cudaGraphEdgeData , numDependencies : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddEmptyNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddEventRecordNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , event : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddEventWaitNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , event : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddExternalSemaphoresSignalNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , nodeParams : * const cudaExternalSemaphoreSignalNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddExternalSemaphoresWaitNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , nodeParams : * const cudaExternalSemaphoreWaitNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddHostNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , pNodeParams : * const cudaHostNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddKernelNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , pNodeParams : * const cudaKernelNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemAllocNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , nodeParams : * mut cudaMemAllocNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemFreeNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , dptr : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemcpyNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , pCopyParams : * const cudaMemcpy3DParms ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemcpyNode1D (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , dst : * mut :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemcpyNodeFromSymbol (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , dst : * mut :: core :: ffi :: c_void , symbol : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemcpyNodeToSymbol (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , symbol : * const :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddMemsetNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , pMemsetParams : * const cudaMemsetParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddNode (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , numDependencies : usize , nodeParams : * mut cudaGraphNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphAddNode_v2 (pGraphNode : * mut cudaGraphNode_t , graph : cudaGraph_t , pDependencies : * const cudaGraphNode_t , dependencyData : * const cudaGraphEdgeData , numDependencies : usize , nodeParams : * mut cudaGraphNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphChildGraphNodeGetGraph (node : cudaGraphNode_t , pGraph : * mut cudaGraph_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphClone (pGraphClone : * mut cudaGraph_t , originalGraph : cudaGraph_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphConditionalHandleCreate (pHandle_out : * mut cudaGraphConditionalHandle , graph : cudaGraph_t , defaultLaunchValue : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphCreate (pGraph : * mut cudaGraph_t , flags : :: core :: ffi :: c_uint) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphDebugDotPrint (graph : cudaGraph_t , path : * const :: core :: ffi :: c_char , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphDestroy (graph : cudaGraph_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphDestroyNode (node : cudaGraphNode_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphEventRecordNodeGetEvent (node : cudaGraphNode_t , event_out : * mut cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphEventRecordNodeSetEvent (node : cudaGraphNode_t , event : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphEventWaitNodeGetEvent (node : cudaGraphNode_t , event_out : * mut cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphEventWaitNodeSetEvent (node : cudaGraphNode_t , event : cudaEvent_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecChildGraphNodeSetParams (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , childGraph : cudaGraph_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecDestroy (graphExec : cudaGraphExec_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecEventRecordNodeSetEvent (hGraphExec : cudaGraphExec_t , hNode : cudaGraphNode_t , event : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecEventWaitNodeSetEvent (hGraphExec : cudaGraphExec_t , hNode : cudaGraphNode_t , event : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecExternalSemaphoresSignalNodeSetParams (hGraphExec : cudaGraphExec_t , hNode : cudaGraphNode_t , nodeParams : * const cudaExternalSemaphoreSignalNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecExternalSemaphoresWaitNodeSetParams (hGraphExec : cudaGraphExec_t , hNode : cudaGraphNode_t , nodeParams : * const cudaExternalSemaphoreWaitNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecGetFlags (graphExec : cudaGraphExec_t , flags : * mut :: core :: ffi :: c_ulonglong ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecHostNodeSetParams (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , pNodeParams : * const cudaHostNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecKernelNodeSetParams (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , pNodeParams : * const cudaKernelNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecMemcpyNodeSetParams (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , pNodeParams : * const cudaMemcpy3DParms ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecMemcpyNodeSetParams1D (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , dst : * mut :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecMemcpyNodeSetParamsFromSymbol (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , dst : * mut :: core :: ffi :: c_void , symbol : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecMemcpyNodeSetParamsToSymbol (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , symbol : * const :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecMemsetNodeSetParams (hGraphExec : cudaGraphExec_t , node : cudaGraphNode_t , pNodeParams : * const cudaMemsetParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecNodeSetParams (graphExec : cudaGraphExec_t , node : cudaGraphNode_t , nodeParams : * mut cudaGraphNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000"))]
pub fn cudaGraphExecUpdate (hGraphExec : cudaGraphExec_t , hGraph : cudaGraph_t , hErrorNode_out : * mut cudaGraphNode_t , updateResult_out : * mut cudaGraphExecUpdateResult ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExecUpdate (hGraphExec : cudaGraphExec_t , hGraph : cudaGraph_t , resultInfo : * mut cudaGraphExecUpdateResultInfo ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExternalSemaphoresSignalNodeGetParams (hNode : cudaGraphNode_t , params_out : * mut cudaExternalSemaphoreSignalNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExternalSemaphoresSignalNodeSetParams (hNode : cudaGraphNode_t , nodeParams : * const cudaExternalSemaphoreSignalNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExternalSemaphoresWaitNodeGetParams (hNode : cudaGraphNode_t , params_out : * mut cudaExternalSemaphoreWaitNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphExternalSemaphoresWaitNodeSetParams (hNode : cudaGraphNode_t , nodeParams : * const cudaExternalSemaphoreWaitNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphGetEdges (graph : cudaGraph_t , from : * mut cudaGraphNode_t , to : * mut cudaGraphNode_t , numEdges : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphGetEdges_v2 (graph : cudaGraph_t , from : * mut cudaGraphNode_t , to : * mut cudaGraphNode_t , edgeData : * mut cudaGraphEdgeData , numEdges : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphGetNodes (graph : cudaGraph_t , nodes : * mut cudaGraphNode_t , numNodes : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphGetRootNodes (graph : cudaGraph_t , pRootNodes : * mut cudaGraphNode_t , pNumRootNodes : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphHostNodeGetParams (node : cudaGraphNode_t , pNodeParams : * mut cudaHostNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphHostNodeSetParams (node : cudaGraphNode_t , pNodeParams : * const cudaHostNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000"))]
pub fn cudaGraphInstantiate (pGraphExec : * mut cudaGraphExec_t , graph : cudaGraph_t , pErrorNode : * mut cudaGraphNode_t , pLogBuffer : * mut :: core :: ffi :: c_char , bufferSize : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphInstantiate (pGraphExec : * mut cudaGraphExec_t , graph : cudaGraph_t , flags : :: core :: ffi :: c_ulonglong ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphInstantiateWithFlags (pGraphExec : * mut cudaGraphExec_t , graph : cudaGraph_t , flags : :: core :: ffi :: c_ulonglong ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphInstantiateWithParams (pGraphExec : * mut cudaGraphExec_t , graph : cudaGraph_t , instantiateParams : * mut cudaGraphInstantiateParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphKernelNodeCopyAttributes (hSrc : cudaGraphNode_t , hDst : cudaGraphNode_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaGraphKernelNodeGetAttribute (hNode : cudaGraphNode_t , attr : cudaKernelNodeAttrID , value_out : * mut cudaKernelNodeAttrValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphKernelNodeGetAttribute (hNode : cudaGraphNode_t , attr : cudaLaunchAttributeID , value_out : * mut cudaLaunchAttributeValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphKernelNodeGetParams (node : cudaGraphNode_t , pNodeParams : * mut cudaKernelNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaGraphKernelNodeSetAttribute (hNode : cudaGraphNode_t , attr : cudaKernelNodeAttrID , value : * const cudaKernelNodeAttrValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphKernelNodeSetAttribute (hNode : cudaGraphNode_t , attr : cudaLaunchAttributeID , value : * const cudaLaunchAttributeValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphKernelNodeSetParams (node : cudaGraphNode_t , pNodeParams : * const cudaKernelNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphLaunch (graphExec : cudaGraphExec_t , stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemAllocNodeGetParams (node : cudaGraphNode_t , params_out : * mut cudaMemAllocNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemFreeNodeGetParams (node : cudaGraphNode_t , dptr_out : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemcpyNodeGetParams (node : cudaGraphNode_t , pNodeParams : * mut cudaMemcpy3DParms ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemcpyNodeSetParams (node : cudaGraphNode_t , pNodeParams : * const cudaMemcpy3DParms ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemcpyNodeSetParams1D (node : cudaGraphNode_t , dst : * mut :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemcpyNodeSetParamsFromSymbol (node : cudaGraphNode_t , dst : * mut :: core :: ffi :: c_void , symbol : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemcpyNodeSetParamsToSymbol (node : cudaGraphNode_t , symbol : * const :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemsetNodeGetParams (node : cudaGraphNode_t , pNodeParams : * mut cudaMemsetParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphMemsetNodeSetParams (node : cudaGraphNode_t , pNodeParams : * const cudaMemsetParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeFindInClone (pNode : * mut cudaGraphNode_t , originalNode : cudaGraphNode_t , clonedGraph : cudaGraph_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeGetDependencies (node : cudaGraphNode_t , pDependencies : * mut cudaGraphNode_t , pNumDependencies : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeGetDependencies_v2 (node : cudaGraphNode_t , pDependencies : * mut cudaGraphNode_t , edgeData : * mut cudaGraphEdgeData , pNumDependencies : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeGetDependentNodes (node : cudaGraphNode_t , pDependentNodes : * mut cudaGraphNode_t , pNumDependentNodes : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeGetDependentNodes_v2 (node : cudaGraphNode_t , pDependentNodes : * mut cudaGraphNode_t , edgeData : * mut cudaGraphEdgeData , pNumDependentNodes : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeGetEnabled (hGraphExec : cudaGraphExec_t , hNode : cudaGraphNode_t , isEnabled : * mut :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeGetType (node : cudaGraphNode_t , pType : * mut cudaGraphNodeType ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeSetEnabled (hGraphExec : cudaGraphExec_t , hNode : cudaGraphNode_t , isEnabled : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphNodeSetParams (node : cudaGraphNode_t , nodeParams : * mut cudaGraphNodeParams ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphReleaseUserObject (graph : cudaGraph_t , object : cudaUserObject_t , count : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphRemoveDependencies (graph : cudaGraph_t , from : * const cudaGraphNode_t , to : * const cudaGraphNode_t , numDependencies : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphRemoveDependencies_v2 (graph : cudaGraph_t , from : * const cudaGraphNode_t , to : * const cudaGraphNode_t , edgeData : * const cudaGraphEdgeData , numDependencies : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphRetainUserObject (graph : cudaGraph_t , object : cudaUserObject_t , count : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphUpload (graphExec : cudaGraphExec_t , stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsMapResources (count : :: core :: ffi :: c_int , resources : * mut cudaGraphicsResource_t , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsResourceGetMappedMipmappedArray (mipmappedArray : * mut cudaMipmappedArray_t , resource : cudaGraphicsResource_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsResourceGetMappedPointer (devPtr : * mut * mut :: core :: ffi :: c_void , size : * mut usize , resource : cudaGraphicsResource_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsResourceSetMapFlags (resource : cudaGraphicsResource_t , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsSubResourceGetMappedArray (array : * mut cudaArray_t , resource : cudaGraphicsResource_t , arrayIndex : :: core :: ffi :: c_uint , mipLevel : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsUnmapResources (count : :: core :: ffi :: c_int , resources : * mut cudaGraphicsResource_t , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaGraphicsUnregisterResource (resource : cudaGraphicsResource_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaHostAlloc (pHost : * mut * mut :: core :: ffi :: c_void , size : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaHostGetDevicePointer (pDevice : * mut * mut :: core :: ffi :: c_void , pHost : * mut :: core :: ffi :: c_void , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaHostGetFlags (pFlags : * mut :: core :: ffi :: c_uint , pHost : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaHostRegister (ptr : * mut :: core :: ffi :: c_void , size : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaHostUnregister (ptr : * mut :: core :: ffi :: c_void) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaImportExternalMemory (extMem_out : * mut cudaExternalMemory_t , memHandleDesc : * const cudaExternalMemoryHandleDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaImportExternalSemaphore (extSem_out : * mut cudaExternalSemaphore_t , semHandleDesc : * const cudaExternalSemaphoreHandleDesc ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaInitDevice (device : :: core :: ffi :: c_int , deviceFlags : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaIpcCloseMemHandle (devPtr : * mut :: core :: ffi :: c_void) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaIpcGetEventHandle (handle : * mut cudaIpcEventHandle_t , event : cudaEvent_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaIpcGetMemHandle (handle : * mut cudaIpcMemHandle_t , devPtr : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaIpcOpenEventHandle (event : * mut cudaEvent_t , handle : cudaIpcEventHandle_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaIpcOpenMemHandle (devPtr : * mut * mut :: core :: ffi :: c_void , handle : cudaIpcMemHandle_t , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaKernelSetAttributeForDevice (kernel : cudaKernel_t , attr : cudaFuncAttribute , value : :: core :: ffi :: c_int , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaLaunchCooperativeKernel (func : * const :: core :: ffi :: c_void , gridDim : dim3 , blockDim : dim3 , args : * mut * mut :: core :: ffi :: c_void , sharedMem : usize , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaLaunchCooperativeKernelMultiDevice (launchParamsList : * mut cudaLaunchParams , numDevices : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaLaunchHostFunc (stream : cudaStream_t , fn_ : cudaHostFn_t , userData : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaLaunchKernel (func : * const :: core :: ffi :: c_void , gridDim : dim3 , blockDim : dim3 , args : * mut * mut :: core :: ffi :: c_void , sharedMem : usize , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaLaunchKernelExC (config : * const cudaLaunchConfig_t , func : * const :: core :: ffi :: c_void , args : * mut * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryEnumerateKernels (kernels : * mut cudaKernel_t , numKernels : :: core :: ffi :: c_uint , lib : cudaLibrary_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryGetGlobal (dptr : * mut * mut :: core :: ffi :: c_void , bytes : * mut usize , library : cudaLibrary_t , name : * const :: core :: ffi :: c_char ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryGetKernel (pKernel : * mut cudaKernel_t , library : cudaLibrary_t , name : * const :: core :: ffi :: c_char ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryGetKernelCount (count : * mut :: core :: ffi :: c_uint , lib : cudaLibrary_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryGetManaged (dptr : * mut * mut :: core :: ffi :: c_void , bytes : * mut usize , library : cudaLibrary_t , name : * const :: core :: ffi :: c_char ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryGetUnifiedFunction (fptr : * mut * mut :: core :: ffi :: c_void , library : cudaLibrary_t , symbol : * const :: core :: ffi :: c_char ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryLoadData (library : * mut cudaLibrary_t , code : * const :: core :: ffi :: c_void , jitOptions : * mut cudaJitOption , jitOptionsValues : * mut * mut :: core :: ffi :: c_void , numJitOptions : :: core :: ffi :: c_uint , libraryOptions : * mut cudaLibraryOption , libraryOptionValues : * mut * mut :: core :: ffi :: c_void , numLibraryOptions : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryLoadFromFile (library : * mut cudaLibrary_t , fileName : * const :: core :: ffi :: c_char , jitOptions : * mut cudaJitOption , jitOptionsValues : * mut * mut :: core :: ffi :: c_void , numJitOptions : :: core :: ffi :: c_uint , libraryOptions : * mut cudaLibraryOption , libraryOptionValues : * mut * mut :: core :: ffi :: c_void , numLibraryOptions : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaLibraryUnload (library : cudaLibrary_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMalloc (devPtr : * mut * mut :: core :: ffi :: c_void , size : usize) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMalloc3D (pitchedDevPtr : * mut cudaPitchedPtr , extent : cudaExtent) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMalloc3DArray (array : * mut cudaArray_t , desc : * const cudaChannelFormatDesc , extent : cudaExtent , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocArray (array : * mut cudaArray_t , desc : * const cudaChannelFormatDesc , width : usize , height : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocAsync (devPtr : * mut * mut :: core :: ffi :: c_void , size : usize , hStream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocFromPoolAsync (ptr : * mut * mut :: core :: ffi :: c_void , size : usize , memPool : cudaMemPool_t , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocHost (ptr : * mut * mut :: core :: ffi :: c_void , size : usize) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocManaged (devPtr : * mut * mut :: core :: ffi :: c_void , size : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocMipmappedArray (mipmappedArray : * mut cudaMipmappedArray_t , desc : * const cudaChannelFormatDesc , extent : cudaExtent , numLevels : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMallocPitch (devPtr : * mut * mut :: core :: ffi :: c_void , pitch : * mut usize , width : usize , height : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemAdvise (devPtr : * const :: core :: ffi :: c_void , count : usize , advice : cudaMemoryAdvise , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemAdvise_v2 (devPtr : * const :: core :: ffi :: c_void , count : usize , advice : cudaMemoryAdvise , location : cudaMemLocation ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemGetInfo (free : * mut usize , total : * mut usize) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolCreate (memPool : * mut cudaMemPool_t , poolProps : * const cudaMemPoolProps ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolDestroy (memPool : cudaMemPool_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolExportPointer (exportData : * mut cudaMemPoolPtrExportData , ptr : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolExportToShareableHandle (shareableHandle : * mut :: core :: ffi :: c_void , memPool : cudaMemPool_t , handleType : cudaMemAllocationHandleType , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolGetAccess (flags : * mut cudaMemAccessFlags , memPool : cudaMemPool_t , location : * mut cudaMemLocation ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolGetAttribute (memPool : cudaMemPool_t , attr : cudaMemPoolAttr , value : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolImportFromShareableHandle (memPool : * mut cudaMemPool_t , shareableHandle : * mut :: core :: ffi :: c_void , handleType : cudaMemAllocationHandleType , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolImportPointer (ptr : * mut * mut :: core :: ffi :: c_void , memPool : cudaMemPool_t , exportData : * mut cudaMemPoolPtrExportData ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolSetAccess (memPool : cudaMemPool_t , descList : * const cudaMemAccessDesc , count : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolSetAttribute (memPool : cudaMemPool_t , attr : cudaMemPoolAttr , value : * mut :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPoolTrimTo (memPool : cudaMemPool_t , minBytesToKeep : usize) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPrefetchAsync (devPtr : * const :: core :: ffi :: c_void , count : usize , dstDevice : :: core :: ffi :: c_int , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemPrefetchAsync_v2 (devPtr : * const :: core :: ffi :: c_void , count : usize , location : cudaMemLocation , flags : :: core :: ffi :: c_uint , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemRangeGetAttribute (data : * mut :: core :: ffi :: c_void , dataSize : usize , attribute : cudaMemRangeAttribute , devPtr : * const :: core :: ffi :: c_void , count : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemRangeGetAttributes (data : * mut * mut :: core :: ffi :: c_void , dataSizes : * mut usize , attributes : * mut cudaMemRangeAttribute , numAttributes : usize , devPtr : * const :: core :: ffi :: c_void , count : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy (dst : * mut :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2D (dst : * mut :: core :: ffi :: c_void , dpitch : usize , src : * const :: core :: ffi :: c_void , spitch : usize , width : usize , height : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2DArrayToArray (dst : cudaArray_t , wOffsetDst : usize , hOffsetDst : usize , src : cudaArray_const_t , wOffsetSrc : usize , hOffsetSrc : usize , width : usize , height : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2DAsync (dst : * mut :: core :: ffi :: c_void , dpitch : usize , src : * const :: core :: ffi :: c_void , spitch : usize , width : usize , height : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2DFromArray (dst : * mut :: core :: ffi :: c_void , dpitch : usize , src : cudaArray_const_t , wOffset : usize , hOffset : usize , width : usize , height : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2DFromArrayAsync (dst : * mut :: core :: ffi :: c_void , dpitch : usize , src : cudaArray_const_t , wOffset : usize , hOffset : usize , width : usize , height : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2DToArray (dst : cudaArray_t , wOffset : usize , hOffset : usize , src : * const :: core :: ffi :: c_void , spitch : usize , width : usize , height : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy2DToArrayAsync (dst : cudaArray_t , wOffset : usize , hOffset : usize , src : * const :: core :: ffi :: c_void , spitch : usize , width : usize , height : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy3D (p : * const cudaMemcpy3DParms) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy3DAsync (p : * const cudaMemcpy3DParms , stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaMemcpy3DBatchAsync (numOps : usize , opList : * mut cudaMemcpy3DBatchOp , failIdx : * mut usize , flags : :: core :: ffi :: c_ulonglong , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy3DPeer (p : * const cudaMemcpy3DPeerParms) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpy3DPeerAsync (p : * const cudaMemcpy3DPeerParms , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyArrayToArray (dst : cudaArray_t , wOffsetDst : usize , hOffsetDst : usize , src : cudaArray_const_t , wOffsetSrc : usize , hOffsetSrc : usize , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyAsync (dst : * mut :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaMemcpyBatchAsync (dsts : * mut * mut :: core :: ffi :: c_void , srcs : * mut * mut :: core :: ffi :: c_void , sizes : * mut usize , count : usize , attrs : * mut cudaMemcpyAttributes , attrsIdxs : * mut usize , numAttrs : usize , failIdx : * mut usize , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyFromArray (dst : * mut :: core :: ffi :: c_void , src : cudaArray_const_t , wOffset : usize , hOffset : usize , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyFromArrayAsync (dst : * mut :: core :: ffi :: c_void , src : cudaArray_const_t , wOffset : usize , hOffset : usize , count : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyFromSymbol (dst : * mut :: core :: ffi :: c_void , symbol : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyFromSymbolAsync (dst : * mut :: core :: ffi :: c_void , symbol : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyPeer (dst : * mut :: core :: ffi :: c_void , dstDevice : :: core :: ffi :: c_int , src : * const :: core :: ffi :: c_void , srcDevice : :: core :: ffi :: c_int , count : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyPeerAsync (dst : * mut :: core :: ffi :: c_void , dstDevice : :: core :: ffi :: c_int , src : * const :: core :: ffi :: c_void , srcDevice : :: core :: ffi :: c_int , count : usize , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyToArray (dst : cudaArray_t , wOffset : usize , hOffset : usize , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyToArrayAsync (dst : cudaArray_t , wOffset : usize , hOffset : usize , src : * const :: core :: ffi :: c_void , count : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyToSymbol (symbol : * const :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemcpyToSymbolAsync (symbol : * const :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , count : usize , offset : usize , kind : cudaMemcpyKind , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemset (devPtr : * mut :: core :: ffi :: c_void , value : :: core :: ffi :: c_int , count : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemset2D (devPtr : * mut :: core :: ffi :: c_void , pitch : usize , value : :: core :: ffi :: c_int , width : usize , height : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemset2DAsync (devPtr : * mut :: core :: ffi :: c_void , pitch : usize , value : :: core :: ffi :: c_int , width : usize , height : usize , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemset3D (pitchedDevPtr : cudaPitchedPtr , value : :: core :: ffi :: c_int , extent : cudaExtent ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemset3DAsync (pitchedDevPtr : cudaPitchedPtr , value : :: core :: ffi :: c_int , extent : cudaExtent , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMemsetAsync (devPtr : * mut :: core :: ffi :: c_void , value : :: core :: ffi :: c_int , count : usize , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMipmappedArrayGetMemoryRequirements (memoryRequirements : * mut cudaArrayMemoryRequirements , mipmap : cudaMipmappedArray_t , device : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaMipmappedArrayGetSparseProperties (sparseProperties : * mut cudaArraySparseProperties , mipmap : cudaMipmappedArray_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaOccupancyAvailableDynamicSMemPerBlock (dynamicSmemSize : * mut usize , func : * const :: core :: ffi :: c_void , numBlocks : :: core :: ffi :: c_int , blockSize : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaOccupancyMaxActiveBlocksPerMultiprocessor (numBlocks : * mut :: core :: ffi :: c_int , func : * const :: core :: ffi :: c_void , blockSize : :: core :: ffi :: c_int , dynamicSMemSize : usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (numBlocks : * mut :: core :: ffi :: c_int , func : * const :: core :: ffi :: c_void , blockSize : :: core :: ffi :: c_int , dynamicSMemSize : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaOccupancyMaxActiveClusters (numClusters : * mut :: core :: ffi :: c_int , func : * const :: core :: ffi :: c_void , launchConfig : * const cudaLaunchConfig_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaOccupancyMaxPotentialClusterSize (clusterSize : * mut :: core :: ffi :: c_int , func : * const :: core :: ffi :: c_void , launchConfig : * const cudaLaunchConfig_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaPeekAtLastError () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaPointerGetAttributes (attributes : * mut cudaPointerAttributes , ptr : * const :: core :: ffi :: c_void ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaProfilerStop () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaRuntimeGetVersion (runtimeVersion : * mut :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaSetDevice (device : :: core :: ffi :: c_int) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaSetDeviceFlags (flags : :: core :: ffi :: c_uint) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaSetDoubleForDevice (d : * mut f64) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaSetDoubleForHost (d : * mut f64) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaSetValidDevices (device_arr : * mut :: core :: ffi :: c_int , len : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaSignalExternalSemaphoresAsync_v2 (extSemArray : * const cudaExternalSemaphore_t , paramsArray : * const cudaExternalSemaphoreSignalParams , numExtSems : :: core :: ffi :: c_uint , stream : cudaStream_t ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamAddCallback (stream : cudaStream_t , callback : cudaStreamCallback_t , userData : * mut :: core :: ffi :: c_void , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamAttachMemAsync (stream : cudaStream_t , devPtr : * mut :: core :: ffi :: c_void , length : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamBeginCapture (stream : cudaStream_t , mode : cudaStreamCaptureMode) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamBeginCaptureToGraph (stream : cudaStream_t , graph : cudaGraph_t , dependencies : * const cudaGraphNode_t , dependencyData : * const cudaGraphEdgeData , numDependencies : usize , mode : cudaStreamCaptureMode ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamCopyAttributes (dst : cudaStream_t , src : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamCreate (pStream : * mut cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamCreateWithFlags (pStream : * mut cudaStream_t , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamCreateWithPriority (pStream : * mut cudaStream_t , flags : :: core :: ffi :: c_uint , priority : :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamDestroy (stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamEndCapture (stream : cudaStream_t , pGraph : * mut cudaGraph_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaStreamGetAttribute (hStream : cudaStream_t , attr : cudaStreamAttrID , value_out : * mut cudaStreamAttrValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamGetAttribute (hStream : cudaStream_t , attr : cudaLaunchAttributeID , value_out : * mut cudaLaunchAttributeValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaStreamGetCaptureInfo (stream : cudaStream_t , pCaptureStatus : * mut cudaStreamCaptureStatus , pId : * mut :: core :: ffi :: c_ulonglong ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamGetCaptureInfo_v2 (stream : cudaStream_t , captureStatus_out : * mut cudaStreamCaptureStatus , id_out : * mut :: core :: ffi :: c_ulonglong , graph_out : * mut cudaGraph_t , dependencies_out : * mut * const cudaGraphNode_t , numDependencies_out : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamGetCaptureInfo_v3 (stream : cudaStream_t , captureStatus_out : * mut cudaStreamCaptureStatus , id_out : * mut :: core :: ffi :: c_ulonglong , graph_out : * mut cudaGraph_t , dependencies_out : * mut * const cudaGraphNode_t , edgeData_out : * mut * const cudaGraphEdgeData , numDependencies_out : * mut usize ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12080"))]
pub fn cudaStreamGetDevice (hStream : cudaStream_t , device : * mut :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamGetFlags (hStream : cudaStream_t , flags : * mut :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamGetId (hStream : cudaStream_t , streamId : * mut :: core :: ffi :: c_ulonglong ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamGetPriority (hStream : cudaStream_t , priority : * mut :: core :: ffi :: c_int ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamIsCapturing (stream : cudaStream_t , pCaptureStatus : * mut cudaStreamCaptureStatus ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamQuery (stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaStreamSetAttribute (hStream : cudaStream_t , attr : cudaStreamAttrID , value : * const cudaStreamAttrValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamSetAttribute (hStream : cudaStream_t , attr : cudaLaunchAttributeID , value : * const cudaLaunchAttributeValue ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamSynchronize (stream : cudaStream_t) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamUpdateCaptureDependencies (stream : cudaStream_t , dependencies : * mut cudaGraphNode_t , numDependencies : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamUpdateCaptureDependencies_v2 (stream : cudaStream_t , dependencies : * mut cudaGraphNode_t , dependencyData : * const cudaGraphEdgeData , numDependencies : usize , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaStreamWaitEvent (stream : cudaStream_t , event : cudaEvent_t , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadExchangeStreamCaptureMode (mode : * mut cudaStreamCaptureMode) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadExit () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadGetCacheConfig (pCacheConfig : * mut cudaFuncCache) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadGetLimit (pValue : * mut usize , limit : cudaLimit) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadSetCacheConfig (cacheConfig : cudaFuncCache) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadSetLimit (limit : cudaLimit , value : usize) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaThreadSynchronize () -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub fn cudaUnbindTexture (texref : * const textureReference) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaUserObjectCreate (object_out : * mut cudaUserObject_t , ptr : * mut :: core :: ffi :: c_void , destroy : cudaHostFn_t , initialRefcount : :: core :: ffi :: c_uint , flags : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaUserObjectRelease (object : cudaUserObject_t , count : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaUserObjectRetain (object : cudaUserObject_t , count : :: core :: ffi :: c_uint ,) -> cudaError_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn cudaWaitExternalSemaphoresAsync_v2 (extSemArray : * const cudaExternalSemaphore_t , paramsArray : * const cudaExternalSemaphoreWaitParams , numExtSems : :: core :: ffi :: c_uint , stream : cudaStream_t ,) -> cudaError_t ;
}
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaAccessProperty { cudaAccessPropertyNormal = 0 , cudaAccessPropertyStreaming = 1 , cudaAccessPropertyPersisting = 2 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaAsyncNotificationType_enum { cudaAsyncNotificationTypeOverBudget = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaCGScope { cudaCGScopeInvalid = 0 , cudaCGScopeGrid = 1 , cudaCGScopeMultiGrid = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaChannelFormatKind { cudaChannelFormatKindSigned = 0 , cudaChannelFormatKindUnsigned = 1 , cudaChannelFormatKindFloat = 2 , cudaChannelFormatKindNone = 3 , cudaChannelFormatKindNV12 = 4 , }
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaChannelFormatKind { cudaChannelFormatKindSigned = 0 , cudaChannelFormatKindUnsigned = 1 , cudaChannelFormatKindFloat = 2 , cudaChannelFormatKindNone = 3 , cudaChannelFormatKindNV12 = 4 , cudaChannelFormatKindUnsignedNormalized8X1 = 5 , cudaChannelFormatKindUnsignedNormalized8X2 = 6 , cudaChannelFormatKindUnsignedNormalized8X4 = 7 , cudaChannelFormatKindUnsignedNormalized16X1 = 8 , cudaChannelFormatKindUnsignedNormalized16X2 = 9 , cudaChannelFormatKindUnsignedNormalized16X4 = 10 , cudaChannelFormatKindSignedNormalized8X1 = 11 , cudaChannelFormatKindSignedNormalized8X2 = 12 , cudaChannelFormatKindSignedNormalized8X4 = 13 , cudaChannelFormatKindSignedNormalized16X1 = 14 , cudaChannelFormatKindSignedNormalized16X2 = 15 , cudaChannelFormatKindSignedNormalized16X4 = 16 , cudaChannelFormatKindUnsignedBlockCompressed1 = 17 , cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18 , cudaChannelFormatKindUnsignedBlockCompressed2 = 19 , cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20 , cudaChannelFormatKindUnsignedBlockCompressed3 = 21 , cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22 , cudaChannelFormatKindUnsignedBlockCompressed4 = 23 , cudaChannelFormatKindSignedBlockCompressed4 = 24 , cudaChannelFormatKindUnsignedBlockCompressed5 = 25 , cudaChannelFormatKindSignedBlockCompressed5 = 26 , cudaChannelFormatKindUnsignedBlockCompressed6H = 27 , cudaChannelFormatKindSignedBlockCompressed6H = 28 , cudaChannelFormatKindUnsignedBlockCompressed7 = 29 , cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30 , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaClusterSchedulingPolicy { cudaClusterSchedulingPolicyDefault = 0 , cudaClusterSchedulingPolicySpread = 1 , cudaClusterSchedulingPolicyLoadBalancing = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaComputeMode { cudaComputeModeDefault = 0 , cudaComputeModeExclusive = 1 , cudaComputeModeProhibited = 2 , cudaComputeModeExclusiveProcess = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDataType_t { CUDA_R_16F = 2 , CUDA_C_16F = 6 , CUDA_R_16BF = 14 , CUDA_C_16BF = 15 , CUDA_R_32F = 0 , CUDA_C_32F = 4 , CUDA_R_64F = 1 , CUDA_C_64F = 5 , CUDA_R_4I = 16 , CUDA_C_4I = 17 , CUDA_R_4U = 18 , CUDA_C_4U = 19 , CUDA_R_8I = 3 , CUDA_C_8I = 7 , CUDA_R_8U = 8 , CUDA_C_8U = 9 , CUDA_R_16I = 20 , CUDA_C_16I = 21 , CUDA_R_16U = 22 , CUDA_C_16U = 23 , CUDA_R_32I = 10 , CUDA_C_32I = 11 , CUDA_R_32U = 12 , CUDA_C_32U = 13 , CUDA_R_64I = 24 , CUDA_C_64I = 25 , CUDA_R_64U = 26 , CUDA_C_64U = 27 , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDataType_t { CUDA_R_16F = 2 , CUDA_C_16F = 6 , CUDA_R_16BF = 14 , CUDA_C_16BF = 15 , CUDA_R_32F = 0 , CUDA_C_32F = 4 , CUDA_R_64F = 1 , CUDA_C_64F = 5 , CUDA_R_4I = 16 , CUDA_C_4I = 17 , CUDA_R_4U = 18 , CUDA_C_4U = 19 , CUDA_R_8I = 3 , CUDA_C_8I = 7 , CUDA_R_8U = 8 , CUDA_C_8U = 9 , CUDA_R_16I = 20 , CUDA_C_16I = 21 , CUDA_R_16U = 22 , CUDA_C_16U = 23 , CUDA_R_32I = 10 , CUDA_C_32I = 11 , CUDA_R_32U = 12 , CUDA_C_32U = 13 , CUDA_R_64I = 24 , CUDA_C_64I = 25 , CUDA_R_64U = 26 , CUDA_C_64U = 27 , CUDA_R_8F_E4M3 = 28 , CUDA_R_8F_E5M2 = 29 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrMax = 120 , }
#[cfg(any(feature = "cuda-11060"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrMax = 120 , }
#[cfg(any(feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrMax = 122 , }
#[cfg(any(feature = "cuda-12000"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrClusterLaunch = 120 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrMax = 122 , }
#[cfg(any(feature = "cuda-12010"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrClusterLaunch = 120 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrReserved122 = 122 , cudaDevAttrReserved123 = 123 , cudaDevAttrReserved124 = 124 , cudaDevAttrIpcEventSupport = 125 , cudaDevAttrMemSyncDomainCount = 126 , cudaDevAttrMax = 127 , }
#[cfg(any(feature = "cuda-12020"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrClusterLaunch = 120 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrReserved122 = 122 , cudaDevAttrReserved123 = 123 , cudaDevAttrReserved124 = 124 , cudaDevAttrIpcEventSupport = 125 , cudaDevAttrMemSyncDomainCount = 126 , cudaDevAttrReserved127 = 127 , cudaDevAttrReserved128 = 128 , cudaDevAttrReserved129 = 129 , cudaDevAttrReserved132 = 132 , cudaDevAttrMax = 133 , }
#[cfg(any(feature = "cuda-12030"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrClusterLaunch = 120 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrReserved122 = 122 , cudaDevAttrReserved123 = 123 , cudaDevAttrReserved124 = 124 , cudaDevAttrIpcEventSupport = 125 , cudaDevAttrMemSyncDomainCount = 126 , cudaDevAttrReserved127 = 127 , cudaDevAttrReserved128 = 128 , cudaDevAttrReserved129 = 129 , cudaDevAttrNumaConfig = 130 , cudaDevAttrNumaId = 131 , cudaDevAttrReserved132 = 132 , cudaDevAttrHostNumaId = 134 , cudaDevAttrMax = 135 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrClusterLaunch = 120 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrReserved122 = 122 , cudaDevAttrReserved123 = 123 , cudaDevAttrReserved124 = 124 , cudaDevAttrIpcEventSupport = 125 , cudaDevAttrMemSyncDomainCount = 126 , cudaDevAttrReserved127 = 127 , cudaDevAttrReserved128 = 128 , cudaDevAttrReserved129 = 129 , cudaDevAttrNumaConfig = 130 , cudaDevAttrNumaId = 131 , cudaDevAttrReserved132 = 132 , cudaDevAttrMpsEnabled = 133 , cudaDevAttrHostNumaId = 134 , cudaDevAttrMax = 135 , }
#[cfg(any(feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceAttr { cudaDevAttrMaxThreadsPerBlock = 1 , cudaDevAttrMaxBlockDimX = 2 , cudaDevAttrMaxBlockDimY = 3 , cudaDevAttrMaxBlockDimZ = 4 , cudaDevAttrMaxGridDimX = 5 , cudaDevAttrMaxGridDimY = 6 , cudaDevAttrMaxGridDimZ = 7 , cudaDevAttrMaxSharedMemoryPerBlock = 8 , cudaDevAttrTotalConstantMemory = 9 , cudaDevAttrWarpSize = 10 , cudaDevAttrMaxPitch = 11 , cudaDevAttrMaxRegistersPerBlock = 12 , cudaDevAttrClockRate = 13 , cudaDevAttrTextureAlignment = 14 , cudaDevAttrGpuOverlap = 15 , cudaDevAttrMultiProcessorCount = 16 , cudaDevAttrKernelExecTimeout = 17 , cudaDevAttrIntegrated = 18 , cudaDevAttrCanMapHostMemory = 19 , cudaDevAttrComputeMode = 20 , cudaDevAttrMaxTexture1DWidth = 21 , cudaDevAttrMaxTexture2DWidth = 22 , cudaDevAttrMaxTexture2DHeight = 23 , cudaDevAttrMaxTexture3DWidth = 24 , cudaDevAttrMaxTexture3DHeight = 25 , cudaDevAttrMaxTexture3DDepth = 26 , cudaDevAttrMaxTexture2DLayeredWidth = 27 , cudaDevAttrMaxTexture2DLayeredHeight = 28 , cudaDevAttrMaxTexture2DLayeredLayers = 29 , cudaDevAttrSurfaceAlignment = 30 , cudaDevAttrConcurrentKernels = 31 , cudaDevAttrEccEnabled = 32 , cudaDevAttrPciBusId = 33 , cudaDevAttrPciDeviceId = 34 , cudaDevAttrTccDriver = 35 , cudaDevAttrMemoryClockRate = 36 , cudaDevAttrGlobalMemoryBusWidth = 37 , cudaDevAttrL2CacheSize = 38 , cudaDevAttrMaxThreadsPerMultiProcessor = 39 , cudaDevAttrAsyncEngineCount = 40 , cudaDevAttrUnifiedAddressing = 41 , cudaDevAttrMaxTexture1DLayeredWidth = 42 , cudaDevAttrMaxTexture1DLayeredLayers = 43 , cudaDevAttrMaxTexture2DGatherWidth = 45 , cudaDevAttrMaxTexture2DGatherHeight = 46 , cudaDevAttrMaxTexture3DWidthAlt = 47 , cudaDevAttrMaxTexture3DHeightAlt = 48 , cudaDevAttrMaxTexture3DDepthAlt = 49 , cudaDevAttrPciDomainId = 50 , cudaDevAttrTexturePitchAlignment = 51 , cudaDevAttrMaxTextureCubemapWidth = 52 , cudaDevAttrMaxTextureCubemapLayeredWidth = 53 , cudaDevAttrMaxTextureCubemapLayeredLayers = 54 , cudaDevAttrMaxSurface1DWidth = 55 , cudaDevAttrMaxSurface2DWidth = 56 , cudaDevAttrMaxSurface2DHeight = 57 , cudaDevAttrMaxSurface3DWidth = 58 , cudaDevAttrMaxSurface3DHeight = 59 , cudaDevAttrMaxSurface3DDepth = 60 , cudaDevAttrMaxSurface1DLayeredWidth = 61 , cudaDevAttrMaxSurface1DLayeredLayers = 62 , cudaDevAttrMaxSurface2DLayeredWidth = 63 , cudaDevAttrMaxSurface2DLayeredHeight = 64 , cudaDevAttrMaxSurface2DLayeredLayers = 65 , cudaDevAttrMaxSurfaceCubemapWidth = 66 , cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67 , cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68 , cudaDevAttrMaxTexture1DLinearWidth = 69 , cudaDevAttrMaxTexture2DLinearWidth = 70 , cudaDevAttrMaxTexture2DLinearHeight = 71 , cudaDevAttrMaxTexture2DLinearPitch = 72 , cudaDevAttrMaxTexture2DMipmappedWidth = 73 , cudaDevAttrMaxTexture2DMipmappedHeight = 74 , cudaDevAttrComputeCapabilityMajor = 75 , cudaDevAttrComputeCapabilityMinor = 76 , cudaDevAttrMaxTexture1DMipmappedWidth = 77 , cudaDevAttrStreamPrioritiesSupported = 78 , cudaDevAttrGlobalL1CacheSupported = 79 , cudaDevAttrLocalL1CacheSupported = 80 , cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81 , cudaDevAttrMaxRegistersPerMultiprocessor = 82 , cudaDevAttrManagedMemory = 83 , cudaDevAttrIsMultiGpuBoard = 84 , cudaDevAttrMultiGpuBoardGroupID = 85 , cudaDevAttrHostNativeAtomicSupported = 86 , cudaDevAttrSingleToDoublePrecisionPerfRatio = 87 , cudaDevAttrPageableMemoryAccess = 88 , cudaDevAttrConcurrentManagedAccess = 89 , cudaDevAttrComputePreemptionSupported = 90 , cudaDevAttrCanUseHostPointerForRegisteredMem = 91 , cudaDevAttrReserved92 = 92 , cudaDevAttrReserved93 = 93 , cudaDevAttrReserved94 = 94 , cudaDevAttrCooperativeLaunch = 95 , cudaDevAttrCooperativeMultiDeviceLaunch = 96 , cudaDevAttrMaxSharedMemoryPerBlockOptin = 97 , cudaDevAttrCanFlushRemoteWrites = 98 , cudaDevAttrHostRegisterSupported = 99 , cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100 , cudaDevAttrDirectManagedMemAccessFromHost = 101 , cudaDevAttrMaxBlocksPerMultiprocessor = 106 , cudaDevAttrMaxPersistingL2CacheSize = 108 , cudaDevAttrMaxAccessPolicyWindowSize = 109 , cudaDevAttrReservedSharedMemoryPerBlock = 111 , cudaDevAttrSparseCudaArraySupported = 112 , cudaDevAttrHostRegisterReadOnlySupported = 113 , cudaDevAttrTimelineSemaphoreInteropSupported = 114 , cudaDevAttrMemoryPoolsSupported = 115 , cudaDevAttrGPUDirectRDMASupported = 116 , cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117 , cudaDevAttrGPUDirectRDMAWritesOrdering = 118 , cudaDevAttrMemoryPoolSupportedHandleTypes = 119 , cudaDevAttrClusterLaunch = 120 , cudaDevAttrDeferredMappingCudaArraySupported = 121 , cudaDevAttrReserved122 = 122 , cudaDevAttrReserved123 = 123 , cudaDevAttrReserved124 = 124 , cudaDevAttrIpcEventSupport = 125 , cudaDevAttrMemSyncDomainCount = 126 , cudaDevAttrReserved127 = 127 , cudaDevAttrReserved128 = 128 , cudaDevAttrReserved129 = 129 , cudaDevAttrNumaConfig = 130 , cudaDevAttrNumaId = 131 , cudaDevAttrReserved132 = 132 , cudaDevAttrMpsEnabled = 133 , cudaDevAttrHostNumaId = 134 , cudaDevAttrD3D12CigSupported = 135 , cudaDevAttrMax = 136 , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceNumaConfig { cudaDeviceNumaConfigNone = 0 , cudaDeviceNumaConfigNumaNode = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDeviceP2PAttr { cudaDevP2PAttrPerformanceRank = 1 , cudaDevP2PAttrAccessSupported = 2 , cudaDevP2PAttrNativeAtomicSupported = 3 , cudaDevP2PAttrCudaArrayAccessSupported = 4 , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaDriverEntryPointQueryResult { cudaDriverEntryPointSuccess = 0 , cudaDriverEntryPointSymbolNotFound = 1 , cudaDriverEntryPointVersionNotSufficent = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaError { cudaSuccess = 0 , cudaErrorInvalidValue = 1 , cudaErrorMemoryAllocation = 2 , cudaErrorInitializationError = 3 , cudaErrorCudartUnloading = 4 , cudaErrorProfilerDisabled = 5 , cudaErrorProfilerNotInitialized = 6 , cudaErrorProfilerAlreadyStarted = 7 , cudaErrorProfilerAlreadyStopped = 8 , cudaErrorInvalidConfiguration = 9 , cudaErrorInvalidPitchValue = 12 , cudaErrorInvalidSymbol = 13 , cudaErrorInvalidHostPointer = 16 , cudaErrorInvalidDevicePointer = 17 , cudaErrorInvalidTexture = 18 , cudaErrorInvalidTextureBinding = 19 , cudaErrorInvalidChannelDescriptor = 20 , cudaErrorInvalidMemcpyDirection = 21 , cudaErrorAddressOfConstant = 22 , cudaErrorTextureFetchFailed = 23 , cudaErrorTextureNotBound = 24 , cudaErrorSynchronizationError = 25 , cudaErrorInvalidFilterSetting = 26 , cudaErrorInvalidNormSetting = 27 , cudaErrorMixedDeviceExecution = 28 , cudaErrorNotYetImplemented = 31 , cudaErrorMemoryValueTooLarge = 32 , cudaErrorStubLibrary = 34 , cudaErrorInsufficientDriver = 35 , cudaErrorCallRequiresNewerDriver = 36 , cudaErrorInvalidSurface = 37 , cudaErrorDuplicateVariableName = 43 , cudaErrorDuplicateTextureName = 44 , cudaErrorDuplicateSurfaceName = 45 , cudaErrorDevicesUnavailable = 46 , cudaErrorIncompatibleDriverContext = 49 , cudaErrorMissingConfiguration = 52 , cudaErrorPriorLaunchFailure = 53 , cudaErrorLaunchMaxDepthExceeded = 65 , cudaErrorLaunchFileScopedTex = 66 , cudaErrorLaunchFileScopedSurf = 67 , cudaErrorSyncDepthExceeded = 68 , cudaErrorLaunchPendingCountExceeded = 69 , cudaErrorInvalidDeviceFunction = 98 , cudaErrorNoDevice = 100 , cudaErrorInvalidDevice = 101 , cudaErrorDeviceNotLicensed = 102 , cudaErrorSoftwareValidityNotEstablished = 103 , cudaErrorStartupFailure = 127 , cudaErrorInvalidKernelImage = 200 , cudaErrorDeviceUninitialized = 201 , cudaErrorMapBufferObjectFailed = 205 , cudaErrorUnmapBufferObjectFailed = 206 , cudaErrorArrayIsMapped = 207 , cudaErrorAlreadyMapped = 208 , cudaErrorNoKernelImageForDevice = 209 , cudaErrorAlreadyAcquired = 210 , cudaErrorNotMapped = 211 , cudaErrorNotMappedAsArray = 212 , cudaErrorNotMappedAsPointer = 213 , cudaErrorECCUncorrectable = 214 , cudaErrorUnsupportedLimit = 215 , cudaErrorDeviceAlreadyInUse = 216 , cudaErrorPeerAccessUnsupported = 217 , cudaErrorInvalidPtx = 218 , cudaErrorInvalidGraphicsContext = 219 , cudaErrorNvlinkUncorrectable = 220 , cudaErrorJitCompilerNotFound = 221 , cudaErrorUnsupportedPtxVersion = 222 , cudaErrorJitCompilationDisabled = 223 , cudaErrorUnsupportedExecAffinity = 224 , cudaErrorInvalidSource = 300 , cudaErrorFileNotFound = 301 , cudaErrorSharedObjectSymbolNotFound = 302 , cudaErrorSharedObjectInitFailed = 303 , cudaErrorOperatingSystem = 304 , cudaErrorInvalidResourceHandle = 400 , cudaErrorIllegalState = 401 , cudaErrorSymbolNotFound = 500 , cudaErrorNotReady = 600 , cudaErrorIllegalAddress = 700 , cudaErrorLaunchOutOfResources = 701 , cudaErrorLaunchTimeout = 702 , cudaErrorLaunchIncompatibleTexturing = 703 , cudaErrorPeerAccessAlreadyEnabled = 704 , cudaErrorPeerAccessNotEnabled = 705 , cudaErrorSetOnActiveProcess = 708 , cudaErrorContextIsDestroyed = 709 , cudaErrorAssert = 710 , cudaErrorTooManyPeers = 711 , cudaErrorHostMemoryAlreadyRegistered = 712 , cudaErrorHostMemoryNotRegistered = 713 , cudaErrorHardwareStackError = 714 , cudaErrorIllegalInstruction = 715 , cudaErrorMisalignedAddress = 716 , cudaErrorInvalidAddressSpace = 717 , cudaErrorInvalidPc = 718 , cudaErrorLaunchFailure = 719 , cudaErrorCooperativeLaunchTooLarge = 720 , cudaErrorNotPermitted = 800 , cudaErrorNotSupported = 801 , cudaErrorSystemNotReady = 802 , cudaErrorSystemDriverMismatch = 803 , cudaErrorCompatNotSupportedOnDevice = 804 , cudaErrorMpsConnectionFailed = 805 , cudaErrorMpsRpcFailure = 806 , cudaErrorMpsServerNotReady = 807 , cudaErrorMpsMaxClientsReached = 808 , cudaErrorMpsMaxConnectionsReached = 809 , cudaErrorStreamCaptureUnsupported = 900 , cudaErrorStreamCaptureInvalidated = 901 , cudaErrorStreamCaptureMerge = 902 , cudaErrorStreamCaptureUnmatched = 903 , cudaErrorStreamCaptureUnjoined = 904 , cudaErrorStreamCaptureIsolation = 905 , cudaErrorStreamCaptureImplicit = 906 , cudaErrorCapturedEvent = 907 , cudaErrorStreamCaptureWrongThread = 908 , cudaErrorTimeout = 909 , cudaErrorGraphExecUpdateFailure = 910 , cudaErrorExternalDevice = 911 , cudaErrorUnknown = 999 , cudaErrorApiFailureBase = 10000 , }
#[cfg(any(feature = "cuda-12000"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaError { cudaSuccess = 0 , cudaErrorInvalidValue = 1 , cudaErrorMemoryAllocation = 2 , cudaErrorInitializationError = 3 , cudaErrorCudartUnloading = 4 , cudaErrorProfilerDisabled = 5 , cudaErrorProfilerNotInitialized = 6 , cudaErrorProfilerAlreadyStarted = 7 , cudaErrorProfilerAlreadyStopped = 8 , cudaErrorInvalidConfiguration = 9 , cudaErrorInvalidPitchValue = 12 , cudaErrorInvalidSymbol = 13 , cudaErrorInvalidHostPointer = 16 , cudaErrorInvalidDevicePointer = 17 , cudaErrorInvalidTexture = 18 , cudaErrorInvalidTextureBinding = 19 , cudaErrorInvalidChannelDescriptor = 20 , cudaErrorInvalidMemcpyDirection = 21 , cudaErrorAddressOfConstant = 22 , cudaErrorTextureFetchFailed = 23 , cudaErrorTextureNotBound = 24 , cudaErrorSynchronizationError = 25 , cudaErrorInvalidFilterSetting = 26 , cudaErrorInvalidNormSetting = 27 , cudaErrorMixedDeviceExecution = 28 , cudaErrorNotYetImplemented = 31 , cudaErrorMemoryValueTooLarge = 32 , cudaErrorStubLibrary = 34 , cudaErrorInsufficientDriver = 35 , cudaErrorCallRequiresNewerDriver = 36 , cudaErrorInvalidSurface = 37 , cudaErrorDuplicateVariableName = 43 , cudaErrorDuplicateTextureName = 44 , cudaErrorDuplicateSurfaceName = 45 , cudaErrorDevicesUnavailable = 46 , cudaErrorIncompatibleDriverContext = 49 , cudaErrorMissingConfiguration = 52 , cudaErrorPriorLaunchFailure = 53 , cudaErrorLaunchMaxDepthExceeded = 65 , cudaErrorLaunchFileScopedTex = 66 , cudaErrorLaunchFileScopedSurf = 67 , cudaErrorSyncDepthExceeded = 68 , cudaErrorLaunchPendingCountExceeded = 69 , cudaErrorInvalidDeviceFunction = 98 , cudaErrorNoDevice = 100 , cudaErrorInvalidDevice = 101 , cudaErrorDeviceNotLicensed = 102 , cudaErrorSoftwareValidityNotEstablished = 103 , cudaErrorStartupFailure = 127 , cudaErrorInvalidKernelImage = 200 , cudaErrorDeviceUninitialized = 201 , cudaErrorMapBufferObjectFailed = 205 , cudaErrorUnmapBufferObjectFailed = 206 , cudaErrorArrayIsMapped = 207 , cudaErrorAlreadyMapped = 208 , cudaErrorNoKernelImageForDevice = 209 , cudaErrorAlreadyAcquired = 210 , cudaErrorNotMapped = 211 , cudaErrorNotMappedAsArray = 212 , cudaErrorNotMappedAsPointer = 213 , cudaErrorECCUncorrectable = 214 , cudaErrorUnsupportedLimit = 215 , cudaErrorDeviceAlreadyInUse = 216 , cudaErrorPeerAccessUnsupported = 217 , cudaErrorInvalidPtx = 218 , cudaErrorInvalidGraphicsContext = 219 , cudaErrorNvlinkUncorrectable = 220 , cudaErrorJitCompilerNotFound = 221 , cudaErrorUnsupportedPtxVersion = 222 , cudaErrorJitCompilationDisabled = 223 , cudaErrorUnsupportedExecAffinity = 224 , cudaErrorInvalidSource = 300 , cudaErrorFileNotFound = 301 , cudaErrorSharedObjectSymbolNotFound = 302 , cudaErrorSharedObjectInitFailed = 303 , cudaErrorOperatingSystem = 304 , cudaErrorInvalidResourceHandle = 400 , cudaErrorIllegalState = 401 , cudaErrorSymbolNotFound = 500 , cudaErrorNotReady = 600 , cudaErrorIllegalAddress = 700 , cudaErrorLaunchOutOfResources = 701 , cudaErrorLaunchTimeout = 702 , cudaErrorLaunchIncompatibleTexturing = 703 , cudaErrorPeerAccessAlreadyEnabled = 704 , cudaErrorPeerAccessNotEnabled = 705 , cudaErrorSetOnActiveProcess = 708 , cudaErrorContextIsDestroyed = 709 , cudaErrorAssert = 710 , cudaErrorTooManyPeers = 711 , cudaErrorHostMemoryAlreadyRegistered = 712 , cudaErrorHostMemoryNotRegistered = 713 , cudaErrorHardwareStackError = 714 , cudaErrorIllegalInstruction = 715 , cudaErrorMisalignedAddress = 716 , cudaErrorInvalidAddressSpace = 717 , cudaErrorInvalidPc = 718 , cudaErrorLaunchFailure = 719 , cudaErrorCooperativeLaunchTooLarge = 720 , cudaErrorNotPermitted = 800 , cudaErrorNotSupported = 801 , cudaErrorSystemNotReady = 802 , cudaErrorSystemDriverMismatch = 803 , cudaErrorCompatNotSupportedOnDevice = 804 , cudaErrorMpsConnectionFailed = 805 , cudaErrorMpsRpcFailure = 806 , cudaErrorMpsServerNotReady = 807 , cudaErrorMpsMaxClientsReached = 808 , cudaErrorMpsMaxConnectionsReached = 809 , cudaErrorMpsClientTerminated = 810 , cudaErrorStreamCaptureUnsupported = 900 , cudaErrorStreamCaptureInvalidated = 901 , cudaErrorStreamCaptureMerge = 902 , cudaErrorStreamCaptureUnmatched = 903 , cudaErrorStreamCaptureUnjoined = 904 , cudaErrorStreamCaptureIsolation = 905 , cudaErrorStreamCaptureImplicit = 906 , cudaErrorCapturedEvent = 907 , cudaErrorStreamCaptureWrongThread = 908 , cudaErrorTimeout = 909 , cudaErrorGraphExecUpdateFailure = 910 , cudaErrorExternalDevice = 911 , cudaErrorInvalidClusterSize = 912 , cudaErrorUnknown = 999 , cudaErrorApiFailureBase = 10000 , }
#[cfg(any(feature = "cuda-12010"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaError { cudaSuccess = 0 , cudaErrorInvalidValue = 1 , cudaErrorMemoryAllocation = 2 , cudaErrorInitializationError = 3 , cudaErrorCudartUnloading = 4 , cudaErrorProfilerDisabled = 5 , cudaErrorProfilerNotInitialized = 6 , cudaErrorProfilerAlreadyStarted = 7 , cudaErrorProfilerAlreadyStopped = 8 , cudaErrorInvalidConfiguration = 9 , cudaErrorInvalidPitchValue = 12 , cudaErrorInvalidSymbol = 13 , cudaErrorInvalidHostPointer = 16 , cudaErrorInvalidDevicePointer = 17 , cudaErrorInvalidTexture = 18 , cudaErrorInvalidTextureBinding = 19 , cudaErrorInvalidChannelDescriptor = 20 , cudaErrorInvalidMemcpyDirection = 21 , cudaErrorAddressOfConstant = 22 , cudaErrorTextureFetchFailed = 23 , cudaErrorTextureNotBound = 24 , cudaErrorSynchronizationError = 25 , cudaErrorInvalidFilterSetting = 26 , cudaErrorInvalidNormSetting = 27 , cudaErrorMixedDeviceExecution = 28 , cudaErrorNotYetImplemented = 31 , cudaErrorMemoryValueTooLarge = 32 , cudaErrorStubLibrary = 34 , cudaErrorInsufficientDriver = 35 , cudaErrorCallRequiresNewerDriver = 36 , cudaErrorInvalidSurface = 37 , cudaErrorDuplicateVariableName = 43 , cudaErrorDuplicateTextureName = 44 , cudaErrorDuplicateSurfaceName = 45 , cudaErrorDevicesUnavailable = 46 , cudaErrorIncompatibleDriverContext = 49 , cudaErrorMissingConfiguration = 52 , cudaErrorPriorLaunchFailure = 53 , cudaErrorLaunchMaxDepthExceeded = 65 , cudaErrorLaunchFileScopedTex = 66 , cudaErrorLaunchFileScopedSurf = 67 , cudaErrorSyncDepthExceeded = 68 , cudaErrorLaunchPendingCountExceeded = 69 , cudaErrorInvalidDeviceFunction = 98 , cudaErrorNoDevice = 100 , cudaErrorInvalidDevice = 101 , cudaErrorDeviceNotLicensed = 102 , cudaErrorSoftwareValidityNotEstablished = 103 , cudaErrorStartupFailure = 127 , cudaErrorInvalidKernelImage = 200 , cudaErrorDeviceUninitialized = 201 , cudaErrorMapBufferObjectFailed = 205 , cudaErrorUnmapBufferObjectFailed = 206 , cudaErrorArrayIsMapped = 207 , cudaErrorAlreadyMapped = 208 , cudaErrorNoKernelImageForDevice = 209 , cudaErrorAlreadyAcquired = 210 , cudaErrorNotMapped = 211 , cudaErrorNotMappedAsArray = 212 , cudaErrorNotMappedAsPointer = 213 , cudaErrorECCUncorrectable = 214 , cudaErrorUnsupportedLimit = 215 , cudaErrorDeviceAlreadyInUse = 216 , cudaErrorPeerAccessUnsupported = 217 , cudaErrorInvalidPtx = 218 , cudaErrorInvalidGraphicsContext = 219 , cudaErrorNvlinkUncorrectable = 220 , cudaErrorJitCompilerNotFound = 221 , cudaErrorUnsupportedPtxVersion = 222 , cudaErrorJitCompilationDisabled = 223 , cudaErrorUnsupportedExecAffinity = 224 , cudaErrorInvalidSource = 300 , cudaErrorFileNotFound = 301 , cudaErrorSharedObjectSymbolNotFound = 302 , cudaErrorSharedObjectInitFailed = 303 , cudaErrorOperatingSystem = 304 , cudaErrorInvalidResourceHandle = 400 , cudaErrorIllegalState = 401 , cudaErrorSymbolNotFound = 500 , cudaErrorNotReady = 600 , cudaErrorIllegalAddress = 700 , cudaErrorLaunchOutOfResources = 701 , cudaErrorLaunchTimeout = 702 , cudaErrorLaunchIncompatibleTexturing = 703 , cudaErrorPeerAccessAlreadyEnabled = 704 , cudaErrorPeerAccessNotEnabled = 705 , cudaErrorSetOnActiveProcess = 708 , cudaErrorContextIsDestroyed = 709 , cudaErrorAssert = 710 , cudaErrorTooManyPeers = 711 , cudaErrorHostMemoryAlreadyRegistered = 712 , cudaErrorHostMemoryNotRegistered = 713 , cudaErrorHardwareStackError = 714 , cudaErrorIllegalInstruction = 715 , cudaErrorMisalignedAddress = 716 , cudaErrorInvalidAddressSpace = 717 , cudaErrorInvalidPc = 718 , cudaErrorLaunchFailure = 719 , cudaErrorCooperativeLaunchTooLarge = 720 , cudaErrorNotPermitted = 800 , cudaErrorNotSupported = 801 , cudaErrorSystemNotReady = 802 , cudaErrorSystemDriverMismatch = 803 , cudaErrorCompatNotSupportedOnDevice = 804 , cudaErrorMpsConnectionFailed = 805 , cudaErrorMpsRpcFailure = 806 , cudaErrorMpsServerNotReady = 807 , cudaErrorMpsMaxClientsReached = 808 , cudaErrorMpsMaxConnectionsReached = 809 , cudaErrorMpsClientTerminated = 810 , cudaErrorCdpNotSupported = 811 , cudaErrorCdpVersionMismatch = 812 , cudaErrorStreamCaptureUnsupported = 900 , cudaErrorStreamCaptureInvalidated = 901 , cudaErrorStreamCaptureMerge = 902 , cudaErrorStreamCaptureUnmatched = 903 , cudaErrorStreamCaptureUnjoined = 904 , cudaErrorStreamCaptureIsolation = 905 , cudaErrorStreamCaptureImplicit = 906 , cudaErrorCapturedEvent = 907 , cudaErrorStreamCaptureWrongThread = 908 , cudaErrorTimeout = 909 , cudaErrorGraphExecUpdateFailure = 910 , cudaErrorExternalDevice = 911 , cudaErrorInvalidClusterSize = 912 , cudaErrorUnknown = 999 , cudaErrorApiFailureBase = 10000 , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaError { cudaSuccess = 0 , cudaErrorInvalidValue = 1 , cudaErrorMemoryAllocation = 2 , cudaErrorInitializationError = 3 , cudaErrorCudartUnloading = 4 , cudaErrorProfilerDisabled = 5 , cudaErrorProfilerNotInitialized = 6 , cudaErrorProfilerAlreadyStarted = 7 , cudaErrorProfilerAlreadyStopped = 8 , cudaErrorInvalidConfiguration = 9 , cudaErrorInvalidPitchValue = 12 , cudaErrorInvalidSymbol = 13 , cudaErrorInvalidHostPointer = 16 , cudaErrorInvalidDevicePointer = 17 , cudaErrorInvalidTexture = 18 , cudaErrorInvalidTextureBinding = 19 , cudaErrorInvalidChannelDescriptor = 20 , cudaErrorInvalidMemcpyDirection = 21 , cudaErrorAddressOfConstant = 22 , cudaErrorTextureFetchFailed = 23 , cudaErrorTextureNotBound = 24 , cudaErrorSynchronizationError = 25 , cudaErrorInvalidFilterSetting = 26 , cudaErrorInvalidNormSetting = 27 , cudaErrorMixedDeviceExecution = 28 , cudaErrorNotYetImplemented = 31 , cudaErrorMemoryValueTooLarge = 32 , cudaErrorStubLibrary = 34 , cudaErrorInsufficientDriver = 35 , cudaErrorCallRequiresNewerDriver = 36 , cudaErrorInvalidSurface = 37 , cudaErrorDuplicateVariableName = 43 , cudaErrorDuplicateTextureName = 44 , cudaErrorDuplicateSurfaceName = 45 , cudaErrorDevicesUnavailable = 46 , cudaErrorIncompatibleDriverContext = 49 , cudaErrorMissingConfiguration = 52 , cudaErrorPriorLaunchFailure = 53 , cudaErrorLaunchMaxDepthExceeded = 65 , cudaErrorLaunchFileScopedTex = 66 , cudaErrorLaunchFileScopedSurf = 67 , cudaErrorSyncDepthExceeded = 68 , cudaErrorLaunchPendingCountExceeded = 69 , cudaErrorInvalidDeviceFunction = 98 , cudaErrorNoDevice = 100 , cudaErrorInvalidDevice = 101 , cudaErrorDeviceNotLicensed = 102 , cudaErrorSoftwareValidityNotEstablished = 103 , cudaErrorStartupFailure = 127 , cudaErrorInvalidKernelImage = 200 , cudaErrorDeviceUninitialized = 201 , cudaErrorMapBufferObjectFailed = 205 , cudaErrorUnmapBufferObjectFailed = 206 , cudaErrorArrayIsMapped = 207 , cudaErrorAlreadyMapped = 208 , cudaErrorNoKernelImageForDevice = 209 , cudaErrorAlreadyAcquired = 210 , cudaErrorNotMapped = 211 , cudaErrorNotMappedAsArray = 212 , cudaErrorNotMappedAsPointer = 213 , cudaErrorECCUncorrectable = 214 , cudaErrorUnsupportedLimit = 215 , cudaErrorDeviceAlreadyInUse = 216 , cudaErrorPeerAccessUnsupported = 217 , cudaErrorInvalidPtx = 218 , cudaErrorInvalidGraphicsContext = 219 , cudaErrorNvlinkUncorrectable = 220 , cudaErrorJitCompilerNotFound = 221 , cudaErrorUnsupportedPtxVersion = 222 , cudaErrorJitCompilationDisabled = 223 , cudaErrorUnsupportedExecAffinity = 224 , cudaErrorUnsupportedDevSideSync = 225 , cudaErrorInvalidSource = 300 , cudaErrorFileNotFound = 301 , cudaErrorSharedObjectSymbolNotFound = 302 , cudaErrorSharedObjectInitFailed = 303 , cudaErrorOperatingSystem = 304 , cudaErrorInvalidResourceHandle = 400 , cudaErrorIllegalState = 401 , cudaErrorSymbolNotFound = 500 , cudaErrorNotReady = 600 , cudaErrorIllegalAddress = 700 , cudaErrorLaunchOutOfResources = 701 , cudaErrorLaunchTimeout = 702 , cudaErrorLaunchIncompatibleTexturing = 703 , cudaErrorPeerAccessAlreadyEnabled = 704 , cudaErrorPeerAccessNotEnabled = 705 , cudaErrorSetOnActiveProcess = 708 , cudaErrorContextIsDestroyed = 709 , cudaErrorAssert = 710 , cudaErrorTooManyPeers = 711 , cudaErrorHostMemoryAlreadyRegistered = 712 , cudaErrorHostMemoryNotRegistered = 713 , cudaErrorHardwareStackError = 714 , cudaErrorIllegalInstruction = 715 , cudaErrorMisalignedAddress = 716 , cudaErrorInvalidAddressSpace = 717 , cudaErrorInvalidPc = 718 , cudaErrorLaunchFailure = 719 , cudaErrorCooperativeLaunchTooLarge = 720 , cudaErrorNotPermitted = 800 , cudaErrorNotSupported = 801 , cudaErrorSystemNotReady = 802 , cudaErrorSystemDriverMismatch = 803 , cudaErrorCompatNotSupportedOnDevice = 804 , cudaErrorMpsConnectionFailed = 805 , cudaErrorMpsRpcFailure = 806 , cudaErrorMpsServerNotReady = 807 , cudaErrorMpsMaxClientsReached = 808 , cudaErrorMpsMaxConnectionsReached = 809 , cudaErrorMpsClientTerminated = 810 , cudaErrorCdpNotSupported = 811 , cudaErrorCdpVersionMismatch = 812 , cudaErrorStreamCaptureUnsupported = 900 , cudaErrorStreamCaptureInvalidated = 901 , cudaErrorStreamCaptureMerge = 902 , cudaErrorStreamCaptureUnmatched = 903 , cudaErrorStreamCaptureUnjoined = 904 , cudaErrorStreamCaptureIsolation = 905 , cudaErrorStreamCaptureImplicit = 906 , cudaErrorCapturedEvent = 907 , cudaErrorStreamCaptureWrongThread = 908 , cudaErrorTimeout = 909 , cudaErrorGraphExecUpdateFailure = 910 , cudaErrorExternalDevice = 911 , cudaErrorInvalidClusterSize = 912 , cudaErrorUnknown = 999 , cudaErrorApiFailureBase = 10000 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaError { cudaSuccess = 0 , cudaErrorInvalidValue = 1 , cudaErrorMemoryAllocation = 2 , cudaErrorInitializationError = 3 , cudaErrorCudartUnloading = 4 , cudaErrorProfilerDisabled = 5 , cudaErrorProfilerNotInitialized = 6 , cudaErrorProfilerAlreadyStarted = 7 , cudaErrorProfilerAlreadyStopped = 8 , cudaErrorInvalidConfiguration = 9 , cudaErrorInvalidPitchValue = 12 , cudaErrorInvalidSymbol = 13 , cudaErrorInvalidHostPointer = 16 , cudaErrorInvalidDevicePointer = 17 , cudaErrorInvalidTexture = 18 , cudaErrorInvalidTextureBinding = 19 , cudaErrorInvalidChannelDescriptor = 20 , cudaErrorInvalidMemcpyDirection = 21 , cudaErrorAddressOfConstant = 22 , cudaErrorTextureFetchFailed = 23 , cudaErrorTextureNotBound = 24 , cudaErrorSynchronizationError = 25 , cudaErrorInvalidFilterSetting = 26 , cudaErrorInvalidNormSetting = 27 , cudaErrorMixedDeviceExecution = 28 , cudaErrorNotYetImplemented = 31 , cudaErrorMemoryValueTooLarge = 32 , cudaErrorStubLibrary = 34 , cudaErrorInsufficientDriver = 35 , cudaErrorCallRequiresNewerDriver = 36 , cudaErrorInvalidSurface = 37 , cudaErrorDuplicateVariableName = 43 , cudaErrorDuplicateTextureName = 44 , cudaErrorDuplicateSurfaceName = 45 , cudaErrorDevicesUnavailable = 46 , cudaErrorIncompatibleDriverContext = 49 , cudaErrorMissingConfiguration = 52 , cudaErrorPriorLaunchFailure = 53 , cudaErrorLaunchMaxDepthExceeded = 65 , cudaErrorLaunchFileScopedTex = 66 , cudaErrorLaunchFileScopedSurf = 67 , cudaErrorSyncDepthExceeded = 68 , cudaErrorLaunchPendingCountExceeded = 69 , cudaErrorInvalidDeviceFunction = 98 , cudaErrorNoDevice = 100 , cudaErrorInvalidDevice = 101 , cudaErrorDeviceNotLicensed = 102 , cudaErrorSoftwareValidityNotEstablished = 103 , cudaErrorStartupFailure = 127 , cudaErrorInvalidKernelImage = 200 , cudaErrorDeviceUninitialized = 201 , cudaErrorMapBufferObjectFailed = 205 , cudaErrorUnmapBufferObjectFailed = 206 , cudaErrorArrayIsMapped = 207 , cudaErrorAlreadyMapped = 208 , cudaErrorNoKernelImageForDevice = 209 , cudaErrorAlreadyAcquired = 210 , cudaErrorNotMapped = 211 , cudaErrorNotMappedAsArray = 212 , cudaErrorNotMappedAsPointer = 213 , cudaErrorECCUncorrectable = 214 , cudaErrorUnsupportedLimit = 215 , cudaErrorDeviceAlreadyInUse = 216 , cudaErrorPeerAccessUnsupported = 217 , cudaErrorInvalidPtx = 218 , cudaErrorInvalidGraphicsContext = 219 , cudaErrorNvlinkUncorrectable = 220 , cudaErrorJitCompilerNotFound = 221 , cudaErrorUnsupportedPtxVersion = 222 , cudaErrorJitCompilationDisabled = 223 , cudaErrorUnsupportedExecAffinity = 224 , cudaErrorUnsupportedDevSideSync = 225 , cudaErrorInvalidSource = 300 , cudaErrorFileNotFound = 301 , cudaErrorSharedObjectSymbolNotFound = 302 , cudaErrorSharedObjectInitFailed = 303 , cudaErrorOperatingSystem = 304 , cudaErrorInvalidResourceHandle = 400 , cudaErrorIllegalState = 401 , cudaErrorLossyQuery = 402 , cudaErrorSymbolNotFound = 500 , cudaErrorNotReady = 600 , cudaErrorIllegalAddress = 700 , cudaErrorLaunchOutOfResources = 701 , cudaErrorLaunchTimeout = 702 , cudaErrorLaunchIncompatibleTexturing = 703 , cudaErrorPeerAccessAlreadyEnabled = 704 , cudaErrorPeerAccessNotEnabled = 705 , cudaErrorSetOnActiveProcess = 708 , cudaErrorContextIsDestroyed = 709 , cudaErrorAssert = 710 , cudaErrorTooManyPeers = 711 , cudaErrorHostMemoryAlreadyRegistered = 712 , cudaErrorHostMemoryNotRegistered = 713 , cudaErrorHardwareStackError = 714 , cudaErrorIllegalInstruction = 715 , cudaErrorMisalignedAddress = 716 , cudaErrorInvalidAddressSpace = 717 , cudaErrorInvalidPc = 718 , cudaErrorLaunchFailure = 719 , cudaErrorCooperativeLaunchTooLarge = 720 , cudaErrorNotPermitted = 800 , cudaErrorNotSupported = 801 , cudaErrorSystemNotReady = 802 , cudaErrorSystemDriverMismatch = 803 , cudaErrorCompatNotSupportedOnDevice = 804 , cudaErrorMpsConnectionFailed = 805 , cudaErrorMpsRpcFailure = 806 , cudaErrorMpsServerNotReady = 807 , cudaErrorMpsMaxClientsReached = 808 , cudaErrorMpsMaxConnectionsReached = 809 , cudaErrorMpsClientTerminated = 810 , cudaErrorCdpNotSupported = 811 , cudaErrorCdpVersionMismatch = 812 , cudaErrorStreamCaptureUnsupported = 900 , cudaErrorStreamCaptureInvalidated = 901 , cudaErrorStreamCaptureMerge = 902 , cudaErrorStreamCaptureUnmatched = 903 , cudaErrorStreamCaptureUnjoined = 904 , cudaErrorStreamCaptureIsolation = 905 , cudaErrorStreamCaptureImplicit = 906 , cudaErrorCapturedEvent = 907 , cudaErrorStreamCaptureWrongThread = 908 , cudaErrorTimeout = 909 , cudaErrorGraphExecUpdateFailure = 910 , cudaErrorExternalDevice = 911 , cudaErrorInvalidClusterSize = 912 , cudaErrorUnknown = 999 , cudaErrorApiFailureBase = 10000 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaError { cudaSuccess = 0 , cudaErrorInvalidValue = 1 , cudaErrorMemoryAllocation = 2 , cudaErrorInitializationError = 3 , cudaErrorCudartUnloading = 4 , cudaErrorProfilerDisabled = 5 , cudaErrorProfilerNotInitialized = 6 , cudaErrorProfilerAlreadyStarted = 7 , cudaErrorProfilerAlreadyStopped = 8 , cudaErrorInvalidConfiguration = 9 , cudaErrorInvalidPitchValue = 12 , cudaErrorInvalidSymbol = 13 , cudaErrorInvalidHostPointer = 16 , cudaErrorInvalidDevicePointer = 17 , cudaErrorInvalidTexture = 18 , cudaErrorInvalidTextureBinding = 19 , cudaErrorInvalidChannelDescriptor = 20 , cudaErrorInvalidMemcpyDirection = 21 , cudaErrorAddressOfConstant = 22 , cudaErrorTextureFetchFailed = 23 , cudaErrorTextureNotBound = 24 , cudaErrorSynchronizationError = 25 , cudaErrorInvalidFilterSetting = 26 , cudaErrorInvalidNormSetting = 27 , cudaErrorMixedDeviceExecution = 28 , cudaErrorNotYetImplemented = 31 , cudaErrorMemoryValueTooLarge = 32 , cudaErrorStubLibrary = 34 , cudaErrorInsufficientDriver = 35 , cudaErrorCallRequiresNewerDriver = 36 , cudaErrorInvalidSurface = 37 , cudaErrorDuplicateVariableName = 43 , cudaErrorDuplicateTextureName = 44 , cudaErrorDuplicateSurfaceName = 45 , cudaErrorDevicesUnavailable = 46 , cudaErrorIncompatibleDriverContext = 49 , cudaErrorMissingConfiguration = 52 , cudaErrorPriorLaunchFailure = 53 , cudaErrorLaunchMaxDepthExceeded = 65 , cudaErrorLaunchFileScopedTex = 66 , cudaErrorLaunchFileScopedSurf = 67 , cudaErrorSyncDepthExceeded = 68 , cudaErrorLaunchPendingCountExceeded = 69 , cudaErrorInvalidDeviceFunction = 98 , cudaErrorNoDevice = 100 , cudaErrorInvalidDevice = 101 , cudaErrorDeviceNotLicensed = 102 , cudaErrorSoftwareValidityNotEstablished = 103 , cudaErrorStartupFailure = 127 , cudaErrorInvalidKernelImage = 200 , cudaErrorDeviceUninitialized = 201 , cudaErrorMapBufferObjectFailed = 205 , cudaErrorUnmapBufferObjectFailed = 206 , cudaErrorArrayIsMapped = 207 , cudaErrorAlreadyMapped = 208 , cudaErrorNoKernelImageForDevice = 209 , cudaErrorAlreadyAcquired = 210 , cudaErrorNotMapped = 211 , cudaErrorNotMappedAsArray = 212 , cudaErrorNotMappedAsPointer = 213 , cudaErrorECCUncorrectable = 214 , cudaErrorUnsupportedLimit = 215 , cudaErrorDeviceAlreadyInUse = 216 , cudaErrorPeerAccessUnsupported = 217 , cudaErrorInvalidPtx = 218 , cudaErrorInvalidGraphicsContext = 219 , cudaErrorNvlinkUncorrectable = 220 , cudaErrorJitCompilerNotFound = 221 , cudaErrorUnsupportedPtxVersion = 222 , cudaErrorJitCompilationDisabled = 223 , cudaErrorUnsupportedExecAffinity = 224 , cudaErrorUnsupportedDevSideSync = 225 , cudaErrorInvalidSource = 300 , cudaErrorFileNotFound = 301 , cudaErrorSharedObjectSymbolNotFound = 302 , cudaErrorSharedObjectInitFailed = 303 , cudaErrorOperatingSystem = 304 , cudaErrorInvalidResourceHandle = 400 , cudaErrorIllegalState = 401 , cudaErrorLossyQuery = 402 , cudaErrorSymbolNotFound = 500 , cudaErrorNotReady = 600 , cudaErrorIllegalAddress = 700 , cudaErrorLaunchOutOfResources = 701 , cudaErrorLaunchTimeout = 702 , cudaErrorLaunchIncompatibleTexturing = 703 , cudaErrorPeerAccessAlreadyEnabled = 704 , cudaErrorPeerAccessNotEnabled = 705 , cudaErrorSetOnActiveProcess = 708 , cudaErrorContextIsDestroyed = 709 , cudaErrorAssert = 710 , cudaErrorTooManyPeers = 711 , cudaErrorHostMemoryAlreadyRegistered = 712 , cudaErrorHostMemoryNotRegistered = 713 , cudaErrorHardwareStackError = 714 , cudaErrorIllegalInstruction = 715 , cudaErrorMisalignedAddress = 716 , cudaErrorInvalidAddressSpace = 717 , cudaErrorInvalidPc = 718 , cudaErrorLaunchFailure = 719 , cudaErrorCooperativeLaunchTooLarge = 720 , cudaErrorNotPermitted = 800 , cudaErrorNotSupported = 801 , cudaErrorSystemNotReady = 802 , cudaErrorSystemDriverMismatch = 803 , cudaErrorCompatNotSupportedOnDevice = 804 , cudaErrorMpsConnectionFailed = 805 , cudaErrorMpsRpcFailure = 806 , cudaErrorMpsServerNotReady = 807 , cudaErrorMpsMaxClientsReached = 808 , cudaErrorMpsMaxConnectionsReached = 809 , cudaErrorMpsClientTerminated = 810 , cudaErrorCdpNotSupported = 811 , cudaErrorCdpVersionMismatch = 812 , cudaErrorStreamCaptureUnsupported = 900 , cudaErrorStreamCaptureInvalidated = 901 , cudaErrorStreamCaptureMerge = 902 , cudaErrorStreamCaptureUnmatched = 903 , cudaErrorStreamCaptureUnjoined = 904 , cudaErrorStreamCaptureIsolation = 905 , cudaErrorStreamCaptureImplicit = 906 , cudaErrorCapturedEvent = 907 , cudaErrorStreamCaptureWrongThread = 908 , cudaErrorTimeout = 909 , cudaErrorGraphExecUpdateFailure = 910 , cudaErrorExternalDevice = 911 , cudaErrorInvalidClusterSize = 912 , cudaErrorFunctionNotLoaded = 913 , cudaErrorInvalidResourceType = 914 , cudaErrorInvalidResourceConfiguration = 915 , cudaErrorUnknown = 999 , cudaErrorApiFailureBase = 10000 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaExternalMemoryHandleType { cudaExternalMemoryHandleTypeOpaqueFd = 1 , cudaExternalMemoryHandleTypeOpaqueWin32 = 2 , cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3 , cudaExternalMemoryHandleTypeD3D12Heap = 4 , cudaExternalMemoryHandleTypeD3D12Resource = 5 , cudaExternalMemoryHandleTypeD3D11Resource = 6 , cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7 , cudaExternalMemoryHandleTypeNvSciBuf = 8 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaExternalSemaphoreHandleType { cudaExternalSemaphoreHandleTypeOpaqueFd = 1 , cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2 , cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3 , cudaExternalSemaphoreHandleTypeD3D12Fence = 4 , cudaExternalSemaphoreHandleTypeD3D11Fence = 5 , cudaExternalSemaphoreHandleTypeNvSciSync = 6 , cudaExternalSemaphoreHandleTypeKeyedMutex = 7 , cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8 , cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9 , cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaFlushGPUDirectRDMAWritesOptions { cudaFlushGPUDirectRDMAWritesOptionHost = 1 , cudaFlushGPUDirectRDMAWritesOptionMemOps = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaFlushGPUDirectRDMAWritesScope { cudaFlushGPUDirectRDMAWritesToOwner = 100 , cudaFlushGPUDirectRDMAWritesToAllDevices = 200 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaFlushGPUDirectRDMAWritesTarget { cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaFuncAttribute { cudaFuncAttributeMaxDynamicSharedMemorySize = 8 , cudaFuncAttributePreferredSharedMemoryCarveout = 9 , cudaFuncAttributeMax = 10 , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaFuncAttribute { cudaFuncAttributeMaxDynamicSharedMemorySize = 8 , cudaFuncAttributePreferredSharedMemoryCarveout = 9 , cudaFuncAttributeClusterDimMustBeSet = 10 , cudaFuncAttributeRequiredClusterWidth = 11 , cudaFuncAttributeRequiredClusterHeight = 12 , cudaFuncAttributeRequiredClusterDepth = 13 , cudaFuncAttributeNonPortableClusterSizeAllowed = 14 , cudaFuncAttributeClusterSchedulingPolicyPreference = 15 , cudaFuncAttributeMax = 16 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaFuncCache { cudaFuncCachePreferNone = 0 , cudaFuncCachePreferShared = 1 , cudaFuncCachePreferL1 = 2 , cudaFuncCachePreferEqual = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGPUDirectRDMAWritesOrdering { cudaGPUDirectRDMAWritesOrderingNone = 0 , cudaGPUDirectRDMAWritesOrderingOwner = 100 , cudaGPUDirectRDMAWritesOrderingAllDevices = 200 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGetDriverEntryPointFlags { cudaEnableDefault = 0 , cudaEnableLegacyStream = 1 , cudaEnablePerThreadDefaultStream = 2 , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphConditionalHandleFlags { cudaGraphCondAssignDefault = 1 , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphConditionalNodeType { cudaGraphCondTypeIf = 0 , cudaGraphCondTypeWhile = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphDebugDotFlags { cudaGraphDebugDotFlagsVerbose = 1 , cudaGraphDebugDotFlagsKernelNodeParams = 4 , cudaGraphDebugDotFlagsMemcpyNodeParams = 8 , cudaGraphDebugDotFlagsMemsetNodeParams = 16 , cudaGraphDebugDotFlagsHostNodeParams = 32 , cudaGraphDebugDotFlagsEventNodeParams = 64 , cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128 , cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256 , cudaGraphDebugDotFlagsKernelNodeAttributes = 512 , cudaGraphDebugDotFlagsHandles = 1024 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphDebugDotFlags { cudaGraphDebugDotFlagsVerbose = 1 , cudaGraphDebugDotFlagsKernelNodeParams = 4 , cudaGraphDebugDotFlagsMemcpyNodeParams = 8 , cudaGraphDebugDotFlagsMemsetNodeParams = 16 , cudaGraphDebugDotFlagsHostNodeParams = 32 , cudaGraphDebugDotFlagsEventNodeParams = 64 , cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128 , cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256 , cudaGraphDebugDotFlagsKernelNodeAttributes = 512 , cudaGraphDebugDotFlagsHandles = 1024 , cudaGraphDebugDotFlagsConditionalNodeParams = 32768 , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphDependencyType_enum { cudaGraphDependencyTypeDefault = 0 , cudaGraphDependencyTypeProgrammatic = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphExecUpdateResult { cudaGraphExecUpdateSuccess = 0 , cudaGraphExecUpdateError = 1 , cudaGraphExecUpdateErrorTopologyChanged = 2 , cudaGraphExecUpdateErrorNodeTypeChanged = 3 , cudaGraphExecUpdateErrorFunctionChanged = 4 , cudaGraphExecUpdateErrorParametersChanged = 5 , cudaGraphExecUpdateErrorNotSupported = 6 , cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7 , }
#[cfg(any(feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphExecUpdateResult { cudaGraphExecUpdateSuccess = 0 , cudaGraphExecUpdateError = 1 , cudaGraphExecUpdateErrorTopologyChanged = 2 , cudaGraphExecUpdateErrorNodeTypeChanged = 3 , cudaGraphExecUpdateErrorFunctionChanged = 4 , cudaGraphExecUpdateErrorParametersChanged = 5 , cudaGraphExecUpdateErrorNotSupported = 6 , cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7 , cudaGraphExecUpdateErrorAttributesChanged = 8 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphInstantiateFlags { cudaGraphInstantiateFlagAutoFreeOnLaunch = 1 , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphInstantiateFlags { cudaGraphInstantiateFlagAutoFreeOnLaunch = 1 , cudaGraphInstantiateFlagUseNodePriority = 8 , }
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphInstantiateFlags { cudaGraphInstantiateFlagAutoFreeOnLaunch = 1 , cudaGraphInstantiateFlagUpload = 2 , cudaGraphInstantiateFlagDeviceLaunch = 4 , cudaGraphInstantiateFlagUseNodePriority = 8 , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphInstantiateResult { cudaGraphInstantiateSuccess = 0 , cudaGraphInstantiateError = 1 , cudaGraphInstantiateInvalidStructure = 2 , cudaGraphInstantiateNodeOperationNotSupported = 3 , cudaGraphInstantiateMultipleDevicesNotSupported = 4 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphKernelNodeField { cudaGraphKernelNodeFieldInvalid = 0 , cudaGraphKernelNodeFieldGridDim = 1 , cudaGraphKernelNodeFieldParam = 2 , cudaGraphKernelNodeFieldEnabled = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphMemAttributeType { cudaGraphMemAttrUsedMemCurrent = 1 , cudaGraphMemAttrUsedMemHigh = 2 , cudaGraphMemAttrReservedMemCurrent = 3 , cudaGraphMemAttrReservedMemHigh = 4 , }
#[cfg(any(feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphMemAttributeType { cudaGraphMemAttrUsedMemCurrent = 0 , cudaGraphMemAttrUsedMemHigh = 1 , cudaGraphMemAttrReservedMemCurrent = 2 , cudaGraphMemAttrReservedMemHigh = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphNodeType { cudaGraphNodeTypeKernel = 0 , cudaGraphNodeTypeMemcpy = 1 , cudaGraphNodeTypeMemset = 2 , cudaGraphNodeTypeHost = 3 , cudaGraphNodeTypeGraph = 4 , cudaGraphNodeTypeEmpty = 5 , cudaGraphNodeTypeWaitEvent = 6 , cudaGraphNodeTypeEventRecord = 7 , cudaGraphNodeTypeExtSemaphoreSignal = 8 , cudaGraphNodeTypeExtSemaphoreWait = 9 , cudaGraphNodeTypeMemAlloc = 10 , cudaGraphNodeTypeMemFree = 11 , cudaGraphNodeTypeCount = 12 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphNodeType { cudaGraphNodeTypeKernel = 0 , cudaGraphNodeTypeMemcpy = 1 , cudaGraphNodeTypeMemset = 2 , cudaGraphNodeTypeHost = 3 , cudaGraphNodeTypeGraph = 4 , cudaGraphNodeTypeEmpty = 5 , cudaGraphNodeTypeWaitEvent = 6 , cudaGraphNodeTypeEventRecord = 7 , cudaGraphNodeTypeExtSemaphoreSignal = 8 , cudaGraphNodeTypeExtSemaphoreWait = 9 , cudaGraphNodeTypeMemAlloc = 10 , cudaGraphNodeTypeMemFree = 11 , cudaGraphNodeTypeConditional = 13 , cudaGraphNodeTypeCount = 14 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphicsCubeFace { cudaGraphicsCubeFacePositiveX = 0 , cudaGraphicsCubeFaceNegativeX = 1 , cudaGraphicsCubeFacePositiveY = 2 , cudaGraphicsCubeFaceNegativeY = 3 , cudaGraphicsCubeFacePositiveZ = 4 , cudaGraphicsCubeFaceNegativeZ = 5 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphicsMapFlags { cudaGraphicsMapFlagsNone = 0 , cudaGraphicsMapFlagsReadOnly = 1 , cudaGraphicsMapFlagsWriteDiscard = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaGraphicsRegisterFlags { cudaGraphicsRegisterFlagsNone = 0 , cudaGraphicsRegisterFlagsReadOnly = 1 , cudaGraphicsRegisterFlagsWriteDiscard = 2 , cudaGraphicsRegisterFlagsSurfaceLoadStore = 4 , cudaGraphicsRegisterFlagsTextureGather = 8 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaJitOption { cudaJitMaxRegisters = 0 , cudaJitThreadsPerBlock = 1 , cudaJitWallTime = 2 , cudaJitInfoLogBuffer = 3 , cudaJitInfoLogBufferSizeBytes = 4 , cudaJitErrorLogBuffer = 5 , cudaJitErrorLogBufferSizeBytes = 6 , cudaJitOptimizationLevel = 7 , cudaJitFallbackStrategy = 10 , cudaJitGenerateDebugInfo = 11 , cudaJitLogVerbose = 12 , cudaJitGenerateLineInfo = 13 , cudaJitCacheMode = 14 , cudaJitPositionIndependentCode = 30 , cudaJitMinCtaPerSm = 31 , cudaJitMaxThreadsPerBlock = 32 , cudaJitOverrideDirectiveValues = 33 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaJit_CacheMode { cudaJitCacheOptionNone = 0 , cudaJitCacheOptionCG = 1 , cudaJitCacheOptionCA = 2 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaJit_Fallback { cudaPreferPtx = 0 , cudaPreferBinary = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaKernelNodeAttrID { cudaKernelNodeAttributeAccessPolicyWindow = 1 , cudaKernelNodeAttributeCooperative = 2 , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLaunchAttributeID { cudaLaunchAttributeIgnore = 0 , cudaLaunchAttributeAccessPolicyWindow = 1 , cudaLaunchAttributeCooperative = 2 , cudaLaunchAttributeSynchronizationPolicy = 3 , cudaLaunchAttributeClusterDimension = 4 , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 , cudaLaunchAttributeProgrammaticStreamSerialization = 6 , cudaLaunchAttributeProgrammaticEvent = 7 , cudaLaunchAttributePriority = 8 , }
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLaunchAttributeID { cudaLaunchAttributeIgnore = 0 , cudaLaunchAttributeAccessPolicyWindow = 1 , cudaLaunchAttributeCooperative = 2 , cudaLaunchAttributeSynchronizationPolicy = 3 , cudaLaunchAttributeClusterDimension = 4 , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 , cudaLaunchAttributeProgrammaticStreamSerialization = 6 , cudaLaunchAttributeProgrammaticEvent = 7 , cudaLaunchAttributePriority = 8 , cudaLaunchAttributeMemSyncDomainMap = 9 , cudaLaunchAttributeMemSyncDomain = 10 , }
#[cfg(any(feature = "cuda-12040"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLaunchAttributeID { cudaLaunchAttributeIgnore = 0 , cudaLaunchAttributeAccessPolicyWindow = 1 , cudaLaunchAttributeCooperative = 2 , cudaLaunchAttributeSynchronizationPolicy = 3 , cudaLaunchAttributeClusterDimension = 4 , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 , cudaLaunchAttributeProgrammaticStreamSerialization = 6 , cudaLaunchAttributeProgrammaticEvent = 7 , cudaLaunchAttributePriority = 8 , cudaLaunchAttributeMemSyncDomainMap = 9 , cudaLaunchAttributeMemSyncDomain = 10 , cudaLaunchAttributeLaunchCompletionEvent = 12 , }
#[cfg(any(feature = "cuda-12050"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLaunchAttributeID { cudaLaunchAttributeIgnore = 0 , cudaLaunchAttributeAccessPolicyWindow = 1 , cudaLaunchAttributeCooperative = 2 , cudaLaunchAttributeSynchronizationPolicy = 3 , cudaLaunchAttributeClusterDimension = 4 , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 , cudaLaunchAttributeProgrammaticStreamSerialization = 6 , cudaLaunchAttributeProgrammaticEvent = 7 , cudaLaunchAttributePriority = 8 , cudaLaunchAttributeMemSyncDomainMap = 9 , cudaLaunchAttributeMemSyncDomain = 10 , cudaLaunchAttributeLaunchCompletionEvent = 12 , cudaLaunchAttributeDeviceUpdatableKernelNode = 13 , }
#[cfg(any(feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLaunchAttributeID { cudaLaunchAttributeIgnore = 0 , cudaLaunchAttributeAccessPolicyWindow = 1 , cudaLaunchAttributeCooperative = 2 , cudaLaunchAttributeSynchronizationPolicy = 3 , cudaLaunchAttributeClusterDimension = 4 , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 , cudaLaunchAttributeProgrammaticStreamSerialization = 6 , cudaLaunchAttributeProgrammaticEvent = 7 , cudaLaunchAttributePriority = 8 , cudaLaunchAttributeMemSyncDomainMap = 9 , cudaLaunchAttributeMemSyncDomain = 10 , cudaLaunchAttributeLaunchCompletionEvent = 12 , cudaLaunchAttributeDeviceUpdatableKernelNode = 13 , cudaLaunchAttributePreferredSharedMemoryCarveout = 14 , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLaunchMemSyncDomain { cudaLaunchMemSyncDomainDefault = 0 , cudaLaunchMemSyncDomainRemote = 1 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLibraryOption { cudaLibraryHostUniversalFunctionAndDataTable = 0 , cudaLibraryBinaryIsPreserved = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaLimit { cudaLimitStackSize = 0 , cudaLimitPrintfFifoSize = 1 , cudaLimitMallocHeapSize = 2 , cudaLimitDevRuntimeSyncDepth = 3 , cudaLimitDevRuntimePendingLaunchCount = 4 , cudaLimitMaxL2FetchGranularity = 5 , cudaLimitPersistingL2CacheSize = 6 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemAccessFlags { cudaMemAccessFlagsProtNone = 0 , cudaMemAccessFlagsProtRead = 1 , cudaMemAccessFlagsProtReadWrite = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemAllocationHandleType { cudaMemHandleTypeNone = 0 , cudaMemHandleTypePosixFileDescriptor = 1 , cudaMemHandleTypeWin32 = 2 , cudaMemHandleTypeWin32Kmt = 4 , }
#[cfg(any(feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemAllocationHandleType { cudaMemHandleTypeNone = 0 , cudaMemHandleTypePosixFileDescriptor = 1 , cudaMemHandleTypeWin32 = 2 , cudaMemHandleTypeWin32Kmt = 4 , cudaMemHandleTypeFabric = 8 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemAllocationType { cudaMemAllocationTypeInvalid = 0 , cudaMemAllocationTypePinned = 1 , cudaMemAllocationTypeMax = 2147483647 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemLocationType { cudaMemLocationTypeInvalid = 0 , cudaMemLocationTypeDevice = 1 , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemLocationType { cudaMemLocationTypeInvalid = 0 , cudaMemLocationTypeDevice = 1 , cudaMemLocationTypeHost = 2 , cudaMemLocationTypeHostNuma = 3 , cudaMemLocationTypeHostNumaCurrent = 4 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemPoolAttr { cudaMemPoolReuseFollowEventDependencies = 1 , cudaMemPoolReuseAllowOpportunistic = 2 , cudaMemPoolReuseAllowInternalDependencies = 3 , cudaMemPoolAttrReleaseThreshold = 4 , cudaMemPoolAttrReservedMemCurrent = 5 , cudaMemPoolAttrReservedMemHigh = 6 , cudaMemPoolAttrUsedMemCurrent = 7 , cudaMemPoolAttrUsedMemHigh = 8 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemRangeAttribute { cudaMemRangeAttributeReadMostly = 1 , cudaMemRangeAttributePreferredLocation = 2 , cudaMemRangeAttributeAccessedBy = 3 , cudaMemRangeAttributeLastPrefetchLocation = 4 , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemRangeAttribute { cudaMemRangeAttributeReadMostly = 1 , cudaMemRangeAttributePreferredLocation = 2 , cudaMemRangeAttributeAccessedBy = 3 , cudaMemRangeAttributeLastPrefetchLocation = 4 , cudaMemRangeAttributePreferredLocationType = 5 , cudaMemRangeAttributePreferredLocationId = 6 , cudaMemRangeAttributeLastPrefetchLocationType = 7 , cudaMemRangeAttributeLastPrefetchLocationId = 8 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemcpy3DOperandType { cudaMemcpyOperandTypePointer = 1 , cudaMemcpyOperandTypeArray = 2 , cudaMemcpyOperandTypeMax = 2147483647 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemcpyFlags { cudaMemcpyFlagDefault = 0 , cudaMemcpyFlagPreferOverlapWithCompute = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemcpyKind { cudaMemcpyHostToHost = 0 , cudaMemcpyHostToDevice = 1 , cudaMemcpyDeviceToHost = 2 , cudaMemcpyDeviceToDevice = 3 , cudaMemcpyDefault = 4 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemcpySrcAccessOrder { cudaMemcpySrcAccessOrderInvalid = 0 , cudaMemcpySrcAccessOrderStream = 1 , cudaMemcpySrcAccessOrderDuringApiCall = 2 , cudaMemcpySrcAccessOrderAny = 3 , cudaMemcpySrcAccessOrderMax = 2147483647 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemoryAdvise { cudaMemAdviseSetReadMostly = 1 , cudaMemAdviseUnsetReadMostly = 2 , cudaMemAdviseSetPreferredLocation = 3 , cudaMemAdviseUnsetPreferredLocation = 4 , cudaMemAdviseSetAccessedBy = 5 , cudaMemAdviseUnsetAccessedBy = 6 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaMemoryType { cudaMemoryTypeUnregistered = 0 , cudaMemoryTypeHost = 1 , cudaMemoryTypeDevice = 2 , cudaMemoryTypeManaged = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaOutputMode { cudaKeyValuePair = 0 , cudaCSV = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaResourceType { cudaResourceTypeArray = 0 , cudaResourceTypeMipmappedArray = 1 , cudaResourceTypeLinear = 2 , cudaResourceTypePitch2D = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaResourceViewFormat { cudaResViewFormatNone = 0 , cudaResViewFormatUnsignedChar1 = 1 , cudaResViewFormatUnsignedChar2 = 2 , cudaResViewFormatUnsignedChar4 = 3 , cudaResViewFormatSignedChar1 = 4 , cudaResViewFormatSignedChar2 = 5 , cudaResViewFormatSignedChar4 = 6 , cudaResViewFormatUnsignedShort1 = 7 , cudaResViewFormatUnsignedShort2 = 8 , cudaResViewFormatUnsignedShort4 = 9 , cudaResViewFormatSignedShort1 = 10 , cudaResViewFormatSignedShort2 = 11 , cudaResViewFormatSignedShort4 = 12 , cudaResViewFormatUnsignedInt1 = 13 , cudaResViewFormatUnsignedInt2 = 14 , cudaResViewFormatUnsignedInt4 = 15 , cudaResViewFormatSignedInt1 = 16 , cudaResViewFormatSignedInt2 = 17 , cudaResViewFormatSignedInt4 = 18 , cudaResViewFormatHalf1 = 19 , cudaResViewFormatHalf2 = 20 , cudaResViewFormatHalf4 = 21 , cudaResViewFormatFloat1 = 22 , cudaResViewFormatFloat2 = 23 , cudaResViewFormatFloat4 = 24 , cudaResViewFormatUnsignedBlockCompressed1 = 25 , cudaResViewFormatUnsignedBlockCompressed2 = 26 , cudaResViewFormatUnsignedBlockCompressed3 = 27 , cudaResViewFormatUnsignedBlockCompressed4 = 28 , cudaResViewFormatSignedBlockCompressed4 = 29 , cudaResViewFormatUnsignedBlockCompressed5 = 30 , cudaResViewFormatSignedBlockCompressed5 = 31 , cudaResViewFormatUnsignedBlockCompressed6H = 32 , cudaResViewFormatSignedBlockCompressed6H = 33 , cudaResViewFormatUnsignedBlockCompressed7 = 34 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaRoundMode { cudaRoundNearest = 0 , cudaRoundZero = 1 , cudaRoundPosInf = 2 , cudaRoundMinInf = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (i32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaSharedCarveout { cudaSharedmemCarveoutDefault = - 1 , cudaSharedmemCarveoutMaxShared = 100 , cudaSharedmemCarveoutMaxL1 = 0 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaSharedMemConfig { cudaSharedMemBankSizeDefault = 0 , cudaSharedMemBankSizeFourByte = 1 , cudaSharedMemBankSizeEightByte = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaStreamAttrID { cudaStreamAttributeAccessPolicyWindow = 1 , cudaStreamAttributeSynchronizationPolicy = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaStreamCaptureMode { cudaStreamCaptureModeGlobal = 0 , cudaStreamCaptureModeThreadLocal = 1 , cudaStreamCaptureModeRelaxed = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaStreamCaptureStatus { cudaStreamCaptureStatusNone = 0 , cudaStreamCaptureStatusActive = 1 , cudaStreamCaptureStatusInvalidated = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaStreamUpdateCaptureDependenciesFlags { cudaStreamAddCaptureDependencies = 0 , cudaStreamSetCaptureDependencies = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaSurfaceBoundaryMode { cudaBoundaryModeZero = 0 , cudaBoundaryModeClamp = 1 , cudaBoundaryModeTrap = 2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaSurfaceFormatMode { cudaFormatModeForced = 0 , cudaFormatModeAuto = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaSynchronizationPolicy { cudaSyncPolicyAuto = 1 , cudaSyncPolicySpin = 2 , cudaSyncPolicyYield = 3 , cudaSyncPolicyBlockingSync = 4 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaTextureAddressMode { cudaAddressModeWrap = 0 , cudaAddressModeClamp = 1 , cudaAddressModeMirror = 2 , cudaAddressModeBorder = 3 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaTextureFilterMode { cudaFilterModePoint = 0 , cudaFilterModeLinear = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaTextureReadMode { cudaReadModeElementType = 0 , cudaReadModeNormalizedFloat = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaUserObjectFlags { cudaUserObjectNoDestructorSync = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum cudaUserObjectRetainFlags { cudaGraphUserObjectMove = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaAccessPolicyWindow { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaAsyncNotificationInfo { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaAsyncNotificationInfo__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaChannelFormatDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaChildGraphNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaConditionalNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl cudaDataType_t { pub const CUDA_R_8F_UE4M3 : cudaDataType_t = cudaDataType_t :: CUDA_R_8F_E4M3 ; }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl cudaDeviceAttr { pub const cudaDevAttrMaxTimelineSemaphoreInteropSupported : cudaDeviceAttr = cudaDeviceAttr :: cudaDevAttrTimelineSemaphoreInteropSupported ; }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaDeviceProp { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaEventRecordNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaEventWaitNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalMemoryHandleDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalMemoryMipmappedArrayDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreHandleDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalNodeParamsV2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalParams_v1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitNodeParamsV2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitParams_v1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphExecUpdateResultInfo_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphInstantiateParams_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphKernelNodeUpdate { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphKernelNodeUpdate__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaGraphNodeParams__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaHostNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaHostNodeParamsV2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaIpcEventHandle_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaIpcMemHandle_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
impl Default for cudaKernelNodeAttrValue { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaKernelNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaKernelNodeParamsV2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaLaunchAttributeValue { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaLaunchAttributeValue__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060"))]
impl Default for cudaLaunchAttributeValue__bindgen_ty_3 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaLaunchAttributeValue__bindgen_ty_4 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaLaunchAttributeValue__bindgen_ty_5 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaLaunchAttribute_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaLaunchConfig_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaLaunchParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemAccessDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemAllocNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemAllocNodeParamsV2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemFabricHandle_st { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemFreeNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemLocation { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemPoolProps { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemPoolPtrExportData { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaMemcpy3DBatchOp { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaMemcpy3DOperand { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaMemcpy3DOperand__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemcpy3DParms { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemcpy3DPeerParms { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudaMemcpyAttributes { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemcpyNodeParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemsetParams { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaMemsetParamsV2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaPitchedPtr { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaPointerAttributes { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceDesc__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaResourceViewDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
impl Default for cudaStreamAttrValue { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for cudaTextureDesc { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11080"))]
impl Default for cudaTextureDesc_v2 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-12080"))]
impl Default for cudalibraryHostUniversalFunctionAndDataTable { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
impl Default for surfaceReference { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
impl Default for textureReference { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUevent_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUexternalMemory_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUexternalSemaphore_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUfunc_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUgraphDeviceUpdatableNode_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUgraphExec_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUgraphNode_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUgraph_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUkern_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUlib_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUmemPoolHandle_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUstream_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUuserObject_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct CUuuid_st { pub bytes : [:: core :: ffi :: c_char ; 16usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct cudaAccessPolicyWindow { pub base_ptr : * mut :: core :: ffi :: c_void , pub num_bytes : usize , pub hitRatio : f32 , pub hitProp : cudaAccessProperty , pub missProp : cudaAccessProperty , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cudaArray { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaArrayMemoryRequirements { pub size : usize , pub alignment : usize , pub reserved : [:: core :: ffi :: c_uint ; 4usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaArraySparseProperties { pub tileExtent : cudaArraySparseProperties__bindgen_ty_1 , pub miptailFirstLevel : :: core :: ffi :: c_uint , pub miptailSize : :: core :: ffi :: c_ulonglong , pub flags : :: core :: ffi :: c_uint , pub reserved : [:: core :: ffi :: c_uint ; 4usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaArraySparseProperties__bindgen_ty_1 { pub width : :: core :: ffi :: c_uint , pub height : :: core :: ffi :: c_uint , pub depth : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cudaAsyncCallbackEntry { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaAsyncNotificationInfo { pub type_ : cudaAsyncNotificationType , pub info : cudaAsyncNotificationInfo__bindgen_ty_1 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1 { pub bytesOverBudget : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaChannelFormatDesc { pub x : :: core :: ffi :: c_int , pub y : :: core :: ffi :: c_int , pub z : :: core :: ffi :: c_int , pub w : :: core :: ffi :: c_int , pub f : cudaChannelFormatKind , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaChildGraphNodeParams { pub graph : cudaGraph_t , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaConditionalNodeParams { pub handle : cudaGraphConditionalHandle , pub type_ : cudaGraphConditionalNodeType , pub size : :: core :: ffi :: c_uint , pub phGraph_out : * mut cudaGraph_t , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaDeviceProp { pub name : [:: core :: ffi :: c_char ; 256usize] , pub uuid : cudaUUID_t , pub luid : [:: core :: ffi :: c_char ; 8usize] , pub luidDeviceNodeMask : :: core :: ffi :: c_uint , pub totalGlobalMem : usize , pub sharedMemPerBlock : usize , pub regsPerBlock : :: core :: ffi :: c_int , pub warpSize : :: core :: ffi :: c_int , pub memPitch : usize , pub maxThreadsPerBlock : :: core :: ffi :: c_int , pub maxThreadsDim : [:: core :: ffi :: c_int ; 3usize] , pub maxGridSize : [:: core :: ffi :: c_int ; 3usize] , pub clockRate : :: core :: ffi :: c_int , pub totalConstMem : usize , pub major : :: core :: ffi :: c_int , pub minor : :: core :: ffi :: c_int , pub textureAlignment : usize , pub texturePitchAlignment : usize , pub deviceOverlap : :: core :: ffi :: c_int , pub multiProcessorCount : :: core :: ffi :: c_int , pub kernelExecTimeoutEnabled : :: core :: ffi :: c_int , pub integrated : :: core :: ffi :: c_int , pub canMapHostMemory : :: core :: ffi :: c_int , pub computeMode : :: core :: ffi :: c_int , pub maxTexture1D : :: core :: ffi :: c_int , pub maxTexture1DMipmap : :: core :: ffi :: c_int , pub maxTexture1DLinear : :: core :: ffi :: c_int , pub maxTexture2D : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DMipmap : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLinear : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture2DGather : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture3D : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture3DAlt : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemap : :: core :: ffi :: c_int , pub maxTexture1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface1D : :: core :: ffi :: c_int , pub maxSurface2D : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface3D : [:: core :: ffi :: c_int ; 3usize] , pub maxSurface1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxSurfaceCubemap : :: core :: ffi :: c_int , pub maxSurfaceCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub surfaceAlignment : usize , pub concurrentKernels : :: core :: ffi :: c_int , pub ECCEnabled : :: core :: ffi :: c_int , pub pciBusID : :: core :: ffi :: c_int , pub pciDeviceID : :: core :: ffi :: c_int , pub pciDomainID : :: core :: ffi :: c_int , pub tccDriver : :: core :: ffi :: c_int , pub asyncEngineCount : :: core :: ffi :: c_int , pub unifiedAddressing : :: core :: ffi :: c_int , pub memoryClockRate : :: core :: ffi :: c_int , pub memoryBusWidth : :: core :: ffi :: c_int , pub l2CacheSize : :: core :: ffi :: c_int , pub persistingL2CacheMaxSize : :: core :: ffi :: c_int , pub maxThreadsPerMultiProcessor : :: core :: ffi :: c_int , pub streamPrioritiesSupported : :: core :: ffi :: c_int , pub globalL1CacheSupported : :: core :: ffi :: c_int , pub localL1CacheSupported : :: core :: ffi :: c_int , pub sharedMemPerMultiprocessor : usize , pub regsPerMultiprocessor : :: core :: ffi :: c_int , pub managedMemory : :: core :: ffi :: c_int , pub isMultiGpuBoard : :: core :: ffi :: c_int , pub multiGpuBoardGroupID : :: core :: ffi :: c_int , pub hostNativeAtomicSupported : :: core :: ffi :: c_int , pub singleToDoublePrecisionPerfRatio : :: core :: ffi :: c_int , pub pageableMemoryAccess : :: core :: ffi :: c_int , pub concurrentManagedAccess : :: core :: ffi :: c_int , pub computePreemptionSupported : :: core :: ffi :: c_int , pub canUseHostPointerForRegisteredMem : :: core :: ffi :: c_int , pub cooperativeLaunch : :: core :: ffi :: c_int , pub cooperativeMultiDeviceLaunch : :: core :: ffi :: c_int , pub sharedMemPerBlockOptin : usize , pub pageableMemoryAccessUsesHostPageTables : :: core :: ffi :: c_int , pub directManagedMemAccessFromHost : :: core :: ffi :: c_int , pub maxBlocksPerMultiProcessor : :: core :: ffi :: c_int , pub accessPolicyMaxWindowSize : :: core :: ffi :: c_int , pub reservedSharedMemPerBlock : usize , }
#[cfg(any(feature = "cuda-12010"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaDeviceProp { pub name : [:: core :: ffi :: c_char ; 256usize] , pub uuid : cudaUUID_t , pub luid : [:: core :: ffi :: c_char ; 8usize] , pub luidDeviceNodeMask : :: core :: ffi :: c_uint , pub totalGlobalMem : usize , pub sharedMemPerBlock : usize , pub regsPerBlock : :: core :: ffi :: c_int , pub warpSize : :: core :: ffi :: c_int , pub memPitch : usize , pub maxThreadsPerBlock : :: core :: ffi :: c_int , pub maxThreadsDim : [:: core :: ffi :: c_int ; 3usize] , pub maxGridSize : [:: core :: ffi :: c_int ; 3usize] , pub clockRate : :: core :: ffi :: c_int , pub totalConstMem : usize , pub major : :: core :: ffi :: c_int , pub minor : :: core :: ffi :: c_int , pub textureAlignment : usize , pub texturePitchAlignment : usize , pub deviceOverlap : :: core :: ffi :: c_int , pub multiProcessorCount : :: core :: ffi :: c_int , pub kernelExecTimeoutEnabled : :: core :: ffi :: c_int , pub integrated : :: core :: ffi :: c_int , pub canMapHostMemory : :: core :: ffi :: c_int , pub computeMode : :: core :: ffi :: c_int , pub maxTexture1D : :: core :: ffi :: c_int , pub maxTexture1DMipmap : :: core :: ffi :: c_int , pub maxTexture1DLinear : :: core :: ffi :: c_int , pub maxTexture2D : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DMipmap : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLinear : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture2DGather : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture3D : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture3DAlt : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemap : :: core :: ffi :: c_int , pub maxTexture1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface1D : :: core :: ffi :: c_int , pub maxSurface2D : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface3D : [:: core :: ffi :: c_int ; 3usize] , pub maxSurface1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxSurfaceCubemap : :: core :: ffi :: c_int , pub maxSurfaceCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub surfaceAlignment : usize , pub concurrentKernels : :: core :: ffi :: c_int , pub ECCEnabled : :: core :: ffi :: c_int , pub pciBusID : :: core :: ffi :: c_int , pub pciDeviceID : :: core :: ffi :: c_int , pub pciDomainID : :: core :: ffi :: c_int , pub tccDriver : :: core :: ffi :: c_int , pub asyncEngineCount : :: core :: ffi :: c_int , pub unifiedAddressing : :: core :: ffi :: c_int , pub memoryClockRate : :: core :: ffi :: c_int , pub memoryBusWidth : :: core :: ffi :: c_int , pub l2CacheSize : :: core :: ffi :: c_int , pub persistingL2CacheMaxSize : :: core :: ffi :: c_int , pub maxThreadsPerMultiProcessor : :: core :: ffi :: c_int , pub streamPrioritiesSupported : :: core :: ffi :: c_int , pub globalL1CacheSupported : :: core :: ffi :: c_int , pub localL1CacheSupported : :: core :: ffi :: c_int , pub sharedMemPerMultiprocessor : usize , pub regsPerMultiprocessor : :: core :: ffi :: c_int , pub managedMemory : :: core :: ffi :: c_int , pub isMultiGpuBoard : :: core :: ffi :: c_int , pub multiGpuBoardGroupID : :: core :: ffi :: c_int , pub hostNativeAtomicSupported : :: core :: ffi :: c_int , pub singleToDoublePrecisionPerfRatio : :: core :: ffi :: c_int , pub pageableMemoryAccess : :: core :: ffi :: c_int , pub concurrentManagedAccess : :: core :: ffi :: c_int , pub computePreemptionSupported : :: core :: ffi :: c_int , pub canUseHostPointerForRegisteredMem : :: core :: ffi :: c_int , pub cooperativeLaunch : :: core :: ffi :: c_int , pub cooperativeMultiDeviceLaunch : :: core :: ffi :: c_int , pub sharedMemPerBlockOptin : usize , pub pageableMemoryAccessUsesHostPageTables : :: core :: ffi :: c_int , pub directManagedMemAccessFromHost : :: core :: ffi :: c_int , pub maxBlocksPerMultiProcessor : :: core :: ffi :: c_int , pub accessPolicyMaxWindowSize : :: core :: ffi :: c_int , pub reservedSharedMemPerBlock : usize , pub hostRegisterSupported : :: core :: ffi :: c_int , pub sparseCudaArraySupported : :: core :: ffi :: c_int , pub hostRegisterReadOnlySupported : :: core :: ffi :: c_int , pub timelineSemaphoreInteropSupported : :: core :: ffi :: c_int , pub memoryPoolsSupported : :: core :: ffi :: c_int , pub gpuDirectRDMASupported : :: core :: ffi :: c_int , pub gpuDirectRDMAFlushWritesOptions : :: core :: ffi :: c_uint , pub gpuDirectRDMAWritesOrdering : :: core :: ffi :: c_int , pub memoryPoolSupportedHandleTypes : :: core :: ffi :: c_uint , pub deferredMappingCudaArraySupported : :: core :: ffi :: c_int , pub ipcEventSupported : :: core :: ffi :: c_int , pub clusterLaunch : :: core :: ffi :: c_int , pub unifiedFunctionPointers : :: core :: ffi :: c_int , pub reserved : [:: core :: ffi :: c_int ; 63usize] , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaDeviceProp { pub name : [:: core :: ffi :: c_char ; 256usize] , pub uuid : cudaUUID_t , pub luid : [:: core :: ffi :: c_char ; 8usize] , pub luidDeviceNodeMask : :: core :: ffi :: c_uint , pub totalGlobalMem : usize , pub sharedMemPerBlock : usize , pub regsPerBlock : :: core :: ffi :: c_int , pub warpSize : :: core :: ffi :: c_int , pub memPitch : usize , pub maxThreadsPerBlock : :: core :: ffi :: c_int , pub maxThreadsDim : [:: core :: ffi :: c_int ; 3usize] , pub maxGridSize : [:: core :: ffi :: c_int ; 3usize] , pub clockRate : :: core :: ffi :: c_int , pub totalConstMem : usize , pub major : :: core :: ffi :: c_int , pub minor : :: core :: ffi :: c_int , pub textureAlignment : usize , pub texturePitchAlignment : usize , pub deviceOverlap : :: core :: ffi :: c_int , pub multiProcessorCount : :: core :: ffi :: c_int , pub kernelExecTimeoutEnabled : :: core :: ffi :: c_int , pub integrated : :: core :: ffi :: c_int , pub canMapHostMemory : :: core :: ffi :: c_int , pub computeMode : :: core :: ffi :: c_int , pub maxTexture1D : :: core :: ffi :: c_int , pub maxTexture1DMipmap : :: core :: ffi :: c_int , pub maxTexture1DLinear : :: core :: ffi :: c_int , pub maxTexture2D : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DMipmap : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLinear : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture2DGather : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture3D : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture3DAlt : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemap : :: core :: ffi :: c_int , pub maxTexture1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface1D : :: core :: ffi :: c_int , pub maxSurface2D : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface3D : [:: core :: ffi :: c_int ; 3usize] , pub maxSurface1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxSurfaceCubemap : :: core :: ffi :: c_int , pub maxSurfaceCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub surfaceAlignment : usize , pub concurrentKernels : :: core :: ffi :: c_int , pub ECCEnabled : :: core :: ffi :: c_int , pub pciBusID : :: core :: ffi :: c_int , pub pciDeviceID : :: core :: ffi :: c_int , pub pciDomainID : :: core :: ffi :: c_int , pub tccDriver : :: core :: ffi :: c_int , pub asyncEngineCount : :: core :: ffi :: c_int , pub unifiedAddressing : :: core :: ffi :: c_int , pub memoryClockRate : :: core :: ffi :: c_int , pub memoryBusWidth : :: core :: ffi :: c_int , pub l2CacheSize : :: core :: ffi :: c_int , pub persistingL2CacheMaxSize : :: core :: ffi :: c_int , pub maxThreadsPerMultiProcessor : :: core :: ffi :: c_int , pub streamPrioritiesSupported : :: core :: ffi :: c_int , pub globalL1CacheSupported : :: core :: ffi :: c_int , pub localL1CacheSupported : :: core :: ffi :: c_int , pub sharedMemPerMultiprocessor : usize , pub regsPerMultiprocessor : :: core :: ffi :: c_int , pub managedMemory : :: core :: ffi :: c_int , pub isMultiGpuBoard : :: core :: ffi :: c_int , pub multiGpuBoardGroupID : :: core :: ffi :: c_int , pub hostNativeAtomicSupported : :: core :: ffi :: c_int , pub singleToDoublePrecisionPerfRatio : :: core :: ffi :: c_int , pub pageableMemoryAccess : :: core :: ffi :: c_int , pub concurrentManagedAccess : :: core :: ffi :: c_int , pub computePreemptionSupported : :: core :: ffi :: c_int , pub canUseHostPointerForRegisteredMem : :: core :: ffi :: c_int , pub cooperativeLaunch : :: core :: ffi :: c_int , pub cooperativeMultiDeviceLaunch : :: core :: ffi :: c_int , pub sharedMemPerBlockOptin : usize , pub pageableMemoryAccessUsesHostPageTables : :: core :: ffi :: c_int , pub directManagedMemAccessFromHost : :: core :: ffi :: c_int , pub maxBlocksPerMultiProcessor : :: core :: ffi :: c_int , pub accessPolicyMaxWindowSize : :: core :: ffi :: c_int , pub reservedSharedMemPerBlock : usize , pub hostRegisterSupported : :: core :: ffi :: c_int , pub sparseCudaArraySupported : :: core :: ffi :: c_int , pub hostRegisterReadOnlySupported : :: core :: ffi :: c_int , pub timelineSemaphoreInteropSupported : :: core :: ffi :: c_int , pub memoryPoolsSupported : :: core :: ffi :: c_int , pub gpuDirectRDMASupported : :: core :: ffi :: c_int , pub gpuDirectRDMAFlushWritesOptions : :: core :: ffi :: c_uint , pub gpuDirectRDMAWritesOrdering : :: core :: ffi :: c_int , pub memoryPoolSupportedHandleTypes : :: core :: ffi :: c_uint , pub deferredMappingCudaArraySupported : :: core :: ffi :: c_int , pub ipcEventSupported : :: core :: ffi :: c_int , pub clusterLaunch : :: core :: ffi :: c_int , pub unifiedFunctionPointers : :: core :: ffi :: c_int , pub reserved2 : [:: core :: ffi :: c_int ; 2usize] , pub reserved : [:: core :: ffi :: c_int ; 61usize] , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaDeviceProp { pub name : [:: core :: ffi :: c_char ; 256usize] , pub uuid : cudaUUID_t , pub luid : [:: core :: ffi :: c_char ; 8usize] , pub luidDeviceNodeMask : :: core :: ffi :: c_uint , pub totalGlobalMem : usize , pub sharedMemPerBlock : usize , pub regsPerBlock : :: core :: ffi :: c_int , pub warpSize : :: core :: ffi :: c_int , pub memPitch : usize , pub maxThreadsPerBlock : :: core :: ffi :: c_int , pub maxThreadsDim : [:: core :: ffi :: c_int ; 3usize] , pub maxGridSize : [:: core :: ffi :: c_int ; 3usize] , pub clockRate : :: core :: ffi :: c_int , pub totalConstMem : usize , pub major : :: core :: ffi :: c_int , pub minor : :: core :: ffi :: c_int , pub textureAlignment : usize , pub texturePitchAlignment : usize , pub deviceOverlap : :: core :: ffi :: c_int , pub multiProcessorCount : :: core :: ffi :: c_int , pub kernelExecTimeoutEnabled : :: core :: ffi :: c_int , pub integrated : :: core :: ffi :: c_int , pub canMapHostMemory : :: core :: ffi :: c_int , pub computeMode : :: core :: ffi :: c_int , pub maxTexture1D : :: core :: ffi :: c_int , pub maxTexture1DMipmap : :: core :: ffi :: c_int , pub maxTexture1DLinear : :: core :: ffi :: c_int , pub maxTexture2D : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DMipmap : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLinear : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture2DGather : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture3D : [:: core :: ffi :: c_int ; 3usize] , pub maxTexture3DAlt : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemap : :: core :: ffi :: c_int , pub maxTexture1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxTexture2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxTextureCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface1D : :: core :: ffi :: c_int , pub maxSurface2D : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface3D : [:: core :: ffi :: c_int ; 3usize] , pub maxSurface1DLayered : [:: core :: ffi :: c_int ; 2usize] , pub maxSurface2DLayered : [:: core :: ffi :: c_int ; 3usize] , pub maxSurfaceCubemap : :: core :: ffi :: c_int , pub maxSurfaceCubemapLayered : [:: core :: ffi :: c_int ; 2usize] , pub surfaceAlignment : usize , pub concurrentKernels : :: core :: ffi :: c_int , pub ECCEnabled : :: core :: ffi :: c_int , pub pciBusID : :: core :: ffi :: c_int , pub pciDeviceID : :: core :: ffi :: c_int , pub pciDomainID : :: core :: ffi :: c_int , pub tccDriver : :: core :: ffi :: c_int , pub asyncEngineCount : :: core :: ffi :: c_int , pub unifiedAddressing : :: core :: ffi :: c_int , pub memoryClockRate : :: core :: ffi :: c_int , pub memoryBusWidth : :: core :: ffi :: c_int , pub l2CacheSize : :: core :: ffi :: c_int , pub persistingL2CacheMaxSize : :: core :: ffi :: c_int , pub maxThreadsPerMultiProcessor : :: core :: ffi :: c_int , pub streamPrioritiesSupported : :: core :: ffi :: c_int , pub globalL1CacheSupported : :: core :: ffi :: c_int , pub localL1CacheSupported : :: core :: ffi :: c_int , pub sharedMemPerMultiprocessor : usize , pub regsPerMultiprocessor : :: core :: ffi :: c_int , pub managedMemory : :: core :: ffi :: c_int , pub isMultiGpuBoard : :: core :: ffi :: c_int , pub multiGpuBoardGroupID : :: core :: ffi :: c_int , pub hostNativeAtomicSupported : :: core :: ffi :: c_int , pub singleToDoublePrecisionPerfRatio : :: core :: ffi :: c_int , pub pageableMemoryAccess : :: core :: ffi :: c_int , pub concurrentManagedAccess : :: core :: ffi :: c_int , pub computePreemptionSupported : :: core :: ffi :: c_int , pub canUseHostPointerForRegisteredMem : :: core :: ffi :: c_int , pub cooperativeLaunch : :: core :: ffi :: c_int , pub cooperativeMultiDeviceLaunch : :: core :: ffi :: c_int , pub sharedMemPerBlockOptin : usize , pub pageableMemoryAccessUsesHostPageTables : :: core :: ffi :: c_int , pub directManagedMemAccessFromHost : :: core :: ffi :: c_int , pub maxBlocksPerMultiProcessor : :: core :: ffi :: c_int , pub accessPolicyMaxWindowSize : :: core :: ffi :: c_int , pub reservedSharedMemPerBlock : usize , pub hostRegisterSupported : :: core :: ffi :: c_int , pub sparseCudaArraySupported : :: core :: ffi :: c_int , pub hostRegisterReadOnlySupported : :: core :: ffi :: c_int , pub timelineSemaphoreInteropSupported : :: core :: ffi :: c_int , pub memoryPoolsSupported : :: core :: ffi :: c_int , pub gpuDirectRDMASupported : :: core :: ffi :: c_int , pub gpuDirectRDMAFlushWritesOptions : :: core :: ffi :: c_uint , pub gpuDirectRDMAWritesOrdering : :: core :: ffi :: c_int , pub memoryPoolSupportedHandleTypes : :: core :: ffi :: c_uint , pub deferredMappingCudaArraySupported : :: core :: ffi :: c_int , pub ipcEventSupported : :: core :: ffi :: c_int , pub clusterLaunch : :: core :: ffi :: c_int , pub unifiedFunctionPointers : :: core :: ffi :: c_int , pub reserved2 : [:: core :: ffi :: c_int ; 2usize] , pub reserved1 : [:: core :: ffi :: c_int ; 1usize] , pub reserved : [:: core :: ffi :: c_int ; 60usize] , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaEventRecordNodeParams { pub event : cudaEvent_t , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaEventWaitNodeParams { pub event : cudaEvent_t , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExtent { pub width : usize , pub height : usize , pub depth : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalMemoryBufferDesc { pub offset : :: core :: ffi :: c_ulonglong , pub size : :: core :: ffi :: c_ulonglong , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalMemoryHandleDesc { pub type_ : cudaExternalMemoryHandleType , pub handle : cudaExternalMemoryHandleDesc__bindgen_ty_1 , pub size : :: core :: ffi :: c_ulonglong , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 { pub handle : * mut :: core :: ffi :: c_void , pub name : * const :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalMemoryMipmappedArrayDesc { pub offset : :: core :: ffi :: c_ulonglong , pub formatDesc : cudaChannelFormatDesc , pub extent : cudaExtent , pub flags : :: core :: ffi :: c_uint , pub numLevels : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreHandleDesc { pub type_ : cudaExternalSemaphoreHandleType , pub handle : cudaExternalSemaphoreHandleDesc__bindgen_ty_1 , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 { pub handle : * mut :: core :: ffi :: c_void , pub name : * const :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreSignalNodeParams { pub extSemArray : * mut cudaExternalSemaphore_t , pub paramsArray : * const cudaExternalSemaphoreSignalParams , pub numExtSems : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreSignalNodeParamsV2 { pub extSemArray : * mut cudaExternalSemaphore_t , pub paramsArray : * const cudaExternalSemaphoreSignalParams , pub numExtSems : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreSignalParams { pub params : cudaExternalSemaphoreSignalParams__bindgen_ty_1 , pub flags : :: core :: ffi :: c_uint , pub reserved : [:: core :: ffi :: c_uint ; 16usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1 { pub fence : cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1 , pub nvSciSync : cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 , pub keyedMutex : cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3 , pub reserved : [:: core :: ffi :: c_uint ; 12usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1 { pub value : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3 { pub key : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreSignalParams_v1 { pub params : cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 { pub fence : cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1 , pub nvSciSync : cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 , pub keyedMutex : cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3 , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1 { pub value : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3 { pub key : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreWaitNodeParams { pub extSemArray : * mut cudaExternalSemaphore_t , pub paramsArray : * const cudaExternalSemaphoreWaitParams , pub numExtSems : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreWaitNodeParamsV2 { pub extSemArray : * mut cudaExternalSemaphore_t , pub paramsArray : * const cudaExternalSemaphoreWaitParams , pub numExtSems : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreWaitParams { pub params : cudaExternalSemaphoreWaitParams__bindgen_ty_1 , pub flags : :: core :: ffi :: c_uint , pub reserved : [:: core :: ffi :: c_uint ; 16usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1 { pub fence : cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1 , pub nvSciSync : cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 , pub keyedMutex : cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3 , pub reserved : [:: core :: ffi :: c_uint ; 10usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1 { pub value : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3 { pub key : :: core :: ffi :: c_ulonglong , pub timeoutMs : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreWaitParams_v1 { pub params : cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 { pub fence : cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1 , pub nvSciSync : cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 , pub keyedMutex : cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1 { pub value : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 { pub key : :: core :: ffi :: c_ulonglong , pub timeoutMs : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaFuncAttributes { pub sharedSizeBytes : usize , pub constSizeBytes : usize , pub localSizeBytes : usize , pub maxThreadsPerBlock : :: core :: ffi :: c_int , pub numRegs : :: core :: ffi :: c_int , pub ptxVersion : :: core :: ffi :: c_int , pub binaryVersion : :: core :: ffi :: c_int , pub cacheModeCA : :: core :: ffi :: c_int , pub maxDynamicSharedSizeBytes : :: core :: ffi :: c_int , pub preferredShmemCarveout : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaFuncAttributes { pub sharedSizeBytes : usize , pub constSizeBytes : usize , pub localSizeBytes : usize , pub maxThreadsPerBlock : :: core :: ffi :: c_int , pub numRegs : :: core :: ffi :: c_int , pub ptxVersion : :: core :: ffi :: c_int , pub binaryVersion : :: core :: ffi :: c_int , pub cacheModeCA : :: core :: ffi :: c_int , pub maxDynamicSharedSizeBytes : :: core :: ffi :: c_int , pub preferredShmemCarveout : :: core :: ffi :: c_int , pub clusterDimMustBeSet : :: core :: ffi :: c_int , pub requiredClusterWidth : :: core :: ffi :: c_int , pub requiredClusterHeight : :: core :: ffi :: c_int , pub requiredClusterDepth : :: core :: ffi :: c_int , pub clusterSchedulingPolicyPreference : :: core :: ffi :: c_int , pub nonPortableClusterSizeAllowed : :: core :: ffi :: c_int , pub reserved : [:: core :: ffi :: c_int ; 16usize] , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaGraphEdgeData_st { pub from_port : :: core :: ffi :: c_uchar , pub to_port : :: core :: ffi :: c_uchar , pub type_ : :: core :: ffi :: c_uchar , pub reserved : [:: core :: ffi :: c_uchar ; 5usize] , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaGraphExecUpdateResultInfo_st { pub result : cudaGraphExecUpdateResult , pub errorNode : cudaGraphNode_t , pub errorFromNode : cudaGraphNode_t , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaGraphInstantiateParams_st { pub flags : :: core :: ffi :: c_ulonglong , pub uploadStream : cudaStream_t , pub errNode_out : cudaGraphNode_t , pub result_out : cudaGraphInstantiateResult , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaGraphKernelNodeUpdate { pub node : cudaGraphDeviceNode_t , pub field : cudaGraphKernelNodeField , pub updateData : cudaGraphKernelNodeUpdate__bindgen_ty_1 , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 { pub pValue : * const :: core :: ffi :: c_void , pub offset : usize , pub size : usize , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaGraphNodeParams { pub type_ : cudaGraphNodeType , pub reserved0 : [:: core :: ffi :: c_int ; 3usize] , pub __bindgen_anon_1 : cudaGraphNodeParams__bindgen_ty_1 , pub reserved2 : :: core :: ffi :: c_longlong , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cudaGraphicsResource { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaHostNodeParams { pub fn_ : cudaHostFn_t , pub userData : * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaHostNodeParamsV2 { pub fn_ : cudaHostFn_t , pub userData : * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaIpcEventHandle_st { pub reserved : [:: core :: ffi :: c_char ; 64usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaIpcMemHandle_st { pub reserved : [:: core :: ffi :: c_char ; 64usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaKernelNodeParams { pub func : * mut :: core :: ffi :: c_void , pub gridDim : dim3 , pub blockDim : dim3 , pub sharedMemBytes : :: core :: ffi :: c_uint , pub kernelParams : * mut * mut :: core :: ffi :: c_void , pub extra : * mut * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaKernelNodeParamsV2 { pub func : * mut :: core :: ffi :: c_void , pub gridDim : dim3 , pub blockDim : dim3 , pub sharedMemBytes : :: core :: ffi :: c_uint , pub kernelParams : * mut * mut :: core :: ffi :: c_void , pub extra : * mut * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchAttributeValue__bindgen_ty_1 { pub x : :: core :: ffi :: c_uint , pub y : :: core :: ffi :: c_uint , pub z : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchAttributeValue__bindgen_ty_2 { pub event : cudaEvent_t , pub flags : :: core :: ffi :: c_int , pub triggerAtBlockStart : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchAttributeValue__bindgen_ty_3 { pub event : cudaEvent_t , pub flags : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchAttributeValue__bindgen_ty_4 { pub deviceUpdatable : :: core :: ffi :: c_int , pub devNode : cudaGraphDeviceNode_t , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchAttributeValue__bindgen_ty_5 { pub deviceUpdatable : :: core :: ffi :: c_int , pub devNode : cudaGraphDeviceNode_t , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaLaunchAttribute_st { pub id : cudaLaunchAttributeID , pub pad : [:: core :: ffi :: c_char ; 4usize] , pub val : cudaLaunchAttributeValue , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchConfig_st { pub gridDim : dim3 , pub blockDim : dim3 , pub dynamicSmemBytes : usize , pub stream : cudaStream_t , pub attrs : * mut cudaLaunchAttribute , pub numAttrs : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchMemSyncDomainMap_st { pub default_ : :: core :: ffi :: c_uchar , pub remote : :: core :: ffi :: c_uchar , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaLaunchParams { pub func : * mut :: core :: ffi :: c_void , pub gridDim : dim3 , pub blockDim : dim3 , pub args : * mut * mut :: core :: ffi :: c_void , pub sharedMem : usize , pub stream : cudaStream_t , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemAccessDesc { pub location : cudaMemLocation , pub flags : cudaMemAccessFlags , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemAllocNodeParams { pub poolProps : cudaMemPoolProps , pub accessDescs : * const cudaMemAccessDesc , pub accessDescCount : usize , pub bytesize : usize , pub dptr : * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemAllocNodeParamsV2 { pub poolProps : cudaMemPoolProps , pub accessDescs : * const cudaMemAccessDesc , pub accessDescCount : usize , pub bytesize : usize , pub dptr : * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemFabricHandle_st { pub reserved : [:: core :: ffi :: c_char ; 64usize] , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemFreeNodeParams { pub dptr : * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemLocation { pub type_ : cudaMemLocationType , pub id : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemPoolProps { pub allocType : cudaMemAllocationType , pub handleTypes : cudaMemAllocationHandleType , pub location : cudaMemLocation , pub win32SecurityAttributes : * mut :: core :: ffi :: c_void , pub reserved : [:: core :: ffi :: c_uchar ; 64usize] , }
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemPoolProps { pub allocType : cudaMemAllocationType , pub handleTypes : cudaMemAllocationHandleType , pub location : cudaMemLocation , pub win32SecurityAttributes : * mut :: core :: ffi :: c_void , pub maxSize : usize , pub reserved : [:: core :: ffi :: c_uchar ; 56usize] , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemPoolProps { pub allocType : cudaMemAllocationType , pub handleTypes : cudaMemAllocationHandleType , pub location : cudaMemLocation , pub win32SecurityAttributes : * mut :: core :: ffi :: c_void , pub maxSize : usize , pub usage : :: core :: ffi :: c_ushort , pub reserved : [:: core :: ffi :: c_uchar ; 54usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemPoolPtrExportData { pub reserved : [:: core :: ffi :: c_uchar ; 64usize] , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaMemcpy3DBatchOp { pub src : cudaMemcpy3DOperand , pub dst : cudaMemcpy3DOperand , pub extent : cudaExtent , pub srcAccessOrder : cudaMemcpySrcAccessOrder , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaMemcpy3DOperand { pub type_ : cudaMemcpy3DOperandType , pub op : cudaMemcpy3DOperand__bindgen_ty_1 , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 { pub ptr : * mut :: core :: ffi :: c_void , pub rowLength : usize , pub layerHeight : usize , pub locHint : cudaMemLocation , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 { pub array : cudaArray_t , pub offset : cudaOffset3D , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemcpy3DParms { pub srcArray : cudaArray_t , pub srcPos : cudaPos , pub srcPtr : cudaPitchedPtr , pub dstArray : cudaArray_t , pub dstPos : cudaPos , pub dstPtr : cudaPitchedPtr , pub extent : cudaExtent , pub kind : cudaMemcpyKind , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemcpy3DPeerParms { pub srcArray : cudaArray_t , pub srcPos : cudaPos , pub srcPtr : cudaPitchedPtr , pub srcDevice : :: core :: ffi :: c_int , pub dstArray : cudaArray_t , pub dstPos : cudaPos , pub dstPtr : cudaPitchedPtr , pub dstDevice : :: core :: ffi :: c_int , pub extent : cudaExtent , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemcpyAttributes { pub srcAccessOrder : cudaMemcpySrcAccessOrder , pub srcLocHint : cudaMemLocation , pub dstLocHint : cudaMemLocation , pub flags : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemcpyNodeParams { pub flags : :: core :: ffi :: c_int , pub reserved : [:: core :: ffi :: c_int ; 3usize] , pub copyParams : cudaMemcpy3DParms , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemsetParams { pub dst : * mut :: core :: ffi :: c_void , pub pitch : usize , pub value : :: core :: ffi :: c_uint , pub elementSize : :: core :: ffi :: c_uint , pub width : usize , pub height : usize , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaMemsetParamsV2 { pub dst : * mut :: core :: ffi :: c_void , pub pitch : usize , pub value : :: core :: ffi :: c_uint , pub elementSize : :: core :: ffi :: c_uint , pub width : usize , pub height : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cudaMipmappedArray { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaOffset3D { pub x : usize , pub y : usize , pub z : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaPitchedPtr { pub ptr : * mut :: core :: ffi :: c_void , pub pitch : usize , pub xsize : usize , pub ysize : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaPointerAttributes { pub type_ : cudaMemoryType , pub device : :: core :: ffi :: c_int , pub devicePointer : * mut :: core :: ffi :: c_void , pub hostPointer : * mut :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaPos { pub x : usize , pub y : usize , pub z : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub struct cudaResourceDesc { pub resType : cudaResourceType , pub res : cudaResourceDesc__bindgen_ty_1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 { pub array : cudaArray_t , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 { pub mipmap : cudaMipmappedArray_t , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 { pub devPtr : * mut :: core :: ffi :: c_void , pub desc : cudaChannelFormatDesc , pub sizeInBytes : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 { pub devPtr : * mut :: core :: ffi :: c_void , pub desc : cudaChannelFormatDesc , pub width : usize , pub height : usize , pub pitchInBytes : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudaResourceViewDesc { pub format : cudaResourceViewFormat , pub width : usize , pub height : usize , pub depth : usize , pub firstMipmapLevel : :: core :: ffi :: c_uint , pub lastMipmapLevel : :: core :: ffi :: c_uint , pub firstLayer : :: core :: ffi :: c_uint , pub lastLayer : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct cudaTextureDesc { pub addressMode : [cudaTextureAddressMode ; 3usize] , pub filterMode : cudaTextureFilterMode , pub readMode : cudaTextureReadMode , pub sRGB : :: core :: ffi :: c_int , pub borderColor : [f32 ; 4usize] , pub normalizedCoords : :: core :: ffi :: c_int , pub maxAnisotropy : :: core :: ffi :: c_uint , pub mipmapFilterMode : cudaTextureFilterMode , pub mipmapLevelBias : f32 , pub minMipmapLevelClamp : f32 , pub maxMipmapLevelClamp : f32 , pub disableTrilinearOptimization : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct cudaTextureDesc { pub addressMode : [cudaTextureAddressMode ; 3usize] , pub filterMode : cudaTextureFilterMode , pub readMode : cudaTextureReadMode , pub sRGB : :: core :: ffi :: c_int , pub borderColor : [f32 ; 4usize] , pub normalizedCoords : :: core :: ffi :: c_int , pub maxAnisotropy : :: core :: ffi :: c_uint , pub mipmapFilterMode : cudaTextureFilterMode , pub mipmapLevelBias : f32 , pub minMipmapLevelClamp : f32 , pub maxMipmapLevelClamp : f32 , pub disableTrilinearOptimization : :: core :: ffi :: c_int , pub seamlessCubemap : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12000"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct cudaTextureDesc { pub addressMode : [cudaTextureAddressMode ; 3usize] , pub filterMode : cudaTextureFilterMode , pub readMode : cudaTextureReadMode , pub sRGB : :: core :: ffi :: c_int , pub borderColor : [f32 ; 4usize] , pub normalizedCoords : :: core :: ffi :: c_int , pub maxAnisotropy : :: core :: ffi :: c_uint , pub mipmapFilterMode : cudaTextureFilterMode , pub mipmapLevelBias : f32 , pub minMipmapLevelClamp : f32 , pub maxMipmapLevelClamp : f32 , pub disableTrilinearOptimization : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct cudaTextureDesc { pub addressMode : [cudaTextureAddressMode ; 3usize] , pub filterMode : cudaTextureFilterMode , pub readMode : cudaTextureReadMode , pub sRGB : :: core :: ffi :: c_int , pub borderColor : [f32 ; 4usize] , pub normalizedCoords : :: core :: ffi :: c_int , pub maxAnisotropy : :: core :: ffi :: c_uint , pub mipmapFilterMode : cudaTextureFilterMode , pub mipmapLevelBias : f32 , pub minMipmapLevelClamp : f32 , pub maxMipmapLevelClamp : f32 , pub disableTrilinearOptimization : :: core :: ffi :: c_int , pub seamlessCubemap : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-11080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct cudaTextureDesc_v2 { pub addressMode : [cudaTextureAddressMode ; 3usize] , pub filterMode : cudaTextureFilterMode , pub readMode : cudaTextureReadMode , pub sRGB : :: core :: ffi :: c_int , pub borderColor : [f32 ; 4usize] , pub normalizedCoords : :: core :: ffi :: c_int , pub maxAnisotropy : :: core :: ffi :: c_uint , pub mipmapFilterMode : cudaTextureFilterMode , pub mipmapLevelBias : f32 , pub minMipmapLevelClamp : f32 , pub maxMipmapLevelClamp : f32 , pub disableTrilinearOptimization : :: core :: ffi :: c_int , pub seamlessCubemap : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct cudalibraryHostUniversalFunctionAndDataTable { pub functionTable : * mut :: core :: ffi :: c_void , pub functionWindowSize : usize , pub dataTable : * mut :: core :: ffi :: c_void , pub dataWindowSize : usize , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct dim3 { pub x : :: core :: ffi :: c_uint , pub y : :: core :: ffi :: c_uint , pub z : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct surfaceReference { pub channelDesc : cudaChannelFormatDesc , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , PartialOrd , PartialEq)] pub struct textureReference { pub normalized : :: core :: ffi :: c_int , pub filterMode : cudaTextureFilterMode , pub addressMode : [cudaTextureAddressMode ; 3usize] , pub channelDesc : cudaChannelFormatDesc , pub sRGB : :: core :: ffi :: c_int , pub maxAnisotropy : :: core :: ffi :: c_uint , pub mipmapFilterMode : cudaTextureFilterMode , pub mipmapLevelBias : f32 , pub minMipmapLevelClamp : f32 , pub maxMipmapLevelClamp : f32 , pub disableTrilinearOptimization : :: core :: ffi :: c_int , pub __cudaReserved : [:: core :: ffi :: c_int ; 14usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaArray_const_t = * const cudaArray ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaArray_t = * mut cudaArray ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaAsyncCallback = :: core :: option :: Option < unsafe extern "C" fn (arg1 : * mut cudaAsyncNotificationInfo_t , arg2 : * mut :: core :: ffi :: c_void , arg3 : cudaAsyncCallbackHandle_t ,) , > ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaAsyncCallbackHandle_t = * mut cudaAsyncCallbackEntry ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaAsyncNotificationInfo_t = cudaAsyncNotificationInfo ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaEvent_t = * mut CUevent_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaExternalMemory_t = * mut CUexternalMemory_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaExternalSemaphore_t = * mut CUexternalSemaphore_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaFunction_t = * mut CUfunc_st ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphConditionalHandle = :: core :: ffi :: c_ulonglong ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphDeviceNode_t = * mut CUgraphDeviceUpdatableNode_st ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphEdgeData = cudaGraphEdgeData_st ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphExecUpdateResultInfo = cudaGraphExecUpdateResultInfo_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphExec_t = * mut CUgraphExec_st ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphInstantiateParams = cudaGraphInstantiateParams_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphNode_t = * mut CUgraphNode_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraph_t = * mut CUgraph_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaGraphicsResource_t = * mut cudaGraphicsResource ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaHostFn_t = :: core :: option :: Option < unsafe extern "C" fn (userData : * mut :: core :: ffi :: c_void) > ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaIpcEventHandle_t = cudaIpcEventHandle_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaIpcMemHandle_t = cudaIpcMemHandle_st ;
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaKernel_t = * mut CUkern_st ;
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaLaunchAttribute = cudaLaunchAttribute_st ;
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaLaunchConfig_t = cudaLaunchConfig_st ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaLaunchMemSyncDomainMap = cudaLaunchMemSyncDomainMap_st ;
#[cfg(any(feature = "cuda-12080"))]
pub type cudaLibrary_t = * mut CUlib_st ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaMemFabricHandle_t = cudaMemFabricHandle_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaMemPool_t = * mut CUmemPoolHandle_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaMipmappedArray_const_t = * const cudaMipmappedArray ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaMipmappedArray_t = * mut cudaMipmappedArray ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaStreamCallback_t = :: core :: option :: Option < unsafe extern "C" fn (stream : cudaStream_t , status : cudaError_t , userData : * mut :: core :: ffi :: c_void ,) , > ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaStream_t = * mut CUstream_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaSurfaceObject_t = :: core :: ffi :: c_ulonglong ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaTextureObject_t = :: core :: ffi :: c_ulonglong ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaUUID_t = CUuuid_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaUserObject_t = * mut CUuserObject_st ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub use self :: cudaAsyncNotificationType_enum as cudaAsyncNotificationType ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub use self :: cudaDataType_t as cudaDataType ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub use self :: cudaError as cudaError_t ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub use self :: cudaGraphDependencyType_enum as cudaGraphDependencyType ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080"))]
pub use self :: cudaOutputMode as cudaOutputMode_t ;
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaAsyncNotificationInfo__bindgen_ty_1 { pub overBudget : cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaExternalMemoryHandleDesc__bindgen_ty_1 { pub fd : :: core :: ffi :: c_int , pub win32 : cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 , pub nvSciBufObject : * const :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaExternalSemaphoreHandleDesc__bindgen_ty_1 { pub fd : :: core :: ffi :: c_int , pub win32 : cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 , pub nvSciSyncObj : * const :: core :: ffi :: c_void , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 { pub fence : * mut :: core :: ffi :: c_void , pub reserved : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 { pub fence : * mut :: core :: ffi :: c_void , pub reserved : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 { pub fence : * mut :: core :: ffi :: c_void , pub reserved : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 { pub fence : * mut :: core :: ffi :: c_void , pub reserved : :: core :: ffi :: c_ulonglong , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaGraphKernelNodeUpdate__bindgen_ty_1 { pub gridDim : dim3 , pub param : cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 , pub isEnabled : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaGraphNodeParams__bindgen_ty_1 { pub reserved1 : [:: core :: ffi :: c_longlong ; 29usize] , pub kernel : cudaKernelNodeParamsV2 , pub memcpy : cudaMemcpyNodeParams , pub memset : cudaMemsetParamsV2 , pub host : cudaHostNodeParamsV2 , pub graph : cudaChildGraphNodeParams , pub eventWait : cudaEventWaitNodeParams , pub eventRecord : cudaEventRecordNodeParams , pub extSemSignal : cudaExternalSemaphoreSignalNodeParamsV2 , pub extSemWait : cudaExternalSemaphoreWaitNodeParamsV2 , pub alloc : cudaMemAllocNodeParamsV2 , pub free : cudaMemFreeNodeParams , }
#[cfg(any(feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaGraphNodeParams__bindgen_ty_1 { pub reserved1 : [:: core :: ffi :: c_longlong ; 29usize] , pub kernel : cudaKernelNodeParamsV2 , pub memcpy : cudaMemcpyNodeParams , pub memset : cudaMemsetParamsV2 , pub host : cudaHostNodeParamsV2 , pub graph : cudaChildGraphNodeParams , pub eventWait : cudaEventWaitNodeParams , pub eventRecord : cudaEventRecordNodeParams , pub extSemSignal : cudaExternalSemaphoreSignalNodeParamsV2 , pub extSemWait : cudaExternalSemaphoreWaitNodeParamsV2 , pub alloc : cudaMemAllocNodeParamsV2 , pub free : cudaMemFreeNodeParams , pub conditional : cudaConditionalNodeParams , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaKernelNodeAttrValue { pub accessPolicyWindow : cudaAccessPolicyWindow , pub cooperative : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-11080", feature = "cuda-12000"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaLaunchAttributeValue { pub pad : [:: core :: ffi :: c_char ; 64usize] , pub accessPolicyWindow : cudaAccessPolicyWindow , pub cooperative : :: core :: ffi :: c_int , pub syncPolicy : cudaSynchronizationPolicy , pub clusterDim : cudaLaunchAttributeValue__bindgen_ty_1 , pub clusterSchedulingPolicyPreference : cudaClusterSchedulingPolicy , pub programmaticStreamSerializationAllowed : :: core :: ffi :: c_int , pub programmaticEvent : cudaLaunchAttributeValue__bindgen_ty_2 , pub priority : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaLaunchAttributeValue { pub pad : [:: core :: ffi :: c_char ; 64usize] , pub accessPolicyWindow : cudaAccessPolicyWindow , pub cooperative : :: core :: ffi :: c_int , pub syncPolicy : cudaSynchronizationPolicy , pub clusterDim : cudaLaunchAttributeValue__bindgen_ty_1 , pub clusterSchedulingPolicyPreference : cudaClusterSchedulingPolicy , pub programmaticStreamSerializationAllowed : :: core :: ffi :: c_int , pub programmaticEvent : cudaLaunchAttributeValue__bindgen_ty_2 , pub priority : :: core :: ffi :: c_int , pub memSyncDomainMap : cudaLaunchMemSyncDomainMap , pub memSyncDomain : cudaLaunchMemSyncDomain , }
#[cfg(any(feature = "cuda-12040"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaLaunchAttributeValue { pub pad : [:: core :: ffi :: c_char ; 64usize] , pub accessPolicyWindow : cudaAccessPolicyWindow , pub cooperative : :: core :: ffi :: c_int , pub syncPolicy : cudaSynchronizationPolicy , pub clusterDim : cudaLaunchAttributeValue__bindgen_ty_1 , pub clusterSchedulingPolicyPreference : cudaClusterSchedulingPolicy , pub programmaticStreamSerializationAllowed : :: core :: ffi :: c_int , pub programmaticEvent : cudaLaunchAttributeValue__bindgen_ty_2 , pub priority : :: core :: ffi :: c_int , pub memSyncDomainMap : cudaLaunchMemSyncDomainMap , pub memSyncDomain : cudaLaunchMemSyncDomain , pub launchCompletionEvent : cudaLaunchAttributeValue__bindgen_ty_3 , }
#[cfg(any(feature = "cuda-12050"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaLaunchAttributeValue { pub pad : [:: core :: ffi :: c_char ; 64usize] , pub accessPolicyWindow : cudaAccessPolicyWindow , pub cooperative : :: core :: ffi :: c_int , pub syncPolicy : cudaSynchronizationPolicy , pub clusterDim : cudaLaunchAttributeValue__bindgen_ty_1 , pub clusterSchedulingPolicyPreference : cudaClusterSchedulingPolicy , pub programmaticStreamSerializationAllowed : :: core :: ffi :: c_int , pub programmaticEvent : cudaLaunchAttributeValue__bindgen_ty_2 , pub priority : :: core :: ffi :: c_int , pub memSyncDomainMap : cudaLaunchMemSyncDomainMap , pub memSyncDomain : cudaLaunchMemSyncDomain , pub launchCompletionEvent : cudaLaunchAttributeValue__bindgen_ty_3 , pub deviceUpdatableKernelNode : cudaLaunchAttributeValue__bindgen_ty_4 , }
#[cfg(any(feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaLaunchAttributeValue { pub pad : [:: core :: ffi :: c_char ; 64usize] , pub accessPolicyWindow : cudaAccessPolicyWindow , pub cooperative : :: core :: ffi :: c_int , pub syncPolicy : cudaSynchronizationPolicy , pub clusterDim : cudaLaunchAttributeValue__bindgen_ty_1 , pub clusterSchedulingPolicyPreference : cudaClusterSchedulingPolicy , pub programmaticStreamSerializationAllowed : :: core :: ffi :: c_int , pub programmaticEvent : cudaLaunchAttributeValue__bindgen_ty_2 , pub priority : :: core :: ffi :: c_int , pub memSyncDomainMap : cudaLaunchMemSyncDomainMap , pub memSyncDomain : cudaLaunchMemSyncDomain , pub launchCompletionEvent : cudaLaunchAttributeValue__bindgen_ty_3 , pub deviceUpdatableKernelNode : cudaLaunchAttributeValue__bindgen_ty_4 , pub sharedMemCarveout : :: core :: ffi :: c_uint , }
#[cfg(any(feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaMemcpy3DOperand__bindgen_ty_1 { pub ptr : cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 , pub array : cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaResourceDesc__bindgen_ty_1 { pub array : cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 , pub mipmap : cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 , pub linear : cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 , pub pitch2D : cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070"))]
# [repr (C)] # [derive (Copy , Clone)] pub union cudaStreamAttrValue { pub accessPolicyWindow : cudaAccessPolicyWindow , pub syncPolicy : cudaSynchronizationPolicy , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050"))]
pub const CUDART_VERSION : u32 = 11040 ;
#[cfg(any(feature = "cuda-11060"))]
pub const CUDART_VERSION : u32 = 11050 ;
#[cfg(any(feature = "cuda-11070"))]
pub const CUDART_VERSION : u32 = 11060 ;
#[cfg(any(feature = "cuda-11080"))]
pub const CUDART_VERSION : u32 = 11070 ;
#[cfg(any(feature = "cuda-12000"))]
pub const CUDART_VERSION : u32 = 11080 ;
#[cfg(any(feature = "cuda-12010"))]
pub const CUDART_VERSION : u32 = 12000 ;
#[cfg(any(feature = "cuda-12020"))]
pub const CUDART_VERSION : u32 = 12010 ;
#[cfg(any(feature = "cuda-12030"))]
pub const CUDART_VERSION : u32 = 12020 ;
#[cfg(any(feature = "cuda-12040"))]
pub const CUDART_VERSION : u32 = 12030 ;
#[cfg(any(feature = "cuda-12050"))]
pub const CUDART_VERSION : u32 = 12040 ;
#[cfg(any(feature = "cuda-12060"))]
pub const CUDART_VERSION : u32 = 12050 ;
#[cfg(any(feature = "cuda-12080"))]
pub const CUDART_VERSION : u32 = 12060 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const CUDA_IPC_HANDLE_SIZE : u32 = 64 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArrayColorAttachment : u32 = 32 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArrayCubemap : u32 = 4 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArrayDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArrayDeferredMapping : u32 = 128 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArrayLayered : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArraySparse : u32 = 64 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArraySparsePropertiesSingleMipTail : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArraySurfaceLoadStore : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaArrayTextureGather : u32 = 8 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaCooperativeLaunchMultiDeviceNoPostSync : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaCooperativeLaunchMultiDeviceNoPreSync : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceBlockingSync : u32 = 4 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceLmemResizeToMax : u32 = 16 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceMapHost : u32 = 8 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010"))]
pub const cudaDeviceMask : u32 = 31 ;
#[cfg(any(feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceMask : u32 = 255 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceScheduleAuto : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceScheduleBlockingSync : u32 = 4 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceScheduleMask : u32 = 7 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceScheduleSpin : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceScheduleYield : u32 = 2 ;
#[cfg(any(feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaDeviceSyncMemops : u32 = 128 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventBlockingSync : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventDisableTiming : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventInterprocess : u32 = 4 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventRecordDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventRecordExternal : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventWaitDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaEventWaitExternal : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaExternalMemoryDedicated : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaExternalSemaphoreSignalSkipNvSciBufMemSync : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaExternalSemaphoreWaitSkipNvSciBufMemSync : u32 = 2 ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaGraphKernelNodePortDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaGraphKernelNodePortLaunchCompletion : u32 = 2 ;
#[cfg(any(feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaGraphKernelNodePortProgrammatic : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostAllocDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostAllocMapped : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostAllocPortable : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostAllocWriteCombined : u32 = 4 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostRegisterDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostRegisterIoMemory : u32 = 4 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostRegisterMapped : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostRegisterPortable : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaHostRegisterReadOnly : u32 = 8 ;
#[cfg(any(feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaInitDeviceFlagsAreValid : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaIpcMemLazyEnablePeerAccess : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaMemAttachGlobal : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaMemAttachHost : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaMemAttachSingle : u32 = 4 ;
#[cfg(any(feature = "cuda-12080"))]
pub const cudaMemPoolCreateUsageHwDecompress : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaNvSciSyncAttrSignal : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaNvSciSyncAttrWait : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaOccupancyDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaOccupancyDisableCachingOverride : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaPeerAccessDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaStreamDefault : u32 = 0 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaStreamNonBlocking : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceType1D : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceType1DLayered : u32 = 241 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceType2D : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceType2DLayered : u32 = 242 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceType3D : u32 = 3 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceTypeCubemap : u32 = 12 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaSurfaceTypeCubemapLayered : u32 = 252 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureType1D : u32 = 1 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureType1DLayered : u32 = 241 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureType2D : u32 = 2 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureType2DLayered : u32 = 242 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureType3D : u32 = 3 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureTypeCubemap : u32 = 12 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub const cudaTextureTypeCubemapLayered : u32 = 252 ;
