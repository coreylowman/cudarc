/* automatically generated by rust-bindgen 0.69.4 */

pub const cudaHostAllocDefault: u32 = 0;
pub const cudaHostAllocPortable: u32 = 1;
pub const cudaHostAllocMapped: u32 = 2;
pub const cudaHostAllocWriteCombined: u32 = 4;
pub const cudaHostRegisterDefault: u32 = 0;
pub const cudaHostRegisterPortable: u32 = 1;
pub const cudaHostRegisterMapped: u32 = 2;
pub const cudaHostRegisterIoMemory: u32 = 4;
pub const cudaHostRegisterReadOnly: u32 = 8;
pub const cudaPeerAccessDefault: u32 = 0;
pub const cudaStreamDefault: u32 = 0;
pub const cudaStreamNonBlocking: u32 = 1;
pub const cudaEventDefault: u32 = 0;
pub const cudaEventBlockingSync: u32 = 1;
pub const cudaEventDisableTiming: u32 = 2;
pub const cudaEventInterprocess: u32 = 4;
pub const cudaEventRecordDefault: u32 = 0;
pub const cudaEventRecordExternal: u32 = 1;
pub const cudaEventWaitDefault: u32 = 0;
pub const cudaEventWaitExternal: u32 = 1;
pub const cudaDeviceScheduleAuto: u32 = 0;
pub const cudaDeviceScheduleSpin: u32 = 1;
pub const cudaDeviceScheduleYield: u32 = 2;
pub const cudaDeviceScheduleBlockingSync: u32 = 4;
pub const cudaDeviceBlockingSync: u32 = 4;
pub const cudaDeviceScheduleMask: u32 = 7;
pub const cudaDeviceMapHost: u32 = 8;
pub const cudaDeviceLmemResizeToMax: u32 = 16;
pub const cudaDeviceMask: u32 = 31;
pub const cudaArrayDefault: u32 = 0;
pub const cudaArrayLayered: u32 = 1;
pub const cudaArraySurfaceLoadStore: u32 = 2;
pub const cudaArrayCubemap: u32 = 4;
pub const cudaArrayTextureGather: u32 = 8;
pub const cudaArrayColorAttachment: u32 = 32;
pub const cudaArraySparse: u32 = 64;
pub const cudaArrayDeferredMapping: u32 = 128;
pub const cudaIpcMemLazyEnablePeerAccess: u32 = 1;
pub const cudaMemAttachGlobal: u32 = 1;
pub const cudaMemAttachHost: u32 = 2;
pub const cudaMemAttachSingle: u32 = 4;
pub const cudaOccupancyDefault: u32 = 0;
pub const cudaOccupancyDisableCachingOverride: u32 = 1;
pub const cudaCooperativeLaunchMultiDeviceNoPreSync: u32 = 1;
pub const cudaCooperativeLaunchMultiDeviceNoPostSync: u32 = 2;
pub const cudaArraySparsePropertiesSingleMipTail: u32 = 1;
pub const CUDA_IPC_HANDLE_SIZE: u32 = 64;
pub const cudaExternalMemoryDedicated: u32 = 1;
pub const cudaExternalSemaphoreSignalSkipNvSciBufMemSync: u32 = 1;
pub const cudaExternalSemaphoreWaitSkipNvSciBufMemSync: u32 = 2;
pub const cudaNvSciSyncAttrSignal: u32 = 1;
pub const cudaNvSciSyncAttrWait: u32 = 2;
pub const cudaSurfaceType1D: u32 = 1;
pub const cudaSurfaceType2D: u32 = 2;
pub const cudaSurfaceType3D: u32 = 3;
pub const cudaSurfaceTypeCubemap: u32 = 12;
pub const cudaSurfaceType1DLayered: u32 = 241;
pub const cudaSurfaceType2DLayered: u32 = 242;
pub const cudaSurfaceTypeCubemapLayered: u32 = 252;
pub const cudaTextureType1D: u32 = 1;
pub const cudaTextureType2D: u32 = 2;
pub const cudaTextureType3D: u32 = 3;
pub const cudaTextureTypeCubemap: u32 = 12;
pub const cudaTextureType1DLayered: u32 = 241;
pub const cudaTextureType2DLayered: u32 = 242;
pub const cudaTextureTypeCubemapLayered: u32 = 252;
pub const CUDART_VERSION: u32 = 11070;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaRoundMode {
    cudaRoundNearest = 0,
    cudaRoundZero = 1,
    cudaRoundPosInf = 2,
    cudaRoundMinInf = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct dim3 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_dim3() {
    const UNINIT: ::core::mem::MaybeUninit<dim3> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<dim3>(),
        12usize,
        concat!("Size of: ", stringify!(dim3))
    );
    assert_eq!(
        ::core::mem::align_of::<dim3>(),
        4usize,
        concat!("Alignment of ", stringify!(dim3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dim3), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(dim3), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dim3), "::", stringify!(z))
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaError {
    cudaSuccess = 0,
    cudaErrorInvalidValue = 1,
    cudaErrorMemoryAllocation = 2,
    cudaErrorInitializationError = 3,
    cudaErrorCudartUnloading = 4,
    cudaErrorProfilerDisabled = 5,
    cudaErrorProfilerNotInitialized = 6,
    cudaErrorProfilerAlreadyStarted = 7,
    cudaErrorProfilerAlreadyStopped = 8,
    cudaErrorInvalidConfiguration = 9,
    cudaErrorInvalidPitchValue = 12,
    cudaErrorInvalidSymbol = 13,
    cudaErrorInvalidHostPointer = 16,
    cudaErrorInvalidDevicePointer = 17,
    cudaErrorInvalidTexture = 18,
    cudaErrorInvalidTextureBinding = 19,
    cudaErrorInvalidChannelDescriptor = 20,
    cudaErrorInvalidMemcpyDirection = 21,
    cudaErrorAddressOfConstant = 22,
    cudaErrorTextureFetchFailed = 23,
    cudaErrorTextureNotBound = 24,
    cudaErrorSynchronizationError = 25,
    cudaErrorInvalidFilterSetting = 26,
    cudaErrorInvalidNormSetting = 27,
    cudaErrorMixedDeviceExecution = 28,
    cudaErrorNotYetImplemented = 31,
    cudaErrorMemoryValueTooLarge = 32,
    cudaErrorStubLibrary = 34,
    cudaErrorInsufficientDriver = 35,
    cudaErrorCallRequiresNewerDriver = 36,
    cudaErrorInvalidSurface = 37,
    cudaErrorDuplicateVariableName = 43,
    cudaErrorDuplicateTextureName = 44,
    cudaErrorDuplicateSurfaceName = 45,
    cudaErrorDevicesUnavailable = 46,
    cudaErrorIncompatibleDriverContext = 49,
    cudaErrorMissingConfiguration = 52,
    cudaErrorPriorLaunchFailure = 53,
    cudaErrorLaunchMaxDepthExceeded = 65,
    cudaErrorLaunchFileScopedTex = 66,
    cudaErrorLaunchFileScopedSurf = 67,
    cudaErrorSyncDepthExceeded = 68,
    cudaErrorLaunchPendingCountExceeded = 69,
    cudaErrorInvalidDeviceFunction = 98,
    cudaErrorNoDevice = 100,
    cudaErrorInvalidDevice = 101,
    cudaErrorDeviceNotLicensed = 102,
    cudaErrorSoftwareValidityNotEstablished = 103,
    cudaErrorStartupFailure = 127,
    cudaErrorInvalidKernelImage = 200,
    cudaErrorDeviceUninitialized = 201,
    cudaErrorMapBufferObjectFailed = 205,
    cudaErrorUnmapBufferObjectFailed = 206,
    cudaErrorArrayIsMapped = 207,
    cudaErrorAlreadyMapped = 208,
    cudaErrorNoKernelImageForDevice = 209,
    cudaErrorAlreadyAcquired = 210,
    cudaErrorNotMapped = 211,
    cudaErrorNotMappedAsArray = 212,
    cudaErrorNotMappedAsPointer = 213,
    cudaErrorECCUncorrectable = 214,
    cudaErrorUnsupportedLimit = 215,
    cudaErrorDeviceAlreadyInUse = 216,
    cudaErrorPeerAccessUnsupported = 217,
    cudaErrorInvalidPtx = 218,
    cudaErrorInvalidGraphicsContext = 219,
    cudaErrorNvlinkUncorrectable = 220,
    cudaErrorJitCompilerNotFound = 221,
    cudaErrorUnsupportedPtxVersion = 222,
    cudaErrorJitCompilationDisabled = 223,
    cudaErrorUnsupportedExecAffinity = 224,
    cudaErrorInvalidSource = 300,
    cudaErrorFileNotFound = 301,
    cudaErrorSharedObjectSymbolNotFound = 302,
    cudaErrorSharedObjectInitFailed = 303,
    cudaErrorOperatingSystem = 304,
    cudaErrorInvalidResourceHandle = 400,
    cudaErrorIllegalState = 401,
    cudaErrorSymbolNotFound = 500,
    cudaErrorNotReady = 600,
    cudaErrorIllegalAddress = 700,
    cudaErrorLaunchOutOfResources = 701,
    cudaErrorLaunchTimeout = 702,
    cudaErrorLaunchIncompatibleTexturing = 703,
    cudaErrorPeerAccessAlreadyEnabled = 704,
    cudaErrorPeerAccessNotEnabled = 705,
    cudaErrorSetOnActiveProcess = 708,
    cudaErrorContextIsDestroyed = 709,
    cudaErrorAssert = 710,
    cudaErrorTooManyPeers = 711,
    cudaErrorHostMemoryAlreadyRegistered = 712,
    cudaErrorHostMemoryNotRegistered = 713,
    cudaErrorHardwareStackError = 714,
    cudaErrorIllegalInstruction = 715,
    cudaErrorMisalignedAddress = 716,
    cudaErrorInvalidAddressSpace = 717,
    cudaErrorInvalidPc = 718,
    cudaErrorLaunchFailure = 719,
    cudaErrorCooperativeLaunchTooLarge = 720,
    cudaErrorNotPermitted = 800,
    cudaErrorNotSupported = 801,
    cudaErrorSystemNotReady = 802,
    cudaErrorSystemDriverMismatch = 803,
    cudaErrorCompatNotSupportedOnDevice = 804,
    cudaErrorMpsConnectionFailed = 805,
    cudaErrorMpsRpcFailure = 806,
    cudaErrorMpsServerNotReady = 807,
    cudaErrorMpsMaxClientsReached = 808,
    cudaErrorMpsMaxConnectionsReached = 809,
    cudaErrorStreamCaptureUnsupported = 900,
    cudaErrorStreamCaptureInvalidated = 901,
    cudaErrorStreamCaptureMerge = 902,
    cudaErrorStreamCaptureUnmatched = 903,
    cudaErrorStreamCaptureUnjoined = 904,
    cudaErrorStreamCaptureIsolation = 905,
    cudaErrorStreamCaptureImplicit = 906,
    cudaErrorCapturedEvent = 907,
    cudaErrorStreamCaptureWrongThread = 908,
    cudaErrorTimeout = 909,
    cudaErrorGraphExecUpdateFailure = 910,
    cudaErrorExternalDevice = 911,
    cudaErrorUnknown = 999,
    cudaErrorApiFailureBase = 10000,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaChannelFormatKind {
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3,
    cudaChannelFormatKindNV12 = 4,
    cudaChannelFormatKindUnsignedNormalized8X1 = 5,
    cudaChannelFormatKindUnsignedNormalized8X2 = 6,
    cudaChannelFormatKindUnsignedNormalized8X4 = 7,
    cudaChannelFormatKindUnsignedNormalized16X1 = 8,
    cudaChannelFormatKindUnsignedNormalized16X2 = 9,
    cudaChannelFormatKindUnsignedNormalized16X4 = 10,
    cudaChannelFormatKindSignedNormalized8X1 = 11,
    cudaChannelFormatKindSignedNormalized8X2 = 12,
    cudaChannelFormatKindSignedNormalized8X4 = 13,
    cudaChannelFormatKindSignedNormalized16X1 = 14,
    cudaChannelFormatKindSignedNormalized16X2 = 15,
    cudaChannelFormatKindSignedNormalized16X4 = 16,
    cudaChannelFormatKindUnsignedBlockCompressed1 = 17,
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18,
    cudaChannelFormatKindUnsignedBlockCompressed2 = 19,
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20,
    cudaChannelFormatKindUnsignedBlockCompressed3 = 21,
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22,
    cudaChannelFormatKindUnsignedBlockCompressed4 = 23,
    cudaChannelFormatKindSignedBlockCompressed4 = 24,
    cudaChannelFormatKindUnsignedBlockCompressed5 = 25,
    cudaChannelFormatKindSignedBlockCompressed5 = 26,
    cudaChannelFormatKindUnsignedBlockCompressed6H = 27,
    cudaChannelFormatKindSignedBlockCompressed6H = 28,
    cudaChannelFormatKindUnsignedBlockCompressed7 = 29,
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChannelFormatDesc {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
    pub z: ::core::ffi::c_int,
    pub w: ::core::ffi::c_int,
    pub f: cudaChannelFormatKind,
}
#[test]
fn bindgen_test_layout_cudaChannelFormatDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaChannelFormatDesc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaChannelFormatDesc>(),
        20usize,
        concat!("Size of: ", stringify!(cudaChannelFormatDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaChannelFormatDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaChannelFormatDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(f)
        )
    );
}
impl Default for cudaChannelFormatDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaArray {
    _unused: [u8; 0],
}
pub type cudaArray_t = *mut cudaArray;
pub type cudaArray_const_t = *const cudaArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaMipmappedArray {
    _unused: [u8; 0],
}
pub type cudaMipmappedArray_t = *mut cudaMipmappedArray;
pub type cudaMipmappedArray_const_t = *const cudaMipmappedArray;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties {
    pub tileExtent: cudaArraySparseProperties__bindgen_ty_1,
    pub miptailFirstLevel: ::core::ffi::c_uint,
    pub miptailSize: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties__bindgen_ty_1 {
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub depth: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaArraySparseProperties__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaArraySparseProperties__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaArraySparseProperties__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaArraySparseProperties__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1),
            "::",
            stringify!(depth)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaArraySparseProperties() {
    const UNINIT: ::core::mem::MaybeUninit<cudaArraySparseProperties> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaArraySparseProperties>(),
        48usize,
        concat!("Size of: ", stringify!(cudaArraySparseProperties))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaArraySparseProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaArraySparseProperties))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tileExtent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(tileExtent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).miptailFirstLevel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(miptailFirstLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).miptailSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(miptailSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayMemoryRequirements {
    pub size: usize,
    pub alignment: usize,
    pub reserved: [::core::ffi::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_cudaArrayMemoryRequirements() {
    const UNINIT: ::core::mem::MaybeUninit<cudaArrayMemoryRequirements> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaArrayMemoryRequirements>(),
        32usize,
        concat!("Size of: ", stringify!(cudaArrayMemoryRequirements))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaArrayMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaArrayMemoryRequirements))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayMemoryRequirements),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayMemoryRequirements),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayMemoryRequirements),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryType {
    cudaMemoryTypeUnregistered = 0,
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2,
    cudaMemoryTypeManaged = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpyKind {
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPitchedPtr {
    pub ptr: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub xsize: usize,
    pub ysize: usize,
}
#[test]
fn bindgen_test_layout_cudaPitchedPtr() {
    const UNINIT: ::core::mem::MaybeUninit<cudaPitchedPtr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaPitchedPtr>(),
        32usize,
        concat!("Size of: ", stringify!(cudaPitchedPtr))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaPitchedPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaPitchedPtr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(xsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ysize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(ysize)
        )
    );
}
impl Default for cudaPitchedPtr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExtent {
    pub width: usize,
    pub height: usize,
    pub depth: usize,
}
#[test]
fn bindgen_test_layout_cudaExtent() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExtent> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExtent>(),
        24usize,
        concat!("Size of: ", stringify!(cudaExtent))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExtent>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExtent))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExtent),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExtent),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExtent),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPos {
    pub x: usize,
    pub y: usize,
    pub z: usize,
}
#[test]
fn bindgen_test_layout_cudaPos() {
    const UNINIT: ::core::mem::MaybeUninit<cudaPos> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaPos>(),
        24usize,
        concat!("Size of: ", stringify!(cudaPos))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaPos>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaPos))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPos),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPos),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPos),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub extent: cudaExtent,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DParms() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemcpy3DParms> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemcpy3DParms>(),
        160usize,
        concat!("Size of: ", stringify!(cudaMemcpy3DParms))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemcpy3DParms>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy3DParms))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(srcPos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcPtr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(srcPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstPos) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(dstPos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstPtr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(dstPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy3DParms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeerParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub srcDevice: ::core::ffi::c_int,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub dstDevice: ::core::ffi::c_int,
    pub extent: cudaExtent,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DPeerParms() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemcpy3DPeerParms> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemcpy3DPeerParms>(),
        168usize,
        concat!("Size of: ", stringify!(cudaMemcpy3DPeerParms))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemcpy3DPeerParms>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy3DPeerParms))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcPos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcPtr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstPos) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstPos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstPtr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for cudaMemcpy3DPeerParms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetParams {
    pub dst: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub value: ::core::ffi::c_uint,
    pub elementSize: ::core::ffi::c_uint,
    pub width: usize,
    pub height: usize,
}
#[test]
fn bindgen_test_layout_cudaMemsetParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemsetParams> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemsetParams>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemsetParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemsetParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemsetParams))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).elementSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(elementSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(height)
        )
    );
}
impl Default for cudaMemsetParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaAccessProperty {
    cudaAccessPropertyNormal = 0,
    cudaAccessPropertyStreaming = 1,
    cudaAccessPropertyPersisting = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaAccessPolicyWindow {
    pub base_ptr: *mut ::core::ffi::c_void,
    pub num_bytes: usize,
    pub hitRatio: f32,
    pub hitProp: cudaAccessProperty,
    pub missProp: cudaAccessProperty,
}
#[test]
fn bindgen_test_layout_cudaAccessPolicyWindow() {
    const UNINIT: ::core::mem::MaybeUninit<cudaAccessPolicyWindow> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaAccessPolicyWindow>(),
        32usize,
        concat!("Size of: ", stringify!(cudaAccessPolicyWindow))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaAccessPolicyWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaAccessPolicyWindow))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(base_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).num_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(num_bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hitRatio) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(hitRatio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hitProp) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(hitProp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).missProp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(missProp)
        )
    );
}
impl Default for cudaAccessPolicyWindow {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostFn_t =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostNodeParams {
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_cudaHostNodeParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaHostNodeParams> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaHostNodeParams>(),
        16usize,
        concat!("Size of: ", stringify!(cudaHostNodeParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaHostNodeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaHostNodeParams))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostNodeParams),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostNodeParams),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for cudaHostNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone = 0,
    cudaStreamCaptureStatusActive = 1,
    cudaStreamCaptureStatusInvalidated = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamUpdateCaptureDependenciesFlags {
    cudaStreamAddCaptureDependencies = 0,
    cudaStreamSetCaptureDependencies = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaUserObjectFlags {
    cudaUserObjectNoDestructorSync = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaUserObjectRetainFlags {
    cudaGraphUserObjectMove = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaGraphicsResource {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsRegisterFlags {
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsMapFlags {
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsCubeFace {
    cudaGraphicsCubeFacePositiveX = 0,
    cudaGraphicsCubeFaceNegativeX = 1,
    cudaGraphicsCubeFacePositiveY = 2,
    cudaGraphicsCubeFaceNegativeY = 3,
    cudaGraphicsCubeFacePositiveZ = 4,
    cudaGraphicsCubeFaceNegativeZ = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceType {
    cudaResourceTypeArray = 0,
    cudaResourceTypeMipmappedArray = 1,
    cudaResourceTypeLinear = 2,
    cudaResourceTypePitch2D = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceViewFormat {
    cudaResViewFormatNone = 0,
    cudaResViewFormatUnsignedChar1 = 1,
    cudaResViewFormatUnsignedChar2 = 2,
    cudaResViewFormatUnsignedChar4 = 3,
    cudaResViewFormatSignedChar1 = 4,
    cudaResViewFormatSignedChar2 = 5,
    cudaResViewFormatSignedChar4 = 6,
    cudaResViewFormatUnsignedShort1 = 7,
    cudaResViewFormatUnsignedShort2 = 8,
    cudaResViewFormatUnsignedShort4 = 9,
    cudaResViewFormatSignedShort1 = 10,
    cudaResViewFormatSignedShort2 = 11,
    cudaResViewFormatSignedShort4 = 12,
    cudaResViewFormatUnsignedInt1 = 13,
    cudaResViewFormatUnsignedInt2 = 14,
    cudaResViewFormatUnsignedInt4 = 15,
    cudaResViewFormatSignedInt1 = 16,
    cudaResViewFormatSignedInt2 = 17,
    cudaResViewFormatSignedInt4 = 18,
    cudaResViewFormatHalf1 = 19,
    cudaResViewFormatHalf2 = 20,
    cudaResViewFormatHalf4 = 21,
    cudaResViewFormatFloat1 = 22,
    cudaResViewFormatFloat2 = 23,
    cudaResViewFormatFloat4 = 24,
    cudaResViewFormatUnsignedBlockCompressed1 = 25,
    cudaResViewFormatUnsignedBlockCompressed2 = 26,
    cudaResViewFormatUnsignedBlockCompressed3 = 27,
    cudaResViewFormatUnsignedBlockCompressed4 = 28,
    cudaResViewFormatSignedBlockCompressed4 = 29,
    cudaResViewFormatUnsignedBlockCompressed5 = 30,
    cudaResViewFormatSignedBlockCompressed5 = 31,
    cudaResViewFormatUnsignedBlockCompressed6H = 32,
    cudaResViewFormatSignedBlockCompressed6H = 33,
    cudaResViewFormatUnsignedBlockCompressed7 = 34,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaResourceDesc {
    pub resType: cudaResourceType,
    pub res: cudaResourceDesc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaResourceDesc__bindgen_ty_1 {
    pub array: cudaResourceDesc__bindgen_ty_1__bindgen_ty_1,
    pub mipmap: cudaResourceDesc__bindgen_ty_1__bindgen_ty_2,
    pub linear: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3,
    pub pitch2D: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    pub array: cudaArray_t,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    pub mipmap: cudaMipmappedArray_t,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mipmap)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    pub devPtr: *mut ::core::ffi::c_void,
    pub desc: cudaChannelFormatDesc,
    pub sizeInBytes: usize,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sizeInBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sizeInBytes)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    pub devPtr: *mut ::core::ffi::c_void,
    pub desc: cudaChannelFormatDesc,
    pub width: usize,
    pub height: usize,
    pub pitchInBytes: usize,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pitchInBytes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pitchInBytes)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(cudaResourceDesc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaResourceDesc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(mipmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).linear) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(linear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pitch2D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(pitch2D)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaResourceDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceDesc> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceDesc>(),
        64usize,
        concat!("Size of: ", stringify!(cudaResourceDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaResourceDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).resType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc),
            "::",
            stringify!(resType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc),
            "::",
            stringify!(res)
        )
    );
}
impl Default for cudaResourceDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceViewDesc {
    pub format: cudaResourceViewFormat,
    pub width: usize,
    pub height: usize,
    pub depth: usize,
    pub firstMipmapLevel: ::core::ffi::c_uint,
    pub lastMipmapLevel: ::core::ffi::c_uint,
    pub firstLayer: ::core::ffi::c_uint,
    pub lastLayer: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaResourceViewDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaResourceViewDesc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaResourceViewDesc>(),
        48usize,
        concat!("Size of: ", stringify!(cudaResourceViewDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaResourceViewDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaResourceViewDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).firstMipmapLevel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(firstMipmapLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastMipmapLevel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(lastMipmapLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).firstLayer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(firstLayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastLayer) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(lastLayer)
        )
    );
}
impl Default for cudaResourceViewDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPointerAttributes {
    pub type_: cudaMemoryType,
    pub device: ::core::ffi::c_int,
    pub devicePointer: *mut ::core::ffi::c_void,
    pub hostPointer: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_cudaPointerAttributes() {
    const UNINIT: ::core::mem::MaybeUninit<cudaPointerAttributes> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaPointerAttributes>(),
        24usize,
        concat!("Size of: ", stringify!(cudaPointerAttributes))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaPointerAttributes>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaPointerAttributes))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).devicePointer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(devicePointer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hostPointer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(hostPointer)
        )
    );
}
impl Default for cudaPointerAttributes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncAttributes {
    pub sharedSizeBytes: usize,
    pub constSizeBytes: usize,
    pub localSizeBytes: usize,
    pub maxThreadsPerBlock: ::core::ffi::c_int,
    pub numRegs: ::core::ffi::c_int,
    pub ptxVersion: ::core::ffi::c_int,
    pub binaryVersion: ::core::ffi::c_int,
    pub cacheModeCA: ::core::ffi::c_int,
    pub maxDynamicSharedSizeBytes: ::core::ffi::c_int,
    pub preferredShmemCarveout: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_cudaFuncAttributes() {
    const UNINIT: ::core::mem::MaybeUninit<cudaFuncAttributes> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaFuncAttributes>(),
        56usize,
        concat!("Size of: ", stringify!(cudaFuncAttributes))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaFuncAttributes>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaFuncAttributes))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sharedSizeBytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(sharedSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).constSizeBytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(constSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).localSizeBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(localSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxThreadsPerBlock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(maxThreadsPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numRegs) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(numRegs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ptxVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(ptxVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).binaryVersion) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(binaryVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cacheModeCA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(cacheModeCA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxDynamicSharedSizeBytes) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(maxDynamicSharedSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).preferredShmemCarveout) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(preferredShmemCarveout)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncAttribute {
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
    cudaFuncAttributePreferredSharedMemoryCarveout = 9,
    cudaFuncAttributeMax = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncCache {
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedMemConfig {
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedCarveout {
    cudaSharedmemCarveoutDefault = -1,
    cudaSharedmemCarveoutMaxShared = 100,
    cudaSharedmemCarveoutMaxL1 = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaComputeMode {
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLimit {
    cudaLimitStackSize = 0,
    cudaLimitPrintfFifoSize = 1,
    cudaLimitMallocHeapSize = 2,
    cudaLimitDevRuntimeSyncDepth = 3,
    cudaLimitDevRuntimePendingLaunchCount = 4,
    cudaLimitMaxL2FetchGranularity = 5,
    cudaLimitPersistingL2CacheSize = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryAdvise {
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemRangeAttribute {
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaOutputMode {
    cudaKeyValuePair = 0,
    cudaCSV = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesOptions {
    cudaFlushGPUDirectRDMAWritesOptionHost = 1,
    cudaFlushGPUDirectRDMAWritesOptionMemOps = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGPUDirectRDMAWritesOrdering {
    cudaGPUDirectRDMAWritesOrderingNone = 0,
    cudaGPUDirectRDMAWritesOrderingOwner = 100,
    cudaGPUDirectRDMAWritesOrderingAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner = 100,
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0,
}
impl cudaDeviceAttr {
    pub const cudaDevAttrMaxTimelineSemaphoreInteropSupported: cudaDeviceAttr =
        cudaDeviceAttr::cudaDevAttrTimelineSemaphoreInteropSupported;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceAttr {
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
    cudaDevAttrReserved92 = 92,
    cudaDevAttrReserved93 = 93,
    cudaDevAttrReserved94 = 94,
    cudaDevAttrCooperativeLaunch = 95,
    cudaDevAttrCooperativeMultiDeviceLaunch = 96,
    cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
    cudaDevAttrCanFlushRemoteWrites = 98,
    cudaDevAttrHostRegisterSupported = 99,
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100,
    cudaDevAttrDirectManagedMemAccessFromHost = 101,
    cudaDevAttrMaxBlocksPerMultiprocessor = 106,
    cudaDevAttrMaxPersistingL2CacheSize = 108,
    cudaDevAttrMaxAccessPolicyWindowSize = 109,
    cudaDevAttrReservedSharedMemoryPerBlock = 111,
    cudaDevAttrSparseCudaArraySupported = 112,
    cudaDevAttrHostRegisterReadOnlySupported = 113,
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,
    cudaDevAttrMemoryPoolsSupported = 115,
    cudaDevAttrGPUDirectRDMASupported = 116,
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117,
    cudaDevAttrGPUDirectRDMAWritesOrdering = 118,
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119,
    cudaDevAttrDeferredMappingCudaArraySupported = 121,
    cudaDevAttrMax = 122,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemPoolAttr {
    cudaMemPoolReuseFollowEventDependencies = 1,
    cudaMemPoolReuseAllowOpportunistic = 2,
    cudaMemPoolReuseAllowInternalDependencies = 3,
    cudaMemPoolAttrReleaseThreshold = 4,
    cudaMemPoolAttrReservedMemCurrent = 5,
    cudaMemPoolAttrReservedMemHigh = 6,
    cudaMemPoolAttrUsedMemCurrent = 7,
    cudaMemPoolAttrUsedMemHigh = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemLocation {
    pub type_: cudaMemLocationType,
    pub id: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_cudaMemLocation() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemLocation> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemLocation>(),
        8usize,
        concat!("Size of: ", stringify!(cudaMemLocation))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemLocation>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaMemLocation))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemLocation),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemLocation),
            "::",
            stringify!(id)
        )
    );
}
impl Default for cudaMemLocation {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone = 0,
    cudaMemAccessFlagsProtRead = 1,
    cudaMemAccessFlagsProtReadWrite = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAccessDesc {
    pub location: cudaMemLocation,
    pub flags: cudaMemAccessFlags,
}
#[test]
fn bindgen_test_layout_cudaMemAccessDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemAccessDesc> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemAccessDesc>(),
        12usize,
        concat!("Size of: ", stringify!(cudaMemAccessDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemAccessDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaMemAccessDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAccessDesc),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAccessDesc),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMemAccessDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0,
    cudaMemAllocationTypePinned = 1,
    cudaMemAllocationTypeMax = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationHandleType {
    cudaMemHandleTypeNone = 0,
    cudaMemHandleTypePosixFileDescriptor = 1,
    cudaMemHandleTypeWin32 = 2,
    cudaMemHandleTypeWin32Kmt = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolProps {
    pub allocType: cudaMemAllocationType,
    pub handleTypes: cudaMemAllocationHandleType,
    pub location: cudaMemLocation,
    pub win32SecurityAttributes: *mut ::core::ffi::c_void,
    pub reserved: [::core::ffi::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_cudaMemPoolProps() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemPoolProps> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemPoolProps>(),
        88usize,
        concat!("Size of: ", stringify!(cudaMemPoolProps))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemPoolProps>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemPoolProps))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).allocType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(allocType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(handleTypes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).win32SecurityAttributes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(win32SecurityAttributes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaMemPoolProps {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolPtrExportData {
    pub reserved: [::core::ffi::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_cudaMemPoolPtrExportData() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemPoolPtrExportData> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemPoolPtrExportData>(),
        64usize,
        concat!("Size of: ", stringify!(cudaMemPoolPtrExportData))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemPoolPtrExportData>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaMemPoolPtrExportData))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolPtrExportData),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaMemPoolPtrExportData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAllocNodeParams {
    pub poolProps: cudaMemPoolProps,
    pub accessDescs: *const cudaMemAccessDesc,
    pub accessDescCount: usize,
    pub bytesize: usize,
    pub dptr: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_cudaMemAllocNodeParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaMemAllocNodeParams> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaMemAllocNodeParams>(),
        120usize,
        concat!("Size of: ", stringify!(cudaMemAllocNodeParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaMemAllocNodeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemAllocNodeParams))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).poolProps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(poolProps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).accessDescs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(accessDescs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).accessDescCount) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(accessDescCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cudaMemAllocNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphMemAttributeType {
    cudaGraphMemAttrUsedMemCurrent = 0,
    cudaGraphMemAttrUsedMemHigh = 1,
    cudaGraphMemAttrReservedMemCurrent = 2,
    cudaGraphMemAttrReservedMemHigh = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3,
    cudaDevP2PAttrCudaArrayAccessSupported = 4,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUuuid_st {
    pub bytes: [::core::ffi::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_CUuuid_st() {
    const UNINIT: ::core::mem::MaybeUninit<CUuuid_st> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUuuid_st>(),
        16usize,
        concat!("Size of: ", stringify!(CUuuid_st))
    );
    assert_eq!(
        ::core::mem::align_of::<CUuuid_st>(),
        1usize,
        concat!("Alignment of ", stringify!(CUuuid_st))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUuuid_st),
            "::",
            stringify!(bytes)
        )
    );
}
pub type cudaUUID_t = CUuuid_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceProp {
    pub name: [::core::ffi::c_char; 256usize],
    pub uuid: cudaUUID_t,
    pub luid: [::core::ffi::c_char; 8usize],
    pub luidDeviceNodeMask: ::core::ffi::c_uint,
    pub totalGlobalMem: usize,
    pub sharedMemPerBlock: usize,
    pub regsPerBlock: ::core::ffi::c_int,
    pub warpSize: ::core::ffi::c_int,
    pub memPitch: usize,
    pub maxThreadsPerBlock: ::core::ffi::c_int,
    pub maxThreadsDim: [::core::ffi::c_int; 3usize],
    pub maxGridSize: [::core::ffi::c_int; 3usize],
    pub clockRate: ::core::ffi::c_int,
    pub totalConstMem: usize,
    pub major: ::core::ffi::c_int,
    pub minor: ::core::ffi::c_int,
    pub textureAlignment: usize,
    pub texturePitchAlignment: usize,
    pub deviceOverlap: ::core::ffi::c_int,
    pub multiProcessorCount: ::core::ffi::c_int,
    pub kernelExecTimeoutEnabled: ::core::ffi::c_int,
    pub integrated: ::core::ffi::c_int,
    pub canMapHostMemory: ::core::ffi::c_int,
    pub computeMode: ::core::ffi::c_int,
    pub maxTexture1D: ::core::ffi::c_int,
    pub maxTexture1DMipmap: ::core::ffi::c_int,
    pub maxTexture1DLinear: ::core::ffi::c_int,
    pub maxTexture2D: [::core::ffi::c_int; 2usize],
    pub maxTexture2DMipmap: [::core::ffi::c_int; 2usize],
    pub maxTexture2DLinear: [::core::ffi::c_int; 3usize],
    pub maxTexture2DGather: [::core::ffi::c_int; 2usize],
    pub maxTexture3D: [::core::ffi::c_int; 3usize],
    pub maxTexture3DAlt: [::core::ffi::c_int; 3usize],
    pub maxTextureCubemap: ::core::ffi::c_int,
    pub maxTexture1DLayered: [::core::ffi::c_int; 2usize],
    pub maxTexture2DLayered: [::core::ffi::c_int; 3usize],
    pub maxTextureCubemapLayered: [::core::ffi::c_int; 2usize],
    pub maxSurface1D: ::core::ffi::c_int,
    pub maxSurface2D: [::core::ffi::c_int; 2usize],
    pub maxSurface3D: [::core::ffi::c_int; 3usize],
    pub maxSurface1DLayered: [::core::ffi::c_int; 2usize],
    pub maxSurface2DLayered: [::core::ffi::c_int; 3usize],
    pub maxSurfaceCubemap: ::core::ffi::c_int,
    pub maxSurfaceCubemapLayered: [::core::ffi::c_int; 2usize],
    pub surfaceAlignment: usize,
    pub concurrentKernels: ::core::ffi::c_int,
    pub ECCEnabled: ::core::ffi::c_int,
    pub pciBusID: ::core::ffi::c_int,
    pub pciDeviceID: ::core::ffi::c_int,
    pub pciDomainID: ::core::ffi::c_int,
    pub tccDriver: ::core::ffi::c_int,
    pub asyncEngineCount: ::core::ffi::c_int,
    pub unifiedAddressing: ::core::ffi::c_int,
    pub memoryClockRate: ::core::ffi::c_int,
    pub memoryBusWidth: ::core::ffi::c_int,
    pub l2CacheSize: ::core::ffi::c_int,
    pub persistingL2CacheMaxSize: ::core::ffi::c_int,
    pub maxThreadsPerMultiProcessor: ::core::ffi::c_int,
    pub streamPrioritiesSupported: ::core::ffi::c_int,
    pub globalL1CacheSupported: ::core::ffi::c_int,
    pub localL1CacheSupported: ::core::ffi::c_int,
    pub sharedMemPerMultiprocessor: usize,
    pub regsPerMultiprocessor: ::core::ffi::c_int,
    pub managedMemory: ::core::ffi::c_int,
    pub isMultiGpuBoard: ::core::ffi::c_int,
    pub multiGpuBoardGroupID: ::core::ffi::c_int,
    pub hostNativeAtomicSupported: ::core::ffi::c_int,
    pub singleToDoublePrecisionPerfRatio: ::core::ffi::c_int,
    pub pageableMemoryAccess: ::core::ffi::c_int,
    pub concurrentManagedAccess: ::core::ffi::c_int,
    pub computePreemptionSupported: ::core::ffi::c_int,
    pub canUseHostPointerForRegisteredMem: ::core::ffi::c_int,
    pub cooperativeLaunch: ::core::ffi::c_int,
    pub cooperativeMultiDeviceLaunch: ::core::ffi::c_int,
    pub sharedMemPerBlockOptin: usize,
    pub pageableMemoryAccessUsesHostPageTables: ::core::ffi::c_int,
    pub directManagedMemAccessFromHost: ::core::ffi::c_int,
    pub maxBlocksPerMultiProcessor: ::core::ffi::c_int,
    pub accessPolicyMaxWindowSize: ::core::ffi::c_int,
    pub reservedSharedMemPerBlock: usize,
}
#[test]
fn bindgen_test_layout_cudaDeviceProp() {
    const UNINIT: ::core::mem::MaybeUninit<cudaDeviceProp> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaDeviceProp>(),
        728usize,
        concat!("Size of: ", stringify!(cudaDeviceProp))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaDeviceProp>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaDeviceProp))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).luid) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(luid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).luidDeviceNodeMask) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(luidDeviceNodeMask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).totalGlobalMem) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(totalGlobalMem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sharedMemPerBlock) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sharedMemPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).regsPerBlock) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(regsPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).warpSize) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(warpSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).memPitch) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memPitch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxThreadsPerBlock) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxThreadsPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxThreadsDim) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxThreadsDim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxGridSize) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxGridSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clockRate) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(clockRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).totalConstMem) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(totalConstMem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).textureAlignment) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(textureAlignment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).texturePitchAlignment) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(texturePitchAlignment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deviceOverlap) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(deviceOverlap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).multiProcessorCount) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(multiProcessorCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kernelExecTimeoutEnabled) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(kernelExecTimeoutEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).integrated) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(integrated)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canMapHostMemory) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(canMapHostMemory)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).computeMode) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(computeMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture1D) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1D)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture1DMipmap) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1DMipmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture1DLinear) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1DLinear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture2D) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2D)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture2DMipmap) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DMipmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture2DLinear) as usize - ptr as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DLinear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture2DGather) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DGather)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture3D) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture3D)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture3DAlt) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture3DAlt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTextureCubemap) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTextureCubemap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture1DLayered) as usize - ptr as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1DLayered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTexture2DLayered) as usize - ptr as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DLayered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxTextureCubemapLayered) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTextureCubemapLayered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurface1D) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface1D)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurface2D) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface2D)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurface3D) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface3D)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurface1DLayered) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface1DLayered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurface2DLayered) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface2DLayered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurfaceCubemap) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurfaceCubemap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSurfaceCubemapLayered) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurfaceCubemapLayered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).surfaceAlignment) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(surfaceAlignment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).concurrentKernels) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(concurrentKernels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECCEnabled) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(ECCEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pciBusID) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pciBusID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pciDeviceID) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pciDeviceID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pciDomainID) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pciDomainID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tccDriver) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(tccDriver)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).asyncEngineCount) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(asyncEngineCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unifiedAddressing) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(unifiedAddressing)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).memoryClockRate) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memoryClockRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).memoryBusWidth) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memoryBusWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l2CacheSize) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(l2CacheSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).persistingL2CacheMaxSize) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(persistingL2CacheMaxSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).maxThreadsPerMultiProcessor) as usize - ptr as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxThreadsPerMultiProcessor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).streamPrioritiesSupported) as usize - ptr as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(streamPrioritiesSupported)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).globalL1CacheSupported) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(globalL1CacheSupported)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).localL1CacheSupported) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(localL1CacheSupported)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sharedMemPerMultiprocessor) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sharedMemPerMultiprocessor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).regsPerMultiprocessor) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(regsPerMultiprocessor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).managedMemory) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(managedMemory)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isMultiGpuBoard) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(isMultiGpuBoard)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).multiGpuBoardGroupID) as usize - ptr as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(multiGpuBoardGroupID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hostNativeAtomicSupported) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(hostNativeAtomicSupported)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).singleToDoublePrecisionPerfRatio) as usize - ptr as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(singleToDoublePrecisionPerfRatio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pageableMemoryAccess) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pageableMemoryAccess)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).concurrentManagedAccess) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(concurrentManagedAccess)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).computePreemptionSupported) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(computePreemptionSupported)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).canUseHostPointerForRegisteredMem) as usize - ptr as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(canUseHostPointerForRegisteredMem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cooperativeLaunch) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(cooperativeLaunch)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).cooperativeMultiDeviceLaunch) as usize - ptr as usize
        },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(cooperativeMultiDeviceLaunch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sharedMemPerBlockOptin) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sharedMemPerBlockOptin)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pageableMemoryAccessUsesHostPageTables) as usize
                - ptr as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pageableMemoryAccessUsesHostPageTables)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).directManagedMemAccessFromHost) as usize - ptr as usize
        },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(directManagedMemAccessFromHost)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxBlocksPerMultiProcessor) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxBlocksPerMultiProcessor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).accessPolicyMaxWindowSize) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(accessPolicyMaxWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reservedSharedMemPerBlock) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(reservedSharedMemPerBlock)
        )
    );
}
impl Default for cudaDeviceProp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcEventHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_cudaIpcEventHandle_st() {
    const UNINIT: ::core::mem::MaybeUninit<cudaIpcEventHandle_st> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaIpcEventHandle_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaIpcEventHandle_st))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaIpcEventHandle_st>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaIpcEventHandle_st))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcEventHandle_st),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaIpcEventHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcEventHandle_t = cudaIpcEventHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcMemHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_cudaIpcMemHandle_st() {
    const UNINIT: ::core::mem::MaybeUninit<cudaIpcMemHandle_st> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaIpcMemHandle_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaIpcMemHandle_st))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaIpcMemHandle_st>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaIpcMemHandle_st))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcMemHandle_st),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaIpcMemHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcMemHandle_t = cudaIpcMemHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalMemoryHandleType {
    cudaExternalMemoryHandleTypeOpaqueFd = 1,
    cudaExternalMemoryHandleTypeOpaqueWin32 = 2,
    cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalMemoryHandleTypeD3D12Heap = 4,
    cudaExternalMemoryHandleTypeD3D12Resource = 5,
    cudaExternalMemoryHandleTypeD3D11Resource = 6,
    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    cudaExternalMemoryHandleTypeNvSciBuf = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalMemoryHandleDesc {
    pub type_: cudaExternalMemoryHandleType,
    pub handle: cudaExternalMemoryHandleDesc__bindgen_ty_1,
    pub size: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    pub fd: ::core::ffi::c_int,
    pub win32: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciBufObject: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryHandleDesc__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalMemoryHandleDesc__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).win32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1),
            "::",
            stringify!(win32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvSciBufObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1),
            "::",
            stringify!(nvSciBufObject)
        )
    );
}
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryHandleDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalMemoryHandleDesc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalMemoryHandleDesc>(),
        40usize,
        concat!("Size of: ", stringify!(cudaExternalMemoryHandleDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalMemoryHandleDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalMemoryHandleDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalMemoryHandleDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryBufferDesc {
    pub offset: ::core::ffi::c_ulonglong,
    pub size: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryBufferDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalMemoryBufferDesc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalMemoryBufferDesc>(),
        24usize,
        concat!("Size of: ", stringify!(cudaExternalMemoryBufferDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalMemoryBufferDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalMemoryBufferDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryBufferDesc),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryBufferDesc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryBufferDesc),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryMipmappedArrayDesc {
    pub offset: ::core::ffi::c_ulonglong,
    pub formatDesc: cudaChannelFormatDesc,
    pub extent: cudaExtent,
    pub flags: ::core::ffi::c_uint,
    pub numLevels: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryMipmappedArrayDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalMemoryMipmappedArrayDesc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalMemoryMipmappedArrayDesc>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalMemoryMipmappedArrayDesc>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).formatDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(formatDesc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numLevels) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(numLevels)
        )
    );
}
impl Default for cudaExternalMemoryMipmappedArrayDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalSemaphoreHandleType {
    cudaExternalSemaphoreHandleTypeOpaqueFd = 1,
    cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2,
    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalSemaphoreHandleTypeD3D12Fence = 4,
    cudaExternalSemaphoreHandleTypeD3D11Fence = 5,
    cudaExternalSemaphoreHandleTypeNvSciSync = 6,
    cudaExternalSemaphoreHandleTypeKeyedMutex = 7,
    cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreHandleDesc {
    pub type_: cudaExternalSemaphoreHandleType,
    pub handle: cudaExternalSemaphoreHandleDesc__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    pub fd: ::core::ffi::c_int,
    pub win32: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSyncObj: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreHandleDesc__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreHandleDesc__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).win32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1),
            "::",
            stringify!(win32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvSciSyncObj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1),
            "::",
            stringify!(nvSciSyncObj)
        )
    );
}
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreHandleDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreHandleDesc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreHandleDesc>(),
        32usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreHandleDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreHandleDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalSemaphoreHandleDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalSemaphoreHandleDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1 {
    pub params: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreSignalParams_v1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1 {
    pub params: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
    pub timeoutMs: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeoutMs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(timeoutMs)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreWaitParams_v1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1>(),
        40usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreWaitParams_v1))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams {
    pub params: cudaExternalSemaphoreSignalParams__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::core::ffi::c_uint; 12usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreSignalParams__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreSignalParams> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalParams>(),
        144usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreSignalParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams {
    pub params: cudaExternalSemaphoreWaitParams__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::core::ffi::c_uint; 10usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
    pub timeoutMs: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeoutMs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(timeoutMs)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreWaitParams__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreWaitParams> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitParams>(),
        144usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreWaitParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalSemaphoreWaitParams))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::cudaError as cudaError_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUevent_st {
    _unused: [u8; 0],
}
pub type cudaEvent_t = *mut CUevent_st;
pub type cudaGraphicsResource_t = *mut cudaGraphicsResource;
pub use self::cudaOutputMode as cudaOutputMode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalMemory_st {
    _unused: [u8; 0],
}
pub type cudaExternalMemory_t = *mut CUexternalMemory_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalSemaphore_st {
    _unused: [u8; 0],
}
pub type cudaExternalSemaphore_t = *mut CUexternalSemaphore_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraph_st {
    _unused: [u8; 0],
}
pub type cudaGraph_t = *mut CUgraph_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphNode_st {
    _unused: [u8; 0],
}
pub type cudaGraphNode_t = *mut CUgraphNode_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUuserObject_st {
    _unused: [u8; 0],
}
pub type cudaUserObject_t = *mut CUuserObject_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUfunc_st {
    _unused: [u8; 0],
}
pub type cudaFunction_t = *mut CUfunc_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemPoolHandle_st {
    _unused: [u8; 0],
}
pub type cudaMemPool_t = *mut CUmemPoolHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaCGScope {
    cudaCGScopeInvalid = 0,
    cudaCGScopeGrid = 1,
    cudaCGScopeMultiGrid = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchParams {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::core::ffi::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaLaunchParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaLaunchParams> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaLaunchParams>(),
        56usize,
        concat!("Size of: ", stringify!(cudaLaunchParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaLaunchParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaLaunchParams))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sharedMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(sharedMem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaLaunchParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaKernelNodeParams {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub sharedMemBytes: ::core::ffi::c_uint,
    pub kernelParams: *mut *mut ::core::ffi::c_void,
    pub extra: *mut *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_cudaKernelNodeParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaKernelNodeParams> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaKernelNodeParams>(),
        56usize,
        concat!("Size of: ", stringify!(cudaKernelNodeParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaKernelNodeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaKernelNodeParams))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(kernelParams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for cudaKernelNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalNodeParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreSignalNodeParams> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreSignalNodeParams>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreSignalNodeParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalNodeParams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams),
            "::",
            stringify!(numExtSems)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitNodeParams() {
    const UNINIT: ::core::mem::MaybeUninit<cudaExternalSemaphoreWaitNodeParams> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaExternalSemaphoreWaitNodeParams>(),
        24usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreWaitNodeParams))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaExternalSemaphoreWaitNodeParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitNodeParams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitNodeParams),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitNodeParams),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitNodeParams),
            "::",
            stringify!(numExtSems)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphNodeType {
    cudaGraphNodeTypeKernel = 0,
    cudaGraphNodeTypeMemcpy = 1,
    cudaGraphNodeTypeMemset = 2,
    cudaGraphNodeTypeHost = 3,
    cudaGraphNodeTypeGraph = 4,
    cudaGraphNodeTypeEmpty = 5,
    cudaGraphNodeTypeWaitEvent = 6,
    cudaGraphNodeTypeEventRecord = 7,
    cudaGraphNodeTypeExtSemaphoreSignal = 8,
    cudaGraphNodeTypeExtSemaphoreWait = 9,
    cudaGraphNodeTypeMemAlloc = 10,
    cudaGraphNodeTypeMemFree = 11,
    cudaGraphNodeTypeCount = 12,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphExec_st {
    _unused: [u8; 0],
}
pub type cudaGraphExec_t = *mut CUgraphExec_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess = 0,
    cudaGraphExecUpdateError = 1,
    cudaGraphExecUpdateErrorTopologyChanged = 2,
    cudaGraphExecUpdateErrorNodeTypeChanged = 3,
    cudaGraphExecUpdateErrorFunctionChanged = 4,
    cudaGraphExecUpdateErrorParametersChanged = 5,
    cudaGraphExecUpdateErrorNotSupported = 6,
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7,
    cudaGraphExecUpdateErrorAttributesChanged = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGetDriverEntryPointFlags {
    cudaEnableDefault = 0,
    cudaEnableLegacyStream = 1,
    cudaEnablePerThreadDefaultStream = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphDebugDotFlags {
    cudaGraphDebugDotFlagsVerbose = 1,
    cudaGraphDebugDotFlagsKernelNodeParams = 4,
    cudaGraphDebugDotFlagsMemcpyNodeParams = 8,
    cudaGraphDebugDotFlagsMemsetNodeParams = 16,
    cudaGraphDebugDotFlagsHostNodeParams = 32,
    cudaGraphDebugDotFlagsEventNodeParams = 64,
    cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128,
    cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256,
    cudaGraphDebugDotFlagsKernelNodeAttributes = 512,
    cudaGraphDebugDotFlagsHandles = 1024,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphInstantiateFlags {
    cudaGraphInstantiateFlagAutoFreeOnLaunch = 1,
    cudaGraphInstantiateFlagUseNodePriority = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamAttrID {
    cudaStreamAttributeAccessPolicyWindow = 1,
    cudaStreamAttributeSynchronizationPolicy = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaStreamAttrValue {
    pub accessPolicyWindow: cudaAccessPolicyWindow,
    pub syncPolicy: cudaSynchronizationPolicy,
}
#[test]
fn bindgen_test_layout_cudaStreamAttrValue() {
    const UNINIT: ::core::mem::MaybeUninit<cudaStreamAttrValue> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaStreamAttrValue>(),
        32usize,
        concat!("Size of: ", stringify!(cudaStreamAttrValue))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaStreamAttrValue>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaStreamAttrValue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).accessPolicyWindow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttrValue),
            "::",
            stringify!(accessPolicyWindow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).syncPolicy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttrValue),
            "::",
            stringify!(syncPolicy)
        )
    );
}
impl Default for cudaStreamAttrValue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaKernelNodeAttrID {
    cudaKernelNodeAttributeAccessPolicyWindow = 1,
    cudaKernelNodeAttributeCooperative = 2,
    cudaKernelNodeAttributePriority = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaKernelNodeAttrValue {
    pub accessPolicyWindow: cudaAccessPolicyWindow,
    pub cooperative: ::core::ffi::c_int,
    pub priority: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_cudaKernelNodeAttrValue() {
    const UNINIT: ::core::mem::MaybeUninit<cudaKernelNodeAttrValue> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaKernelNodeAttrValue>(),
        32usize,
        concat!("Size of: ", stringify!(cudaKernelNodeAttrValue))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaKernelNodeAttrValue>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaKernelNodeAttrValue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).accessPolicyWindow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeAttrValue),
            "::",
            stringify!(accessPolicyWindow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cooperative) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeAttrValue),
            "::",
            stringify!(cooperative)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeAttrValue),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cudaKernelNodeAttrValue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSurfaceBoundaryMode {
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSurfaceFormatMode {
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct surfaceReference {
    pub channelDesc: cudaChannelFormatDesc,
}
#[test]
fn bindgen_test_layout_surfaceReference() {
    const UNINIT: ::core::mem::MaybeUninit<surfaceReference> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<surfaceReference>(),
        20usize,
        concat!("Size of: ", stringify!(surfaceReference))
    );
    assert_eq!(
        ::core::mem::align_of::<surfaceReference>(),
        4usize,
        concat!("Alignment of ", stringify!(surfaceReference))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).channelDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(surfaceReference),
            "::",
            stringify!(channelDesc)
        )
    );
}
impl Default for surfaceReference {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSurfaceObject_t = ::core::ffi::c_ulonglong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureAddressMode {
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureFilterMode {
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureReadMode {
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct textureReference {
    pub normalized: ::core::ffi::c_int,
    pub filterMode: cudaTextureFilterMode,
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub channelDesc: cudaChannelFormatDesc,
    pub sRGB: ::core::ffi::c_int,
    pub maxAnisotropy: ::core::ffi::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
    pub disableTrilinearOptimization: ::core::ffi::c_int,
    pub __cudaReserved: [::core::ffi::c_int; 14usize],
}
#[test]
fn bindgen_test_layout_textureReference() {
    const UNINIT: ::core::mem::MaybeUninit<textureReference> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<textureReference>(),
        124usize,
        concat!("Size of: ", stringify!(textureReference))
    );
    assert_eq!(
        ::core::mem::align_of::<textureReference>(),
        4usize,
        concat!("Alignment of ", stringify!(textureReference))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).normalized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(normalized)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).filterMode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(filterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addressMode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(addressMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).channelDesc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(channelDesc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sRGB) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(sRGB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxAnisotropy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(maxAnisotropy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mipmapFilterMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(mipmapFilterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mipmapLevelBias) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(mipmapLevelBias)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minMipmapLevelClamp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(minMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxMipmapLevelClamp) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(maxMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).disableTrilinearOptimization) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(disableTrilinearOptimization)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cudaReserved) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(textureReference),
            "::",
            stringify!(__cudaReserved)
        )
    );
}
impl Default for textureReference {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaTextureDesc {
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub filterMode: cudaTextureFilterMode,
    pub readMode: cudaTextureReadMode,
    pub sRGB: ::core::ffi::c_int,
    pub borderColor: [f32; 4usize],
    pub normalizedCoords: ::core::ffi::c_int,
    pub maxAnisotropy: ::core::ffi::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
    pub disableTrilinearOptimization: ::core::ffi::c_int,
    pub seamlessCubemap: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_cudaTextureDesc() {
    const UNINIT: ::core::mem::MaybeUninit<cudaTextureDesc> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cudaTextureDesc>(),
        72usize,
        concat!("Size of: ", stringify!(cudaTextureDesc))
    );
    assert_eq!(
        ::core::mem::align_of::<cudaTextureDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaTextureDesc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addressMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(addressMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).filterMode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(filterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).readMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(readMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sRGB) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(sRGB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).borderColor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(borderColor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).normalizedCoords) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(normalizedCoords)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxAnisotropy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(maxAnisotropy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mipmapFilterMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(mipmapFilterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mipmapLevelBias) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(mipmapLevelBias)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minMipmapLevelClamp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(minMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxMipmapLevelClamp) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(maxMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).disableTrilinearOptimization) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(disableTrilinearOptimization)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).seamlessCubemap) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(seamlessCubemap)
        )
    );
}
impl Default for cudaTextureDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaTextureObject_t = ::core::ffi::c_ulonglong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDataType_t {
    CUDA_R_16F = 2,
    CUDA_C_16F = 6,
    CUDA_R_16BF = 14,
    CUDA_C_16BF = 15,
    CUDA_R_32F = 0,
    CUDA_C_32F = 4,
    CUDA_R_64F = 1,
    CUDA_C_64F = 5,
    CUDA_R_4I = 16,
    CUDA_C_4I = 17,
    CUDA_R_4U = 18,
    CUDA_C_4U = 19,
    CUDA_R_8I = 3,
    CUDA_C_8I = 7,
    CUDA_R_8U = 8,
    CUDA_C_8U = 9,
    CUDA_R_16I = 20,
    CUDA_C_16I = 21,
    CUDA_R_16U = 22,
    CUDA_C_16U = 23,
    CUDA_R_32I = 10,
    CUDA_C_32I = 11,
    CUDA_R_32U = 12,
    CUDA_C_32U = 13,
    CUDA_R_64I = 24,
    CUDA_C_64I = 25,
    CUDA_R_64U = 26,
    CUDA_C_64U = 27,
}
pub use self::cudaDataType_t as cudaDataType;
pub type cudaStreamCallback_t = ::core::option::Option<
    unsafe extern "C" fn(
        stream: cudaStream_t,
        status: cudaError_t,
        userData: *mut ::core::ffi::c_void,
    ),
>;
extern crate libloading;
pub struct Lib {
    __library: ::libloading::Library,
    pub cudaDeviceReset: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaDeviceSynchronize: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaDeviceSetLimit: Result<
        unsafe extern "C" fn(limit: cudaLimit, value: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetLimit: Result<
        unsafe extern "C" fn(pValue: *mut usize, limit: cudaLimit) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetTexture1DLinearMaxWidth: Result<
        unsafe extern "C" fn(
            maxWidthInElements: *mut usize,
            fmtDesc: *const cudaChannelFormatDesc,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetCacheConfig: Result<
        unsafe extern "C" fn(pCacheConfig: *mut cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetStreamPriorityRange: Result<
        unsafe extern "C" fn(
            leastPriority: *mut ::core::ffi::c_int,
            greatestPriority: *mut ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetCacheConfig: Result<
        unsafe extern "C" fn(cacheConfig: cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetSharedMemConfig: Result<
        unsafe extern "C" fn(pConfig: *mut cudaSharedMemConfig) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetSharedMemConfig: Result<
        unsafe extern "C" fn(config: cudaSharedMemConfig) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetByPCIBusId: Result<
        unsafe extern "C" fn(
            device: *mut ::core::ffi::c_int,
            pciBusId: *const ::core::ffi::c_char,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetPCIBusId: Result<
        unsafe extern "C" fn(
            pciBusId: *mut ::core::ffi::c_char,
            len: ::core::ffi::c_int,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcGetEventHandle: Result<
        unsafe extern "C" fn(handle: *mut cudaIpcEventHandle_t, event: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcOpenEventHandle: Result<
        unsafe extern "C" fn(event: *mut cudaEvent_t, handle: cudaIpcEventHandle_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcGetMemHandle: Result<
        unsafe extern "C" fn(
            handle: *mut cudaIpcMemHandle_t,
            devPtr: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcOpenMemHandle: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            handle: cudaIpcMemHandle_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcCloseMemHandle: Result<
        unsafe extern "C" fn(devPtr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceFlushGPUDirectRDMAWrites: Result<
        unsafe extern "C" fn(
            target: cudaFlushGPUDirectRDMAWritesTarget,
            scope: cudaFlushGPUDirectRDMAWritesScope,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadExit: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaThreadSynchronize: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaThreadSetLimit: Result<
        unsafe extern "C" fn(limit: cudaLimit, value: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadGetLimit: Result<
        unsafe extern "C" fn(pValue: *mut usize, limit: cudaLimit) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadGetCacheConfig: Result<
        unsafe extern "C" fn(pCacheConfig: *mut cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadSetCacheConfig: Result<
        unsafe extern "C" fn(cacheConfig: cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetLastError: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaPeekAtLastError: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaGetErrorName: Result<
        unsafe extern "C" fn(error: cudaError_t) -> *const ::core::ffi::c_char,
        ::libloading::Error,
    >,
    pub cudaGetErrorString: Result<
        unsafe extern "C" fn(error: cudaError_t) -> *const ::core::ffi::c_char,
        ::libloading::Error,
    >,
    pub cudaGetDeviceCount: Result<
        unsafe extern "C" fn(count: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDeviceProperties: Result<
        unsafe extern "C" fn(prop: *mut cudaDeviceProp, device: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetAttribute: Result<
        unsafe extern "C" fn(
            value: *mut ::core::ffi::c_int,
            attr: cudaDeviceAttr,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetDefaultMemPool: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetMemPool: Result<
        unsafe extern "C" fn(device: ::core::ffi::c_int, memPool: cudaMemPool_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetMemPool: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetNvSciSyncAttributes: Result<
        unsafe extern "C" fn(
            nvSciSyncAttrList: *mut ::core::ffi::c_void,
            device: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetP2PAttribute: Result<
        unsafe extern "C" fn(
            value: *mut ::core::ffi::c_int,
            attr: cudaDeviceP2PAttr,
            srcDevice: ::core::ffi::c_int,
            dstDevice: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaChooseDevice: Result<
        unsafe extern "C" fn(
            device: *mut ::core::ffi::c_int,
            prop: *const cudaDeviceProp,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetDevice: Result<
        unsafe extern "C" fn(device: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDevice: Result<
        unsafe extern "C" fn(device: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetValidDevices: Result<
        unsafe extern "C" fn(
            device_arr: *mut ::core::ffi::c_int,
            len: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetDeviceFlags: Result<
        unsafe extern "C" fn(flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDeviceFlags: Result<
        unsafe extern "C" fn(flags: *mut ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamCreate: Result<
        unsafe extern "C" fn(pStream: *mut cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamCreateWithFlags: Result<
        unsafe extern "C" fn(pStream: *mut cudaStream_t, flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamCreateWithPriority: Result<
        unsafe extern "C" fn(
            pStream: *mut cudaStream_t,
            flags: ::core::ffi::c_uint,
            priority: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetPriority: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            priority: *mut ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetFlags: Result<
        unsafe extern "C" fn(hStream: cudaStream_t, flags: *mut ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaCtxResetPersistingL2Cache:
        Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaStreamCopyAttributes: Result<
        unsafe extern "C" fn(dst: cudaStream_t, src: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetAttribute: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            attr: cudaStreamAttrID,
            value_out: *mut cudaStreamAttrValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamSetAttribute: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            attr: cudaStreamAttrID,
            value: *const cudaStreamAttrValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamDestroy:
        Result<unsafe extern "C" fn(stream: cudaStream_t) -> cudaError_t, ::libloading::Error>,
    pub cudaStreamWaitEvent: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            event: cudaEvent_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamAddCallback: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            callback: cudaStreamCallback_t,
            userData: *mut ::core::ffi::c_void,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamSynchronize:
        Result<unsafe extern "C" fn(stream: cudaStream_t) -> cudaError_t, ::libloading::Error>,
    pub cudaStreamQuery:
        Result<unsafe extern "C" fn(stream: cudaStream_t) -> cudaError_t, ::libloading::Error>,
    pub cudaStreamAttachMemAsync: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            devPtr: *mut ::core::ffi::c_void,
            length: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamBeginCapture: Result<
        unsafe extern "C" fn(stream: cudaStream_t, mode: cudaStreamCaptureMode) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadExchangeStreamCaptureMode: Result<
        unsafe extern "C" fn(mode: *mut cudaStreamCaptureMode) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamEndCapture: Result<
        unsafe extern "C" fn(stream: cudaStream_t, pGraph: *mut cudaGraph_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamIsCapturing: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            pCaptureStatus: *mut cudaStreamCaptureStatus,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetCaptureInfo: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            pCaptureStatus: *mut cudaStreamCaptureStatus,
            pId: *mut ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetCaptureInfo_v2: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            captureStatus_out: *mut cudaStreamCaptureStatus,
            id_out: *mut ::core::ffi::c_ulonglong,
            graph_out: *mut cudaGraph_t,
            dependencies_out: *mut *const cudaGraphNode_t,
            numDependencies_out: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamUpdateCaptureDependencies: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            dependencies: *mut cudaGraphNode_t,
            numDependencies: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventCreate:
        Result<unsafe extern "C" fn(event: *mut cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventCreateWithFlags: Result<
        unsafe extern "C" fn(event: *mut cudaEvent_t, flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventRecord: Result<
        unsafe extern "C" fn(event: cudaEvent_t, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventRecordWithFlags: Result<
        unsafe extern "C" fn(
            event: cudaEvent_t,
            stream: cudaStream_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventQuery:
        Result<unsafe extern "C" fn(event: cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventSynchronize:
        Result<unsafe extern "C" fn(event: cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventDestroy:
        Result<unsafe extern "C" fn(event: cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventElapsedTime: Result<
        unsafe extern "C" fn(ms: *mut f32, start: cudaEvent_t, end: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaImportExternalMemory: Result<
        unsafe extern "C" fn(
            extMem_out: *mut cudaExternalMemory_t,
            memHandleDesc: *const cudaExternalMemoryHandleDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaExternalMemoryGetMappedBuffer: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            extMem: cudaExternalMemory_t,
            bufferDesc: *const cudaExternalMemoryBufferDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaExternalMemoryGetMappedMipmappedArray: Result<
        unsafe extern "C" fn(
            mipmap: *mut cudaMipmappedArray_t,
            extMem: cudaExternalMemory_t,
            mipmapDesc: *const cudaExternalMemoryMipmappedArrayDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroyExternalMemory: Result<
        unsafe extern "C" fn(extMem: cudaExternalMemory_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaImportExternalSemaphore: Result<
        unsafe extern "C" fn(
            extSem_out: *mut cudaExternalSemaphore_t,
            semHandleDesc: *const cudaExternalSemaphoreHandleDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSignalExternalSemaphoresAsync_v2: Result<
        unsafe extern "C" fn(
            extSemArray: *const cudaExternalSemaphore_t,
            paramsArray: *const cudaExternalSemaphoreSignalParams,
            numExtSems: ::core::ffi::c_uint,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaWaitExternalSemaphoresAsync_v2: Result<
        unsafe extern "C" fn(
            extSemArray: *const cudaExternalSemaphore_t,
            paramsArray: *const cudaExternalSemaphoreWaitParams,
            numExtSems: ::core::ffi::c_uint,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroyExternalSemaphore: Result<
        unsafe extern "C" fn(extSem: cudaExternalSemaphore_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchKernel: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            gridDim: dim3,
            blockDim: dim3,
            args: *mut *mut ::core::ffi::c_void,
            sharedMem: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchCooperativeKernel: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            gridDim: dim3,
            blockDim: dim3,
            args: *mut *mut ::core::ffi::c_void,
            sharedMem: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchCooperativeKernelMultiDevice: Result<
        unsafe extern "C" fn(
            launchParamsList: *mut cudaLaunchParams,
            numDevices: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncSetCacheConfig: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            cacheConfig: cudaFuncCache,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncSetSharedMemConfig: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            config: cudaSharedMemConfig,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncGetAttributes: Result<
        unsafe extern "C" fn(
            attr: *mut cudaFuncAttributes,
            func: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncSetAttribute: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            attr: cudaFuncAttribute,
            value: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetDoubleForDevice:
        Result<unsafe extern "C" fn(d: *mut f64) -> cudaError_t, ::libloading::Error>,
    pub cudaSetDoubleForHost:
        Result<unsafe extern "C" fn(d: *mut f64) -> cudaError_t, ::libloading::Error>,
    pub cudaLaunchHostFunc: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            fn_: cudaHostFn_t,
            userData: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyMaxActiveBlocksPerMultiprocessor: Result<
        unsafe extern "C" fn(
            numBlocks: *mut ::core::ffi::c_int,
            func: *const ::core::ffi::c_void,
            blockSize: ::core::ffi::c_int,
            dynamicSMemSize: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyAvailableDynamicSMemPerBlock: Result<
        unsafe extern "C" fn(
            dynamicSmemSize: *mut usize,
            func: *const ::core::ffi::c_void,
            numBlocks: ::core::ffi::c_int,
            blockSize: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags: Result<
        unsafe extern "C" fn(
            numBlocks: *mut ::core::ffi::c_int,
            func: *const ::core::ffi::c_void,
            blockSize: ::core::ffi::c_int,
            dynamicSMemSize: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocManaged: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            size: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMalloc: Result<
        unsafe extern "C" fn(devPtr: *mut *mut ::core::ffi::c_void, size: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocHost: Result<
        unsafe extern "C" fn(ptr: *mut *mut ::core::ffi::c_void, size: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocPitch: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            pitch: *mut usize,
            width: usize,
            height: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocArray: Result<
        unsafe extern "C" fn(
            array: *mut cudaArray_t,
            desc: *const cudaChannelFormatDesc,
            width: usize,
            height: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFree: Result<
        unsafe extern "C" fn(devPtr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFreeHost: Result<
        unsafe extern "C" fn(ptr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFreeArray:
        Result<unsafe extern "C" fn(array: cudaArray_t) -> cudaError_t, ::libloading::Error>,
    pub cudaFreeMipmappedArray: Result<
        unsafe extern "C" fn(mipmappedArray: cudaMipmappedArray_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostAlloc: Result<
        unsafe extern "C" fn(
            pHost: *mut *mut ::core::ffi::c_void,
            size: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostRegister: Result<
        unsafe extern "C" fn(
            ptr: *mut ::core::ffi::c_void,
            size: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostUnregister: Result<
        unsafe extern "C" fn(ptr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostGetDevicePointer: Result<
        unsafe extern "C" fn(
            pDevice: *mut *mut ::core::ffi::c_void,
            pHost: *mut ::core::ffi::c_void,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostGetFlags: Result<
        unsafe extern "C" fn(
            pFlags: *mut ::core::ffi::c_uint,
            pHost: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMalloc3D: Result<
        unsafe extern "C" fn(pitchedDevPtr: *mut cudaPitchedPtr, extent: cudaExtent) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMalloc3DArray: Result<
        unsafe extern "C" fn(
            array: *mut cudaArray_t,
            desc: *const cudaChannelFormatDesc,
            extent: cudaExtent,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocMipmappedArray: Result<
        unsafe extern "C" fn(
            mipmappedArray: *mut cudaMipmappedArray_t,
            desc: *const cudaChannelFormatDesc,
            extent: cudaExtent,
            numLevels: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetMipmappedArrayLevel: Result<
        unsafe extern "C" fn(
            levelArray: *mut cudaArray_t,
            mipmappedArray: cudaMipmappedArray_const_t,
            level: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3D: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DParms) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DPeer: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DPeerParms) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DAsync: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DParms, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DPeerAsync: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DPeerParms, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemGetInfo: Result<
        unsafe extern "C" fn(free: *mut usize, total: *mut usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetInfo: Result<
        unsafe extern "C" fn(
            desc: *mut cudaChannelFormatDesc,
            extent: *mut cudaExtent,
            flags: *mut ::core::ffi::c_uint,
            array: cudaArray_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetPlane: Result<
        unsafe extern "C" fn(
            pPlaneArray: *mut cudaArray_t,
            hArray: cudaArray_t,
            planeIdx: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetMemoryRequirements: Result<
        unsafe extern "C" fn(
            memoryRequirements: *mut cudaArrayMemoryRequirements,
            array: cudaArray_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMipmappedArrayGetMemoryRequirements: Result<
        unsafe extern "C" fn(
            memoryRequirements: *mut cudaArrayMemoryRequirements,
            mipmap: cudaMipmappedArray_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetSparseProperties: Result<
        unsafe extern "C" fn(
            sparseProperties: *mut cudaArraySparseProperties,
            array: cudaArray_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMipmappedArrayGetSparseProperties: Result<
        unsafe extern "C" fn(
            sparseProperties: *mut cudaArraySparseProperties,
            mipmap: cudaMipmappedArray_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyPeer: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dstDevice: ::core::ffi::c_int,
            src: *const ::core::ffi::c_void,
            srcDevice: ::core::ffi::c_int,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2D: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DFromArray: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DArrayToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffsetDst: usize,
            hOffsetDst: usize,
            src: cudaArray_const_t,
            wOffsetSrc: usize,
            hOffsetSrc: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToSymbol: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromSymbol: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyPeerAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dstDevice: ::core::ffi::c_int,
            src: *const ::core::ffi::c_void,
            srcDevice: ::core::ffi::c_int,
            count: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DToArrayAsync: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DFromArrayAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToSymbolAsync: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromSymbolAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            value: ::core::ffi::c_int,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset2D: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            pitch: usize,
            value: ::core::ffi::c_int,
            width: usize,
            height: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset3D: Result<
        unsafe extern "C" fn(
            pitchedDevPtr: cudaPitchedPtr,
            value: ::core::ffi::c_int,
            extent: cudaExtent,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemsetAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            value: ::core::ffi::c_int,
            count: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset2DAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            pitch: usize,
            value: ::core::ffi::c_int,
            width: usize,
            height: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset3DAsync: Result<
        unsafe extern "C" fn(
            pitchedDevPtr: cudaPitchedPtr,
            value: ::core::ffi::c_int,
            extent: cudaExtent,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSymbolAddress: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSymbolSize: Result<
        unsafe extern "C" fn(size: *mut usize, symbol: *const ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPrefetchAsync: Result<
        unsafe extern "C" fn(
            devPtr: *const ::core::ffi::c_void,
            count: usize,
            dstDevice: ::core::ffi::c_int,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemAdvise: Result<
        unsafe extern "C" fn(
            devPtr: *const ::core::ffi::c_void,
            count: usize,
            advice: cudaMemoryAdvise,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemRangeGetAttribute: Result<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_void,
            dataSize: usize,
            attribute: cudaMemRangeAttribute,
            devPtr: *const ::core::ffi::c_void,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemRangeGetAttributes: Result<
        unsafe extern "C" fn(
            data: *mut *mut ::core::ffi::c_void,
            dataSizes: *mut usize,
            attributes: *mut cudaMemRangeAttribute,
            numAttributes: usize,
            devPtr: *const ::core::ffi::c_void,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromArray: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyArrayToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffsetDst: usize,
            hOffsetDst: usize,
            src: cudaArray_const_t,
            wOffsetSrc: usize,
            hOffsetSrc: usize,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToArrayAsync: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromArrayAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            count: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            size: usize,
            hStream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFreeAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            hStream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolTrimTo: Result<
        unsafe extern "C" fn(memPool: cudaMemPool_t, minBytesToKeep: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolSetAttribute: Result<
        unsafe extern "C" fn(
            memPool: cudaMemPool_t,
            attr: cudaMemPoolAttr,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolGetAttribute: Result<
        unsafe extern "C" fn(
            memPool: cudaMemPool_t,
            attr: cudaMemPoolAttr,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolSetAccess: Result<
        unsafe extern "C" fn(
            memPool: cudaMemPool_t,
            descList: *const cudaMemAccessDesc,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolGetAccess: Result<
        unsafe extern "C" fn(
            flags: *mut cudaMemAccessFlags,
            memPool: cudaMemPool_t,
            location: *mut cudaMemLocation,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolCreate: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            poolProps: *const cudaMemPoolProps,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolDestroy:
        Result<unsafe extern "C" fn(memPool: cudaMemPool_t) -> cudaError_t, ::libloading::Error>,
    pub cudaMallocFromPoolAsync: Result<
        unsafe extern "C" fn(
            ptr: *mut *mut ::core::ffi::c_void,
            size: usize,
            memPool: cudaMemPool_t,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolExportToShareableHandle: Result<
        unsafe extern "C" fn(
            shareableHandle: *mut ::core::ffi::c_void,
            memPool: cudaMemPool_t,
            handleType: cudaMemAllocationHandleType,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolImportFromShareableHandle: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            shareableHandle: *mut ::core::ffi::c_void,
            handleType: cudaMemAllocationHandleType,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolExportPointer: Result<
        unsafe extern "C" fn(
            exportData: *mut cudaMemPoolPtrExportData,
            ptr: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolImportPointer: Result<
        unsafe extern "C" fn(
            ptr: *mut *mut ::core::ffi::c_void,
            memPool: cudaMemPool_t,
            exportData: *mut cudaMemPoolPtrExportData,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaPointerGetAttributes: Result<
        unsafe extern "C" fn(
            attributes: *mut cudaPointerAttributes,
            ptr: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceCanAccessPeer: Result<
        unsafe extern "C" fn(
            canAccessPeer: *mut ::core::ffi::c_int,
            device: ::core::ffi::c_int,
            peerDevice: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceEnablePeerAccess: Result<
        unsafe extern "C" fn(
            peerDevice: ::core::ffi::c_int,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceDisablePeerAccess: Result<
        unsafe extern "C" fn(peerDevice: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsUnregisterResource: Result<
        unsafe extern "C" fn(resource: cudaGraphicsResource_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsResourceSetMapFlags: Result<
        unsafe extern "C" fn(
            resource: cudaGraphicsResource_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsMapResources: Result<
        unsafe extern "C" fn(
            count: ::core::ffi::c_int,
            resources: *mut cudaGraphicsResource_t,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsUnmapResources: Result<
        unsafe extern "C" fn(
            count: ::core::ffi::c_int,
            resources: *mut cudaGraphicsResource_t,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsResourceGetMappedPointer: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            size: *mut usize,
            resource: cudaGraphicsResource_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsSubResourceGetMappedArray: Result<
        unsafe extern "C" fn(
            array: *mut cudaArray_t,
            resource: cudaGraphicsResource_t,
            arrayIndex: ::core::ffi::c_uint,
            mipLevel: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsResourceGetMappedMipmappedArray: Result<
        unsafe extern "C" fn(
            mipmappedArray: *mut cudaMipmappedArray_t,
            resource: cudaGraphicsResource_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaBindTexture: Result<
        unsafe extern "C" fn(
            offset: *mut usize,
            texref: *const textureReference,
            devPtr: *const ::core::ffi::c_void,
            desc: *const cudaChannelFormatDesc,
            size: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaBindTexture2D: Result<
        unsafe extern "C" fn(
            offset: *mut usize,
            texref: *const textureReference,
            devPtr: *const ::core::ffi::c_void,
            desc: *const cudaChannelFormatDesc,
            width: usize,
            height: usize,
            pitch: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaBindTextureToArray: Result<
        unsafe extern "C" fn(
            texref: *const textureReference,
            array: cudaArray_const_t,
            desc: *const cudaChannelFormatDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaBindTextureToMipmappedArray: Result<
        unsafe extern "C" fn(
            texref: *const textureReference,
            mipmappedArray: cudaMipmappedArray_const_t,
            desc: *const cudaChannelFormatDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUnbindTexture: Result<
        unsafe extern "C" fn(texref: *const textureReference) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureAlignmentOffset: Result<
        unsafe extern "C" fn(offset: *mut usize, texref: *const textureReference) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureReference: Result<
        unsafe extern "C" fn(
            texref: *mut *const textureReference,
            symbol: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaBindSurfaceToArray: Result<
        unsafe extern "C" fn(
            surfref: *const surfaceReference,
            array: cudaArray_const_t,
            desc: *const cudaChannelFormatDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSurfaceReference: Result<
        unsafe extern "C" fn(
            surfref: *mut *const surfaceReference,
            symbol: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetChannelDesc: Result<
        unsafe extern "C" fn(
            desc: *mut cudaChannelFormatDesc,
            array: cudaArray_const_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaCreateChannelDesc: Result<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            z: ::core::ffi::c_int,
            w: ::core::ffi::c_int,
            f: cudaChannelFormatKind,
        ) -> cudaChannelFormatDesc,
        ::libloading::Error,
    >,
    pub cudaCreateTextureObject: Result<
        unsafe extern "C" fn(
            pTexObject: *mut cudaTextureObject_t,
            pResDesc: *const cudaResourceDesc,
            pTexDesc: *const cudaTextureDesc,
            pResViewDesc: *const cudaResourceViewDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroyTextureObject: Result<
        unsafe extern "C" fn(texObject: cudaTextureObject_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureObjectResourceDesc: Result<
        unsafe extern "C" fn(
            pResDesc: *mut cudaResourceDesc,
            texObject: cudaTextureObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureObjectTextureDesc: Result<
        unsafe extern "C" fn(
            pTexDesc: *mut cudaTextureDesc,
            texObject: cudaTextureObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureObjectResourceViewDesc: Result<
        unsafe extern "C" fn(
            pResViewDesc: *mut cudaResourceViewDesc,
            texObject: cudaTextureObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaCreateSurfaceObject: Result<
        unsafe extern "C" fn(
            pSurfObject: *mut cudaSurfaceObject_t,
            pResDesc: *const cudaResourceDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroySurfaceObject: Result<
        unsafe extern "C" fn(surfObject: cudaSurfaceObject_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSurfaceObjectResourceDesc: Result<
        unsafe extern "C" fn(
            pResDesc: *mut cudaResourceDesc,
            surfObject: cudaSurfaceObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDriverGetVersion: Result<
        unsafe extern "C" fn(driverVersion: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaRuntimeGetVersion: Result<
        unsafe extern "C" fn(runtimeVersion: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphCreate: Result<
        unsafe extern "C" fn(pGraph: *mut cudaGraph_t, flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddKernelNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pNodeParams: *const cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeCopyAttributes: Result<
        unsafe extern "C" fn(hSrc: cudaGraphNode_t, hDst: cudaGraphNode_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeGetAttribute: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            attr: cudaKernelNodeAttrID,
            value_out: *mut cudaKernelNodeAttrValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeSetAttribute: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            attr: cudaKernelNodeAttrID,
            value: *const cudaKernelNodeAttrValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pCopyParams: *const cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNodeToSymbol: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNodeFromSymbol: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNode1D: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParamsToSymbol: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParamsFromSymbol: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParams1D: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemsetNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pMemsetParams: *const cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemsetNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemsetNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddHostNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pNodeParams: *const cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphHostNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphHostNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddChildGraphNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            childGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphChildGraphNodeGetGraph: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, pGraph: *mut cudaGraph_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddEmptyNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddEventRecordNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventRecordNodeGetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event_out: *mut cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventRecordNodeSetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddEventWaitNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventWaitNodeGetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event_out: *mut cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventWaitNodeSetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddExternalSemaphoresSignalNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresSignalNodeGetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            params_out: *mut cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresSignalNodeSetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddExternalSemaphoresWaitNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresWaitNodeGetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            params_out: *mut cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresWaitNodeSetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemAllocNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *mut cudaMemAllocNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemAllocNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            params_out: *mut cudaMemAllocNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemFreeNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            dptr: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemFreeNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            dptr_out: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGraphMemTrim: Result<
        unsafe extern "C" fn(device: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetGraphMemAttribute: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            attr: cudaGraphMemAttributeType,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetGraphMemAttribute: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            attr: cudaGraphMemAttributeType,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphClone: Result<
        unsafe extern "C" fn(
            pGraphClone: *mut cudaGraph_t,
            originalGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeFindInClone: Result<
        unsafe extern "C" fn(
            pNode: *mut cudaGraphNode_t,
            originalNode: cudaGraphNode_t,
            clonedGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetType: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, pType: *mut cudaGraphNodeType) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetNodes: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            nodes: *mut cudaGraphNode_t,
            numNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetRootNodes: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            pRootNodes: *mut cudaGraphNode_t,
            pNumRootNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetEdges: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *mut cudaGraphNode_t,
            to: *mut cudaGraphNode_t,
            numEdges: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetDependencies: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pDependencies: *mut cudaGraphNode_t,
            pNumDependencies: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetDependentNodes: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pDependentNodes: *mut cudaGraphNode_t,
            pNumDependentNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddDependencies: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *const cudaGraphNode_t,
            to: *const cudaGraphNode_t,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphRemoveDependencies: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *const cudaGraphNode_t,
            to: *const cudaGraphNode_t,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphDestroyNode:
        Result<unsafe extern "C" fn(node: cudaGraphNode_t) -> cudaError_t, ::libloading::Error>,
    pub cudaGraphInstantiate: Result<
        unsafe extern "C" fn(
            pGraphExec: *mut cudaGraphExec_t,
            graph: cudaGraph_t,
            pErrorNode: *mut cudaGraphNode_t,
            pLogBuffer: *mut ::core::ffi::c_char,
            bufferSize: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphInstantiateWithFlags: Result<
        unsafe extern "C" fn(
            pGraphExec: *mut cudaGraphExec_t,
            graph: cudaGraph_t,
            flags: ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecKernelNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParamsToSymbol: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParamsFromSymbol: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParams1D: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemsetNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecHostNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecChildGraphNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            childGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecEventRecordNodeSetEvent: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecEventWaitNodeSetEvent: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecExternalSemaphoresSignalNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecExternalSemaphoresWaitNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeSetEnabled: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            isEnabled: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetEnabled: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            isEnabled: *mut ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecUpdate: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hGraph: cudaGraph_t,
            hErrorNode_out: *mut cudaGraphNode_t,
            updateResult_out: *mut cudaGraphExecUpdateResult,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphUpload: Result<
        unsafe extern "C" fn(graphExec: cudaGraphExec_t, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphLaunch: Result<
        unsafe extern "C" fn(graphExec: cudaGraphExec_t, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecDestroy: Result<
        unsafe extern "C" fn(graphExec: cudaGraphExec_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphDestroy:
        Result<unsafe extern "C" fn(graph: cudaGraph_t) -> cudaError_t, ::libloading::Error>,
    pub cudaGraphDebugDotPrint: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            path: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUserObjectCreate: Result<
        unsafe extern "C" fn(
            object_out: *mut cudaUserObject_t,
            ptr: *mut ::core::ffi::c_void,
            destroy: cudaHostFn_t,
            initialRefcount: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUserObjectRetain: Result<
        unsafe extern "C" fn(object: cudaUserObject_t, count: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUserObjectRelease: Result<
        unsafe extern "C" fn(object: cudaUserObject_t, count: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphRetainUserObject: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            object: cudaUserObject_t,
            count: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphReleaseUserObject: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            object: cudaUserObject_t,
            count: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDriverEntryPoint: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_char,
            funcPtr: *mut *mut ::core::ffi::c_void,
            flags: ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetExportTable: Result<
        unsafe extern "C" fn(
            ppExportTable: *mut *const ::core::ffi::c_void,
            pExportTableId: *const cudaUUID_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetFuncBySymbol: Result<
        unsafe extern "C" fn(
            functionPtr: *mut cudaFunction_t,
            symbolPtr: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaProfilerInitialize: Result<
        unsafe extern "C" fn(
            configFile: *const ::core::ffi::c_char,
            outputFile: *const ::core::ffi::c_char,
            outputMode: cudaOutputMode_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaProfilerStart: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaProfilerStop: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
}
impl Lib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let cudaDeviceReset = __library.get(b"cudaDeviceReset\0").map(|sym| *sym);
        let cudaDeviceSynchronize = __library.get(b"cudaDeviceSynchronize\0").map(|sym| *sym);
        let cudaDeviceSetLimit = __library.get(b"cudaDeviceSetLimit\0").map(|sym| *sym);
        let cudaDeviceGetLimit = __library.get(b"cudaDeviceGetLimit\0").map(|sym| *sym);
        let cudaDeviceGetTexture1DLinearMaxWidth = __library
            .get(b"cudaDeviceGetTexture1DLinearMaxWidth\0")
            .map(|sym| *sym);
        let cudaDeviceGetCacheConfig = __library.get(b"cudaDeviceGetCacheConfig\0").map(|sym| *sym);
        let cudaDeviceGetStreamPriorityRange = __library
            .get(b"cudaDeviceGetStreamPriorityRange\0")
            .map(|sym| *sym);
        let cudaDeviceSetCacheConfig = __library.get(b"cudaDeviceSetCacheConfig\0").map(|sym| *sym);
        let cudaDeviceGetSharedMemConfig = __library
            .get(b"cudaDeviceGetSharedMemConfig\0")
            .map(|sym| *sym);
        let cudaDeviceSetSharedMemConfig = __library
            .get(b"cudaDeviceSetSharedMemConfig\0")
            .map(|sym| *sym);
        let cudaDeviceGetByPCIBusId = __library.get(b"cudaDeviceGetByPCIBusId\0").map(|sym| *sym);
        let cudaDeviceGetPCIBusId = __library.get(b"cudaDeviceGetPCIBusId\0").map(|sym| *sym);
        let cudaIpcGetEventHandle = __library.get(b"cudaIpcGetEventHandle\0").map(|sym| *sym);
        let cudaIpcOpenEventHandle = __library.get(b"cudaIpcOpenEventHandle\0").map(|sym| *sym);
        let cudaIpcGetMemHandle = __library.get(b"cudaIpcGetMemHandle\0").map(|sym| *sym);
        let cudaIpcOpenMemHandle = __library.get(b"cudaIpcOpenMemHandle\0").map(|sym| *sym);
        let cudaIpcCloseMemHandle = __library.get(b"cudaIpcCloseMemHandle\0").map(|sym| *sym);
        let cudaDeviceFlushGPUDirectRDMAWrites = __library
            .get(b"cudaDeviceFlushGPUDirectRDMAWrites\0")
            .map(|sym| *sym);
        let cudaThreadExit = __library.get(b"cudaThreadExit\0").map(|sym| *sym);
        let cudaThreadSynchronize = __library.get(b"cudaThreadSynchronize\0").map(|sym| *sym);
        let cudaThreadSetLimit = __library.get(b"cudaThreadSetLimit\0").map(|sym| *sym);
        let cudaThreadGetLimit = __library.get(b"cudaThreadGetLimit\0").map(|sym| *sym);
        let cudaThreadGetCacheConfig = __library.get(b"cudaThreadGetCacheConfig\0").map(|sym| *sym);
        let cudaThreadSetCacheConfig = __library.get(b"cudaThreadSetCacheConfig\0").map(|sym| *sym);
        let cudaGetLastError = __library.get(b"cudaGetLastError\0").map(|sym| *sym);
        let cudaPeekAtLastError = __library.get(b"cudaPeekAtLastError\0").map(|sym| *sym);
        let cudaGetErrorName = __library.get(b"cudaGetErrorName\0").map(|sym| *sym);
        let cudaGetErrorString = __library.get(b"cudaGetErrorString\0").map(|sym| *sym);
        let cudaGetDeviceCount = __library.get(b"cudaGetDeviceCount\0").map(|sym| *sym);
        let cudaGetDeviceProperties = __library.get(b"cudaGetDeviceProperties\0").map(|sym| *sym);
        let cudaDeviceGetAttribute = __library.get(b"cudaDeviceGetAttribute\0").map(|sym| *sym);
        let cudaDeviceGetDefaultMemPool = __library
            .get(b"cudaDeviceGetDefaultMemPool\0")
            .map(|sym| *sym);
        let cudaDeviceSetMemPool = __library.get(b"cudaDeviceSetMemPool\0").map(|sym| *sym);
        let cudaDeviceGetMemPool = __library.get(b"cudaDeviceGetMemPool\0").map(|sym| *sym);
        let cudaDeviceGetNvSciSyncAttributes = __library
            .get(b"cudaDeviceGetNvSciSyncAttributes\0")
            .map(|sym| *sym);
        let cudaDeviceGetP2PAttribute = __library
            .get(b"cudaDeviceGetP2PAttribute\0")
            .map(|sym| *sym);
        let cudaChooseDevice = __library.get(b"cudaChooseDevice\0").map(|sym| *sym);
        let cudaSetDevice = __library.get(b"cudaSetDevice\0").map(|sym| *sym);
        let cudaGetDevice = __library.get(b"cudaGetDevice\0").map(|sym| *sym);
        let cudaSetValidDevices = __library.get(b"cudaSetValidDevices\0").map(|sym| *sym);
        let cudaSetDeviceFlags = __library.get(b"cudaSetDeviceFlags\0").map(|sym| *sym);
        let cudaGetDeviceFlags = __library.get(b"cudaGetDeviceFlags\0").map(|sym| *sym);
        let cudaStreamCreate = __library.get(b"cudaStreamCreate\0").map(|sym| *sym);
        let cudaStreamCreateWithFlags = __library
            .get(b"cudaStreamCreateWithFlags\0")
            .map(|sym| *sym);
        let cudaStreamCreateWithPriority = __library
            .get(b"cudaStreamCreateWithPriority\0")
            .map(|sym| *sym);
        let cudaStreamGetPriority = __library.get(b"cudaStreamGetPriority\0").map(|sym| *sym);
        let cudaStreamGetFlags = __library.get(b"cudaStreamGetFlags\0").map(|sym| *sym);
        let cudaCtxResetPersistingL2Cache = __library
            .get(b"cudaCtxResetPersistingL2Cache\0")
            .map(|sym| *sym);
        let cudaStreamCopyAttributes = __library.get(b"cudaStreamCopyAttributes\0").map(|sym| *sym);
        let cudaStreamGetAttribute = __library.get(b"cudaStreamGetAttribute\0").map(|sym| *sym);
        let cudaStreamSetAttribute = __library.get(b"cudaStreamSetAttribute\0").map(|sym| *sym);
        let cudaStreamDestroy = __library.get(b"cudaStreamDestroy\0").map(|sym| *sym);
        let cudaStreamWaitEvent = __library.get(b"cudaStreamWaitEvent\0").map(|sym| *sym);
        let cudaStreamAddCallback = __library.get(b"cudaStreamAddCallback\0").map(|sym| *sym);
        let cudaStreamSynchronize = __library.get(b"cudaStreamSynchronize\0").map(|sym| *sym);
        let cudaStreamQuery = __library.get(b"cudaStreamQuery\0").map(|sym| *sym);
        let cudaStreamAttachMemAsync = __library.get(b"cudaStreamAttachMemAsync\0").map(|sym| *sym);
        let cudaStreamBeginCapture = __library.get(b"cudaStreamBeginCapture\0").map(|sym| *sym);
        let cudaThreadExchangeStreamCaptureMode = __library
            .get(b"cudaThreadExchangeStreamCaptureMode\0")
            .map(|sym| *sym);
        let cudaStreamEndCapture = __library.get(b"cudaStreamEndCapture\0").map(|sym| *sym);
        let cudaStreamIsCapturing = __library.get(b"cudaStreamIsCapturing\0").map(|sym| *sym);
        let cudaStreamGetCaptureInfo = __library.get(b"cudaStreamGetCaptureInfo\0").map(|sym| *sym);
        let cudaStreamGetCaptureInfo_v2 = __library
            .get(b"cudaStreamGetCaptureInfo_v2\0")
            .map(|sym| *sym);
        let cudaStreamUpdateCaptureDependencies = __library
            .get(b"cudaStreamUpdateCaptureDependencies\0")
            .map(|sym| *sym);
        let cudaEventCreate = __library.get(b"cudaEventCreate\0").map(|sym| *sym);
        let cudaEventCreateWithFlags = __library.get(b"cudaEventCreateWithFlags\0").map(|sym| *sym);
        let cudaEventRecord = __library.get(b"cudaEventRecord\0").map(|sym| *sym);
        let cudaEventRecordWithFlags = __library.get(b"cudaEventRecordWithFlags\0").map(|sym| *sym);
        let cudaEventQuery = __library.get(b"cudaEventQuery\0").map(|sym| *sym);
        let cudaEventSynchronize = __library.get(b"cudaEventSynchronize\0").map(|sym| *sym);
        let cudaEventDestroy = __library.get(b"cudaEventDestroy\0").map(|sym| *sym);
        let cudaEventElapsedTime = __library.get(b"cudaEventElapsedTime\0").map(|sym| *sym);
        let cudaImportExternalMemory = __library.get(b"cudaImportExternalMemory\0").map(|sym| *sym);
        let cudaExternalMemoryGetMappedBuffer = __library
            .get(b"cudaExternalMemoryGetMappedBuffer\0")
            .map(|sym| *sym);
        let cudaExternalMemoryGetMappedMipmappedArray = __library
            .get(b"cudaExternalMemoryGetMappedMipmappedArray\0")
            .map(|sym| *sym);
        let cudaDestroyExternalMemory = __library
            .get(b"cudaDestroyExternalMemory\0")
            .map(|sym| *sym);
        let cudaImportExternalSemaphore = __library
            .get(b"cudaImportExternalSemaphore\0")
            .map(|sym| *sym);
        let cudaSignalExternalSemaphoresAsync_v2 = __library
            .get(b"cudaSignalExternalSemaphoresAsync_v2\0")
            .map(|sym| *sym);
        let cudaWaitExternalSemaphoresAsync_v2 = __library
            .get(b"cudaWaitExternalSemaphoresAsync_v2\0")
            .map(|sym| *sym);
        let cudaDestroyExternalSemaphore = __library
            .get(b"cudaDestroyExternalSemaphore\0")
            .map(|sym| *sym);
        let cudaLaunchKernel = __library.get(b"cudaLaunchKernel\0").map(|sym| *sym);
        let cudaLaunchCooperativeKernel = __library
            .get(b"cudaLaunchCooperativeKernel\0")
            .map(|sym| *sym);
        let cudaLaunchCooperativeKernelMultiDevice = __library
            .get(b"cudaLaunchCooperativeKernelMultiDevice\0")
            .map(|sym| *sym);
        let cudaFuncSetCacheConfig = __library.get(b"cudaFuncSetCacheConfig\0").map(|sym| *sym);
        let cudaFuncSetSharedMemConfig = __library
            .get(b"cudaFuncSetSharedMemConfig\0")
            .map(|sym| *sym);
        let cudaFuncGetAttributes = __library.get(b"cudaFuncGetAttributes\0").map(|sym| *sym);
        let cudaFuncSetAttribute = __library.get(b"cudaFuncSetAttribute\0").map(|sym| *sym);
        let cudaSetDoubleForDevice = __library.get(b"cudaSetDoubleForDevice\0").map(|sym| *sym);
        let cudaSetDoubleForHost = __library.get(b"cudaSetDoubleForHost\0").map(|sym| *sym);
        let cudaLaunchHostFunc = __library.get(b"cudaLaunchHostFunc\0").map(|sym| *sym);
        let cudaOccupancyMaxActiveBlocksPerMultiprocessor = __library
            .get(b"cudaOccupancyMaxActiveBlocksPerMultiprocessor\0")
            .map(|sym| *sym);
        let cudaOccupancyAvailableDynamicSMemPerBlock = __library
            .get(b"cudaOccupancyAvailableDynamicSMemPerBlock\0")
            .map(|sym| *sym);
        let cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags = __library
            .get(b"cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags\0")
            .map(|sym| *sym);
        let cudaMallocManaged = __library.get(b"cudaMallocManaged\0").map(|sym| *sym);
        let cudaMalloc = __library.get(b"cudaMalloc\0").map(|sym| *sym);
        let cudaMallocHost = __library.get(b"cudaMallocHost\0").map(|sym| *sym);
        let cudaMallocPitch = __library.get(b"cudaMallocPitch\0").map(|sym| *sym);
        let cudaMallocArray = __library.get(b"cudaMallocArray\0").map(|sym| *sym);
        let cudaFree = __library.get(b"cudaFree\0").map(|sym| *sym);
        let cudaFreeHost = __library.get(b"cudaFreeHost\0").map(|sym| *sym);
        let cudaFreeArray = __library.get(b"cudaFreeArray\0").map(|sym| *sym);
        let cudaFreeMipmappedArray = __library.get(b"cudaFreeMipmappedArray\0").map(|sym| *sym);
        let cudaHostAlloc = __library.get(b"cudaHostAlloc\0").map(|sym| *sym);
        let cudaHostRegister = __library.get(b"cudaHostRegister\0").map(|sym| *sym);
        let cudaHostUnregister = __library.get(b"cudaHostUnregister\0").map(|sym| *sym);
        let cudaHostGetDevicePointer = __library.get(b"cudaHostGetDevicePointer\0").map(|sym| *sym);
        let cudaHostGetFlags = __library.get(b"cudaHostGetFlags\0").map(|sym| *sym);
        let cudaMalloc3D = __library.get(b"cudaMalloc3D\0").map(|sym| *sym);
        let cudaMalloc3DArray = __library.get(b"cudaMalloc3DArray\0").map(|sym| *sym);
        let cudaMallocMipmappedArray = __library.get(b"cudaMallocMipmappedArray\0").map(|sym| *sym);
        let cudaGetMipmappedArrayLevel = __library
            .get(b"cudaGetMipmappedArrayLevel\0")
            .map(|sym| *sym);
        let cudaMemcpy3D = __library.get(b"cudaMemcpy3D\0").map(|sym| *sym);
        let cudaMemcpy3DPeer = __library.get(b"cudaMemcpy3DPeer\0").map(|sym| *sym);
        let cudaMemcpy3DAsync = __library.get(b"cudaMemcpy3DAsync\0").map(|sym| *sym);
        let cudaMemcpy3DPeerAsync = __library.get(b"cudaMemcpy3DPeerAsync\0").map(|sym| *sym);
        let cudaMemGetInfo = __library.get(b"cudaMemGetInfo\0").map(|sym| *sym);
        let cudaArrayGetInfo = __library.get(b"cudaArrayGetInfo\0").map(|sym| *sym);
        let cudaArrayGetPlane = __library.get(b"cudaArrayGetPlane\0").map(|sym| *sym);
        let cudaArrayGetMemoryRequirements = __library
            .get(b"cudaArrayGetMemoryRequirements\0")
            .map(|sym| *sym);
        let cudaMipmappedArrayGetMemoryRequirements = __library
            .get(b"cudaMipmappedArrayGetMemoryRequirements\0")
            .map(|sym| *sym);
        let cudaArrayGetSparseProperties = __library
            .get(b"cudaArrayGetSparseProperties\0")
            .map(|sym| *sym);
        let cudaMipmappedArrayGetSparseProperties = __library
            .get(b"cudaMipmappedArrayGetSparseProperties\0")
            .map(|sym| *sym);
        let cudaMemcpy = __library.get(b"cudaMemcpy\0").map(|sym| *sym);
        let cudaMemcpyPeer = __library.get(b"cudaMemcpyPeer\0").map(|sym| *sym);
        let cudaMemcpy2D = __library.get(b"cudaMemcpy2D\0").map(|sym| *sym);
        let cudaMemcpy2DToArray = __library.get(b"cudaMemcpy2DToArray\0").map(|sym| *sym);
        let cudaMemcpy2DFromArray = __library.get(b"cudaMemcpy2DFromArray\0").map(|sym| *sym);
        let cudaMemcpy2DArrayToArray = __library.get(b"cudaMemcpy2DArrayToArray\0").map(|sym| *sym);
        let cudaMemcpyToSymbol = __library.get(b"cudaMemcpyToSymbol\0").map(|sym| *sym);
        let cudaMemcpyFromSymbol = __library.get(b"cudaMemcpyFromSymbol\0").map(|sym| *sym);
        let cudaMemcpyAsync = __library.get(b"cudaMemcpyAsync\0").map(|sym| *sym);
        let cudaMemcpyPeerAsync = __library.get(b"cudaMemcpyPeerAsync\0").map(|sym| *sym);
        let cudaMemcpy2DAsync = __library.get(b"cudaMemcpy2DAsync\0").map(|sym| *sym);
        let cudaMemcpy2DToArrayAsync = __library.get(b"cudaMemcpy2DToArrayAsync\0").map(|sym| *sym);
        let cudaMemcpy2DFromArrayAsync = __library
            .get(b"cudaMemcpy2DFromArrayAsync\0")
            .map(|sym| *sym);
        let cudaMemcpyToSymbolAsync = __library.get(b"cudaMemcpyToSymbolAsync\0").map(|sym| *sym);
        let cudaMemcpyFromSymbolAsync = __library
            .get(b"cudaMemcpyFromSymbolAsync\0")
            .map(|sym| *sym);
        let cudaMemset = __library.get(b"cudaMemset\0").map(|sym| *sym);
        let cudaMemset2D = __library.get(b"cudaMemset2D\0").map(|sym| *sym);
        let cudaMemset3D = __library.get(b"cudaMemset3D\0").map(|sym| *sym);
        let cudaMemsetAsync = __library.get(b"cudaMemsetAsync\0").map(|sym| *sym);
        let cudaMemset2DAsync = __library.get(b"cudaMemset2DAsync\0").map(|sym| *sym);
        let cudaMemset3DAsync = __library.get(b"cudaMemset3DAsync\0").map(|sym| *sym);
        let cudaGetSymbolAddress = __library.get(b"cudaGetSymbolAddress\0").map(|sym| *sym);
        let cudaGetSymbolSize = __library.get(b"cudaGetSymbolSize\0").map(|sym| *sym);
        let cudaMemPrefetchAsync = __library.get(b"cudaMemPrefetchAsync\0").map(|sym| *sym);
        let cudaMemAdvise = __library.get(b"cudaMemAdvise\0").map(|sym| *sym);
        let cudaMemRangeGetAttribute = __library.get(b"cudaMemRangeGetAttribute\0").map(|sym| *sym);
        let cudaMemRangeGetAttributes = __library
            .get(b"cudaMemRangeGetAttributes\0")
            .map(|sym| *sym);
        let cudaMemcpyToArray = __library.get(b"cudaMemcpyToArray\0").map(|sym| *sym);
        let cudaMemcpyFromArray = __library.get(b"cudaMemcpyFromArray\0").map(|sym| *sym);
        let cudaMemcpyArrayToArray = __library.get(b"cudaMemcpyArrayToArray\0").map(|sym| *sym);
        let cudaMemcpyToArrayAsync = __library.get(b"cudaMemcpyToArrayAsync\0").map(|sym| *sym);
        let cudaMemcpyFromArrayAsync = __library.get(b"cudaMemcpyFromArrayAsync\0").map(|sym| *sym);
        let cudaMallocAsync = __library.get(b"cudaMallocAsync\0").map(|sym| *sym);
        let cudaFreeAsync = __library.get(b"cudaFreeAsync\0").map(|sym| *sym);
        let cudaMemPoolTrimTo = __library.get(b"cudaMemPoolTrimTo\0").map(|sym| *sym);
        let cudaMemPoolSetAttribute = __library.get(b"cudaMemPoolSetAttribute\0").map(|sym| *sym);
        let cudaMemPoolGetAttribute = __library.get(b"cudaMemPoolGetAttribute\0").map(|sym| *sym);
        let cudaMemPoolSetAccess = __library.get(b"cudaMemPoolSetAccess\0").map(|sym| *sym);
        let cudaMemPoolGetAccess = __library.get(b"cudaMemPoolGetAccess\0").map(|sym| *sym);
        let cudaMemPoolCreate = __library.get(b"cudaMemPoolCreate\0").map(|sym| *sym);
        let cudaMemPoolDestroy = __library.get(b"cudaMemPoolDestroy\0").map(|sym| *sym);
        let cudaMallocFromPoolAsync = __library.get(b"cudaMallocFromPoolAsync\0").map(|sym| *sym);
        let cudaMemPoolExportToShareableHandle = __library
            .get(b"cudaMemPoolExportToShareableHandle\0")
            .map(|sym| *sym);
        let cudaMemPoolImportFromShareableHandle = __library
            .get(b"cudaMemPoolImportFromShareableHandle\0")
            .map(|sym| *sym);
        let cudaMemPoolExportPointer = __library.get(b"cudaMemPoolExportPointer\0").map(|sym| *sym);
        let cudaMemPoolImportPointer = __library.get(b"cudaMemPoolImportPointer\0").map(|sym| *sym);
        let cudaPointerGetAttributes = __library.get(b"cudaPointerGetAttributes\0").map(|sym| *sym);
        let cudaDeviceCanAccessPeer = __library.get(b"cudaDeviceCanAccessPeer\0").map(|sym| *sym);
        let cudaDeviceEnablePeerAccess = __library
            .get(b"cudaDeviceEnablePeerAccess\0")
            .map(|sym| *sym);
        let cudaDeviceDisablePeerAccess = __library
            .get(b"cudaDeviceDisablePeerAccess\0")
            .map(|sym| *sym);
        let cudaGraphicsUnregisterResource = __library
            .get(b"cudaGraphicsUnregisterResource\0")
            .map(|sym| *sym);
        let cudaGraphicsResourceSetMapFlags = __library
            .get(b"cudaGraphicsResourceSetMapFlags\0")
            .map(|sym| *sym);
        let cudaGraphicsMapResources = __library.get(b"cudaGraphicsMapResources\0").map(|sym| *sym);
        let cudaGraphicsUnmapResources = __library
            .get(b"cudaGraphicsUnmapResources\0")
            .map(|sym| *sym);
        let cudaGraphicsResourceGetMappedPointer = __library
            .get(b"cudaGraphicsResourceGetMappedPointer\0")
            .map(|sym| *sym);
        let cudaGraphicsSubResourceGetMappedArray = __library
            .get(b"cudaGraphicsSubResourceGetMappedArray\0")
            .map(|sym| *sym);
        let cudaGraphicsResourceGetMappedMipmappedArray = __library
            .get(b"cudaGraphicsResourceGetMappedMipmappedArray\0")
            .map(|sym| *sym);
        let cudaBindTexture = __library.get(b"cudaBindTexture\0").map(|sym| *sym);
        let cudaBindTexture2D = __library.get(b"cudaBindTexture2D\0").map(|sym| *sym);
        let cudaBindTextureToArray = __library.get(b"cudaBindTextureToArray\0").map(|sym| *sym);
        let cudaBindTextureToMipmappedArray = __library
            .get(b"cudaBindTextureToMipmappedArray\0")
            .map(|sym| *sym);
        let cudaUnbindTexture = __library.get(b"cudaUnbindTexture\0").map(|sym| *sym);
        let cudaGetTextureAlignmentOffset = __library
            .get(b"cudaGetTextureAlignmentOffset\0")
            .map(|sym| *sym);
        let cudaGetTextureReference = __library.get(b"cudaGetTextureReference\0").map(|sym| *sym);
        let cudaBindSurfaceToArray = __library.get(b"cudaBindSurfaceToArray\0").map(|sym| *sym);
        let cudaGetSurfaceReference = __library.get(b"cudaGetSurfaceReference\0").map(|sym| *sym);
        let cudaGetChannelDesc = __library.get(b"cudaGetChannelDesc\0").map(|sym| *sym);
        let cudaCreateChannelDesc = __library.get(b"cudaCreateChannelDesc\0").map(|sym| *sym);
        let cudaCreateTextureObject = __library.get(b"cudaCreateTextureObject\0").map(|sym| *sym);
        let cudaDestroyTextureObject = __library.get(b"cudaDestroyTextureObject\0").map(|sym| *sym);
        let cudaGetTextureObjectResourceDesc = __library
            .get(b"cudaGetTextureObjectResourceDesc\0")
            .map(|sym| *sym);
        let cudaGetTextureObjectTextureDesc = __library
            .get(b"cudaGetTextureObjectTextureDesc\0")
            .map(|sym| *sym);
        let cudaGetTextureObjectResourceViewDesc = __library
            .get(b"cudaGetTextureObjectResourceViewDesc\0")
            .map(|sym| *sym);
        let cudaCreateSurfaceObject = __library.get(b"cudaCreateSurfaceObject\0").map(|sym| *sym);
        let cudaDestroySurfaceObject = __library.get(b"cudaDestroySurfaceObject\0").map(|sym| *sym);
        let cudaGetSurfaceObjectResourceDesc = __library
            .get(b"cudaGetSurfaceObjectResourceDesc\0")
            .map(|sym| *sym);
        let cudaDriverGetVersion = __library.get(b"cudaDriverGetVersion\0").map(|sym| *sym);
        let cudaRuntimeGetVersion = __library.get(b"cudaRuntimeGetVersion\0").map(|sym| *sym);
        let cudaGraphCreate = __library.get(b"cudaGraphCreate\0").map(|sym| *sym);
        let cudaGraphAddKernelNode = __library.get(b"cudaGraphAddKernelNode\0").map(|sym| *sym);
        let cudaGraphKernelNodeGetParams = __library
            .get(b"cudaGraphKernelNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeSetParams = __library
            .get(b"cudaGraphKernelNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeCopyAttributes = __library
            .get(b"cudaGraphKernelNodeCopyAttributes\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeGetAttribute = __library
            .get(b"cudaGraphKernelNodeGetAttribute\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeSetAttribute = __library
            .get(b"cudaGraphKernelNodeSetAttribute\0")
            .map(|sym| *sym);
        let cudaGraphAddMemcpyNode = __library.get(b"cudaGraphAddMemcpyNode\0").map(|sym| *sym);
        let cudaGraphAddMemcpyNodeToSymbol = __library
            .get(b"cudaGraphAddMemcpyNodeToSymbol\0")
            .map(|sym| *sym);
        let cudaGraphAddMemcpyNodeFromSymbol = __library
            .get(b"cudaGraphAddMemcpyNodeFromSymbol\0")
            .map(|sym| *sym);
        let cudaGraphAddMemcpyNode1D = __library.get(b"cudaGraphAddMemcpyNode1D\0").map(|sym| *sym);
        let cudaGraphMemcpyNodeGetParams = __library
            .get(b"cudaGraphMemcpyNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParams = __library
            .get(b"cudaGraphMemcpyNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParamsToSymbol = __library
            .get(b"cudaGraphMemcpyNodeSetParamsToSymbol\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParamsFromSymbol = __library
            .get(b"cudaGraphMemcpyNodeSetParamsFromSymbol\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParams1D = __library
            .get(b"cudaGraphMemcpyNodeSetParams1D\0")
            .map(|sym| *sym);
        let cudaGraphAddMemsetNode = __library.get(b"cudaGraphAddMemsetNode\0").map(|sym| *sym);
        let cudaGraphMemsetNodeGetParams = __library
            .get(b"cudaGraphMemsetNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphMemsetNodeSetParams = __library
            .get(b"cudaGraphMemsetNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddHostNode = __library.get(b"cudaGraphAddHostNode\0").map(|sym| *sym);
        let cudaGraphHostNodeGetParams = __library
            .get(b"cudaGraphHostNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphHostNodeSetParams = __library
            .get(b"cudaGraphHostNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddChildGraphNode = __library
            .get(b"cudaGraphAddChildGraphNode\0")
            .map(|sym| *sym);
        let cudaGraphChildGraphNodeGetGraph = __library
            .get(b"cudaGraphChildGraphNodeGetGraph\0")
            .map(|sym| *sym);
        let cudaGraphAddEmptyNode = __library.get(b"cudaGraphAddEmptyNode\0").map(|sym| *sym);
        let cudaGraphAddEventRecordNode = __library
            .get(b"cudaGraphAddEventRecordNode\0")
            .map(|sym| *sym);
        let cudaGraphEventRecordNodeGetEvent = __library
            .get(b"cudaGraphEventRecordNodeGetEvent\0")
            .map(|sym| *sym);
        let cudaGraphEventRecordNodeSetEvent = __library
            .get(b"cudaGraphEventRecordNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphAddEventWaitNode = __library
            .get(b"cudaGraphAddEventWaitNode\0")
            .map(|sym| *sym);
        let cudaGraphEventWaitNodeGetEvent = __library
            .get(b"cudaGraphEventWaitNodeGetEvent\0")
            .map(|sym| *sym);
        let cudaGraphEventWaitNodeSetEvent = __library
            .get(b"cudaGraphEventWaitNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphAddExternalSemaphoresSignalNode = __library
            .get(b"cudaGraphAddExternalSemaphoresSignalNode\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresSignalNodeGetParams = __library
            .get(b"cudaGraphExternalSemaphoresSignalNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresSignalNodeSetParams = __library
            .get(b"cudaGraphExternalSemaphoresSignalNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddExternalSemaphoresWaitNode = __library
            .get(b"cudaGraphAddExternalSemaphoresWaitNode\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresWaitNodeGetParams = __library
            .get(b"cudaGraphExternalSemaphoresWaitNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresWaitNodeSetParams = __library
            .get(b"cudaGraphExternalSemaphoresWaitNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddMemAllocNode = __library.get(b"cudaGraphAddMemAllocNode\0").map(|sym| *sym);
        let cudaGraphMemAllocNodeGetParams = __library
            .get(b"cudaGraphMemAllocNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddMemFreeNode = __library.get(b"cudaGraphAddMemFreeNode\0").map(|sym| *sym);
        let cudaGraphMemFreeNodeGetParams = __library
            .get(b"cudaGraphMemFreeNodeGetParams\0")
            .map(|sym| *sym);
        let cudaDeviceGraphMemTrim = __library.get(b"cudaDeviceGraphMemTrim\0").map(|sym| *sym);
        let cudaDeviceGetGraphMemAttribute = __library
            .get(b"cudaDeviceGetGraphMemAttribute\0")
            .map(|sym| *sym);
        let cudaDeviceSetGraphMemAttribute = __library
            .get(b"cudaDeviceSetGraphMemAttribute\0")
            .map(|sym| *sym);
        let cudaGraphClone = __library.get(b"cudaGraphClone\0").map(|sym| *sym);
        let cudaGraphNodeFindInClone = __library.get(b"cudaGraphNodeFindInClone\0").map(|sym| *sym);
        let cudaGraphNodeGetType = __library.get(b"cudaGraphNodeGetType\0").map(|sym| *sym);
        let cudaGraphGetNodes = __library.get(b"cudaGraphGetNodes\0").map(|sym| *sym);
        let cudaGraphGetRootNodes = __library.get(b"cudaGraphGetRootNodes\0").map(|sym| *sym);
        let cudaGraphGetEdges = __library.get(b"cudaGraphGetEdges\0").map(|sym| *sym);
        let cudaGraphNodeGetDependencies = __library
            .get(b"cudaGraphNodeGetDependencies\0")
            .map(|sym| *sym);
        let cudaGraphNodeGetDependentNodes = __library
            .get(b"cudaGraphNodeGetDependentNodes\0")
            .map(|sym| *sym);
        let cudaGraphAddDependencies = __library.get(b"cudaGraphAddDependencies\0").map(|sym| *sym);
        let cudaGraphRemoveDependencies = __library
            .get(b"cudaGraphRemoveDependencies\0")
            .map(|sym| *sym);
        let cudaGraphDestroyNode = __library.get(b"cudaGraphDestroyNode\0").map(|sym| *sym);
        let cudaGraphInstantiate = __library.get(b"cudaGraphInstantiate\0").map(|sym| *sym);
        let cudaGraphInstantiateWithFlags = __library
            .get(b"cudaGraphInstantiateWithFlags\0")
            .map(|sym| *sym);
        let cudaGraphExecKernelNodeSetParams = __library
            .get(b"cudaGraphExecKernelNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParams = __library
            .get(b"cudaGraphExecMemcpyNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParamsToSymbol = __library
            .get(b"cudaGraphExecMemcpyNodeSetParamsToSymbol\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParamsFromSymbol = __library
            .get(b"cudaGraphExecMemcpyNodeSetParamsFromSymbol\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParams1D = __library
            .get(b"cudaGraphExecMemcpyNodeSetParams1D\0")
            .map(|sym| *sym);
        let cudaGraphExecMemsetNodeSetParams = __library
            .get(b"cudaGraphExecMemsetNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecHostNodeSetParams = __library
            .get(b"cudaGraphExecHostNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecChildGraphNodeSetParams = __library
            .get(b"cudaGraphExecChildGraphNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecEventRecordNodeSetEvent = __library
            .get(b"cudaGraphExecEventRecordNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphExecEventWaitNodeSetEvent = __library
            .get(b"cudaGraphExecEventWaitNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphExecExternalSemaphoresSignalNodeSetParams = __library
            .get(b"cudaGraphExecExternalSemaphoresSignalNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecExternalSemaphoresWaitNodeSetParams = __library
            .get(b"cudaGraphExecExternalSemaphoresWaitNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphNodeSetEnabled = __library.get(b"cudaGraphNodeSetEnabled\0").map(|sym| *sym);
        let cudaGraphNodeGetEnabled = __library.get(b"cudaGraphNodeGetEnabled\0").map(|sym| *sym);
        let cudaGraphExecUpdate = __library.get(b"cudaGraphExecUpdate\0").map(|sym| *sym);
        let cudaGraphUpload = __library.get(b"cudaGraphUpload\0").map(|sym| *sym);
        let cudaGraphLaunch = __library.get(b"cudaGraphLaunch\0").map(|sym| *sym);
        let cudaGraphExecDestroy = __library.get(b"cudaGraphExecDestroy\0").map(|sym| *sym);
        let cudaGraphDestroy = __library.get(b"cudaGraphDestroy\0").map(|sym| *sym);
        let cudaGraphDebugDotPrint = __library.get(b"cudaGraphDebugDotPrint\0").map(|sym| *sym);
        let cudaUserObjectCreate = __library.get(b"cudaUserObjectCreate\0").map(|sym| *sym);
        let cudaUserObjectRetain = __library.get(b"cudaUserObjectRetain\0").map(|sym| *sym);
        let cudaUserObjectRelease = __library.get(b"cudaUserObjectRelease\0").map(|sym| *sym);
        let cudaGraphRetainUserObject = __library
            .get(b"cudaGraphRetainUserObject\0")
            .map(|sym| *sym);
        let cudaGraphReleaseUserObject = __library
            .get(b"cudaGraphReleaseUserObject\0")
            .map(|sym| *sym);
        let cudaGetDriverEntryPoint = __library.get(b"cudaGetDriverEntryPoint\0").map(|sym| *sym);
        let cudaGetExportTable = __library.get(b"cudaGetExportTable\0").map(|sym| *sym);
        let cudaGetFuncBySymbol = __library.get(b"cudaGetFuncBySymbol\0").map(|sym| *sym);
        let cudaProfilerInitialize = __library.get(b"cudaProfilerInitialize\0").map(|sym| *sym);
        let cudaProfilerStart = __library.get(b"cudaProfilerStart\0").map(|sym| *sym);
        let cudaProfilerStop = __library.get(b"cudaProfilerStop\0").map(|sym| *sym);
        Ok(Lib {
            __library,
            cudaDeviceReset,
            cudaDeviceSynchronize,
            cudaDeviceSetLimit,
            cudaDeviceGetLimit,
            cudaDeviceGetTexture1DLinearMaxWidth,
            cudaDeviceGetCacheConfig,
            cudaDeviceGetStreamPriorityRange,
            cudaDeviceSetCacheConfig,
            cudaDeviceGetSharedMemConfig,
            cudaDeviceSetSharedMemConfig,
            cudaDeviceGetByPCIBusId,
            cudaDeviceGetPCIBusId,
            cudaIpcGetEventHandle,
            cudaIpcOpenEventHandle,
            cudaIpcGetMemHandle,
            cudaIpcOpenMemHandle,
            cudaIpcCloseMemHandle,
            cudaDeviceFlushGPUDirectRDMAWrites,
            cudaThreadExit,
            cudaThreadSynchronize,
            cudaThreadSetLimit,
            cudaThreadGetLimit,
            cudaThreadGetCacheConfig,
            cudaThreadSetCacheConfig,
            cudaGetLastError,
            cudaPeekAtLastError,
            cudaGetErrorName,
            cudaGetErrorString,
            cudaGetDeviceCount,
            cudaGetDeviceProperties,
            cudaDeviceGetAttribute,
            cudaDeviceGetDefaultMemPool,
            cudaDeviceSetMemPool,
            cudaDeviceGetMemPool,
            cudaDeviceGetNvSciSyncAttributes,
            cudaDeviceGetP2PAttribute,
            cudaChooseDevice,
            cudaSetDevice,
            cudaGetDevice,
            cudaSetValidDevices,
            cudaSetDeviceFlags,
            cudaGetDeviceFlags,
            cudaStreamCreate,
            cudaStreamCreateWithFlags,
            cudaStreamCreateWithPriority,
            cudaStreamGetPriority,
            cudaStreamGetFlags,
            cudaCtxResetPersistingL2Cache,
            cudaStreamCopyAttributes,
            cudaStreamGetAttribute,
            cudaStreamSetAttribute,
            cudaStreamDestroy,
            cudaStreamWaitEvent,
            cudaStreamAddCallback,
            cudaStreamSynchronize,
            cudaStreamQuery,
            cudaStreamAttachMemAsync,
            cudaStreamBeginCapture,
            cudaThreadExchangeStreamCaptureMode,
            cudaStreamEndCapture,
            cudaStreamIsCapturing,
            cudaStreamGetCaptureInfo,
            cudaStreamGetCaptureInfo_v2,
            cudaStreamUpdateCaptureDependencies,
            cudaEventCreate,
            cudaEventCreateWithFlags,
            cudaEventRecord,
            cudaEventRecordWithFlags,
            cudaEventQuery,
            cudaEventSynchronize,
            cudaEventDestroy,
            cudaEventElapsedTime,
            cudaImportExternalMemory,
            cudaExternalMemoryGetMappedBuffer,
            cudaExternalMemoryGetMappedMipmappedArray,
            cudaDestroyExternalMemory,
            cudaImportExternalSemaphore,
            cudaSignalExternalSemaphoresAsync_v2,
            cudaWaitExternalSemaphoresAsync_v2,
            cudaDestroyExternalSemaphore,
            cudaLaunchKernel,
            cudaLaunchCooperativeKernel,
            cudaLaunchCooperativeKernelMultiDevice,
            cudaFuncSetCacheConfig,
            cudaFuncSetSharedMemConfig,
            cudaFuncGetAttributes,
            cudaFuncSetAttribute,
            cudaSetDoubleForDevice,
            cudaSetDoubleForHost,
            cudaLaunchHostFunc,
            cudaOccupancyMaxActiveBlocksPerMultiprocessor,
            cudaOccupancyAvailableDynamicSMemPerBlock,
            cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags,
            cudaMallocManaged,
            cudaMalloc,
            cudaMallocHost,
            cudaMallocPitch,
            cudaMallocArray,
            cudaFree,
            cudaFreeHost,
            cudaFreeArray,
            cudaFreeMipmappedArray,
            cudaHostAlloc,
            cudaHostRegister,
            cudaHostUnregister,
            cudaHostGetDevicePointer,
            cudaHostGetFlags,
            cudaMalloc3D,
            cudaMalloc3DArray,
            cudaMallocMipmappedArray,
            cudaGetMipmappedArrayLevel,
            cudaMemcpy3D,
            cudaMemcpy3DPeer,
            cudaMemcpy3DAsync,
            cudaMemcpy3DPeerAsync,
            cudaMemGetInfo,
            cudaArrayGetInfo,
            cudaArrayGetPlane,
            cudaArrayGetMemoryRequirements,
            cudaMipmappedArrayGetMemoryRequirements,
            cudaArrayGetSparseProperties,
            cudaMipmappedArrayGetSparseProperties,
            cudaMemcpy,
            cudaMemcpyPeer,
            cudaMemcpy2D,
            cudaMemcpy2DToArray,
            cudaMemcpy2DFromArray,
            cudaMemcpy2DArrayToArray,
            cudaMemcpyToSymbol,
            cudaMemcpyFromSymbol,
            cudaMemcpyAsync,
            cudaMemcpyPeerAsync,
            cudaMemcpy2DAsync,
            cudaMemcpy2DToArrayAsync,
            cudaMemcpy2DFromArrayAsync,
            cudaMemcpyToSymbolAsync,
            cudaMemcpyFromSymbolAsync,
            cudaMemset,
            cudaMemset2D,
            cudaMemset3D,
            cudaMemsetAsync,
            cudaMemset2DAsync,
            cudaMemset3DAsync,
            cudaGetSymbolAddress,
            cudaGetSymbolSize,
            cudaMemPrefetchAsync,
            cudaMemAdvise,
            cudaMemRangeGetAttribute,
            cudaMemRangeGetAttributes,
            cudaMemcpyToArray,
            cudaMemcpyFromArray,
            cudaMemcpyArrayToArray,
            cudaMemcpyToArrayAsync,
            cudaMemcpyFromArrayAsync,
            cudaMallocAsync,
            cudaFreeAsync,
            cudaMemPoolTrimTo,
            cudaMemPoolSetAttribute,
            cudaMemPoolGetAttribute,
            cudaMemPoolSetAccess,
            cudaMemPoolGetAccess,
            cudaMemPoolCreate,
            cudaMemPoolDestroy,
            cudaMallocFromPoolAsync,
            cudaMemPoolExportToShareableHandle,
            cudaMemPoolImportFromShareableHandle,
            cudaMemPoolExportPointer,
            cudaMemPoolImportPointer,
            cudaPointerGetAttributes,
            cudaDeviceCanAccessPeer,
            cudaDeviceEnablePeerAccess,
            cudaDeviceDisablePeerAccess,
            cudaGraphicsUnregisterResource,
            cudaGraphicsResourceSetMapFlags,
            cudaGraphicsMapResources,
            cudaGraphicsUnmapResources,
            cudaGraphicsResourceGetMappedPointer,
            cudaGraphicsSubResourceGetMappedArray,
            cudaGraphicsResourceGetMappedMipmappedArray,
            cudaBindTexture,
            cudaBindTexture2D,
            cudaBindTextureToArray,
            cudaBindTextureToMipmappedArray,
            cudaUnbindTexture,
            cudaGetTextureAlignmentOffset,
            cudaGetTextureReference,
            cudaBindSurfaceToArray,
            cudaGetSurfaceReference,
            cudaGetChannelDesc,
            cudaCreateChannelDesc,
            cudaCreateTextureObject,
            cudaDestroyTextureObject,
            cudaGetTextureObjectResourceDesc,
            cudaGetTextureObjectTextureDesc,
            cudaGetTextureObjectResourceViewDesc,
            cudaCreateSurfaceObject,
            cudaDestroySurfaceObject,
            cudaGetSurfaceObjectResourceDesc,
            cudaDriverGetVersion,
            cudaRuntimeGetVersion,
            cudaGraphCreate,
            cudaGraphAddKernelNode,
            cudaGraphKernelNodeGetParams,
            cudaGraphKernelNodeSetParams,
            cudaGraphKernelNodeCopyAttributes,
            cudaGraphKernelNodeGetAttribute,
            cudaGraphKernelNodeSetAttribute,
            cudaGraphAddMemcpyNode,
            cudaGraphAddMemcpyNodeToSymbol,
            cudaGraphAddMemcpyNodeFromSymbol,
            cudaGraphAddMemcpyNode1D,
            cudaGraphMemcpyNodeGetParams,
            cudaGraphMemcpyNodeSetParams,
            cudaGraphMemcpyNodeSetParamsToSymbol,
            cudaGraphMemcpyNodeSetParamsFromSymbol,
            cudaGraphMemcpyNodeSetParams1D,
            cudaGraphAddMemsetNode,
            cudaGraphMemsetNodeGetParams,
            cudaGraphMemsetNodeSetParams,
            cudaGraphAddHostNode,
            cudaGraphHostNodeGetParams,
            cudaGraphHostNodeSetParams,
            cudaGraphAddChildGraphNode,
            cudaGraphChildGraphNodeGetGraph,
            cudaGraphAddEmptyNode,
            cudaGraphAddEventRecordNode,
            cudaGraphEventRecordNodeGetEvent,
            cudaGraphEventRecordNodeSetEvent,
            cudaGraphAddEventWaitNode,
            cudaGraphEventWaitNodeGetEvent,
            cudaGraphEventWaitNodeSetEvent,
            cudaGraphAddExternalSemaphoresSignalNode,
            cudaGraphExternalSemaphoresSignalNodeGetParams,
            cudaGraphExternalSemaphoresSignalNodeSetParams,
            cudaGraphAddExternalSemaphoresWaitNode,
            cudaGraphExternalSemaphoresWaitNodeGetParams,
            cudaGraphExternalSemaphoresWaitNodeSetParams,
            cudaGraphAddMemAllocNode,
            cudaGraphMemAllocNodeGetParams,
            cudaGraphAddMemFreeNode,
            cudaGraphMemFreeNodeGetParams,
            cudaDeviceGraphMemTrim,
            cudaDeviceGetGraphMemAttribute,
            cudaDeviceSetGraphMemAttribute,
            cudaGraphClone,
            cudaGraphNodeFindInClone,
            cudaGraphNodeGetType,
            cudaGraphGetNodes,
            cudaGraphGetRootNodes,
            cudaGraphGetEdges,
            cudaGraphNodeGetDependencies,
            cudaGraphNodeGetDependentNodes,
            cudaGraphAddDependencies,
            cudaGraphRemoveDependencies,
            cudaGraphDestroyNode,
            cudaGraphInstantiate,
            cudaGraphInstantiateWithFlags,
            cudaGraphExecKernelNodeSetParams,
            cudaGraphExecMemcpyNodeSetParams,
            cudaGraphExecMemcpyNodeSetParamsToSymbol,
            cudaGraphExecMemcpyNodeSetParamsFromSymbol,
            cudaGraphExecMemcpyNodeSetParams1D,
            cudaGraphExecMemsetNodeSetParams,
            cudaGraphExecHostNodeSetParams,
            cudaGraphExecChildGraphNodeSetParams,
            cudaGraphExecEventRecordNodeSetEvent,
            cudaGraphExecEventWaitNodeSetEvent,
            cudaGraphExecExternalSemaphoresSignalNodeSetParams,
            cudaGraphExecExternalSemaphoresWaitNodeSetParams,
            cudaGraphNodeSetEnabled,
            cudaGraphNodeGetEnabled,
            cudaGraphExecUpdate,
            cudaGraphUpload,
            cudaGraphLaunch,
            cudaGraphExecDestroy,
            cudaGraphDestroy,
            cudaGraphDebugDotPrint,
            cudaUserObjectCreate,
            cudaUserObjectRetain,
            cudaUserObjectRelease,
            cudaGraphRetainUserObject,
            cudaGraphReleaseUserObject,
            cudaGetDriverEntryPoint,
            cudaGetExportTable,
            cudaGetFuncBySymbol,
            cudaProfilerInitialize,
            cudaProfilerStart,
            cudaProfilerStop,
        })
    }
    pub unsafe fn cudaDeviceReset(&self) -> cudaError_t {
        (self
            .cudaDeviceReset
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaDeviceSynchronize(&self) -> cudaError_t {
        (self
            .cudaDeviceSynchronize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaDeviceSetLimit(&self, limit: cudaLimit, value: usize) -> cudaError_t {
        (self
            .cudaDeviceSetLimit
            .as_ref()
            .expect("Expected function, got error."))(limit, value)
    }
    pub unsafe fn cudaDeviceGetLimit(&self, pValue: *mut usize, limit: cudaLimit) -> cudaError_t {
        (self
            .cudaDeviceGetLimit
            .as_ref()
            .expect("Expected function, got error."))(pValue, limit)
    }
    pub unsafe fn cudaDeviceGetTexture1DLinearMaxWidth(
        &self,
        maxWidthInElements: *mut usize,
        fmtDesc: *const cudaChannelFormatDesc,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetTexture1DLinearMaxWidth
            .as_ref()
            .expect("Expected function, got error."))(maxWidthInElements, fmtDesc, device)
    }
    pub unsafe fn cudaDeviceGetCacheConfig(&self, pCacheConfig: *mut cudaFuncCache) -> cudaError_t {
        (self
            .cudaDeviceGetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(pCacheConfig)
    }
    pub unsafe fn cudaDeviceGetStreamPriorityRange(
        &self,
        leastPriority: *mut ::core::ffi::c_int,
        greatestPriority: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetStreamPriorityRange
            .as_ref()
            .expect("Expected function, got error."))(leastPriority, greatestPriority)
    }
    pub unsafe fn cudaDeviceSetCacheConfig(&self, cacheConfig: cudaFuncCache) -> cudaError_t {
        (self
            .cudaDeviceSetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(cacheConfig)
    }
    pub unsafe fn cudaDeviceGetSharedMemConfig(
        &self,
        pConfig: *mut cudaSharedMemConfig,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetSharedMemConfig
            .as_ref()
            .expect("Expected function, got error."))(pConfig)
    }
    pub unsafe fn cudaDeviceSetSharedMemConfig(&self, config: cudaSharedMemConfig) -> cudaError_t {
        (self
            .cudaDeviceSetSharedMemConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn cudaDeviceGetByPCIBusId(
        &self,
        device: *mut ::core::ffi::c_int,
        pciBusId: *const ::core::ffi::c_char,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetByPCIBusId
            .as_ref()
            .expect("Expected function, got error."))(device, pciBusId)
    }
    pub unsafe fn cudaDeviceGetPCIBusId(
        &self,
        pciBusId: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetPCIBusId
            .as_ref()
            .expect("Expected function, got error."))(pciBusId, len, device)
    }
    pub unsafe fn cudaIpcGetEventHandle(
        &self,
        handle: *mut cudaIpcEventHandle_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaIpcGetEventHandle
            .as_ref()
            .expect("Expected function, got error."))(handle, event)
    }
    pub unsafe fn cudaIpcOpenEventHandle(
        &self,
        event: *mut cudaEvent_t,
        handle: cudaIpcEventHandle_t,
    ) -> cudaError_t {
        (self
            .cudaIpcOpenEventHandle
            .as_ref()
            .expect("Expected function, got error."))(event, handle)
    }
    pub unsafe fn cudaIpcGetMemHandle(
        &self,
        handle: *mut cudaIpcMemHandle_t,
        devPtr: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaIpcGetMemHandle
            .as_ref()
            .expect("Expected function, got error."))(handle, devPtr)
    }
    pub unsafe fn cudaIpcOpenMemHandle(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        handle: cudaIpcMemHandle_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaIpcOpenMemHandle
            .as_ref()
            .expect("Expected function, got error."))(devPtr, handle, flags)
    }
    pub unsafe fn cudaIpcCloseMemHandle(&self, devPtr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaIpcCloseMemHandle
            .as_ref()
            .expect("Expected function, got error."))(devPtr)
    }
    pub unsafe fn cudaDeviceFlushGPUDirectRDMAWrites(
        &self,
        target: cudaFlushGPUDirectRDMAWritesTarget,
        scope: cudaFlushGPUDirectRDMAWritesScope,
    ) -> cudaError_t {
        (self
            .cudaDeviceFlushGPUDirectRDMAWrites
            .as_ref()
            .expect("Expected function, got error."))(target, scope)
    }
    pub unsafe fn cudaThreadExit(&self) -> cudaError_t {
        (self
            .cudaThreadExit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaThreadSynchronize(&self) -> cudaError_t {
        (self
            .cudaThreadSynchronize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaThreadSetLimit(&self, limit: cudaLimit, value: usize) -> cudaError_t {
        (self
            .cudaThreadSetLimit
            .as_ref()
            .expect("Expected function, got error."))(limit, value)
    }
    pub unsafe fn cudaThreadGetLimit(&self, pValue: *mut usize, limit: cudaLimit) -> cudaError_t {
        (self
            .cudaThreadGetLimit
            .as_ref()
            .expect("Expected function, got error."))(pValue, limit)
    }
    pub unsafe fn cudaThreadGetCacheConfig(&self, pCacheConfig: *mut cudaFuncCache) -> cudaError_t {
        (self
            .cudaThreadGetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(pCacheConfig)
    }
    pub unsafe fn cudaThreadSetCacheConfig(&self, cacheConfig: cudaFuncCache) -> cudaError_t {
        (self
            .cudaThreadSetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(cacheConfig)
    }
    pub unsafe fn cudaGetLastError(&self) -> cudaError_t {
        (self
            .cudaGetLastError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaPeekAtLastError(&self) -> cudaError_t {
        (self
            .cudaPeekAtLastError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaGetErrorName(&self, error: cudaError_t) -> *const ::core::ffi::c_char {
        (self
            .cudaGetErrorName
            .as_ref()
            .expect("Expected function, got error."))(error)
    }
    pub unsafe fn cudaGetErrorString(&self, error: cudaError_t) -> *const ::core::ffi::c_char {
        (self
            .cudaGetErrorString
            .as_ref()
            .expect("Expected function, got error."))(error)
    }
    pub unsafe fn cudaGetDeviceCount(&self, count: *mut ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaGetDeviceCount
            .as_ref()
            .expect("Expected function, got error."))(count)
    }
    pub unsafe fn cudaGetDeviceProperties(
        &self,
        prop: *mut cudaDeviceProp,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaGetDeviceProperties
            .as_ref()
            .expect("Expected function, got error."))(prop, device)
    }
    pub unsafe fn cudaDeviceGetAttribute(
        &self,
        value: *mut ::core::ffi::c_int,
        attr: cudaDeviceAttr,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(value, attr, device)
    }
    pub unsafe fn cudaDeviceGetDefaultMemPool(
        &self,
        memPool: *mut cudaMemPool_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetDefaultMemPool
            .as_ref()
            .expect("Expected function, got error."))(memPool, device)
    }
    pub unsafe fn cudaDeviceSetMemPool(
        &self,
        device: ::core::ffi::c_int,
        memPool: cudaMemPool_t,
    ) -> cudaError_t {
        (self
            .cudaDeviceSetMemPool
            .as_ref()
            .expect("Expected function, got error."))(device, memPool)
    }
    pub unsafe fn cudaDeviceGetMemPool(
        &self,
        memPool: *mut cudaMemPool_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetMemPool
            .as_ref()
            .expect("Expected function, got error."))(memPool, device)
    }
    pub unsafe fn cudaDeviceGetNvSciSyncAttributes(
        &self,
        nvSciSyncAttrList: *mut ::core::ffi::c_void,
        device: ::core::ffi::c_int,
        flags: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetNvSciSyncAttributes
            .as_ref()
            .expect("Expected function, got error."))(nvSciSyncAttrList, device, flags)
    }
    pub unsafe fn cudaDeviceGetP2PAttribute(
        &self,
        value: *mut ::core::ffi::c_int,
        attr: cudaDeviceP2PAttr,
        srcDevice: ::core::ffi::c_int,
        dstDevice: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetP2PAttribute
            .as_ref()
            .expect("Expected function, got error."))(value, attr, srcDevice, dstDevice)
    }
    pub unsafe fn cudaChooseDevice(
        &self,
        device: *mut ::core::ffi::c_int,
        prop: *const cudaDeviceProp,
    ) -> cudaError_t {
        (self
            .cudaChooseDevice
            .as_ref()
            .expect("Expected function, got error."))(device, prop)
    }
    pub unsafe fn cudaSetDevice(&self, device: ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaSetDevice
            .as_ref()
            .expect("Expected function, got error."))(device)
    }
    pub unsafe fn cudaGetDevice(&self, device: *mut ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaGetDevice
            .as_ref()
            .expect("Expected function, got error."))(device)
    }
    pub unsafe fn cudaSetValidDevices(
        &self,
        device_arr: *mut ::core::ffi::c_int,
        len: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaSetValidDevices
            .as_ref()
            .expect("Expected function, got error."))(device_arr, len)
    }
    pub unsafe fn cudaSetDeviceFlags(&self, flags: ::core::ffi::c_uint) -> cudaError_t {
        (self
            .cudaSetDeviceFlags
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    pub unsafe fn cudaGetDeviceFlags(&self, flags: *mut ::core::ffi::c_uint) -> cudaError_t {
        (self
            .cudaGetDeviceFlags
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    pub unsafe fn cudaStreamCreate(&self, pStream: *mut cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamCreate
            .as_ref()
            .expect("Expected function, got error."))(pStream)
    }
    pub unsafe fn cudaStreamCreateWithFlags(
        &self,
        pStream: *mut cudaStream_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamCreateWithFlags
            .as_ref()
            .expect("Expected function, got error."))(pStream, flags)
    }
    pub unsafe fn cudaStreamCreateWithPriority(
        &self,
        pStream: *mut cudaStream_t,
        flags: ::core::ffi::c_uint,
        priority: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaStreamCreateWithPriority
            .as_ref()
            .expect("Expected function, got error."))(pStream, flags, priority)
    }
    pub unsafe fn cudaStreamGetPriority(
        &self,
        hStream: cudaStream_t,
        priority: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaStreamGetPriority
            .as_ref()
            .expect("Expected function, got error."))(hStream, priority)
    }
    pub unsafe fn cudaStreamGetFlags(
        &self,
        hStream: cudaStream_t,
        flags: *mut ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamGetFlags
            .as_ref()
            .expect("Expected function, got error."))(hStream, flags)
    }
    pub unsafe fn cudaCtxResetPersistingL2Cache(&self) -> cudaError_t {
        (self
            .cudaCtxResetPersistingL2Cache
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaStreamCopyAttributes(
        &self,
        dst: cudaStream_t,
        src: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaStreamCopyAttributes
            .as_ref()
            .expect("Expected function, got error."))(dst, src)
    }
    pub unsafe fn cudaStreamGetAttribute(
        &self,
        hStream: cudaStream_t,
        attr: cudaStreamAttrID,
        value_out: *mut cudaStreamAttrValue,
    ) -> cudaError_t {
        (self
            .cudaStreamGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hStream, attr, value_out)
    }
    pub unsafe fn cudaStreamSetAttribute(
        &self,
        hStream: cudaStream_t,
        attr: cudaStreamAttrID,
        value: *const cudaStreamAttrValue,
    ) -> cudaError_t {
        (self
            .cudaStreamSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hStream, attr, value)
    }
    pub unsafe fn cudaStreamDestroy(&self, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamDestroy
            .as_ref()
            .expect("Expected function, got error."))(stream)
    }
    pub unsafe fn cudaStreamWaitEvent(
        &self,
        stream: cudaStream_t,
        event: cudaEvent_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamWaitEvent
            .as_ref()
            .expect("Expected function, got error."))(stream, event, flags)
    }
    pub unsafe fn cudaStreamAddCallback(
        &self,
        stream: cudaStream_t,
        callback: cudaStreamCallback_t,
        userData: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamAddCallback
            .as_ref()
            .expect("Expected function, got error."))(stream, callback, userData, flags)
    }
    pub unsafe fn cudaStreamSynchronize(&self, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamSynchronize
            .as_ref()
            .expect("Expected function, got error."))(stream)
    }
    pub unsafe fn cudaStreamQuery(&self, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamQuery
            .as_ref()
            .expect("Expected function, got error."))(stream)
    }
    pub unsafe fn cudaStreamAttachMemAsync(
        &self,
        stream: cudaStream_t,
        devPtr: *mut ::core::ffi::c_void,
        length: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamAttachMemAsync
            .as_ref()
            .expect("Expected function, got error."))(stream, devPtr, length, flags)
    }
    pub unsafe fn cudaStreamBeginCapture(
        &self,
        stream: cudaStream_t,
        mode: cudaStreamCaptureMode,
    ) -> cudaError_t {
        (self
            .cudaStreamBeginCapture
            .as_ref()
            .expect("Expected function, got error."))(stream, mode)
    }
    pub unsafe fn cudaThreadExchangeStreamCaptureMode(
        &self,
        mode: *mut cudaStreamCaptureMode,
    ) -> cudaError_t {
        (self
            .cudaThreadExchangeStreamCaptureMode
            .as_ref()
            .expect("Expected function, got error."))(mode)
    }
    pub unsafe fn cudaStreamEndCapture(
        &self,
        stream: cudaStream_t,
        pGraph: *mut cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaStreamEndCapture
            .as_ref()
            .expect("Expected function, got error."))(stream, pGraph)
    }
    pub unsafe fn cudaStreamIsCapturing(
        &self,
        stream: cudaStream_t,
        pCaptureStatus: *mut cudaStreamCaptureStatus,
    ) -> cudaError_t {
        (self
            .cudaStreamIsCapturing
            .as_ref()
            .expect("Expected function, got error."))(stream, pCaptureStatus)
    }
    pub unsafe fn cudaStreamGetCaptureInfo(
        &self,
        stream: cudaStream_t,
        pCaptureStatus: *mut cudaStreamCaptureStatus,
        pId: *mut ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaStreamGetCaptureInfo
            .as_ref()
            .expect("Expected function, got error."))(stream, pCaptureStatus, pId)
    }
    pub unsafe fn cudaStreamGetCaptureInfo_v2(
        &self,
        stream: cudaStream_t,
        captureStatus_out: *mut cudaStreamCaptureStatus,
        id_out: *mut ::core::ffi::c_ulonglong,
        graph_out: *mut cudaGraph_t,
        dependencies_out: *mut *const cudaGraphNode_t,
        numDependencies_out: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaStreamGetCaptureInfo_v2
            .as_ref()
            .expect("Expected function, got error."))(
            stream,
            captureStatus_out,
            id_out,
            graph_out,
            dependencies_out,
            numDependencies_out,
        )
    }
    pub unsafe fn cudaStreamUpdateCaptureDependencies(
        &self,
        stream: cudaStream_t,
        dependencies: *mut cudaGraphNode_t,
        numDependencies: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamUpdateCaptureDependencies
            .as_ref()
            .expect("Expected function, got error."))(
            stream, dependencies, numDependencies, flags
        )
    }
    pub unsafe fn cudaEventCreate(&self, event: *mut cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventCreate
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventCreateWithFlags(
        &self,
        event: *mut cudaEvent_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaEventCreateWithFlags
            .as_ref()
            .expect("Expected function, got error."))(event, flags)
    }
    pub unsafe fn cudaEventRecord(&self, event: cudaEvent_t, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaEventRecord
            .as_ref()
            .expect("Expected function, got error."))(event, stream)
    }
    pub unsafe fn cudaEventRecordWithFlags(
        &self,
        event: cudaEvent_t,
        stream: cudaStream_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaEventRecordWithFlags
            .as_ref()
            .expect("Expected function, got error."))(event, stream, flags)
    }
    pub unsafe fn cudaEventQuery(&self, event: cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventQuery
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventSynchronize(&self, event: cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventSynchronize
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventDestroy(&self, event: cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventDestroy
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventElapsedTime(
        &self,
        ms: *mut f32,
        start: cudaEvent_t,
        end: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaEventElapsedTime
            .as_ref()
            .expect("Expected function, got error."))(ms, start, end)
    }
    pub unsafe fn cudaImportExternalMemory(
        &self,
        extMem_out: *mut cudaExternalMemory_t,
        memHandleDesc: *const cudaExternalMemoryHandleDesc,
    ) -> cudaError_t {
        (self
            .cudaImportExternalMemory
            .as_ref()
            .expect("Expected function, got error."))(extMem_out, memHandleDesc)
    }
    pub unsafe fn cudaExternalMemoryGetMappedBuffer(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        extMem: cudaExternalMemory_t,
        bufferDesc: *const cudaExternalMemoryBufferDesc,
    ) -> cudaError_t {
        (self
            .cudaExternalMemoryGetMappedBuffer
            .as_ref()
            .expect("Expected function, got error."))(devPtr, extMem, bufferDesc)
    }
    pub unsafe fn cudaExternalMemoryGetMappedMipmappedArray(
        &self,
        mipmap: *mut cudaMipmappedArray_t,
        extMem: cudaExternalMemory_t,
        mipmapDesc: *const cudaExternalMemoryMipmappedArrayDesc,
    ) -> cudaError_t {
        (self
            .cudaExternalMemoryGetMappedMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(mipmap, extMem, mipmapDesc)
    }
    pub unsafe fn cudaDestroyExternalMemory(&self, extMem: cudaExternalMemory_t) -> cudaError_t {
        (self
            .cudaDestroyExternalMemory
            .as_ref()
            .expect("Expected function, got error."))(extMem)
    }
    pub unsafe fn cudaImportExternalSemaphore(
        &self,
        extSem_out: *mut cudaExternalSemaphore_t,
        semHandleDesc: *const cudaExternalSemaphoreHandleDesc,
    ) -> cudaError_t {
        (self
            .cudaImportExternalSemaphore
            .as_ref()
            .expect("Expected function, got error."))(extSem_out, semHandleDesc)
    }
    pub unsafe fn cudaSignalExternalSemaphoresAsync_v2(
        &self,
        extSemArray: *const cudaExternalSemaphore_t,
        paramsArray: *const cudaExternalSemaphoreSignalParams,
        numExtSems: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaSignalExternalSemaphoresAsync_v2
            .as_ref()
            .expect("Expected function, got error."))(
            extSemArray, paramsArray, numExtSems, stream
        )
    }
    pub unsafe fn cudaWaitExternalSemaphoresAsync_v2(
        &self,
        extSemArray: *const cudaExternalSemaphore_t,
        paramsArray: *const cudaExternalSemaphoreWaitParams,
        numExtSems: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaWaitExternalSemaphoresAsync_v2
            .as_ref()
            .expect("Expected function, got error."))(
            extSemArray, paramsArray, numExtSems, stream
        )
    }
    pub unsafe fn cudaDestroyExternalSemaphore(
        &self,
        extSem: cudaExternalSemaphore_t,
    ) -> cudaError_t {
        (self
            .cudaDestroyExternalSemaphore
            .as_ref()
            .expect("Expected function, got error."))(extSem)
    }
    pub unsafe fn cudaLaunchKernel(
        &self,
        func: *const ::core::ffi::c_void,
        gridDim: dim3,
        blockDim: dim3,
        args: *mut *mut ::core::ffi::c_void,
        sharedMem: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaLaunchKernel
            .as_ref()
            .expect("Expected function, got error."))(
            func, gridDim, blockDim, args, sharedMem, stream,
        )
    }
    pub unsafe fn cudaLaunchCooperativeKernel(
        &self,
        func: *const ::core::ffi::c_void,
        gridDim: dim3,
        blockDim: dim3,
        args: *mut *mut ::core::ffi::c_void,
        sharedMem: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaLaunchCooperativeKernel
            .as_ref()
            .expect("Expected function, got error."))(
            func, gridDim, blockDim, args, sharedMem, stream,
        )
    }
    pub unsafe fn cudaLaunchCooperativeKernelMultiDevice(
        &self,
        launchParamsList: *mut cudaLaunchParams,
        numDevices: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaLaunchCooperativeKernelMultiDevice
            .as_ref()
            .expect("Expected function, got error."))(launchParamsList, numDevices, flags)
    }
    pub unsafe fn cudaFuncSetCacheConfig(
        &self,
        func: *const ::core::ffi::c_void,
        cacheConfig: cudaFuncCache,
    ) -> cudaError_t {
        (self
            .cudaFuncSetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(func, cacheConfig)
    }
    pub unsafe fn cudaFuncSetSharedMemConfig(
        &self,
        func: *const ::core::ffi::c_void,
        config: cudaSharedMemConfig,
    ) -> cudaError_t {
        (self
            .cudaFuncSetSharedMemConfig
            .as_ref()
            .expect("Expected function, got error."))(func, config)
    }
    pub unsafe fn cudaFuncGetAttributes(
        &self,
        attr: *mut cudaFuncAttributes,
        func: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaFuncGetAttributes
            .as_ref()
            .expect("Expected function, got error."))(attr, func)
    }
    pub unsafe fn cudaFuncSetAttribute(
        &self,
        func: *const ::core::ffi::c_void,
        attr: cudaFuncAttribute,
        value: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaFuncSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(func, attr, value)
    }
    pub unsafe fn cudaSetDoubleForDevice(&self, d: *mut f64) -> cudaError_t {
        (self
            .cudaSetDoubleForDevice
            .as_ref()
            .expect("Expected function, got error."))(d)
    }
    pub unsafe fn cudaSetDoubleForHost(&self, d: *mut f64) -> cudaError_t {
        (self
            .cudaSetDoubleForHost
            .as_ref()
            .expect("Expected function, got error."))(d)
    }
    pub unsafe fn cudaLaunchHostFunc(
        &self,
        stream: cudaStream_t,
        fn_: cudaHostFn_t,
        userData: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaLaunchHostFunc
            .as_ref()
            .expect("Expected function, got error."))(stream, fn_, userData)
    }
    pub unsafe fn cudaOccupancyMaxActiveBlocksPerMultiprocessor(
        &self,
        numBlocks: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        blockSize: ::core::ffi::c_int,
        dynamicSMemSize: usize,
    ) -> cudaError_t {
        (self
            .cudaOccupancyMaxActiveBlocksPerMultiprocessor
            .as_ref()
            .expect("Expected function, got error."))(
            numBlocks, func, blockSize, dynamicSMemSize
        )
    }
    pub unsafe fn cudaOccupancyAvailableDynamicSMemPerBlock(
        &self,
        dynamicSmemSize: *mut usize,
        func: *const ::core::ffi::c_void,
        numBlocks: ::core::ffi::c_int,
        blockSize: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaOccupancyAvailableDynamicSMemPerBlock
            .as_ref()
            .expect("Expected function, got error."))(
            dynamicSmemSize, func, numBlocks, blockSize
        )
    }
    pub unsafe fn cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
        &self,
        numBlocks: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        blockSize: ::core::ffi::c_int,
        dynamicSMemSize: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
            .as_ref()
            .expect("Expected function, got error."))(
            numBlocks,
            func,
            blockSize,
            dynamicSMemSize,
            flags,
        )
    }
    pub unsafe fn cudaMallocManaged(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMallocManaged
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size, flags)
    }
    pub unsafe fn cudaMalloc(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
    ) -> cudaError_t {
        (self
            .cudaMalloc
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size)
    }
    pub unsafe fn cudaMallocHost(
        &self,
        ptr: *mut *mut ::core::ffi::c_void,
        size: usize,
    ) -> cudaError_t {
        (self
            .cudaMallocHost
            .as_ref()
            .expect("Expected function, got error."))(ptr, size)
    }
    pub unsafe fn cudaMallocPitch(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        pitch: *mut usize,
        width: usize,
        height: usize,
    ) -> cudaError_t {
        (self
            .cudaMallocPitch
            .as_ref()
            .expect("Expected function, got error."))(devPtr, pitch, width, height)
    }
    pub unsafe fn cudaMallocArray(
        &self,
        array: *mut cudaArray_t,
        desc: *const cudaChannelFormatDesc,
        width: usize,
        height: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMallocArray
            .as_ref()
            .expect("Expected function, got error."))(array, desc, width, height, flags)
    }
    pub unsafe fn cudaFree(&self, devPtr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaFree
            .as_ref()
            .expect("Expected function, got error."))(devPtr)
    }
    pub unsafe fn cudaFreeHost(&self, ptr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaFreeHost
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn cudaFreeArray(&self, array: cudaArray_t) -> cudaError_t {
        (self
            .cudaFreeArray
            .as_ref()
            .expect("Expected function, got error."))(array)
    }
    pub unsafe fn cudaFreeMipmappedArray(
        &self,
        mipmappedArray: cudaMipmappedArray_t,
    ) -> cudaError_t {
        (self
            .cudaFreeMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(mipmappedArray)
    }
    pub unsafe fn cudaHostAlloc(
        &self,
        pHost: *mut *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaHostAlloc
            .as_ref()
            .expect("Expected function, got error."))(pHost, size, flags)
    }
    pub unsafe fn cudaHostRegister(
        &self,
        ptr: *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaHostRegister
            .as_ref()
            .expect("Expected function, got error."))(ptr, size, flags)
    }
    pub unsafe fn cudaHostUnregister(&self, ptr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaHostUnregister
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn cudaHostGetDevicePointer(
        &self,
        pDevice: *mut *mut ::core::ffi::c_void,
        pHost: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaHostGetDevicePointer
            .as_ref()
            .expect("Expected function, got error."))(pDevice, pHost, flags)
    }
    pub unsafe fn cudaHostGetFlags(
        &self,
        pFlags: *mut ::core::ffi::c_uint,
        pHost: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaHostGetFlags
            .as_ref()
            .expect("Expected function, got error."))(pFlags, pHost)
    }
    pub unsafe fn cudaMalloc3D(
        &self,
        pitchedDevPtr: *mut cudaPitchedPtr,
        extent: cudaExtent,
    ) -> cudaError_t {
        (self
            .cudaMalloc3D
            .as_ref()
            .expect("Expected function, got error."))(pitchedDevPtr, extent)
    }
    pub unsafe fn cudaMalloc3DArray(
        &self,
        array: *mut cudaArray_t,
        desc: *const cudaChannelFormatDesc,
        extent: cudaExtent,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMalloc3DArray
            .as_ref()
            .expect("Expected function, got error."))(array, desc, extent, flags)
    }
    pub unsafe fn cudaMallocMipmappedArray(
        &self,
        mipmappedArray: *mut cudaMipmappedArray_t,
        desc: *const cudaChannelFormatDesc,
        extent: cudaExtent,
        numLevels: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMallocMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(
            mipmappedArray,
            desc,
            extent,
            numLevels,
            flags,
        )
    }
    pub unsafe fn cudaGetMipmappedArrayLevel(
        &self,
        levelArray: *mut cudaArray_t,
        mipmappedArray: cudaMipmappedArray_const_t,
        level: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGetMipmappedArrayLevel
            .as_ref()
            .expect("Expected function, got error."))(levelArray, mipmappedArray, level)
    }
    pub unsafe fn cudaMemcpy3D(&self, p: *const cudaMemcpy3DParms) -> cudaError_t {
        (self
            .cudaMemcpy3D
            .as_ref()
            .expect("Expected function, got error."))(p)
    }
    pub unsafe fn cudaMemcpy3DPeer(&self, p: *const cudaMemcpy3DPeerParms) -> cudaError_t {
        (self
            .cudaMemcpy3DPeer
            .as_ref()
            .expect("Expected function, got error."))(p)
    }
    pub unsafe fn cudaMemcpy3DAsync(
        &self,
        p: *const cudaMemcpy3DParms,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy3DAsync
            .as_ref()
            .expect("Expected function, got error."))(p, stream)
    }
    pub unsafe fn cudaMemcpy3DPeerAsync(
        &self,
        p: *const cudaMemcpy3DPeerParms,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy3DPeerAsync
            .as_ref()
            .expect("Expected function, got error."))(p, stream)
    }
    pub unsafe fn cudaMemGetInfo(&self, free: *mut usize, total: *mut usize) -> cudaError_t {
        (self
            .cudaMemGetInfo
            .as_ref()
            .expect("Expected function, got error."))(free, total)
    }
    pub unsafe fn cudaArrayGetInfo(
        &self,
        desc: *mut cudaChannelFormatDesc,
        extent: *mut cudaExtent,
        flags: *mut ::core::ffi::c_uint,
        array: cudaArray_t,
    ) -> cudaError_t {
        (self
            .cudaArrayGetInfo
            .as_ref()
            .expect("Expected function, got error."))(desc, extent, flags, array)
    }
    pub unsafe fn cudaArrayGetPlane(
        &self,
        pPlaneArray: *mut cudaArray_t,
        hArray: cudaArray_t,
        planeIdx: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaArrayGetPlane
            .as_ref()
            .expect("Expected function, got error."))(pPlaneArray, hArray, planeIdx)
    }
    pub unsafe fn cudaArrayGetMemoryRequirements(
        &self,
        memoryRequirements: *mut cudaArrayMemoryRequirements,
        array: cudaArray_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaArrayGetMemoryRequirements
            .as_ref()
            .expect("Expected function, got error."))(memoryRequirements, array, device)
    }
    pub unsafe fn cudaMipmappedArrayGetMemoryRequirements(
        &self,
        memoryRequirements: *mut cudaArrayMemoryRequirements,
        mipmap: cudaMipmappedArray_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaMipmappedArrayGetMemoryRequirements
            .as_ref()
            .expect("Expected function, got error."))(memoryRequirements, mipmap, device)
    }
    pub unsafe fn cudaArrayGetSparseProperties(
        &self,
        sparseProperties: *mut cudaArraySparseProperties,
        array: cudaArray_t,
    ) -> cudaError_t {
        (self
            .cudaArrayGetSparseProperties
            .as_ref()
            .expect("Expected function, got error."))(sparseProperties, array)
    }
    pub unsafe fn cudaMipmappedArrayGetSparseProperties(
        &self,
        sparseProperties: *mut cudaArraySparseProperties,
        mipmap: cudaMipmappedArray_t,
    ) -> cudaError_t {
        (self
            .cudaMipmappedArrayGetSparseProperties
            .as_ref()
            .expect("Expected function, got error."))(sparseProperties, mipmap)
    }
    pub unsafe fn cudaMemcpy(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy
            .as_ref()
            .expect("Expected function, got error."))(dst, src, count, kind)
    }
    pub unsafe fn cudaMemcpyPeer(
        &self,
        dst: *mut ::core::ffi::c_void,
        dstDevice: ::core::ffi::c_int,
        src: *const ::core::ffi::c_void,
        srcDevice: ::core::ffi::c_int,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemcpyPeer
            .as_ref()
            .expect("Expected function, got error."))(dst, dstDevice, src, srcDevice, count)
    }
    pub unsafe fn cudaMemcpy2D(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2D
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, spitch, width, height, kind
        )
    }
    pub unsafe fn cudaMemcpy2DToArray(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, spitch, width, height, kind,
        )
    }
    pub unsafe fn cudaMemcpy2DFromArray(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DFromArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, wOffset, hOffset, width, height, kind,
        )
    }
    pub unsafe fn cudaMemcpy2DArrayToArray(
        &self,
        dst: cudaArray_t,
        wOffsetDst: usize,
        hOffsetDst: usize,
        src: cudaArray_const_t,
        wOffsetSrc: usize,
        hOffsetSrc: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DArrayToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind,
        )
    }
    pub unsafe fn cudaMemcpyToSymbol(
        &self,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToSymbol
            .as_ref()
            .expect("Expected function, got error."))(symbol, src, count, offset, kind)
    }
    pub unsafe fn cudaMemcpyFromSymbol(
        &self,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(dst, symbol, count, offset, kind)
    }
    pub unsafe fn cudaMemcpyAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyAsync
            .as_ref()
            .expect("Expected function, got error."))(dst, src, count, kind, stream)
    }
    pub unsafe fn cudaMemcpyPeerAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        dstDevice: ::core::ffi::c_int,
        src: *const ::core::ffi::c_void,
        srcDevice: ::core::ffi::c_int,
        count: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyPeerAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dstDevice, src, srcDevice, count, stream
        )
    }
    pub unsafe fn cudaMemcpy2DAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, spitch, width, height, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpy2DToArrayAsync(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DToArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, spitch, width, height, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpy2DFromArrayAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DFromArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, wOffset, hOffset, width, height, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpyToSymbolAsync(
        &self,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToSymbolAsync
            .as_ref()
            .expect("Expected function, got error."))(
            symbol, src, count, offset, kind, stream
        )
    }
    pub unsafe fn cudaMemcpyFromSymbolAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromSymbolAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, symbol, count, offset, kind, stream
        )
    }
    pub unsafe fn cudaMemset(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemset
            .as_ref()
            .expect("Expected function, got error."))(devPtr, value, count)
    }
    pub unsafe fn cudaMemset2D(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        pitch: usize,
        value: ::core::ffi::c_int,
        width: usize,
        height: usize,
    ) -> cudaError_t {
        (self
            .cudaMemset2D
            .as_ref()
            .expect("Expected function, got error."))(devPtr, pitch, value, width, height)
    }
    pub unsafe fn cudaMemset3D(
        &self,
        pitchedDevPtr: cudaPitchedPtr,
        value: ::core::ffi::c_int,
        extent: cudaExtent,
    ) -> cudaError_t {
        (self
            .cudaMemset3D
            .as_ref()
            .expect("Expected function, got error."))(pitchedDevPtr, value, extent)
    }
    pub unsafe fn cudaMemsetAsync(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        count: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemsetAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, value, count, stream)
    }
    pub unsafe fn cudaMemset2DAsync(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        pitch: usize,
        value: ::core::ffi::c_int,
        width: usize,
        height: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemset2DAsync
            .as_ref()
            .expect("Expected function, got error."))(
            devPtr, pitch, value, width, height, stream
        )
    }
    pub unsafe fn cudaMemset3DAsync(
        &self,
        pitchedDevPtr: cudaPitchedPtr,
        value: ::core::ffi::c_int,
        extent: cudaExtent,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemset3DAsync
            .as_ref()
            .expect("Expected function, got error."))(pitchedDevPtr, value, extent, stream)
    }
    pub unsafe fn cudaGetSymbolAddress(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetSymbolAddress
            .as_ref()
            .expect("Expected function, got error."))(devPtr, symbol)
    }
    pub unsafe fn cudaGetSymbolSize(
        &self,
        size: *mut usize,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetSymbolSize
            .as_ref()
            .expect("Expected function, got error."))(size, symbol)
    }
    pub unsafe fn cudaMemPrefetchAsync(
        &self,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        dstDevice: ::core::ffi::c_int,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemPrefetchAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, count, dstDevice, stream)
    }
    pub unsafe fn cudaMemAdvise(
        &self,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        advice: cudaMemoryAdvise,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaMemAdvise
            .as_ref()
            .expect("Expected function, got error."))(devPtr, count, advice, device)
    }
    pub unsafe fn cudaMemRangeGetAttribute(
        &self,
        data: *mut ::core::ffi::c_void,
        dataSize: usize,
        attribute: cudaMemRangeAttribute,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemRangeGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(
            data, dataSize, attribute, devPtr, count
        )
    }
    pub unsafe fn cudaMemRangeGetAttributes(
        &self,
        data: *mut *mut ::core::ffi::c_void,
        dataSizes: *mut usize,
        attributes: *mut cudaMemRangeAttribute,
        numAttributes: usize,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemRangeGetAttributes
            .as_ref()
            .expect("Expected function, got error."))(
            data,
            dataSizes,
            attributes,
            numAttributes,
            devPtr,
            count,
        )
    }
    pub unsafe fn cudaMemcpyToArray(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, count, kind
        )
    }
    pub unsafe fn cudaMemcpyFromArray(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, src, wOffset, hOffset, count, kind
        )
    }
    pub unsafe fn cudaMemcpyArrayToArray(
        &self,
        dst: cudaArray_t,
        wOffsetDst: usize,
        hOffsetDst: usize,
        src: cudaArray_const_t,
        wOffsetSrc: usize,
        hOffsetSrc: usize,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyArrayToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind,
        )
    }
    pub unsafe fn cudaMemcpyToArrayAsync(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, count, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpyFromArrayAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, src, wOffset, hOffset, count, kind, stream,
        )
    }
    pub unsafe fn cudaMallocAsync(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
        hStream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMallocAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size, hStream)
    }
    pub unsafe fn cudaFreeAsync(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        hStream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaFreeAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, hStream)
    }
    pub unsafe fn cudaMemPoolTrimTo(
        &self,
        memPool: cudaMemPool_t,
        minBytesToKeep: usize,
    ) -> cudaError_t {
        (self
            .cudaMemPoolTrimTo
            .as_ref()
            .expect("Expected function, got error."))(memPool, minBytesToKeep)
    }
    pub unsafe fn cudaMemPoolSetAttribute(
        &self,
        memPool: cudaMemPool_t,
        attr: cudaMemPoolAttr,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaMemPoolSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(memPool, attr, value)
    }
    pub unsafe fn cudaMemPoolGetAttribute(
        &self,
        memPool: cudaMemPool_t,
        attr: cudaMemPoolAttr,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaMemPoolGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(memPool, attr, value)
    }
    pub unsafe fn cudaMemPoolSetAccess(
        &self,
        memPool: cudaMemPool_t,
        descList: *const cudaMemAccessDesc,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemPoolSetAccess
            .as_ref()
            .expect("Expected function, got error."))(memPool, descList, count)
    }
    pub unsafe fn cudaMemPoolGetAccess(
        &self,
        flags: *mut cudaMemAccessFlags,
        memPool: cudaMemPool_t,
        location: *mut cudaMemLocation,
    ) -> cudaError_t {
        (self
            .cudaMemPoolGetAccess
            .as_ref()
            .expect("Expected function, got error."))(flags, memPool, location)
    }
    pub unsafe fn cudaMemPoolCreate(
        &self,
        memPool: *mut cudaMemPool_t,
        poolProps: *const cudaMemPoolProps,
    ) -> cudaError_t {
        (self
            .cudaMemPoolCreate
            .as_ref()
            .expect("Expected function, got error."))(memPool, poolProps)
    }
    pub unsafe fn cudaMemPoolDestroy(&self, memPool: cudaMemPool_t) -> cudaError_t {
        (self
            .cudaMemPoolDestroy
            .as_ref()
            .expect("Expected function, got error."))(memPool)
    }
    pub unsafe fn cudaMallocFromPoolAsync(
        &self,
        ptr: *mut *mut ::core::ffi::c_void,
        size: usize,
        memPool: cudaMemPool_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMallocFromPoolAsync
            .as_ref()
            .expect("Expected function, got error."))(ptr, size, memPool, stream)
    }
    pub unsafe fn cudaMemPoolExportToShareableHandle(
        &self,
        shareableHandle: *mut ::core::ffi::c_void,
        memPool: cudaMemPool_t,
        handleType: cudaMemAllocationHandleType,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMemPoolExportToShareableHandle
            .as_ref()
            .expect("Expected function, got error."))(
            shareableHandle, memPool, handleType, flags
        )
    }
    pub unsafe fn cudaMemPoolImportFromShareableHandle(
        &self,
        memPool: *mut cudaMemPool_t,
        shareableHandle: *mut ::core::ffi::c_void,
        handleType: cudaMemAllocationHandleType,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMemPoolImportFromShareableHandle
            .as_ref()
            .expect("Expected function, got error."))(
            memPool, shareableHandle, handleType, flags
        )
    }
    pub unsafe fn cudaMemPoolExportPointer(
        &self,
        exportData: *mut cudaMemPoolPtrExportData,
        ptr: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaMemPoolExportPointer
            .as_ref()
            .expect("Expected function, got error."))(exportData, ptr)
    }
    pub unsafe fn cudaMemPoolImportPointer(
        &self,
        ptr: *mut *mut ::core::ffi::c_void,
        memPool: cudaMemPool_t,
        exportData: *mut cudaMemPoolPtrExportData,
    ) -> cudaError_t {
        (self
            .cudaMemPoolImportPointer
            .as_ref()
            .expect("Expected function, got error."))(ptr, memPool, exportData)
    }
    pub unsafe fn cudaPointerGetAttributes(
        &self,
        attributes: *mut cudaPointerAttributes,
        ptr: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaPointerGetAttributes
            .as_ref()
            .expect("Expected function, got error."))(attributes, ptr)
    }
    pub unsafe fn cudaDeviceCanAccessPeer(
        &self,
        canAccessPeer: *mut ::core::ffi::c_int,
        device: ::core::ffi::c_int,
        peerDevice: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceCanAccessPeer
            .as_ref()
            .expect("Expected function, got error."))(canAccessPeer, device, peerDevice)
    }
    pub unsafe fn cudaDeviceEnablePeerAccess(
        &self,
        peerDevice: ::core::ffi::c_int,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaDeviceEnablePeerAccess
            .as_ref()
            .expect("Expected function, got error."))(peerDevice, flags)
    }
    pub unsafe fn cudaDeviceDisablePeerAccess(
        &self,
        peerDevice: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceDisablePeerAccess
            .as_ref()
            .expect("Expected function, got error."))(peerDevice)
    }
    pub unsafe fn cudaGraphicsUnregisterResource(
        &self,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsUnregisterResource
            .as_ref()
            .expect("Expected function, got error."))(resource)
    }
    pub unsafe fn cudaGraphicsResourceSetMapFlags(
        &self,
        resource: cudaGraphicsResource_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphicsResourceSetMapFlags
            .as_ref()
            .expect("Expected function, got error."))(resource, flags)
    }
    pub unsafe fn cudaGraphicsMapResources(
        &self,
        count: ::core::ffi::c_int,
        resources: *mut cudaGraphicsResource_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsMapResources
            .as_ref()
            .expect("Expected function, got error."))(count, resources, stream)
    }
    pub unsafe fn cudaGraphicsUnmapResources(
        &self,
        count: ::core::ffi::c_int,
        resources: *mut cudaGraphicsResource_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsUnmapResources
            .as_ref()
            .expect("Expected function, got error."))(count, resources, stream)
    }
    pub unsafe fn cudaGraphicsResourceGetMappedPointer(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: *mut usize,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsResourceGetMappedPointer
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size, resource)
    }
    pub unsafe fn cudaGraphicsSubResourceGetMappedArray(
        &self,
        array: *mut cudaArray_t,
        resource: cudaGraphicsResource_t,
        arrayIndex: ::core::ffi::c_uint,
        mipLevel: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphicsSubResourceGetMappedArray
            .as_ref()
            .expect("Expected function, got error."))(array, resource, arrayIndex, mipLevel)
    }
    pub unsafe fn cudaGraphicsResourceGetMappedMipmappedArray(
        &self,
        mipmappedArray: *mut cudaMipmappedArray_t,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsResourceGetMappedMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(mipmappedArray, resource)
    }
    pub unsafe fn cudaBindTexture(
        &self,
        offset: *mut usize,
        texref: *const textureReference,
        devPtr: *const ::core::ffi::c_void,
        desc: *const cudaChannelFormatDesc,
        size: usize,
    ) -> cudaError_t {
        (self
            .cudaBindTexture
            .as_ref()
            .expect("Expected function, got error."))(offset, texref, devPtr, desc, size)
    }
    pub unsafe fn cudaBindTexture2D(
        &self,
        offset: *mut usize,
        texref: *const textureReference,
        devPtr: *const ::core::ffi::c_void,
        desc: *const cudaChannelFormatDesc,
        width: usize,
        height: usize,
        pitch: usize,
    ) -> cudaError_t {
        (self
            .cudaBindTexture2D
            .as_ref()
            .expect("Expected function, got error."))(
            offset, texref, devPtr, desc, width, height, pitch,
        )
    }
    pub unsafe fn cudaBindTextureToArray(
        &self,
        texref: *const textureReference,
        array: cudaArray_const_t,
        desc: *const cudaChannelFormatDesc,
    ) -> cudaError_t {
        (self
            .cudaBindTextureToArray
            .as_ref()
            .expect("Expected function, got error."))(texref, array, desc)
    }
    pub unsafe fn cudaBindTextureToMipmappedArray(
        &self,
        texref: *const textureReference,
        mipmappedArray: cudaMipmappedArray_const_t,
        desc: *const cudaChannelFormatDesc,
    ) -> cudaError_t {
        (self
            .cudaBindTextureToMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(texref, mipmappedArray, desc)
    }
    pub unsafe fn cudaUnbindTexture(&self, texref: *const textureReference) -> cudaError_t {
        (self
            .cudaUnbindTexture
            .as_ref()
            .expect("Expected function, got error."))(texref)
    }
    pub unsafe fn cudaGetTextureAlignmentOffset(
        &self,
        offset: *mut usize,
        texref: *const textureReference,
    ) -> cudaError_t {
        (self
            .cudaGetTextureAlignmentOffset
            .as_ref()
            .expect("Expected function, got error."))(offset, texref)
    }
    pub unsafe fn cudaGetTextureReference(
        &self,
        texref: *mut *const textureReference,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetTextureReference
            .as_ref()
            .expect("Expected function, got error."))(texref, symbol)
    }
    pub unsafe fn cudaBindSurfaceToArray(
        &self,
        surfref: *const surfaceReference,
        array: cudaArray_const_t,
        desc: *const cudaChannelFormatDesc,
    ) -> cudaError_t {
        (self
            .cudaBindSurfaceToArray
            .as_ref()
            .expect("Expected function, got error."))(surfref, array, desc)
    }
    pub unsafe fn cudaGetSurfaceReference(
        &self,
        surfref: *mut *const surfaceReference,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetSurfaceReference
            .as_ref()
            .expect("Expected function, got error."))(surfref, symbol)
    }
    pub unsafe fn cudaGetChannelDesc(
        &self,
        desc: *mut cudaChannelFormatDesc,
        array: cudaArray_const_t,
    ) -> cudaError_t {
        (self
            .cudaGetChannelDesc
            .as_ref()
            .expect("Expected function, got error."))(desc, array)
    }
    pub unsafe fn cudaCreateChannelDesc(
        &self,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        z: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        f: cudaChannelFormatKind,
    ) -> cudaChannelFormatDesc {
        (self
            .cudaCreateChannelDesc
            .as_ref()
            .expect("Expected function, got error."))(x, y, z, w, f)
    }
    pub unsafe fn cudaCreateTextureObject(
        &self,
        pTexObject: *mut cudaTextureObject_t,
        pResDesc: *const cudaResourceDesc,
        pTexDesc: *const cudaTextureDesc,
        pResViewDesc: *const cudaResourceViewDesc,
    ) -> cudaError_t {
        (self
            .cudaCreateTextureObject
            .as_ref()
            .expect("Expected function, got error."))(
            pTexObject, pResDesc, pTexDesc, pResViewDesc
        )
    }
    pub unsafe fn cudaDestroyTextureObject(&self, texObject: cudaTextureObject_t) -> cudaError_t {
        (self
            .cudaDestroyTextureObject
            .as_ref()
            .expect("Expected function, got error."))(texObject)
    }
    pub unsafe fn cudaGetTextureObjectResourceDesc(
        &self,
        pResDesc: *mut cudaResourceDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetTextureObjectResourceDesc
            .as_ref()
            .expect("Expected function, got error."))(pResDesc, texObject)
    }
    pub unsafe fn cudaGetTextureObjectTextureDesc(
        &self,
        pTexDesc: *mut cudaTextureDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetTextureObjectTextureDesc
            .as_ref()
            .expect("Expected function, got error."))(pTexDesc, texObject)
    }
    pub unsafe fn cudaGetTextureObjectResourceViewDesc(
        &self,
        pResViewDesc: *mut cudaResourceViewDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetTextureObjectResourceViewDesc
            .as_ref()
            .expect("Expected function, got error."))(pResViewDesc, texObject)
    }
    pub unsafe fn cudaCreateSurfaceObject(
        &self,
        pSurfObject: *mut cudaSurfaceObject_t,
        pResDesc: *const cudaResourceDesc,
    ) -> cudaError_t {
        (self
            .cudaCreateSurfaceObject
            .as_ref()
            .expect("Expected function, got error."))(pSurfObject, pResDesc)
    }
    pub unsafe fn cudaDestroySurfaceObject(&self, surfObject: cudaSurfaceObject_t) -> cudaError_t {
        (self
            .cudaDestroySurfaceObject
            .as_ref()
            .expect("Expected function, got error."))(surfObject)
    }
    pub unsafe fn cudaGetSurfaceObjectResourceDesc(
        &self,
        pResDesc: *mut cudaResourceDesc,
        surfObject: cudaSurfaceObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetSurfaceObjectResourceDesc
            .as_ref()
            .expect("Expected function, got error."))(pResDesc, surfObject)
    }
    pub unsafe fn cudaDriverGetVersion(
        &self,
        driverVersion: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDriverGetVersion
            .as_ref()
            .expect("Expected function, got error."))(driverVersion)
    }
    pub unsafe fn cudaRuntimeGetVersion(
        &self,
        runtimeVersion: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaRuntimeGetVersion
            .as_ref()
            .expect("Expected function, got error."))(runtimeVersion)
    }
    pub unsafe fn cudaGraphCreate(
        &self,
        pGraph: *mut cudaGraph_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphCreate
            .as_ref()
            .expect("Expected function, got error."))(pGraph, flags)
    }
    pub unsafe fn cudaGraphAddKernelNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddKernelNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pNodeParams,
        )
    }
    pub unsafe fn cudaGraphKernelNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphKernelNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphKernelNodeCopyAttributes(
        &self,
        hSrc: cudaGraphNode_t,
        hDst: cudaGraphNode_t,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeCopyAttributes
            .as_ref()
            .expect("Expected function, got error."))(hSrc, hDst)
    }
    pub unsafe fn cudaGraphKernelNodeGetAttribute(
        &self,
        hNode: cudaGraphNode_t,
        attr: cudaKernelNodeAttrID,
        value_out: *mut cudaKernelNodeAttrValue,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hNode, attr, value_out)
    }
    pub unsafe fn cudaGraphKernelNodeSetAttribute(
        &self,
        hNode: cudaGraphNode_t,
        attr: cudaKernelNodeAttrID,
        value: *const cudaKernelNodeAttrValue,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hNode, attr, value)
    }
    pub unsafe fn cudaGraphAddMemcpyNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pCopyParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pCopyParams,
        )
    }
    pub unsafe fn cudaGraphAddMemcpyNodeToSymbol(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNodeToSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            symbol,
            src,
            count,
            offset,
            kind,
        )
    }
    pub unsafe fn cudaGraphAddMemcpyNodeFromSymbol(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNodeFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            dst,
            symbol,
            count,
            offset,
            kind,
        )
    }
    pub unsafe fn cudaGraphAddMemcpyNode1D(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNode1D
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            dst,
            src,
            count,
            kind,
        )
    }
    pub unsafe fn cudaGraphMemcpyNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParamsToSymbol(
        &self,
        node: cudaGraphNode_t,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParamsToSymbol
            .as_ref()
            .expect("Expected function, got error."))(node, symbol, src, count, offset, kind)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParamsFromSymbol(
        &self,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParamsFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(node, dst, symbol, count, offset, kind)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParams1D(
        &self,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParams1D
            .as_ref()
            .expect("Expected function, got error."))(node, dst, src, count, kind)
    }
    pub unsafe fn cudaGraphAddMemsetNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pMemsetParams: *const cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemsetNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pMemsetParams,
        )
    }
    pub unsafe fn cudaGraphMemsetNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphMemsetNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphMemsetNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphMemsetNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphAddHostNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddHostNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pNodeParams,
        )
    }
    pub unsafe fn cudaGraphHostNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphHostNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphHostNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphHostNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphAddChildGraphNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        childGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphAddChildGraphNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            childGraph,
        )
    }
    pub unsafe fn cudaGraphChildGraphNodeGetGraph(
        &self,
        node: cudaGraphNode_t,
        pGraph: *mut cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphChildGraphNodeGetGraph
            .as_ref()
            .expect("Expected function, got error."))(node, pGraph)
    }
    pub unsafe fn cudaGraphAddEmptyNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphAddEmptyNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
        )
    }
    pub unsafe fn cudaGraphAddEventRecordNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphAddEventRecordNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            event,
        )
    }
    pub unsafe fn cudaGraphEventRecordNodeGetEvent(
        &self,
        node: cudaGraphNode_t,
        event_out: *mut cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventRecordNodeGetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event_out)
    }
    pub unsafe fn cudaGraphEventRecordNodeSetEvent(
        &self,
        node: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventRecordNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event)
    }
    pub unsafe fn cudaGraphAddEventWaitNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphAddEventWaitNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            event,
        )
    }
    pub unsafe fn cudaGraphEventWaitNodeGetEvent(
        &self,
        node: cudaGraphNode_t,
        event_out: *mut cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventWaitNodeGetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event_out)
    }
    pub unsafe fn cudaGraphEventWaitNodeSetEvent(
        &self,
        node: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventWaitNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event)
    }
    pub unsafe fn cudaGraphAddExternalSemaphoresSignalNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddExternalSemaphoresSignalNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphExternalSemaphoresSignalNodeGetParams(
        &self,
        hNode: cudaGraphNode_t,
        params_out: *mut cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresSignalNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, params_out)
    }
    pub unsafe fn cudaGraphExternalSemaphoresSignalNodeSetParams(
        &self,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresSignalNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, nodeParams)
    }
    pub unsafe fn cudaGraphAddExternalSemaphoresWaitNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddExternalSemaphoresWaitNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphExternalSemaphoresWaitNodeGetParams(
        &self,
        hNode: cudaGraphNode_t,
        params_out: *mut cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresWaitNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, params_out)
    }
    pub unsafe fn cudaGraphExternalSemaphoresWaitNodeSetParams(
        &self,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresWaitNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, nodeParams)
    }
    pub unsafe fn cudaGraphAddMemAllocNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *mut cudaMemAllocNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemAllocNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphMemAllocNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        params_out: *mut cudaMemAllocNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphMemAllocNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, params_out)
    }
    pub unsafe fn cudaGraphAddMemFreeNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dptr: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemFreeNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            dptr,
        )
    }
    pub unsafe fn cudaGraphMemFreeNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        dptr_out: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGraphMemFreeNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, dptr_out)
    }
    pub unsafe fn cudaDeviceGraphMemTrim(&self, device: ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaDeviceGraphMemTrim
            .as_ref()
            .expect("Expected function, got error."))(device)
    }
    pub unsafe fn cudaDeviceGetGraphMemAttribute(
        &self,
        device: ::core::ffi::c_int,
        attr: cudaGraphMemAttributeType,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetGraphMemAttribute
            .as_ref()
            .expect("Expected function, got error."))(device, attr, value)
    }
    pub unsafe fn cudaDeviceSetGraphMemAttribute(
        &self,
        device: ::core::ffi::c_int,
        attr: cudaGraphMemAttributeType,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaDeviceSetGraphMemAttribute
            .as_ref()
            .expect("Expected function, got error."))(device, attr, value)
    }
    pub unsafe fn cudaGraphClone(
        &self,
        pGraphClone: *mut cudaGraph_t,
        originalGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphClone
            .as_ref()
            .expect("Expected function, got error."))(pGraphClone, originalGraph)
    }
    pub unsafe fn cudaGraphNodeFindInClone(
        &self,
        pNode: *mut cudaGraphNode_t,
        originalNode: cudaGraphNode_t,
        clonedGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeFindInClone
            .as_ref()
            .expect("Expected function, got error."))(pNode, originalNode, clonedGraph)
    }
    pub unsafe fn cudaGraphNodeGetType(
        &self,
        node: cudaGraphNode_t,
        pType: *mut cudaGraphNodeType,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetType
            .as_ref()
            .expect("Expected function, got error."))(node, pType)
    }
    pub unsafe fn cudaGraphGetNodes(
        &self,
        graph: cudaGraph_t,
        nodes: *mut cudaGraphNode_t,
        numNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetNodes
            .as_ref()
            .expect("Expected function, got error."))(graph, nodes, numNodes)
    }
    pub unsafe fn cudaGraphGetRootNodes(
        &self,
        graph: cudaGraph_t,
        pRootNodes: *mut cudaGraphNode_t,
        pNumRootNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetRootNodes
            .as_ref()
            .expect("Expected function, got error."))(graph, pRootNodes, pNumRootNodes)
    }
    pub unsafe fn cudaGraphGetEdges(
        &self,
        graph: cudaGraph_t,
        from: *mut cudaGraphNode_t,
        to: *mut cudaGraphNode_t,
        numEdges: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetEdges
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, numEdges)
    }
    pub unsafe fn cudaGraphNodeGetDependencies(
        &self,
        node: cudaGraphNode_t,
        pDependencies: *mut cudaGraphNode_t,
        pNumDependencies: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetDependencies
            .as_ref()
            .expect("Expected function, got error."))(node, pDependencies, pNumDependencies)
    }
    pub unsafe fn cudaGraphNodeGetDependentNodes(
        &self,
        node: cudaGraphNode_t,
        pDependentNodes: *mut cudaGraphNode_t,
        pNumDependentNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetDependentNodes
            .as_ref()
            .expect("Expected function, got error."))(
            node, pDependentNodes, pNumDependentNodes
        )
    }
    pub unsafe fn cudaGraphAddDependencies(
        &self,
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphAddDependencies
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, numDependencies)
    }
    pub unsafe fn cudaGraphRemoveDependencies(
        &self,
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphRemoveDependencies
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, numDependencies)
    }
    pub unsafe fn cudaGraphDestroyNode(&self, node: cudaGraphNode_t) -> cudaError_t {
        (self
            .cudaGraphDestroyNode
            .as_ref()
            .expect("Expected function, got error."))(node)
    }
    pub unsafe fn cudaGraphInstantiate(
        &self,
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        pErrorNode: *mut cudaGraphNode_t,
        pLogBuffer: *mut ::core::ffi::c_char,
        bufferSize: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphInstantiate
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphExec, graph, pErrorNode, pLogBuffer, bufferSize,
        )
    }
    pub unsafe fn cudaGraphInstantiateWithFlags(
        &self,
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        flags: ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaGraphInstantiateWithFlags
            .as_ref()
            .expect("Expected function, got error."))(pGraphExec, graph, flags)
    }
    pub unsafe fn cudaGraphExecKernelNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecKernelNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParamsToSymbol(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParamsToSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec, node, symbol, src, count, offset, kind,
        )
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParamsFromSymbol(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParamsFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec, node, dst, symbol, count, offset, kind,
        )
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParams1D(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParams1D
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec, node, dst, src, count, kind
        )
    }
    pub unsafe fn cudaGraphExecMemsetNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemsetNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecHostNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecHostNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecChildGraphNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        childGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphExecChildGraphNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, childGraph)
    }
    pub unsafe fn cudaGraphExecEventRecordNodeSetEvent(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphExecEventRecordNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, event)
    }
    pub unsafe fn cudaGraphExecEventWaitNodeSetEvent(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphExecEventWaitNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, event)
    }
    pub unsafe fn cudaGraphExecExternalSemaphoresSignalNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecExternalSemaphoresSignalNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, nodeParams)
    }
    pub unsafe fn cudaGraphExecExternalSemaphoresWaitNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecExternalSemaphoresWaitNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, nodeParams)
    }
    pub unsafe fn cudaGraphNodeSetEnabled(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        isEnabled: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeSetEnabled
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, isEnabled)
    }
    pub unsafe fn cudaGraphNodeGetEnabled(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        isEnabled: *mut ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetEnabled
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, isEnabled)
    }
    pub unsafe fn cudaGraphExecUpdate(
        &self,
        hGraphExec: cudaGraphExec_t,
        hGraph: cudaGraph_t,
        hErrorNode_out: *mut cudaGraphNode_t,
        updateResult_out: *mut cudaGraphExecUpdateResult,
    ) -> cudaError_t {
        (self
            .cudaGraphExecUpdate
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec,
            hGraph,
            hErrorNode_out,
            updateResult_out,
        )
    }
    pub unsafe fn cudaGraphUpload(
        &self,
        graphExec: cudaGraphExec_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphUpload
            .as_ref()
            .expect("Expected function, got error."))(graphExec, stream)
    }
    pub unsafe fn cudaGraphLaunch(
        &self,
        graphExec: cudaGraphExec_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphLaunch
            .as_ref()
            .expect("Expected function, got error."))(graphExec, stream)
    }
    pub unsafe fn cudaGraphExecDestroy(&self, graphExec: cudaGraphExec_t) -> cudaError_t {
        (self
            .cudaGraphExecDestroy
            .as_ref()
            .expect("Expected function, got error."))(graphExec)
    }
    pub unsafe fn cudaGraphDestroy(&self, graph: cudaGraph_t) -> cudaError_t {
        (self
            .cudaGraphDestroy
            .as_ref()
            .expect("Expected function, got error."))(graph)
    }
    pub unsafe fn cudaGraphDebugDotPrint(
        &self,
        graph: cudaGraph_t,
        path: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphDebugDotPrint
            .as_ref()
            .expect("Expected function, got error."))(graph, path, flags)
    }
    pub unsafe fn cudaUserObjectCreate(
        &self,
        object_out: *mut cudaUserObject_t,
        ptr: *mut ::core::ffi::c_void,
        destroy: cudaHostFn_t,
        initialRefcount: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaUserObjectCreate
            .as_ref()
            .expect("Expected function, got error."))(
            object_out,
            ptr,
            destroy,
            initialRefcount,
            flags,
        )
    }
    pub unsafe fn cudaUserObjectRetain(
        &self,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaUserObjectRetain
            .as_ref()
            .expect("Expected function, got error."))(object, count)
    }
    pub unsafe fn cudaUserObjectRelease(
        &self,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaUserObjectRelease
            .as_ref()
            .expect("Expected function, got error."))(object, count)
    }
    pub unsafe fn cudaGraphRetainUserObject(
        &self,
        graph: cudaGraph_t,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphRetainUserObject
            .as_ref()
            .expect("Expected function, got error."))(graph, object, count, flags)
    }
    pub unsafe fn cudaGraphReleaseUserObject(
        &self,
        graph: cudaGraph_t,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphReleaseUserObject
            .as_ref()
            .expect("Expected function, got error."))(graph, object, count)
    }
    pub unsafe fn cudaGetDriverEntryPoint(
        &self,
        symbol: *const ::core::ffi::c_char,
        funcPtr: *mut *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaGetDriverEntryPoint
            .as_ref()
            .expect("Expected function, got error."))(symbol, funcPtr, flags)
    }
    pub unsafe fn cudaGetExportTable(
        &self,
        ppExportTable: *mut *const ::core::ffi::c_void,
        pExportTableId: *const cudaUUID_t,
    ) -> cudaError_t {
        (self
            .cudaGetExportTable
            .as_ref()
            .expect("Expected function, got error."))(ppExportTable, pExportTableId)
    }
    pub unsafe fn cudaGetFuncBySymbol(
        &self,
        functionPtr: *mut cudaFunction_t,
        symbolPtr: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetFuncBySymbol
            .as_ref()
            .expect("Expected function, got error."))(functionPtr, symbolPtr)
    }
    pub unsafe fn cudaProfilerInitialize(
        &self,
        configFile: *const ::core::ffi::c_char,
        outputFile: *const ::core::ffi::c_char,
        outputMode: cudaOutputMode_t,
    ) -> cudaError_t {
        (self
            .cudaProfilerInitialize
            .as_ref()
            .expect("Expected function, got error."))(configFile, outputFile, outputMode)
    }
    pub unsafe fn cudaProfilerStart(&self) -> cudaError_t {
        (self
            .cudaProfilerStart
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaProfilerStop(&self) -> cudaError_t {
        (self
            .cudaProfilerStop
            .as_ref()
            .expect("Expected function, got error."))()
    }
}
