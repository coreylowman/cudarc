/* automatically generated by rust-bindgen 0.71.1 */

pub const cudaHostAllocDefault: u32 = 0;
pub const cudaHostAllocPortable: u32 = 1;
pub const cudaHostAllocMapped: u32 = 2;
pub const cudaHostAllocWriteCombined: u32 = 4;
pub const cudaHostRegisterDefault: u32 = 0;
pub const cudaHostRegisterPortable: u32 = 1;
pub const cudaHostRegisterMapped: u32 = 2;
pub const cudaHostRegisterIoMemory: u32 = 4;
pub const cudaHostRegisterReadOnly: u32 = 8;
pub const cudaPeerAccessDefault: u32 = 0;
pub const cudaStreamDefault: u32 = 0;
pub const cudaStreamNonBlocking: u32 = 1;
pub const cudaEventDefault: u32 = 0;
pub const cudaEventBlockingSync: u32 = 1;
pub const cudaEventDisableTiming: u32 = 2;
pub const cudaEventInterprocess: u32 = 4;
pub const cudaEventRecordDefault: u32 = 0;
pub const cudaEventRecordExternal: u32 = 1;
pub const cudaEventWaitDefault: u32 = 0;
pub const cudaEventWaitExternal: u32 = 1;
pub const cudaDeviceScheduleAuto: u32 = 0;
pub const cudaDeviceScheduleSpin: u32 = 1;
pub const cudaDeviceScheduleYield: u32 = 2;
pub const cudaDeviceScheduleBlockingSync: u32 = 4;
pub const cudaDeviceBlockingSync: u32 = 4;
pub const cudaDeviceScheduleMask: u32 = 7;
pub const cudaDeviceMapHost: u32 = 8;
pub const cudaDeviceLmemResizeToMax: u32 = 16;
pub const cudaDeviceSyncMemops: u32 = 128;
pub const cudaDeviceMask: u32 = 255;
pub const cudaArrayDefault: u32 = 0;
pub const cudaArrayLayered: u32 = 1;
pub const cudaArraySurfaceLoadStore: u32 = 2;
pub const cudaArrayCubemap: u32 = 4;
pub const cudaArrayTextureGather: u32 = 8;
pub const cudaArrayColorAttachment: u32 = 32;
pub const cudaArraySparse: u32 = 64;
pub const cudaArrayDeferredMapping: u32 = 128;
pub const cudaIpcMemLazyEnablePeerAccess: u32 = 1;
pub const cudaMemAttachGlobal: u32 = 1;
pub const cudaMemAttachHost: u32 = 2;
pub const cudaMemAttachSingle: u32 = 4;
pub const cudaOccupancyDefault: u32 = 0;
pub const cudaOccupancyDisableCachingOverride: u32 = 1;
pub const cudaInitDeviceFlagsAreValid: u32 = 1;
pub const cudaCooperativeLaunchMultiDeviceNoPreSync: u32 = 1;
pub const cudaCooperativeLaunchMultiDeviceNoPostSync: u32 = 2;
pub const cudaArraySparsePropertiesSingleMipTail: u32 = 1;
pub const cudaMemPoolCreateUsageHwDecompress: u32 = 2;
pub const CUDA_IPC_HANDLE_SIZE: u32 = 64;
pub const cudaExternalMemoryDedicated: u32 = 1;
pub const cudaExternalSemaphoreSignalSkipNvSciBufMemSync: u32 = 1;
pub const cudaExternalSemaphoreWaitSkipNvSciBufMemSync: u32 = 2;
pub const cudaNvSciSyncAttrSignal: u32 = 1;
pub const cudaNvSciSyncAttrWait: u32 = 2;
pub const cudaGraphKernelNodePortDefault: u32 = 0;
pub const cudaGraphKernelNodePortProgrammatic: u32 = 1;
pub const cudaGraphKernelNodePortLaunchCompletion: u32 = 2;
pub const cudaSurfaceType1D: u32 = 1;
pub const cudaSurfaceType2D: u32 = 2;
pub const cudaSurfaceType3D: u32 = 3;
pub const cudaSurfaceTypeCubemap: u32 = 12;
pub const cudaSurfaceType1DLayered: u32 = 241;
pub const cudaSurfaceType2DLayered: u32 = 242;
pub const cudaSurfaceTypeCubemapLayered: u32 = 252;
pub const cudaTextureType1D: u32 = 1;
pub const cudaTextureType2D: u32 = 2;
pub const cudaTextureType3D: u32 = 3;
pub const cudaTextureTypeCubemap: u32 = 12;
pub const cudaTextureType1DLayered: u32 = 241;
pub const cudaTextureType2DLayered: u32 = 242;
pub const cudaTextureTypeCubemapLayered: u32 = 252;
pub const CUDART_VERSION: u32 = 12080;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaRoundMode {
    cudaRoundNearest = 0,
    cudaRoundZero = 1,
    cudaRoundPosInf = 2,
    cudaRoundMinInf = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct dim3 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dim3"][::core::mem::size_of::<dim3>() - 12usize];
    ["Alignment of dim3"][::core::mem::align_of::<dim3>() - 4usize];
    ["Offset of field: dim3::x"][::core::mem::offset_of!(dim3, x) - 0usize];
    ["Offset of field: dim3::y"][::core::mem::offset_of!(dim3, y) - 4usize];
    ["Offset of field: dim3::z"][::core::mem::offset_of!(dim3, z) - 8usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaError {
    cudaSuccess = 0,
    cudaErrorInvalidValue = 1,
    cudaErrorMemoryAllocation = 2,
    cudaErrorInitializationError = 3,
    cudaErrorCudartUnloading = 4,
    cudaErrorProfilerDisabled = 5,
    cudaErrorProfilerNotInitialized = 6,
    cudaErrorProfilerAlreadyStarted = 7,
    cudaErrorProfilerAlreadyStopped = 8,
    cudaErrorInvalidConfiguration = 9,
    cudaErrorInvalidPitchValue = 12,
    cudaErrorInvalidSymbol = 13,
    cudaErrorInvalidHostPointer = 16,
    cudaErrorInvalidDevicePointer = 17,
    cudaErrorInvalidTexture = 18,
    cudaErrorInvalidTextureBinding = 19,
    cudaErrorInvalidChannelDescriptor = 20,
    cudaErrorInvalidMemcpyDirection = 21,
    cudaErrorAddressOfConstant = 22,
    cudaErrorTextureFetchFailed = 23,
    cudaErrorTextureNotBound = 24,
    cudaErrorSynchronizationError = 25,
    cudaErrorInvalidFilterSetting = 26,
    cudaErrorInvalidNormSetting = 27,
    cudaErrorMixedDeviceExecution = 28,
    cudaErrorNotYetImplemented = 31,
    cudaErrorMemoryValueTooLarge = 32,
    cudaErrorStubLibrary = 34,
    cudaErrorInsufficientDriver = 35,
    cudaErrorCallRequiresNewerDriver = 36,
    cudaErrorInvalidSurface = 37,
    cudaErrorDuplicateVariableName = 43,
    cudaErrorDuplicateTextureName = 44,
    cudaErrorDuplicateSurfaceName = 45,
    cudaErrorDevicesUnavailable = 46,
    cudaErrorIncompatibleDriverContext = 49,
    cudaErrorMissingConfiguration = 52,
    cudaErrorPriorLaunchFailure = 53,
    cudaErrorLaunchMaxDepthExceeded = 65,
    cudaErrorLaunchFileScopedTex = 66,
    cudaErrorLaunchFileScopedSurf = 67,
    cudaErrorSyncDepthExceeded = 68,
    cudaErrorLaunchPendingCountExceeded = 69,
    cudaErrorInvalidDeviceFunction = 98,
    cudaErrorNoDevice = 100,
    cudaErrorInvalidDevice = 101,
    cudaErrorDeviceNotLicensed = 102,
    cudaErrorSoftwareValidityNotEstablished = 103,
    cudaErrorStartupFailure = 127,
    cudaErrorInvalidKernelImage = 200,
    cudaErrorDeviceUninitialized = 201,
    cudaErrorMapBufferObjectFailed = 205,
    cudaErrorUnmapBufferObjectFailed = 206,
    cudaErrorArrayIsMapped = 207,
    cudaErrorAlreadyMapped = 208,
    cudaErrorNoKernelImageForDevice = 209,
    cudaErrorAlreadyAcquired = 210,
    cudaErrorNotMapped = 211,
    cudaErrorNotMappedAsArray = 212,
    cudaErrorNotMappedAsPointer = 213,
    cudaErrorECCUncorrectable = 214,
    cudaErrorUnsupportedLimit = 215,
    cudaErrorDeviceAlreadyInUse = 216,
    cudaErrorPeerAccessUnsupported = 217,
    cudaErrorInvalidPtx = 218,
    cudaErrorInvalidGraphicsContext = 219,
    cudaErrorNvlinkUncorrectable = 220,
    cudaErrorJitCompilerNotFound = 221,
    cudaErrorUnsupportedPtxVersion = 222,
    cudaErrorJitCompilationDisabled = 223,
    cudaErrorUnsupportedExecAffinity = 224,
    cudaErrorUnsupportedDevSideSync = 225,
    cudaErrorContained = 226,
    cudaErrorInvalidSource = 300,
    cudaErrorFileNotFound = 301,
    cudaErrorSharedObjectSymbolNotFound = 302,
    cudaErrorSharedObjectInitFailed = 303,
    cudaErrorOperatingSystem = 304,
    cudaErrorInvalidResourceHandle = 400,
    cudaErrorIllegalState = 401,
    cudaErrorLossyQuery = 402,
    cudaErrorSymbolNotFound = 500,
    cudaErrorNotReady = 600,
    cudaErrorIllegalAddress = 700,
    cudaErrorLaunchOutOfResources = 701,
    cudaErrorLaunchTimeout = 702,
    cudaErrorLaunchIncompatibleTexturing = 703,
    cudaErrorPeerAccessAlreadyEnabled = 704,
    cudaErrorPeerAccessNotEnabled = 705,
    cudaErrorSetOnActiveProcess = 708,
    cudaErrorContextIsDestroyed = 709,
    cudaErrorAssert = 710,
    cudaErrorTooManyPeers = 711,
    cudaErrorHostMemoryAlreadyRegistered = 712,
    cudaErrorHostMemoryNotRegistered = 713,
    cudaErrorHardwareStackError = 714,
    cudaErrorIllegalInstruction = 715,
    cudaErrorMisalignedAddress = 716,
    cudaErrorInvalidAddressSpace = 717,
    cudaErrorInvalidPc = 718,
    cudaErrorLaunchFailure = 719,
    cudaErrorCooperativeLaunchTooLarge = 720,
    cudaErrorTensorMemoryLeak = 721,
    cudaErrorNotPermitted = 800,
    cudaErrorNotSupported = 801,
    cudaErrorSystemNotReady = 802,
    cudaErrorSystemDriverMismatch = 803,
    cudaErrorCompatNotSupportedOnDevice = 804,
    cudaErrorMpsConnectionFailed = 805,
    cudaErrorMpsRpcFailure = 806,
    cudaErrorMpsServerNotReady = 807,
    cudaErrorMpsMaxClientsReached = 808,
    cudaErrorMpsMaxConnectionsReached = 809,
    cudaErrorMpsClientTerminated = 810,
    cudaErrorCdpNotSupported = 811,
    cudaErrorCdpVersionMismatch = 812,
    cudaErrorStreamCaptureUnsupported = 900,
    cudaErrorStreamCaptureInvalidated = 901,
    cudaErrorStreamCaptureMerge = 902,
    cudaErrorStreamCaptureUnmatched = 903,
    cudaErrorStreamCaptureUnjoined = 904,
    cudaErrorStreamCaptureIsolation = 905,
    cudaErrorStreamCaptureImplicit = 906,
    cudaErrorCapturedEvent = 907,
    cudaErrorStreamCaptureWrongThread = 908,
    cudaErrorTimeout = 909,
    cudaErrorGraphExecUpdateFailure = 910,
    cudaErrorExternalDevice = 911,
    cudaErrorInvalidClusterSize = 912,
    cudaErrorFunctionNotLoaded = 913,
    cudaErrorInvalidResourceType = 914,
    cudaErrorInvalidResourceConfiguration = 915,
    cudaErrorUnknown = 999,
    cudaErrorApiFailureBase = 10000,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaChannelFormatKind {
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3,
    cudaChannelFormatKindNV12 = 4,
    cudaChannelFormatKindUnsignedNormalized8X1 = 5,
    cudaChannelFormatKindUnsignedNormalized8X2 = 6,
    cudaChannelFormatKindUnsignedNormalized8X4 = 7,
    cudaChannelFormatKindUnsignedNormalized16X1 = 8,
    cudaChannelFormatKindUnsignedNormalized16X2 = 9,
    cudaChannelFormatKindUnsignedNormalized16X4 = 10,
    cudaChannelFormatKindSignedNormalized8X1 = 11,
    cudaChannelFormatKindSignedNormalized8X2 = 12,
    cudaChannelFormatKindSignedNormalized8X4 = 13,
    cudaChannelFormatKindSignedNormalized16X1 = 14,
    cudaChannelFormatKindSignedNormalized16X2 = 15,
    cudaChannelFormatKindSignedNormalized16X4 = 16,
    cudaChannelFormatKindUnsignedBlockCompressed1 = 17,
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18,
    cudaChannelFormatKindUnsignedBlockCompressed2 = 19,
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20,
    cudaChannelFormatKindUnsignedBlockCompressed3 = 21,
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22,
    cudaChannelFormatKindUnsignedBlockCompressed4 = 23,
    cudaChannelFormatKindSignedBlockCompressed4 = 24,
    cudaChannelFormatKindUnsignedBlockCompressed5 = 25,
    cudaChannelFormatKindSignedBlockCompressed5 = 26,
    cudaChannelFormatKindUnsignedBlockCompressed6H = 27,
    cudaChannelFormatKindSignedBlockCompressed6H = 28,
    cudaChannelFormatKindUnsignedBlockCompressed7 = 29,
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30,
    cudaChannelFormatKindUnsignedNormalized1010102 = 31,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChannelFormatDesc {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
    pub z: ::core::ffi::c_int,
    pub w: ::core::ffi::c_int,
    pub f: cudaChannelFormatKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaChannelFormatDesc"][::core::mem::size_of::<cudaChannelFormatDesc>() - 20usize];
    ["Alignment of cudaChannelFormatDesc"]
        [::core::mem::align_of::<cudaChannelFormatDesc>() - 4usize];
    ["Offset of field: cudaChannelFormatDesc::x"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, x) - 0usize];
    ["Offset of field: cudaChannelFormatDesc::y"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, y) - 4usize];
    ["Offset of field: cudaChannelFormatDesc::z"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, z) - 8usize];
    ["Offset of field: cudaChannelFormatDesc::w"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, w) - 12usize];
    ["Offset of field: cudaChannelFormatDesc::f"]
        [::core::mem::offset_of!(cudaChannelFormatDesc, f) - 16usize];
};
impl Default for cudaChannelFormatDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaArray {
    _unused: [u8; 0],
}
pub type cudaArray_t = *mut cudaArray;
pub type cudaArray_const_t = *const cudaArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaMipmappedArray {
    _unused: [u8; 0],
}
pub type cudaMipmappedArray_t = *mut cudaMipmappedArray;
pub type cudaMipmappedArray_const_t = *const cudaMipmappedArray;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties {
    pub tileExtent: cudaArraySparseProperties__bindgen_ty_1,
    pub miptailFirstLevel: ::core::ffi::c_uint,
    pub miptailSize: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties__bindgen_ty_1 {
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub depth: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaArraySparseProperties__bindgen_ty_1"]
        [::core::mem::size_of::<cudaArraySparseProperties__bindgen_ty_1>() - 12usize];
    ["Alignment of cudaArraySparseProperties__bindgen_ty_1"]
        [::core::mem::align_of::<cudaArraySparseProperties__bindgen_ty_1>() - 4usize];
    ["Offset of field: cudaArraySparseProperties__bindgen_ty_1::width"]
        [::core::mem::offset_of!(cudaArraySparseProperties__bindgen_ty_1, width) - 0usize];
    ["Offset of field: cudaArraySparseProperties__bindgen_ty_1::height"]
        [::core::mem::offset_of!(cudaArraySparseProperties__bindgen_ty_1, height) - 4usize];
    ["Offset of field: cudaArraySparseProperties__bindgen_ty_1::depth"]
        [::core::mem::offset_of!(cudaArraySparseProperties__bindgen_ty_1, depth) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaArraySparseProperties"]
        [::core::mem::size_of::<cudaArraySparseProperties>() - 48usize];
    ["Alignment of cudaArraySparseProperties"]
        [::core::mem::align_of::<cudaArraySparseProperties>() - 8usize];
    ["Offset of field: cudaArraySparseProperties::tileExtent"]
        [::core::mem::offset_of!(cudaArraySparseProperties, tileExtent) - 0usize];
    ["Offset of field: cudaArraySparseProperties::miptailFirstLevel"]
        [::core::mem::offset_of!(cudaArraySparseProperties, miptailFirstLevel) - 12usize];
    ["Offset of field: cudaArraySparseProperties::miptailSize"]
        [::core::mem::offset_of!(cudaArraySparseProperties, miptailSize) - 16usize];
    ["Offset of field: cudaArraySparseProperties::flags"]
        [::core::mem::offset_of!(cudaArraySparseProperties, flags) - 24usize];
    ["Offset of field: cudaArraySparseProperties::reserved"]
        [::core::mem::offset_of!(cudaArraySparseProperties, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayMemoryRequirements {
    pub size: usize,
    pub alignment: usize,
    pub reserved: [::core::ffi::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaArrayMemoryRequirements"]
        [::core::mem::size_of::<cudaArrayMemoryRequirements>() - 32usize];
    ["Alignment of cudaArrayMemoryRequirements"]
        [::core::mem::align_of::<cudaArrayMemoryRequirements>() - 8usize];
    ["Offset of field: cudaArrayMemoryRequirements::size"]
        [::core::mem::offset_of!(cudaArrayMemoryRequirements, size) - 0usize];
    ["Offset of field: cudaArrayMemoryRequirements::alignment"]
        [::core::mem::offset_of!(cudaArrayMemoryRequirements, alignment) - 8usize];
    ["Offset of field: cudaArrayMemoryRequirements::reserved"]
        [::core::mem::offset_of!(cudaArrayMemoryRequirements, reserved) - 16usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryType {
    cudaMemoryTypeUnregistered = 0,
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2,
    cudaMemoryTypeManaged = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpyKind {
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPitchedPtr {
    pub ptr: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub xsize: usize,
    pub ysize: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaPitchedPtr"][::core::mem::size_of::<cudaPitchedPtr>() - 32usize];
    ["Alignment of cudaPitchedPtr"][::core::mem::align_of::<cudaPitchedPtr>() - 8usize];
    ["Offset of field: cudaPitchedPtr::ptr"][::core::mem::offset_of!(cudaPitchedPtr, ptr) - 0usize];
    ["Offset of field: cudaPitchedPtr::pitch"]
        [::core::mem::offset_of!(cudaPitchedPtr, pitch) - 8usize];
    ["Offset of field: cudaPitchedPtr::xsize"]
        [::core::mem::offset_of!(cudaPitchedPtr, xsize) - 16usize];
    ["Offset of field: cudaPitchedPtr::ysize"]
        [::core::mem::offset_of!(cudaPitchedPtr, ysize) - 24usize];
};
impl Default for cudaPitchedPtr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExtent {
    pub width: usize,
    pub height: usize,
    pub depth: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExtent"][::core::mem::size_of::<cudaExtent>() - 24usize];
    ["Alignment of cudaExtent"][::core::mem::align_of::<cudaExtent>() - 8usize];
    ["Offset of field: cudaExtent::width"][::core::mem::offset_of!(cudaExtent, width) - 0usize];
    ["Offset of field: cudaExtent::height"][::core::mem::offset_of!(cudaExtent, height) - 8usize];
    ["Offset of field: cudaExtent::depth"][::core::mem::offset_of!(cudaExtent, depth) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPos {
    pub x: usize,
    pub y: usize,
    pub z: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaPos"][::core::mem::size_of::<cudaPos>() - 24usize];
    ["Alignment of cudaPos"][::core::mem::align_of::<cudaPos>() - 8usize];
    ["Offset of field: cudaPos::x"][::core::mem::offset_of!(cudaPos, x) - 0usize];
    ["Offset of field: cudaPos::y"][::core::mem::offset_of!(cudaPos, y) - 8usize];
    ["Offset of field: cudaPos::z"][::core::mem::offset_of!(cudaPos, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub extent: cudaExtent,
    pub kind: cudaMemcpyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DParms"][::core::mem::size_of::<cudaMemcpy3DParms>() - 160usize];
    ["Alignment of cudaMemcpy3DParms"][::core::mem::align_of::<cudaMemcpy3DParms>() - 8usize];
    ["Offset of field: cudaMemcpy3DParms::srcArray"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, srcArray) - 0usize];
    ["Offset of field: cudaMemcpy3DParms::srcPos"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, srcPos) - 8usize];
    ["Offset of field: cudaMemcpy3DParms::srcPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, srcPtr) - 32usize];
    ["Offset of field: cudaMemcpy3DParms::dstArray"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, dstArray) - 64usize];
    ["Offset of field: cudaMemcpy3DParms::dstPos"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, dstPos) - 72usize];
    ["Offset of field: cudaMemcpy3DParms::dstPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, dstPtr) - 96usize];
    ["Offset of field: cudaMemcpy3DParms::extent"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, extent) - 128usize];
    ["Offset of field: cudaMemcpy3DParms::kind"]
        [::core::mem::offset_of!(cudaMemcpy3DParms, kind) - 152usize];
};
impl Default for cudaMemcpy3DParms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyNodeParams {
    pub flags: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 3usize],
    pub copyParams: cudaMemcpy3DParms,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpyNodeParams"][::core::mem::size_of::<cudaMemcpyNodeParams>() - 176usize];
    ["Alignment of cudaMemcpyNodeParams"][::core::mem::align_of::<cudaMemcpyNodeParams>() - 8usize];
    ["Offset of field: cudaMemcpyNodeParams::flags"]
        [::core::mem::offset_of!(cudaMemcpyNodeParams, flags) - 0usize];
    ["Offset of field: cudaMemcpyNodeParams::reserved"]
        [::core::mem::offset_of!(cudaMemcpyNodeParams, reserved) - 4usize];
    ["Offset of field: cudaMemcpyNodeParams::copyParams"]
        [::core::mem::offset_of!(cudaMemcpyNodeParams, copyParams) - 16usize];
};
impl Default for cudaMemcpyNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeerParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub srcDevice: ::core::ffi::c_int,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub dstDevice: ::core::ffi::c_int,
    pub extent: cudaExtent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DPeerParms"][::core::mem::size_of::<cudaMemcpy3DPeerParms>() - 168usize];
    ["Alignment of cudaMemcpy3DPeerParms"]
        [::core::mem::align_of::<cudaMemcpy3DPeerParms>() - 8usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcArray"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcArray) - 0usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcPos"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcPos) - 8usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcPtr) - 32usize];
    ["Offset of field: cudaMemcpy3DPeerParms::srcDevice"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, srcDevice) - 64usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstArray"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstArray) - 72usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstPos"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstPos) - 80usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstPtr"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstPtr) - 104usize];
    ["Offset of field: cudaMemcpy3DPeerParms::dstDevice"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, dstDevice) - 136usize];
    ["Offset of field: cudaMemcpy3DPeerParms::extent"]
        [::core::mem::offset_of!(cudaMemcpy3DPeerParms, extent) - 144usize];
};
impl Default for cudaMemcpy3DPeerParms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetParams {
    pub dst: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub value: ::core::ffi::c_uint,
    pub elementSize: ::core::ffi::c_uint,
    pub width: usize,
    pub height: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemsetParams"][::core::mem::size_of::<cudaMemsetParams>() - 40usize];
    ["Alignment of cudaMemsetParams"][::core::mem::align_of::<cudaMemsetParams>() - 8usize];
    ["Offset of field: cudaMemsetParams::dst"]
        [::core::mem::offset_of!(cudaMemsetParams, dst) - 0usize];
    ["Offset of field: cudaMemsetParams::pitch"]
        [::core::mem::offset_of!(cudaMemsetParams, pitch) - 8usize];
    ["Offset of field: cudaMemsetParams::value"]
        [::core::mem::offset_of!(cudaMemsetParams, value) - 16usize];
    ["Offset of field: cudaMemsetParams::elementSize"]
        [::core::mem::offset_of!(cudaMemsetParams, elementSize) - 20usize];
    ["Offset of field: cudaMemsetParams::width"]
        [::core::mem::offset_of!(cudaMemsetParams, width) - 24usize];
    ["Offset of field: cudaMemsetParams::height"]
        [::core::mem::offset_of!(cudaMemsetParams, height) - 32usize];
};
impl Default for cudaMemsetParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetParamsV2 {
    pub dst: *mut ::core::ffi::c_void,
    pub pitch: usize,
    pub value: ::core::ffi::c_uint,
    pub elementSize: ::core::ffi::c_uint,
    pub width: usize,
    pub height: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemsetParamsV2"][::core::mem::size_of::<cudaMemsetParamsV2>() - 40usize];
    ["Alignment of cudaMemsetParamsV2"][::core::mem::align_of::<cudaMemsetParamsV2>() - 8usize];
    ["Offset of field: cudaMemsetParamsV2::dst"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, dst) - 0usize];
    ["Offset of field: cudaMemsetParamsV2::pitch"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, pitch) - 8usize];
    ["Offset of field: cudaMemsetParamsV2::value"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, value) - 16usize];
    ["Offset of field: cudaMemsetParamsV2::elementSize"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, elementSize) - 20usize];
    ["Offset of field: cudaMemsetParamsV2::width"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, width) - 24usize];
    ["Offset of field: cudaMemsetParamsV2::height"]
        [::core::mem::offset_of!(cudaMemsetParamsV2, height) - 32usize];
};
impl Default for cudaMemsetParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaAccessProperty {
    cudaAccessPropertyNormal = 0,
    cudaAccessPropertyStreaming = 1,
    cudaAccessPropertyPersisting = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaAccessPolicyWindow {
    pub base_ptr: *mut ::core::ffi::c_void,
    pub num_bytes: usize,
    pub hitRatio: f32,
    pub hitProp: cudaAccessProperty,
    pub missProp: cudaAccessProperty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAccessPolicyWindow"][::core::mem::size_of::<cudaAccessPolicyWindow>() - 32usize];
    ["Alignment of cudaAccessPolicyWindow"]
        [::core::mem::align_of::<cudaAccessPolicyWindow>() - 8usize];
    ["Offset of field: cudaAccessPolicyWindow::base_ptr"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, base_ptr) - 0usize];
    ["Offset of field: cudaAccessPolicyWindow::num_bytes"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, num_bytes) - 8usize];
    ["Offset of field: cudaAccessPolicyWindow::hitRatio"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, hitRatio) - 16usize];
    ["Offset of field: cudaAccessPolicyWindow::hitProp"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, hitProp) - 20usize];
    ["Offset of field: cudaAccessPolicyWindow::missProp"]
        [::core::mem::offset_of!(cudaAccessPolicyWindow, missProp) - 24usize];
};
impl Default for cudaAccessPolicyWindow {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostFn_t =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostNodeParams {
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaHostNodeParams"][::core::mem::size_of::<cudaHostNodeParams>() - 16usize];
    ["Alignment of cudaHostNodeParams"][::core::mem::align_of::<cudaHostNodeParams>() - 8usize];
    ["Offset of field: cudaHostNodeParams::fn_"]
        [::core::mem::offset_of!(cudaHostNodeParams, fn_) - 0usize];
    ["Offset of field: cudaHostNodeParams::userData"]
        [::core::mem::offset_of!(cudaHostNodeParams, userData) - 8usize];
};
impl Default for cudaHostNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostNodeParamsV2 {
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaHostNodeParamsV2"][::core::mem::size_of::<cudaHostNodeParamsV2>() - 16usize];
    ["Alignment of cudaHostNodeParamsV2"][::core::mem::align_of::<cudaHostNodeParamsV2>() - 8usize];
    ["Offset of field: cudaHostNodeParamsV2::fn_"]
        [::core::mem::offset_of!(cudaHostNodeParamsV2, fn_) - 0usize];
    ["Offset of field: cudaHostNodeParamsV2::userData"]
        [::core::mem::offset_of!(cudaHostNodeParamsV2, userData) - 8usize];
};
impl Default for cudaHostNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone = 0,
    cudaStreamCaptureStatusActive = 1,
    cudaStreamCaptureStatusInvalidated = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaClusterSchedulingPolicy {
    cudaClusterSchedulingPolicyDefault = 0,
    cudaClusterSchedulingPolicySpread = 1,
    cudaClusterSchedulingPolicyLoadBalancing = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamUpdateCaptureDependenciesFlags {
    cudaStreamAddCaptureDependencies = 0,
    cudaStreamSetCaptureDependencies = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaUserObjectFlags {
    cudaUserObjectNoDestructorSync = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaUserObjectRetainFlags {
    cudaGraphUserObjectMove = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaGraphicsResource {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsRegisterFlags {
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsMapFlags {
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphicsCubeFace {
    cudaGraphicsCubeFacePositiveX = 0,
    cudaGraphicsCubeFaceNegativeX = 1,
    cudaGraphicsCubeFacePositiveY = 2,
    cudaGraphicsCubeFaceNegativeY = 3,
    cudaGraphicsCubeFacePositiveZ = 4,
    cudaGraphicsCubeFaceNegativeZ = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceType {
    cudaResourceTypeArray = 0,
    cudaResourceTypeMipmappedArray = 1,
    cudaResourceTypeLinear = 2,
    cudaResourceTypePitch2D = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceViewFormat {
    cudaResViewFormatNone = 0,
    cudaResViewFormatUnsignedChar1 = 1,
    cudaResViewFormatUnsignedChar2 = 2,
    cudaResViewFormatUnsignedChar4 = 3,
    cudaResViewFormatSignedChar1 = 4,
    cudaResViewFormatSignedChar2 = 5,
    cudaResViewFormatSignedChar4 = 6,
    cudaResViewFormatUnsignedShort1 = 7,
    cudaResViewFormatUnsignedShort2 = 8,
    cudaResViewFormatUnsignedShort4 = 9,
    cudaResViewFormatSignedShort1 = 10,
    cudaResViewFormatSignedShort2 = 11,
    cudaResViewFormatSignedShort4 = 12,
    cudaResViewFormatUnsignedInt1 = 13,
    cudaResViewFormatUnsignedInt2 = 14,
    cudaResViewFormatUnsignedInt4 = 15,
    cudaResViewFormatSignedInt1 = 16,
    cudaResViewFormatSignedInt2 = 17,
    cudaResViewFormatSignedInt4 = 18,
    cudaResViewFormatHalf1 = 19,
    cudaResViewFormatHalf2 = 20,
    cudaResViewFormatHalf4 = 21,
    cudaResViewFormatFloat1 = 22,
    cudaResViewFormatFloat2 = 23,
    cudaResViewFormatFloat4 = 24,
    cudaResViewFormatUnsignedBlockCompressed1 = 25,
    cudaResViewFormatUnsignedBlockCompressed2 = 26,
    cudaResViewFormatUnsignedBlockCompressed3 = 27,
    cudaResViewFormatUnsignedBlockCompressed4 = 28,
    cudaResViewFormatSignedBlockCompressed4 = 29,
    cudaResViewFormatUnsignedBlockCompressed5 = 30,
    cudaResViewFormatSignedBlockCompressed5 = 31,
    cudaResViewFormatUnsignedBlockCompressed6H = 32,
    cudaResViewFormatSignedBlockCompressed6H = 33,
    cudaResViewFormatUnsignedBlockCompressed7 = 34,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaResourceDesc {
    pub resType: cudaResourceType,
    pub res: cudaResourceDesc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaResourceDesc__bindgen_ty_1 {
    pub array: cudaResourceDesc__bindgen_ty_1__bindgen_ty_1,
    pub mipmap: cudaResourceDesc__bindgen_ty_1__bindgen_ty_2,
    pub linear: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3,
    pub pitch2D: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    pub array: cudaArray_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_1::array"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1, array) - 0usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    pub mipmap: cudaMipmappedArray_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_2::mipmap"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2, mipmap) - 0usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    pub devPtr: *mut ::core::ffi::c_void,
    pub desc: cudaChannelFormatDesc,
    pub sizeInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>() - 40usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3::devPtr"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3, devPtr) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3::desc"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3, desc) - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3::sizeInBytes"][::core::mem::offset_of!(
        cudaResourceDesc__bindgen_ty_1__bindgen_ty_3,
        sizeInBytes
    ) - 32usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    pub devPtr: *mut ::core::ffi::c_void,
    pub desc: cudaChannelFormatDesc,
    pub width: usize,
    pub height: usize,
    pub pitchInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1__bindgen_ty_4"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>() - 56usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1__bindgen_ty_4"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::devPtr"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, devPtr) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::desc"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, desc) - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::width"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, width) - 32usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::height"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4, height) - 40usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4::pitchInBytes"][::core::mem::offset_of!(
        cudaResourceDesc__bindgen_ty_1__bindgen_ty_4,
        pitchInBytes
    ) - 48usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc__bindgen_ty_1"]
        [::core::mem::size_of::<cudaResourceDesc__bindgen_ty_1>() - 56usize];
    ["Alignment of cudaResourceDesc__bindgen_ty_1"]
        [::core::mem::align_of::<cudaResourceDesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::array"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, array) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::mipmap"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, mipmap) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::linear"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, linear) - 0usize];
    ["Offset of field: cudaResourceDesc__bindgen_ty_1::pitch2D"]
        [::core::mem::offset_of!(cudaResourceDesc__bindgen_ty_1, pitch2D) - 0usize];
};
impl Default for cudaResourceDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceDesc"][::core::mem::size_of::<cudaResourceDesc>() - 64usize];
    ["Alignment of cudaResourceDesc"][::core::mem::align_of::<cudaResourceDesc>() - 8usize];
    ["Offset of field: cudaResourceDesc::resType"]
        [::core::mem::offset_of!(cudaResourceDesc, resType) - 0usize];
    ["Offset of field: cudaResourceDesc::res"]
        [::core::mem::offset_of!(cudaResourceDesc, res) - 8usize];
};
impl Default for cudaResourceDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceViewDesc {
    pub format: cudaResourceViewFormat,
    pub width: usize,
    pub height: usize,
    pub depth: usize,
    pub firstMipmapLevel: ::core::ffi::c_uint,
    pub lastMipmapLevel: ::core::ffi::c_uint,
    pub firstLayer: ::core::ffi::c_uint,
    pub lastLayer: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaResourceViewDesc"][::core::mem::size_of::<cudaResourceViewDesc>() - 48usize];
    ["Alignment of cudaResourceViewDesc"][::core::mem::align_of::<cudaResourceViewDesc>() - 8usize];
    ["Offset of field: cudaResourceViewDesc::format"]
        [::core::mem::offset_of!(cudaResourceViewDesc, format) - 0usize];
    ["Offset of field: cudaResourceViewDesc::width"]
        [::core::mem::offset_of!(cudaResourceViewDesc, width) - 8usize];
    ["Offset of field: cudaResourceViewDesc::height"]
        [::core::mem::offset_of!(cudaResourceViewDesc, height) - 16usize];
    ["Offset of field: cudaResourceViewDesc::depth"]
        [::core::mem::offset_of!(cudaResourceViewDesc, depth) - 24usize];
    ["Offset of field: cudaResourceViewDesc::firstMipmapLevel"]
        [::core::mem::offset_of!(cudaResourceViewDesc, firstMipmapLevel) - 32usize];
    ["Offset of field: cudaResourceViewDesc::lastMipmapLevel"]
        [::core::mem::offset_of!(cudaResourceViewDesc, lastMipmapLevel) - 36usize];
    ["Offset of field: cudaResourceViewDesc::firstLayer"]
        [::core::mem::offset_of!(cudaResourceViewDesc, firstLayer) - 40usize];
    ["Offset of field: cudaResourceViewDesc::lastLayer"]
        [::core::mem::offset_of!(cudaResourceViewDesc, lastLayer) - 44usize];
};
impl Default for cudaResourceViewDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPointerAttributes {
    pub type_: cudaMemoryType,
    pub device: ::core::ffi::c_int,
    pub devicePointer: *mut ::core::ffi::c_void,
    pub hostPointer: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaPointerAttributes"][::core::mem::size_of::<cudaPointerAttributes>() - 24usize];
    ["Alignment of cudaPointerAttributes"]
        [::core::mem::align_of::<cudaPointerAttributes>() - 8usize];
    ["Offset of field: cudaPointerAttributes::type_"]
        [::core::mem::offset_of!(cudaPointerAttributes, type_) - 0usize];
    ["Offset of field: cudaPointerAttributes::device"]
        [::core::mem::offset_of!(cudaPointerAttributes, device) - 4usize];
    ["Offset of field: cudaPointerAttributes::devicePointer"]
        [::core::mem::offset_of!(cudaPointerAttributes, devicePointer) - 8usize];
    ["Offset of field: cudaPointerAttributes::hostPointer"]
        [::core::mem::offset_of!(cudaPointerAttributes, hostPointer) - 16usize];
};
impl Default for cudaPointerAttributes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncAttributes {
    pub sharedSizeBytes: usize,
    pub constSizeBytes: usize,
    pub localSizeBytes: usize,
    pub maxThreadsPerBlock: ::core::ffi::c_int,
    pub numRegs: ::core::ffi::c_int,
    pub ptxVersion: ::core::ffi::c_int,
    pub binaryVersion: ::core::ffi::c_int,
    pub cacheModeCA: ::core::ffi::c_int,
    pub maxDynamicSharedSizeBytes: ::core::ffi::c_int,
    pub preferredShmemCarveout: ::core::ffi::c_int,
    pub clusterDimMustBeSet: ::core::ffi::c_int,
    pub requiredClusterWidth: ::core::ffi::c_int,
    pub requiredClusterHeight: ::core::ffi::c_int,
    pub requiredClusterDepth: ::core::ffi::c_int,
    pub clusterSchedulingPolicyPreference: ::core::ffi::c_int,
    pub nonPortableClusterSizeAllowed: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaFuncAttributes"][::core::mem::size_of::<cudaFuncAttributes>() - 144usize];
    ["Alignment of cudaFuncAttributes"][::core::mem::align_of::<cudaFuncAttributes>() - 8usize];
    ["Offset of field: cudaFuncAttributes::sharedSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, sharedSizeBytes) - 0usize];
    ["Offset of field: cudaFuncAttributes::constSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, constSizeBytes) - 8usize];
    ["Offset of field: cudaFuncAttributes::localSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, localSizeBytes) - 16usize];
    ["Offset of field: cudaFuncAttributes::maxThreadsPerBlock"]
        [::core::mem::offset_of!(cudaFuncAttributes, maxThreadsPerBlock) - 24usize];
    ["Offset of field: cudaFuncAttributes::numRegs"]
        [::core::mem::offset_of!(cudaFuncAttributes, numRegs) - 28usize];
    ["Offset of field: cudaFuncAttributes::ptxVersion"]
        [::core::mem::offset_of!(cudaFuncAttributes, ptxVersion) - 32usize];
    ["Offset of field: cudaFuncAttributes::binaryVersion"]
        [::core::mem::offset_of!(cudaFuncAttributes, binaryVersion) - 36usize];
    ["Offset of field: cudaFuncAttributes::cacheModeCA"]
        [::core::mem::offset_of!(cudaFuncAttributes, cacheModeCA) - 40usize];
    ["Offset of field: cudaFuncAttributes::maxDynamicSharedSizeBytes"]
        [::core::mem::offset_of!(cudaFuncAttributes, maxDynamicSharedSizeBytes) - 44usize];
    ["Offset of field: cudaFuncAttributes::preferredShmemCarveout"]
        [::core::mem::offset_of!(cudaFuncAttributes, preferredShmemCarveout) - 48usize];
    ["Offset of field: cudaFuncAttributes::clusterDimMustBeSet"]
        [::core::mem::offset_of!(cudaFuncAttributes, clusterDimMustBeSet) - 52usize];
    ["Offset of field: cudaFuncAttributes::requiredClusterWidth"]
        [::core::mem::offset_of!(cudaFuncAttributes, requiredClusterWidth) - 56usize];
    ["Offset of field: cudaFuncAttributes::requiredClusterHeight"]
        [::core::mem::offset_of!(cudaFuncAttributes, requiredClusterHeight) - 60usize];
    ["Offset of field: cudaFuncAttributes::requiredClusterDepth"]
        [::core::mem::offset_of!(cudaFuncAttributes, requiredClusterDepth) - 64usize];
    ["Offset of field: cudaFuncAttributes::clusterSchedulingPolicyPreference"]
        [::core::mem::offset_of!(cudaFuncAttributes, clusterSchedulingPolicyPreference) - 68usize];
    ["Offset of field: cudaFuncAttributes::nonPortableClusterSizeAllowed"]
        [::core::mem::offset_of!(cudaFuncAttributes, nonPortableClusterSizeAllowed) - 72usize];
    ["Offset of field: cudaFuncAttributes::reserved"]
        [::core::mem::offset_of!(cudaFuncAttributes, reserved) - 76usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncAttribute {
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
    cudaFuncAttributePreferredSharedMemoryCarveout = 9,
    cudaFuncAttributeClusterDimMustBeSet = 10,
    cudaFuncAttributeRequiredClusterWidth = 11,
    cudaFuncAttributeRequiredClusterHeight = 12,
    cudaFuncAttributeRequiredClusterDepth = 13,
    cudaFuncAttributeNonPortableClusterSizeAllowed = 14,
    cudaFuncAttributeClusterSchedulingPolicyPreference = 15,
    cudaFuncAttributeMax = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncCache {
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedMemConfig {
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedCarveout {
    cudaSharedmemCarveoutDefault = -1,
    cudaSharedmemCarveoutMaxShared = 100,
    cudaSharedmemCarveoutMaxL1 = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaComputeMode {
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLimit {
    cudaLimitStackSize = 0,
    cudaLimitPrintfFifoSize = 1,
    cudaLimitMallocHeapSize = 2,
    cudaLimitDevRuntimeSyncDepth = 3,
    cudaLimitDevRuntimePendingLaunchCount = 4,
    cudaLimitMaxL2FetchGranularity = 5,
    cudaLimitPersistingL2CacheSize = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryAdvise {
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemRangeAttribute {
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4,
    cudaMemRangeAttributePreferredLocationType = 5,
    cudaMemRangeAttributePreferredLocationId = 6,
    cudaMemRangeAttributeLastPrefetchLocationType = 7,
    cudaMemRangeAttributeLastPrefetchLocationId = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesOptions {
    cudaFlushGPUDirectRDMAWritesOptionHost = 1,
    cudaFlushGPUDirectRDMAWritesOptionMemOps = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGPUDirectRDMAWritesOrdering {
    cudaGPUDirectRDMAWritesOrderingNone = 0,
    cudaGPUDirectRDMAWritesOrderingOwner = 100,
    cudaGPUDirectRDMAWritesOrderingAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner = 100,
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0,
}
impl cudaDeviceAttr {
    pub const cudaDevAttrMaxTimelineSemaphoreInteropSupported: cudaDeviceAttr =
        cudaDeviceAttr::cudaDevAttrTimelineSemaphoreInteropSupported;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceAttr {
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
    cudaDevAttrReserved92 = 92,
    cudaDevAttrReserved93 = 93,
    cudaDevAttrReserved94 = 94,
    cudaDevAttrCooperativeLaunch = 95,
    cudaDevAttrCooperativeMultiDeviceLaunch = 96,
    cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
    cudaDevAttrCanFlushRemoteWrites = 98,
    cudaDevAttrHostRegisterSupported = 99,
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100,
    cudaDevAttrDirectManagedMemAccessFromHost = 101,
    cudaDevAttrMaxBlocksPerMultiprocessor = 106,
    cudaDevAttrMaxPersistingL2CacheSize = 108,
    cudaDevAttrMaxAccessPolicyWindowSize = 109,
    cudaDevAttrReservedSharedMemoryPerBlock = 111,
    cudaDevAttrSparseCudaArraySupported = 112,
    cudaDevAttrHostRegisterReadOnlySupported = 113,
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,
    cudaDevAttrMemoryPoolsSupported = 115,
    cudaDevAttrGPUDirectRDMASupported = 116,
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117,
    cudaDevAttrGPUDirectRDMAWritesOrdering = 118,
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119,
    cudaDevAttrClusterLaunch = 120,
    cudaDevAttrDeferredMappingCudaArraySupported = 121,
    cudaDevAttrReserved122 = 122,
    cudaDevAttrReserved123 = 123,
    cudaDevAttrReserved124 = 124,
    cudaDevAttrIpcEventSupport = 125,
    cudaDevAttrMemSyncDomainCount = 126,
    cudaDevAttrReserved127 = 127,
    cudaDevAttrReserved128 = 128,
    cudaDevAttrReserved129 = 129,
    cudaDevAttrNumaConfig = 130,
    cudaDevAttrNumaId = 131,
    cudaDevAttrReserved132 = 132,
    cudaDevAttrMpsEnabled = 133,
    cudaDevAttrHostNumaId = 134,
    cudaDevAttrD3D12CigSupported = 135,
    cudaDevAttrGpuPciDeviceId = 139,
    cudaDevAttrGpuPciSubsystemId = 140,
    cudaDevAttrHostNumaMultinodeIpcSupported = 143,
    cudaDevAttrMax = 144,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemPoolAttr {
    cudaMemPoolReuseFollowEventDependencies = 1,
    cudaMemPoolReuseAllowOpportunistic = 2,
    cudaMemPoolReuseAllowInternalDependencies = 3,
    cudaMemPoolAttrReleaseThreshold = 4,
    cudaMemPoolAttrReservedMemCurrent = 5,
    cudaMemPoolAttrReservedMemHigh = 6,
    cudaMemPoolAttrUsedMemCurrent = 7,
    cudaMemPoolAttrUsedMemHigh = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1,
    cudaMemLocationTypeHost = 2,
    cudaMemLocationTypeHostNuma = 3,
    cudaMemLocationTypeHostNumaCurrent = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemLocation {
    pub type_: cudaMemLocationType,
    pub id: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemLocation"][::core::mem::size_of::<cudaMemLocation>() - 8usize];
    ["Alignment of cudaMemLocation"][::core::mem::align_of::<cudaMemLocation>() - 4usize];
    ["Offset of field: cudaMemLocation::type_"]
        [::core::mem::offset_of!(cudaMemLocation, type_) - 0usize];
    ["Offset of field: cudaMemLocation::id"][::core::mem::offset_of!(cudaMemLocation, id) - 4usize];
};
impl Default for cudaMemLocation {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone = 0,
    cudaMemAccessFlagsProtRead = 1,
    cudaMemAccessFlagsProtReadWrite = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAccessDesc {
    pub location: cudaMemLocation,
    pub flags: cudaMemAccessFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemAccessDesc"][::core::mem::size_of::<cudaMemAccessDesc>() - 12usize];
    ["Alignment of cudaMemAccessDesc"][::core::mem::align_of::<cudaMemAccessDesc>() - 4usize];
    ["Offset of field: cudaMemAccessDesc::location"]
        [::core::mem::offset_of!(cudaMemAccessDesc, location) - 0usize];
    ["Offset of field: cudaMemAccessDesc::flags"]
        [::core::mem::offset_of!(cudaMemAccessDesc, flags) - 8usize];
};
impl Default for cudaMemAccessDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0,
    cudaMemAllocationTypePinned = 1,
    cudaMemAllocationTypeMax = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationHandleType {
    cudaMemHandleTypeNone = 0,
    cudaMemHandleTypePosixFileDescriptor = 1,
    cudaMemHandleTypeWin32 = 2,
    cudaMemHandleTypeWin32Kmt = 4,
    cudaMemHandleTypeFabric = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolProps {
    pub allocType: cudaMemAllocationType,
    pub handleTypes: cudaMemAllocationHandleType,
    pub location: cudaMemLocation,
    pub win32SecurityAttributes: *mut ::core::ffi::c_void,
    pub maxSize: usize,
    pub usage: ::core::ffi::c_ushort,
    pub reserved: [::core::ffi::c_uchar; 54usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemPoolProps"][::core::mem::size_of::<cudaMemPoolProps>() - 88usize];
    ["Alignment of cudaMemPoolProps"][::core::mem::align_of::<cudaMemPoolProps>() - 8usize];
    ["Offset of field: cudaMemPoolProps::allocType"]
        [::core::mem::offset_of!(cudaMemPoolProps, allocType) - 0usize];
    ["Offset of field: cudaMemPoolProps::handleTypes"]
        [::core::mem::offset_of!(cudaMemPoolProps, handleTypes) - 4usize];
    ["Offset of field: cudaMemPoolProps::location"]
        [::core::mem::offset_of!(cudaMemPoolProps, location) - 8usize];
    ["Offset of field: cudaMemPoolProps::win32SecurityAttributes"]
        [::core::mem::offset_of!(cudaMemPoolProps, win32SecurityAttributes) - 16usize];
    ["Offset of field: cudaMemPoolProps::maxSize"]
        [::core::mem::offset_of!(cudaMemPoolProps, maxSize) - 24usize];
    ["Offset of field: cudaMemPoolProps::usage"]
        [::core::mem::offset_of!(cudaMemPoolProps, usage) - 32usize];
    ["Offset of field: cudaMemPoolProps::reserved"]
        [::core::mem::offset_of!(cudaMemPoolProps, reserved) - 34usize];
};
impl Default for cudaMemPoolProps {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolPtrExportData {
    pub reserved: [::core::ffi::c_uchar; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemPoolPtrExportData"]
        [::core::mem::size_of::<cudaMemPoolPtrExportData>() - 64usize];
    ["Alignment of cudaMemPoolPtrExportData"]
        [::core::mem::align_of::<cudaMemPoolPtrExportData>() - 1usize];
    ["Offset of field: cudaMemPoolPtrExportData::reserved"]
        [::core::mem::offset_of!(cudaMemPoolPtrExportData, reserved) - 0usize];
};
impl Default for cudaMemPoolPtrExportData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAllocNodeParams {
    pub poolProps: cudaMemPoolProps,
    pub accessDescs: *const cudaMemAccessDesc,
    pub accessDescCount: usize,
    pub bytesize: usize,
    pub dptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemAllocNodeParams"][::core::mem::size_of::<cudaMemAllocNodeParams>() - 120usize];
    ["Alignment of cudaMemAllocNodeParams"]
        [::core::mem::align_of::<cudaMemAllocNodeParams>() - 8usize];
    ["Offset of field: cudaMemAllocNodeParams::poolProps"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, poolProps) - 0usize];
    ["Offset of field: cudaMemAllocNodeParams::accessDescs"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, accessDescs) - 88usize];
    ["Offset of field: cudaMemAllocNodeParams::accessDescCount"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, accessDescCount) - 96usize];
    ["Offset of field: cudaMemAllocNodeParams::bytesize"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, bytesize) - 104usize];
    ["Offset of field: cudaMemAllocNodeParams::dptr"]
        [::core::mem::offset_of!(cudaMemAllocNodeParams, dptr) - 112usize];
};
impl Default for cudaMemAllocNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAllocNodeParamsV2 {
    pub poolProps: cudaMemPoolProps,
    pub accessDescs: *const cudaMemAccessDesc,
    pub accessDescCount: usize,
    pub bytesize: usize,
    pub dptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemAllocNodeParamsV2"]
        [::core::mem::size_of::<cudaMemAllocNodeParamsV2>() - 120usize];
    ["Alignment of cudaMemAllocNodeParamsV2"]
        [::core::mem::align_of::<cudaMemAllocNodeParamsV2>() - 8usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::poolProps"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, poolProps) - 0usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::accessDescs"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, accessDescs) - 88usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::accessDescCount"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, accessDescCount) - 96usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::bytesize"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, bytesize) - 104usize];
    ["Offset of field: cudaMemAllocNodeParamsV2::dptr"]
        [::core::mem::offset_of!(cudaMemAllocNodeParamsV2, dptr) - 112usize];
};
impl Default for cudaMemAllocNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemFreeNodeParams {
    pub dptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemFreeNodeParams"][::core::mem::size_of::<cudaMemFreeNodeParams>() - 8usize];
    ["Alignment of cudaMemFreeNodeParams"]
        [::core::mem::align_of::<cudaMemFreeNodeParams>() - 8usize];
    ["Offset of field: cudaMemFreeNodeParams::dptr"]
        [::core::mem::offset_of!(cudaMemFreeNodeParams, dptr) - 0usize];
};
impl Default for cudaMemFreeNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphMemAttributeType {
    cudaGraphMemAttrUsedMemCurrent = 0,
    cudaGraphMemAttrUsedMemHigh = 1,
    cudaGraphMemAttrReservedMemCurrent = 2,
    cudaGraphMemAttrReservedMemHigh = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpyFlags {
    cudaMemcpyFlagDefault = 0,
    cudaMemcpyFlagPreferOverlapWithCompute = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpySrcAccessOrder {
    cudaMemcpySrcAccessOrderInvalid = 0,
    cudaMemcpySrcAccessOrderStream = 1,
    cudaMemcpySrcAccessOrderDuringApiCall = 2,
    cudaMemcpySrcAccessOrderAny = 3,
    cudaMemcpySrcAccessOrderMax = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyAttributes {
    pub srcAccessOrder: cudaMemcpySrcAccessOrder,
    pub srcLocHint: cudaMemLocation,
    pub dstLocHint: cudaMemLocation,
    pub flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpyAttributes"][::core::mem::size_of::<cudaMemcpyAttributes>() - 24usize];
    ["Alignment of cudaMemcpyAttributes"][::core::mem::align_of::<cudaMemcpyAttributes>() - 4usize];
    ["Offset of field: cudaMemcpyAttributes::srcAccessOrder"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, srcAccessOrder) - 0usize];
    ["Offset of field: cudaMemcpyAttributes::srcLocHint"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, srcLocHint) - 4usize];
    ["Offset of field: cudaMemcpyAttributes::dstLocHint"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, dstLocHint) - 12usize];
    ["Offset of field: cudaMemcpyAttributes::flags"]
        [::core::mem::offset_of!(cudaMemcpyAttributes, flags) - 20usize];
};
impl Default for cudaMemcpyAttributes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpy3DOperandType {
    cudaMemcpyOperandTypePointer = 1,
    cudaMemcpyOperandTypeArray = 2,
    cudaMemcpyOperandTypeMax = 2147483647,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOffset3D {
    pub x: usize,
    pub y: usize,
    pub z: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaOffset3D"][::core::mem::size_of::<cudaOffset3D>() - 24usize];
    ["Alignment of cudaOffset3D"][::core::mem::align_of::<cudaOffset3D>() - 8usize];
    ["Offset of field: cudaOffset3D::x"][::core::mem::offset_of!(cudaOffset3D, x) - 0usize];
    ["Offset of field: cudaOffset3D::y"][::core::mem::offset_of!(cudaOffset3D, y) - 8usize];
    ["Offset of field: cudaOffset3D::z"][::core::mem::offset_of!(cudaOffset3D, z) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaMemcpy3DOperand {
    pub type_: cudaMemcpy3DOperandType,
    pub op: cudaMemcpy3DOperand__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaMemcpy3DOperand__bindgen_ty_1 {
    pub ptr: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
    pub array: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 {
    pub ptr: *mut ::core::ffi::c_void,
    pub rowLength: usize,
    pub layerHeight: usize,
    pub locHint: cudaMemLocation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::ptr"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1, ptr) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::rowLength"][::core::mem::offset_of!(
        cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
        rowLength
    ) - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::layerHeight"][::core::mem::offset_of!(
        cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
        layerHeight
    ) - 16usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1::locHint"][::core::mem::offset_of!(
        cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1,
        locHint
    ) - 24usize];
};
impl Default for cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 {
    pub array: cudaArray_t,
    pub offset: cudaOffset3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2::array"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2, array) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2::offset"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2, offset) - 8usize];
};
impl Default for cudaMemcpy3DOperand__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand__bindgen_ty_1"]
        [::core::mem::size_of::<cudaMemcpy3DOperand__bindgen_ty_1>() - 32usize];
    ["Alignment of cudaMemcpy3DOperand__bindgen_ty_1"]
        [::core::mem::align_of::<cudaMemcpy3DOperand__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1::ptr"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1, ptr) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand__bindgen_ty_1::array"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand__bindgen_ty_1, array) - 0usize];
};
impl Default for cudaMemcpy3DOperand__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DOperand"][::core::mem::size_of::<cudaMemcpy3DOperand>() - 40usize];
    ["Alignment of cudaMemcpy3DOperand"][::core::mem::align_of::<cudaMemcpy3DOperand>() - 8usize];
    ["Offset of field: cudaMemcpy3DOperand::type_"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand, type_) - 0usize];
    ["Offset of field: cudaMemcpy3DOperand::op"]
        [::core::mem::offset_of!(cudaMemcpy3DOperand, op) - 8usize];
};
impl Default for cudaMemcpy3DOperand {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaMemcpy3DBatchOp {
    pub src: cudaMemcpy3DOperand,
    pub dst: cudaMemcpy3DOperand,
    pub extent: cudaExtent,
    pub srcAccessOrder: cudaMemcpySrcAccessOrder,
    pub flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemcpy3DBatchOp"][::core::mem::size_of::<cudaMemcpy3DBatchOp>() - 112usize];
    ["Alignment of cudaMemcpy3DBatchOp"][::core::mem::align_of::<cudaMemcpy3DBatchOp>() - 8usize];
    ["Offset of field: cudaMemcpy3DBatchOp::src"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, src) - 0usize];
    ["Offset of field: cudaMemcpy3DBatchOp::dst"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, dst) - 40usize];
    ["Offset of field: cudaMemcpy3DBatchOp::extent"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, extent) - 80usize];
    ["Offset of field: cudaMemcpy3DBatchOp::srcAccessOrder"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, srcAccessOrder) - 104usize];
    ["Offset of field: cudaMemcpy3DBatchOp::flags"]
        [::core::mem::offset_of!(cudaMemcpy3DBatchOp, flags) - 108usize];
};
impl Default for cudaMemcpy3DBatchOp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3,
    cudaDevP2PAttrCudaArrayAccessSupported = 4,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUuuid_st {
    pub bytes: [::core::ffi::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CUuuid_st"][::core::mem::size_of::<CUuuid_st>() - 16usize];
    ["Alignment of CUuuid_st"][::core::mem::align_of::<CUuuid_st>() - 1usize];
    ["Offset of field: CUuuid_st::bytes"][::core::mem::offset_of!(CUuuid_st, bytes) - 0usize];
};
pub type cudaUUID_t = CUuuid_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceProp {
    pub name: [::core::ffi::c_char; 256usize],
    pub uuid: cudaUUID_t,
    pub luid: [::core::ffi::c_char; 8usize],
    pub luidDeviceNodeMask: ::core::ffi::c_uint,
    pub totalGlobalMem: usize,
    pub sharedMemPerBlock: usize,
    pub regsPerBlock: ::core::ffi::c_int,
    pub warpSize: ::core::ffi::c_int,
    pub memPitch: usize,
    pub maxThreadsPerBlock: ::core::ffi::c_int,
    pub maxThreadsDim: [::core::ffi::c_int; 3usize],
    pub maxGridSize: [::core::ffi::c_int; 3usize],
    pub clockRate: ::core::ffi::c_int,
    pub totalConstMem: usize,
    pub major: ::core::ffi::c_int,
    pub minor: ::core::ffi::c_int,
    pub textureAlignment: usize,
    pub texturePitchAlignment: usize,
    pub deviceOverlap: ::core::ffi::c_int,
    pub multiProcessorCount: ::core::ffi::c_int,
    pub kernelExecTimeoutEnabled: ::core::ffi::c_int,
    pub integrated: ::core::ffi::c_int,
    pub canMapHostMemory: ::core::ffi::c_int,
    pub computeMode: ::core::ffi::c_int,
    pub maxTexture1D: ::core::ffi::c_int,
    pub maxTexture1DMipmap: ::core::ffi::c_int,
    pub maxTexture1DLinear: ::core::ffi::c_int,
    pub maxTexture2D: [::core::ffi::c_int; 2usize],
    pub maxTexture2DMipmap: [::core::ffi::c_int; 2usize],
    pub maxTexture2DLinear: [::core::ffi::c_int; 3usize],
    pub maxTexture2DGather: [::core::ffi::c_int; 2usize],
    pub maxTexture3D: [::core::ffi::c_int; 3usize],
    pub maxTexture3DAlt: [::core::ffi::c_int; 3usize],
    pub maxTextureCubemap: ::core::ffi::c_int,
    pub maxTexture1DLayered: [::core::ffi::c_int; 2usize],
    pub maxTexture2DLayered: [::core::ffi::c_int; 3usize],
    pub maxTextureCubemapLayered: [::core::ffi::c_int; 2usize],
    pub maxSurface1D: ::core::ffi::c_int,
    pub maxSurface2D: [::core::ffi::c_int; 2usize],
    pub maxSurface3D: [::core::ffi::c_int; 3usize],
    pub maxSurface1DLayered: [::core::ffi::c_int; 2usize],
    pub maxSurface2DLayered: [::core::ffi::c_int; 3usize],
    pub maxSurfaceCubemap: ::core::ffi::c_int,
    pub maxSurfaceCubemapLayered: [::core::ffi::c_int; 2usize],
    pub surfaceAlignment: usize,
    pub concurrentKernels: ::core::ffi::c_int,
    pub ECCEnabled: ::core::ffi::c_int,
    pub pciBusID: ::core::ffi::c_int,
    pub pciDeviceID: ::core::ffi::c_int,
    pub pciDomainID: ::core::ffi::c_int,
    pub tccDriver: ::core::ffi::c_int,
    pub asyncEngineCount: ::core::ffi::c_int,
    pub unifiedAddressing: ::core::ffi::c_int,
    pub memoryClockRate: ::core::ffi::c_int,
    pub memoryBusWidth: ::core::ffi::c_int,
    pub l2CacheSize: ::core::ffi::c_int,
    pub persistingL2CacheMaxSize: ::core::ffi::c_int,
    pub maxThreadsPerMultiProcessor: ::core::ffi::c_int,
    pub streamPrioritiesSupported: ::core::ffi::c_int,
    pub globalL1CacheSupported: ::core::ffi::c_int,
    pub localL1CacheSupported: ::core::ffi::c_int,
    pub sharedMemPerMultiprocessor: usize,
    pub regsPerMultiprocessor: ::core::ffi::c_int,
    pub managedMemory: ::core::ffi::c_int,
    pub isMultiGpuBoard: ::core::ffi::c_int,
    pub multiGpuBoardGroupID: ::core::ffi::c_int,
    pub hostNativeAtomicSupported: ::core::ffi::c_int,
    pub singleToDoublePrecisionPerfRatio: ::core::ffi::c_int,
    pub pageableMemoryAccess: ::core::ffi::c_int,
    pub concurrentManagedAccess: ::core::ffi::c_int,
    pub computePreemptionSupported: ::core::ffi::c_int,
    pub canUseHostPointerForRegisteredMem: ::core::ffi::c_int,
    pub cooperativeLaunch: ::core::ffi::c_int,
    pub cooperativeMultiDeviceLaunch: ::core::ffi::c_int,
    pub sharedMemPerBlockOptin: usize,
    pub pageableMemoryAccessUsesHostPageTables: ::core::ffi::c_int,
    pub directManagedMemAccessFromHost: ::core::ffi::c_int,
    pub maxBlocksPerMultiProcessor: ::core::ffi::c_int,
    pub accessPolicyMaxWindowSize: ::core::ffi::c_int,
    pub reservedSharedMemPerBlock: usize,
    pub hostRegisterSupported: ::core::ffi::c_int,
    pub sparseCudaArraySupported: ::core::ffi::c_int,
    pub hostRegisterReadOnlySupported: ::core::ffi::c_int,
    pub timelineSemaphoreInteropSupported: ::core::ffi::c_int,
    pub memoryPoolsSupported: ::core::ffi::c_int,
    pub gpuDirectRDMASupported: ::core::ffi::c_int,
    pub gpuDirectRDMAFlushWritesOptions: ::core::ffi::c_uint,
    pub gpuDirectRDMAWritesOrdering: ::core::ffi::c_int,
    pub memoryPoolSupportedHandleTypes: ::core::ffi::c_uint,
    pub deferredMappingCudaArraySupported: ::core::ffi::c_int,
    pub ipcEventSupported: ::core::ffi::c_int,
    pub clusterLaunch: ::core::ffi::c_int,
    pub unifiedFunctionPointers: ::core::ffi::c_int,
    pub reserved: [::core::ffi::c_int; 63usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaDeviceProp"][::core::mem::size_of::<cudaDeviceProp>() - 1032usize];
    ["Alignment of cudaDeviceProp"][::core::mem::align_of::<cudaDeviceProp>() - 8usize];
    ["Offset of field: cudaDeviceProp::name"]
        [::core::mem::offset_of!(cudaDeviceProp, name) - 0usize];
    ["Offset of field: cudaDeviceProp::uuid"]
        [::core::mem::offset_of!(cudaDeviceProp, uuid) - 256usize];
    ["Offset of field: cudaDeviceProp::luid"]
        [::core::mem::offset_of!(cudaDeviceProp, luid) - 272usize];
    ["Offset of field: cudaDeviceProp::luidDeviceNodeMask"]
        [::core::mem::offset_of!(cudaDeviceProp, luidDeviceNodeMask) - 280usize];
    ["Offset of field: cudaDeviceProp::totalGlobalMem"]
        [::core::mem::offset_of!(cudaDeviceProp, totalGlobalMem) - 288usize];
    ["Offset of field: cudaDeviceProp::sharedMemPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, sharedMemPerBlock) - 296usize];
    ["Offset of field: cudaDeviceProp::regsPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, regsPerBlock) - 304usize];
    ["Offset of field: cudaDeviceProp::warpSize"]
        [::core::mem::offset_of!(cudaDeviceProp, warpSize) - 308usize];
    ["Offset of field: cudaDeviceProp::memPitch"]
        [::core::mem::offset_of!(cudaDeviceProp, memPitch) - 312usize];
    ["Offset of field: cudaDeviceProp::maxThreadsPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, maxThreadsPerBlock) - 320usize];
    ["Offset of field: cudaDeviceProp::maxThreadsDim"]
        [::core::mem::offset_of!(cudaDeviceProp, maxThreadsDim) - 324usize];
    ["Offset of field: cudaDeviceProp::maxGridSize"]
        [::core::mem::offset_of!(cudaDeviceProp, maxGridSize) - 336usize];
    ["Offset of field: cudaDeviceProp::clockRate"]
        [::core::mem::offset_of!(cudaDeviceProp, clockRate) - 348usize];
    ["Offset of field: cudaDeviceProp::totalConstMem"]
        [::core::mem::offset_of!(cudaDeviceProp, totalConstMem) - 352usize];
    ["Offset of field: cudaDeviceProp::major"]
        [::core::mem::offset_of!(cudaDeviceProp, major) - 360usize];
    ["Offset of field: cudaDeviceProp::minor"]
        [::core::mem::offset_of!(cudaDeviceProp, minor) - 364usize];
    ["Offset of field: cudaDeviceProp::textureAlignment"]
        [::core::mem::offset_of!(cudaDeviceProp, textureAlignment) - 368usize];
    ["Offset of field: cudaDeviceProp::texturePitchAlignment"]
        [::core::mem::offset_of!(cudaDeviceProp, texturePitchAlignment) - 376usize];
    ["Offset of field: cudaDeviceProp::deviceOverlap"]
        [::core::mem::offset_of!(cudaDeviceProp, deviceOverlap) - 384usize];
    ["Offset of field: cudaDeviceProp::multiProcessorCount"]
        [::core::mem::offset_of!(cudaDeviceProp, multiProcessorCount) - 388usize];
    ["Offset of field: cudaDeviceProp::kernelExecTimeoutEnabled"]
        [::core::mem::offset_of!(cudaDeviceProp, kernelExecTimeoutEnabled) - 392usize];
    ["Offset of field: cudaDeviceProp::integrated"]
        [::core::mem::offset_of!(cudaDeviceProp, integrated) - 396usize];
    ["Offset of field: cudaDeviceProp::canMapHostMemory"]
        [::core::mem::offset_of!(cudaDeviceProp, canMapHostMemory) - 400usize];
    ["Offset of field: cudaDeviceProp::computeMode"]
        [::core::mem::offset_of!(cudaDeviceProp, computeMode) - 404usize];
    ["Offset of field: cudaDeviceProp::maxTexture1D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1D) - 408usize];
    ["Offset of field: cudaDeviceProp::maxTexture1DMipmap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1DMipmap) - 412usize];
    ["Offset of field: cudaDeviceProp::maxTexture1DLinear"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1DLinear) - 416usize];
    ["Offset of field: cudaDeviceProp::maxTexture2D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2D) - 420usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DMipmap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DMipmap) - 428usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DLinear"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DLinear) - 436usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DGather"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DGather) - 448usize];
    ["Offset of field: cudaDeviceProp::maxTexture3D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture3D) - 456usize];
    ["Offset of field: cudaDeviceProp::maxTexture3DAlt"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture3DAlt) - 468usize];
    ["Offset of field: cudaDeviceProp::maxTextureCubemap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTextureCubemap) - 480usize];
    ["Offset of field: cudaDeviceProp::maxTexture1DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture1DLayered) - 484usize];
    ["Offset of field: cudaDeviceProp::maxTexture2DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTexture2DLayered) - 492usize];
    ["Offset of field: cudaDeviceProp::maxTextureCubemapLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxTextureCubemapLayered) - 504usize];
    ["Offset of field: cudaDeviceProp::maxSurface1D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface1D) - 512usize];
    ["Offset of field: cudaDeviceProp::maxSurface2D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface2D) - 516usize];
    ["Offset of field: cudaDeviceProp::maxSurface3D"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface3D) - 524usize];
    ["Offset of field: cudaDeviceProp::maxSurface1DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface1DLayered) - 536usize];
    ["Offset of field: cudaDeviceProp::maxSurface2DLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurface2DLayered) - 544usize];
    ["Offset of field: cudaDeviceProp::maxSurfaceCubemap"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurfaceCubemap) - 556usize];
    ["Offset of field: cudaDeviceProp::maxSurfaceCubemapLayered"]
        [::core::mem::offset_of!(cudaDeviceProp, maxSurfaceCubemapLayered) - 560usize];
    ["Offset of field: cudaDeviceProp::surfaceAlignment"]
        [::core::mem::offset_of!(cudaDeviceProp, surfaceAlignment) - 568usize];
    ["Offset of field: cudaDeviceProp::concurrentKernels"]
        [::core::mem::offset_of!(cudaDeviceProp, concurrentKernels) - 576usize];
    ["Offset of field: cudaDeviceProp::ECCEnabled"]
        [::core::mem::offset_of!(cudaDeviceProp, ECCEnabled) - 580usize];
    ["Offset of field: cudaDeviceProp::pciBusID"]
        [::core::mem::offset_of!(cudaDeviceProp, pciBusID) - 584usize];
    ["Offset of field: cudaDeviceProp::pciDeviceID"]
        [::core::mem::offset_of!(cudaDeviceProp, pciDeviceID) - 588usize];
    ["Offset of field: cudaDeviceProp::pciDomainID"]
        [::core::mem::offset_of!(cudaDeviceProp, pciDomainID) - 592usize];
    ["Offset of field: cudaDeviceProp::tccDriver"]
        [::core::mem::offset_of!(cudaDeviceProp, tccDriver) - 596usize];
    ["Offset of field: cudaDeviceProp::asyncEngineCount"]
        [::core::mem::offset_of!(cudaDeviceProp, asyncEngineCount) - 600usize];
    ["Offset of field: cudaDeviceProp::unifiedAddressing"]
        [::core::mem::offset_of!(cudaDeviceProp, unifiedAddressing) - 604usize];
    ["Offset of field: cudaDeviceProp::memoryClockRate"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryClockRate) - 608usize];
    ["Offset of field: cudaDeviceProp::memoryBusWidth"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryBusWidth) - 612usize];
    ["Offset of field: cudaDeviceProp::l2CacheSize"]
        [::core::mem::offset_of!(cudaDeviceProp, l2CacheSize) - 616usize];
    ["Offset of field: cudaDeviceProp::persistingL2CacheMaxSize"]
        [::core::mem::offset_of!(cudaDeviceProp, persistingL2CacheMaxSize) - 620usize];
    ["Offset of field: cudaDeviceProp::maxThreadsPerMultiProcessor"]
        [::core::mem::offset_of!(cudaDeviceProp, maxThreadsPerMultiProcessor) - 624usize];
    ["Offset of field: cudaDeviceProp::streamPrioritiesSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, streamPrioritiesSupported) - 628usize];
    ["Offset of field: cudaDeviceProp::globalL1CacheSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, globalL1CacheSupported) - 632usize];
    ["Offset of field: cudaDeviceProp::localL1CacheSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, localL1CacheSupported) - 636usize];
    ["Offset of field: cudaDeviceProp::sharedMemPerMultiprocessor"]
        [::core::mem::offset_of!(cudaDeviceProp, sharedMemPerMultiprocessor) - 640usize];
    ["Offset of field: cudaDeviceProp::regsPerMultiprocessor"]
        [::core::mem::offset_of!(cudaDeviceProp, regsPerMultiprocessor) - 648usize];
    ["Offset of field: cudaDeviceProp::managedMemory"]
        [::core::mem::offset_of!(cudaDeviceProp, managedMemory) - 652usize];
    ["Offset of field: cudaDeviceProp::isMultiGpuBoard"]
        [::core::mem::offset_of!(cudaDeviceProp, isMultiGpuBoard) - 656usize];
    ["Offset of field: cudaDeviceProp::multiGpuBoardGroupID"]
        [::core::mem::offset_of!(cudaDeviceProp, multiGpuBoardGroupID) - 660usize];
    ["Offset of field: cudaDeviceProp::hostNativeAtomicSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, hostNativeAtomicSupported) - 664usize];
    ["Offset of field: cudaDeviceProp::singleToDoublePrecisionPerfRatio"]
        [::core::mem::offset_of!(cudaDeviceProp, singleToDoublePrecisionPerfRatio) - 668usize];
    ["Offset of field: cudaDeviceProp::pageableMemoryAccess"]
        [::core::mem::offset_of!(cudaDeviceProp, pageableMemoryAccess) - 672usize];
    ["Offset of field: cudaDeviceProp::concurrentManagedAccess"]
        [::core::mem::offset_of!(cudaDeviceProp, concurrentManagedAccess) - 676usize];
    ["Offset of field: cudaDeviceProp::computePreemptionSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, computePreemptionSupported) - 680usize];
    ["Offset of field: cudaDeviceProp::canUseHostPointerForRegisteredMem"]
        [::core::mem::offset_of!(cudaDeviceProp, canUseHostPointerForRegisteredMem) - 684usize];
    ["Offset of field: cudaDeviceProp::cooperativeLaunch"]
        [::core::mem::offset_of!(cudaDeviceProp, cooperativeLaunch) - 688usize];
    ["Offset of field: cudaDeviceProp::cooperativeMultiDeviceLaunch"]
        [::core::mem::offset_of!(cudaDeviceProp, cooperativeMultiDeviceLaunch) - 692usize];
    ["Offset of field: cudaDeviceProp::sharedMemPerBlockOptin"]
        [::core::mem::offset_of!(cudaDeviceProp, sharedMemPerBlockOptin) - 696usize];
    ["Offset of field: cudaDeviceProp::pageableMemoryAccessUsesHostPageTables"][::core::mem::offset_of!(
        cudaDeviceProp,
        pageableMemoryAccessUsesHostPageTables
    ) - 704usize];
    ["Offset of field: cudaDeviceProp::directManagedMemAccessFromHost"]
        [::core::mem::offset_of!(cudaDeviceProp, directManagedMemAccessFromHost) - 708usize];
    ["Offset of field: cudaDeviceProp::maxBlocksPerMultiProcessor"]
        [::core::mem::offset_of!(cudaDeviceProp, maxBlocksPerMultiProcessor) - 712usize];
    ["Offset of field: cudaDeviceProp::accessPolicyMaxWindowSize"]
        [::core::mem::offset_of!(cudaDeviceProp, accessPolicyMaxWindowSize) - 716usize];
    ["Offset of field: cudaDeviceProp::reservedSharedMemPerBlock"]
        [::core::mem::offset_of!(cudaDeviceProp, reservedSharedMemPerBlock) - 720usize];
    ["Offset of field: cudaDeviceProp::hostRegisterSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, hostRegisterSupported) - 728usize];
    ["Offset of field: cudaDeviceProp::sparseCudaArraySupported"]
        [::core::mem::offset_of!(cudaDeviceProp, sparseCudaArraySupported) - 732usize];
    ["Offset of field: cudaDeviceProp::hostRegisterReadOnlySupported"]
        [::core::mem::offset_of!(cudaDeviceProp, hostRegisterReadOnlySupported) - 736usize];
    ["Offset of field: cudaDeviceProp::timelineSemaphoreInteropSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, timelineSemaphoreInteropSupported) - 740usize];
    ["Offset of field: cudaDeviceProp::memoryPoolsSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryPoolsSupported) - 744usize];
    ["Offset of field: cudaDeviceProp::gpuDirectRDMASupported"]
        [::core::mem::offset_of!(cudaDeviceProp, gpuDirectRDMASupported) - 748usize];
    ["Offset of field: cudaDeviceProp::gpuDirectRDMAFlushWritesOptions"]
        [::core::mem::offset_of!(cudaDeviceProp, gpuDirectRDMAFlushWritesOptions) - 752usize];
    ["Offset of field: cudaDeviceProp::gpuDirectRDMAWritesOrdering"]
        [::core::mem::offset_of!(cudaDeviceProp, gpuDirectRDMAWritesOrdering) - 756usize];
    ["Offset of field: cudaDeviceProp::memoryPoolSupportedHandleTypes"]
        [::core::mem::offset_of!(cudaDeviceProp, memoryPoolSupportedHandleTypes) - 760usize];
    ["Offset of field: cudaDeviceProp::deferredMappingCudaArraySupported"]
        [::core::mem::offset_of!(cudaDeviceProp, deferredMappingCudaArraySupported) - 764usize];
    ["Offset of field: cudaDeviceProp::ipcEventSupported"]
        [::core::mem::offset_of!(cudaDeviceProp, ipcEventSupported) - 768usize];
    ["Offset of field: cudaDeviceProp::clusterLaunch"]
        [::core::mem::offset_of!(cudaDeviceProp, clusterLaunch) - 772usize];
    ["Offset of field: cudaDeviceProp::unifiedFunctionPointers"]
        [::core::mem::offset_of!(cudaDeviceProp, unifiedFunctionPointers) - 776usize];
    ["Offset of field: cudaDeviceProp::reserved"]
        [::core::mem::offset_of!(cudaDeviceProp, reserved) - 780usize];
};
impl Default for cudaDeviceProp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcEventHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaIpcEventHandle_st"][::core::mem::size_of::<cudaIpcEventHandle_st>() - 64usize];
    ["Alignment of cudaIpcEventHandle_st"]
        [::core::mem::align_of::<cudaIpcEventHandle_st>() - 1usize];
    ["Offset of field: cudaIpcEventHandle_st::reserved"]
        [::core::mem::offset_of!(cudaIpcEventHandle_st, reserved) - 0usize];
};
impl Default for cudaIpcEventHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcEventHandle_t = cudaIpcEventHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcMemHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaIpcMemHandle_st"][::core::mem::size_of::<cudaIpcMemHandle_st>() - 64usize];
    ["Alignment of cudaIpcMemHandle_st"][::core::mem::align_of::<cudaIpcMemHandle_st>() - 1usize];
    ["Offset of field: cudaIpcMemHandle_st::reserved"]
        [::core::mem::offset_of!(cudaIpcMemHandle_st, reserved) - 0usize];
};
impl Default for cudaIpcMemHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcMemHandle_t = cudaIpcMemHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemFabricHandle_st {
    pub reserved: [::core::ffi::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaMemFabricHandle_st"][::core::mem::size_of::<cudaMemFabricHandle_st>() - 64usize];
    ["Alignment of cudaMemFabricHandle_st"]
        [::core::mem::align_of::<cudaMemFabricHandle_st>() - 1usize];
    ["Offset of field: cudaMemFabricHandle_st::reserved"]
        [::core::mem::offset_of!(cudaMemFabricHandle_st, reserved) - 0usize];
};
impl Default for cudaMemFabricHandle_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemFabricHandle_t = cudaMemFabricHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalMemoryHandleType {
    cudaExternalMemoryHandleTypeOpaqueFd = 1,
    cudaExternalMemoryHandleTypeOpaqueWin32 = 2,
    cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalMemoryHandleTypeD3D12Heap = 4,
    cudaExternalMemoryHandleTypeD3D12Resource = 5,
    cudaExternalMemoryHandleTypeD3D11Resource = 6,
    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    cudaExternalMemoryHandleTypeNvSciBuf = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalMemoryHandleDesc {
    pub type_: cudaExternalMemoryHandleType,
    pub handle: cudaExternalMemoryHandleDesc__bindgen_ty_1,
    pub size: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    pub fd: ::core::ffi::c_int,
    pub win32: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciBufObject: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1"][::core::mem::align_of::<
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1::handle"][::core::mem::offset_of!(
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
        handle
    )
        - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1::name"][::core::mem::offset_of!(
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
        name
    ) - 8usize];
};
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryHandleDesc__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>() - 16usize];
    ["Alignment of cudaExternalMemoryHandleDesc__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1::fd"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1::win32"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc__bindgen_ty_1, win32) - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc__bindgen_ty_1::nvSciBufObject"][::core::mem::offset_of!(
        cudaExternalMemoryHandleDesc__bindgen_ty_1,
        nvSciBufObject
    ) - 0usize];
};
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryHandleDesc"]
        [::core::mem::size_of::<cudaExternalMemoryHandleDesc>() - 40usize];
    ["Alignment of cudaExternalMemoryHandleDesc"]
        [::core::mem::align_of::<cudaExternalMemoryHandleDesc>() - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::type_"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, type_) - 0usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::handle"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, handle) - 8usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::size"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, size) - 24usize];
    ["Offset of field: cudaExternalMemoryHandleDesc::flags"]
        [::core::mem::offset_of!(cudaExternalMemoryHandleDesc, flags) - 32usize];
};
impl Default for cudaExternalMemoryHandleDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryBufferDesc {
    pub offset: ::core::ffi::c_ulonglong,
    pub size: ::core::ffi::c_ulonglong,
    pub flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryBufferDesc"]
        [::core::mem::size_of::<cudaExternalMemoryBufferDesc>() - 24usize];
    ["Alignment of cudaExternalMemoryBufferDesc"]
        [::core::mem::align_of::<cudaExternalMemoryBufferDesc>() - 8usize];
    ["Offset of field: cudaExternalMemoryBufferDesc::offset"]
        [::core::mem::offset_of!(cudaExternalMemoryBufferDesc, offset) - 0usize];
    ["Offset of field: cudaExternalMemoryBufferDesc::size"]
        [::core::mem::offset_of!(cudaExternalMemoryBufferDesc, size) - 8usize];
    ["Offset of field: cudaExternalMemoryBufferDesc::flags"]
        [::core::mem::offset_of!(cudaExternalMemoryBufferDesc, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryMipmappedArrayDesc {
    pub offset: ::core::ffi::c_ulonglong,
    pub formatDesc: cudaChannelFormatDesc,
    pub extent: cudaExtent,
    pub flags: ::core::ffi::c_uint,
    pub numLevels: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalMemoryMipmappedArrayDesc"]
        [::core::mem::size_of::<cudaExternalMemoryMipmappedArrayDesc>() - 64usize];
    ["Alignment of cudaExternalMemoryMipmappedArrayDesc"]
        [::core::mem::align_of::<cudaExternalMemoryMipmappedArrayDesc>() - 8usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::offset"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, offset) - 0usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::formatDesc"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, formatDesc) - 8usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::extent"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, extent) - 32usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::flags"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, flags) - 56usize];
    ["Offset of field: cudaExternalMemoryMipmappedArrayDesc::numLevels"]
        [::core::mem::offset_of!(cudaExternalMemoryMipmappedArrayDesc, numLevels) - 60usize];
};
impl Default for cudaExternalMemoryMipmappedArrayDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalSemaphoreHandleType {
    cudaExternalSemaphoreHandleTypeOpaqueFd = 1,
    cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2,
    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalSemaphoreHandleTypeD3D12Fence = 4,
    cudaExternalSemaphoreHandleTypeD3D11Fence = 5,
    cudaExternalSemaphoreHandleTypeNvSciSync = 6,
    cudaExternalSemaphoreHandleTypeKeyedMutex = 7,
    cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreHandleDesc {
    pub type_: cudaExternalSemaphoreHandleType,
    pub handle: cudaExternalSemaphoreHandleDesc__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    pub fd: ::core::ffi::c_int,
    pub win32: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSyncObj: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1::handle"][::core::mem::offset_of!(
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
        handle
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1::name"][::core::mem::offset_of!(
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 8usize];
};
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreHandleDesc__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>() - 16usize];
    ["Alignment of cudaExternalSemaphoreHandleDesc__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1::fd"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1::win32"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1, win32) - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc__bindgen_ty_1::nvSciSyncObj"][::core::mem::offset_of!(
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1,
        nvSciSyncObj
    ) - 0usize];
};
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreHandleDesc"]
        [::core::mem::size_of::<cudaExternalSemaphoreHandleDesc>() - 32usize];
    ["Alignment of cudaExternalSemaphoreHandleDesc"]
        [::core::mem::align_of::<cudaExternalSemaphoreHandleDesc>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc::type_"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc, type_) - 0usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc::handle"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc, handle) - 8usize];
    ["Offset of field: cudaExternalSemaphoreHandleDesc::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreHandleDesc, flags) - 24usize];
};
impl Default for cudaExternalSemaphoreHandleDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1 {
    pub params: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(
        ) - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(
        ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2::reserved"] [:: core :: mem :: offset_of ! (cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 , reserved) - 0usize] ;
};
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(
        ) - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(
        ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>() - 24usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
        fence
    ) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
        keyedMutex
    )
        - 16usize];
};
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams_v1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams_v1>() - 32usize];
    ["Alignment of cudaExternalSemaphoreSignalParams_v1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams_v1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams_v1, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams_v1::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams_v1, flags) - 24usize];
};
impl Default for cudaExternalSemaphoreSignalParams_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1 {
    pub params: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
        reserved
    )
        - 0usize];
};
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
    pub timeoutMs: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
    >() - 16usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3::timeoutMs"] [:: core :: mem :: offset_of ! (cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 , timeoutMs) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>() - 32usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1::fence"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
        keyedMutex
    ) - 16usize];
};
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams_v1"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams_v1>() - 40usize];
    ["Alignment of cudaExternalSemaphoreWaitParams_v1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams_v1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams_v1, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams_v1::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams_v1, flags) - 32usize];
};
impl Default for cudaExternalSemaphoreWaitParams_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams {
    pub params: cudaExternalSemaphoreSignalParams__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::core::ffi::c_uint; 12usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2"][::core::mem::size_of::<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
        reserved
    )
        - 0usize];
};
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3"][::core::mem::size_of::<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>() - 72usize];
    ["Alignment of cudaExternalSemaphoreSignalParams__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::fence"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1,
        keyedMutex
    ) - 16usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams__bindgen_ty_1::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreSignalParams__bindgen_ty_1,
        reserved
    ) - 24usize];
};
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalParams>() - 144usize];
    ["Alignment of cudaExternalSemaphoreSignalParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams, flags) - 72usize];
    ["Offset of field: cudaExternalSemaphoreSignalParams::reserved"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalParams, reserved) - 76usize];
};
impl Default for cudaExternalSemaphoreSignalParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams {
    pub params: cudaExternalSemaphoreWaitParams__bindgen_ty_1,
    pub flags: ::core::ffi::c_uint,
    pub reserved: [::core::ffi::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::core::ffi::c_uint; 10usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1::value"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::core::ffi::c_void,
    pub reserved: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2::fence"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
        fence
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
        reserved
    )
        - 0usize];
};
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::core::ffi::c_ulonglong,
    pub timeoutMs: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3"][::core::mem::size_of::<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    >() - 16usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3::key"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
        key
    )
        - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3::timeoutMs"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
        timeoutMs
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams__bindgen_ty_1"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>() - 72usize];
    ["Alignment of cudaExternalSemaphoreWaitParams__bindgen_ty_1"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::fence"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::nvSciSync"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1,
        nvSciSync
    ) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::keyedMutex"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1,
        keyedMutex
    ) - 16usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams__bindgen_ty_1::reserved"][::core::mem::offset_of!(
        cudaExternalSemaphoreWaitParams__bindgen_ty_1,
        reserved
    ) - 32usize];
};
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitParams>() - 144usize];
    ["Alignment of cudaExternalSemaphoreWaitParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams::params"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams, params) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams::flags"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams, flags) - 72usize];
    ["Offset of field: cudaExternalSemaphoreWaitParams::reserved"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitParams, reserved) - 76usize];
};
impl Default for cudaExternalSemaphoreWaitParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::cudaError as cudaError_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUevent_st {
    _unused: [u8; 0],
}
pub type cudaEvent_t = *mut CUevent_st;
pub type cudaGraphicsResource_t = *mut cudaGraphicsResource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalMemory_st {
    _unused: [u8; 0],
}
pub type cudaExternalMemory_t = *mut CUexternalMemory_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalSemaphore_st {
    _unused: [u8; 0],
}
pub type cudaExternalSemaphore_t = *mut CUexternalSemaphore_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraph_st {
    _unused: [u8; 0],
}
pub type cudaGraph_t = *mut CUgraph_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphNode_st {
    _unused: [u8; 0],
}
pub type cudaGraphNode_t = *mut CUgraphNode_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUuserObject_st {
    _unused: [u8; 0],
}
pub type cudaUserObject_t = *mut CUuserObject_st;
pub type cudaGraphConditionalHandle = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUfunc_st {
    _unused: [u8; 0],
}
pub type cudaFunction_t = *mut CUfunc_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUkern_st {
    _unused: [u8; 0],
}
pub type cudaKernel_t = *mut CUkern_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaJitOption {
    cudaJitMaxRegisters = 0,
    cudaJitThreadsPerBlock = 1,
    cudaJitWallTime = 2,
    cudaJitInfoLogBuffer = 3,
    cudaJitInfoLogBufferSizeBytes = 4,
    cudaJitErrorLogBuffer = 5,
    cudaJitErrorLogBufferSizeBytes = 6,
    cudaJitOptimizationLevel = 7,
    cudaJitFallbackStrategy = 10,
    cudaJitGenerateDebugInfo = 11,
    cudaJitLogVerbose = 12,
    cudaJitGenerateLineInfo = 13,
    cudaJitCacheMode = 14,
    cudaJitPositionIndependentCode = 30,
    cudaJitMinCtaPerSm = 31,
    cudaJitMaxThreadsPerBlock = 32,
    cudaJitOverrideDirectiveValues = 33,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLibraryOption {
    cudaLibraryHostUniversalFunctionAndDataTable = 0,
    cudaLibraryBinaryIsPreserved = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudalibraryHostUniversalFunctionAndDataTable {
    pub functionTable: *mut ::core::ffi::c_void,
    pub functionWindowSize: usize,
    pub dataTable: *mut ::core::ffi::c_void,
    pub dataWindowSize: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudalibraryHostUniversalFunctionAndDataTable"]
        [::core::mem::size_of::<cudalibraryHostUniversalFunctionAndDataTable>() - 32usize];
    ["Alignment of cudalibraryHostUniversalFunctionAndDataTable"]
        [::core::mem::align_of::<cudalibraryHostUniversalFunctionAndDataTable>() - 8usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::functionTable"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        functionTable
    ) - 0usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::functionWindowSize"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        functionWindowSize
    )
        - 8usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::dataTable"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        dataTable
    ) - 16usize];
    ["Offset of field: cudalibraryHostUniversalFunctionAndDataTable::dataWindowSize"][::core::mem::offset_of!(
        cudalibraryHostUniversalFunctionAndDataTable,
        dataWindowSize
    ) - 24usize];
};
impl Default for cudalibraryHostUniversalFunctionAndDataTable {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaJit_CacheMode {
    cudaJitCacheOptionNone = 0,
    cudaJitCacheOptionCG = 1,
    cudaJitCacheOptionCA = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaJit_Fallback {
    cudaPreferPtx = 0,
    cudaPreferBinary = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUlib_st {
    _unused: [u8; 0],
}
pub type cudaLibrary_t = *mut CUlib_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUmemPoolHandle_st {
    _unused: [u8; 0],
}
pub type cudaMemPool_t = *mut CUmemPoolHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaCGScope {
    cudaCGScopeInvalid = 0,
    cudaCGScopeGrid = 1,
    cudaCGScopeMultiGrid = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchParams {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::core::ffi::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchParams"][::core::mem::size_of::<cudaLaunchParams>() - 56usize];
    ["Alignment of cudaLaunchParams"][::core::mem::align_of::<cudaLaunchParams>() - 8usize];
    ["Offset of field: cudaLaunchParams::func"]
        [::core::mem::offset_of!(cudaLaunchParams, func) - 0usize];
    ["Offset of field: cudaLaunchParams::gridDim"]
        [::core::mem::offset_of!(cudaLaunchParams, gridDim) - 8usize];
    ["Offset of field: cudaLaunchParams::blockDim"]
        [::core::mem::offset_of!(cudaLaunchParams, blockDim) - 20usize];
    ["Offset of field: cudaLaunchParams::args"]
        [::core::mem::offset_of!(cudaLaunchParams, args) - 32usize];
    ["Offset of field: cudaLaunchParams::sharedMem"]
        [::core::mem::offset_of!(cudaLaunchParams, sharedMem) - 40usize];
    ["Offset of field: cudaLaunchParams::stream"]
        [::core::mem::offset_of!(cudaLaunchParams, stream) - 48usize];
};
impl Default for cudaLaunchParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaKernelNodeParams {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub sharedMemBytes: ::core::ffi::c_uint,
    pub kernelParams: *mut *mut ::core::ffi::c_void,
    pub extra: *mut *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaKernelNodeParams"][::core::mem::size_of::<cudaKernelNodeParams>() - 56usize];
    ["Alignment of cudaKernelNodeParams"][::core::mem::align_of::<cudaKernelNodeParams>() - 8usize];
    ["Offset of field: cudaKernelNodeParams::func"]
        [::core::mem::offset_of!(cudaKernelNodeParams, func) - 0usize];
    ["Offset of field: cudaKernelNodeParams::gridDim"]
        [::core::mem::offset_of!(cudaKernelNodeParams, gridDim) - 8usize];
    ["Offset of field: cudaKernelNodeParams::blockDim"]
        [::core::mem::offset_of!(cudaKernelNodeParams, blockDim) - 20usize];
    ["Offset of field: cudaKernelNodeParams::sharedMemBytes"]
        [::core::mem::offset_of!(cudaKernelNodeParams, sharedMemBytes) - 32usize];
    ["Offset of field: cudaKernelNodeParams::kernelParams"]
        [::core::mem::offset_of!(cudaKernelNodeParams, kernelParams) - 40usize];
    ["Offset of field: cudaKernelNodeParams::extra"]
        [::core::mem::offset_of!(cudaKernelNodeParams, extra) - 48usize];
};
impl Default for cudaKernelNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaKernelNodeParamsV2 {
    pub func: *mut ::core::ffi::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub sharedMemBytes: ::core::ffi::c_uint,
    pub kernelParams: *mut *mut ::core::ffi::c_void,
    pub extra: *mut *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaKernelNodeParamsV2"][::core::mem::size_of::<cudaKernelNodeParamsV2>() - 56usize];
    ["Alignment of cudaKernelNodeParamsV2"]
        [::core::mem::align_of::<cudaKernelNodeParamsV2>() - 8usize];
    ["Offset of field: cudaKernelNodeParamsV2::func"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, func) - 0usize];
    ["Offset of field: cudaKernelNodeParamsV2::gridDim"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, gridDim) - 8usize];
    ["Offset of field: cudaKernelNodeParamsV2::blockDim"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, blockDim) - 20usize];
    ["Offset of field: cudaKernelNodeParamsV2::sharedMemBytes"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, sharedMemBytes) - 32usize];
    ["Offset of field: cudaKernelNodeParamsV2::kernelParams"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, kernelParams) - 40usize];
    ["Offset of field: cudaKernelNodeParamsV2::extra"]
        [::core::mem::offset_of!(cudaKernelNodeParamsV2, extra) - 48usize];
};
impl Default for cudaKernelNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalNodeParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalNodeParams>() - 24usize];
    ["Alignment of cudaExternalSemaphoreSignalNodeParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalNodeParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParams::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParams, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParams::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParams, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParams::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParams, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreSignalNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalNodeParamsV2 {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreSignalNodeParamsV2"]
        [::core::mem::size_of::<cudaExternalSemaphoreSignalNodeParamsV2>() - 24usize];
    ["Alignment of cudaExternalSemaphoreSignalNodeParamsV2"]
        [::core::mem::align_of::<cudaExternalSemaphoreSignalNodeParamsV2>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParamsV2::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParamsV2, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParamsV2::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParamsV2, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreSignalNodeParamsV2::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreSignalNodeParamsV2, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreSignalNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitNodeParams"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitNodeParams>() - 24usize];
    ["Alignment of cudaExternalSemaphoreWaitNodeParams"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitNodeParams>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParams::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParams, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParams::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParams, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParams::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParams, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreWaitNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitNodeParamsV2 {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaExternalSemaphoreWaitNodeParamsV2"]
        [::core::mem::size_of::<cudaExternalSemaphoreWaitNodeParamsV2>() - 24usize];
    ["Alignment of cudaExternalSemaphoreWaitNodeParamsV2"]
        [::core::mem::align_of::<cudaExternalSemaphoreWaitNodeParamsV2>() - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParamsV2::extSemArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParamsV2, extSemArray) - 0usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParamsV2::paramsArray"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParamsV2, paramsArray) - 8usize];
    ["Offset of field: cudaExternalSemaphoreWaitNodeParamsV2::numExtSems"]
        [::core::mem::offset_of!(cudaExternalSemaphoreWaitNodeParamsV2, numExtSems) - 16usize];
};
impl Default for cudaExternalSemaphoreWaitNodeParamsV2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphConditionalHandleFlags {
    cudaGraphCondAssignDefault = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphConditionalNodeType {
    cudaGraphCondTypeIf = 0,
    cudaGraphCondTypeWhile = 1,
    cudaGraphCondTypeSwitch = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaConditionalNodeParams {
    pub handle: cudaGraphConditionalHandle,
    pub type_: cudaGraphConditionalNodeType,
    pub size: ::core::ffi::c_uint,
    pub phGraph_out: *mut cudaGraph_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaConditionalNodeParams"]
        [::core::mem::size_of::<cudaConditionalNodeParams>() - 24usize];
    ["Alignment of cudaConditionalNodeParams"]
        [::core::mem::align_of::<cudaConditionalNodeParams>() - 8usize];
    ["Offset of field: cudaConditionalNodeParams::handle"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, handle) - 0usize];
    ["Offset of field: cudaConditionalNodeParams::type_"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, type_) - 8usize];
    ["Offset of field: cudaConditionalNodeParams::size"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, size) - 12usize];
    ["Offset of field: cudaConditionalNodeParams::phGraph_out"]
        [::core::mem::offset_of!(cudaConditionalNodeParams, phGraph_out) - 16usize];
};
impl Default for cudaConditionalNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphNodeType {
    cudaGraphNodeTypeKernel = 0,
    cudaGraphNodeTypeMemcpy = 1,
    cudaGraphNodeTypeMemset = 2,
    cudaGraphNodeTypeHost = 3,
    cudaGraphNodeTypeGraph = 4,
    cudaGraphNodeTypeEmpty = 5,
    cudaGraphNodeTypeWaitEvent = 6,
    cudaGraphNodeTypeEventRecord = 7,
    cudaGraphNodeTypeExtSemaphoreSignal = 8,
    cudaGraphNodeTypeExtSemaphoreWait = 9,
    cudaGraphNodeTypeMemAlloc = 10,
    cudaGraphNodeTypeMemFree = 11,
    cudaGraphNodeTypeConditional = 13,
    cudaGraphNodeTypeCount = 14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChildGraphNodeParams {
    pub graph: cudaGraph_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaChildGraphNodeParams"]
        [::core::mem::size_of::<cudaChildGraphNodeParams>() - 8usize];
    ["Alignment of cudaChildGraphNodeParams"]
        [::core::mem::align_of::<cudaChildGraphNodeParams>() - 8usize];
    ["Offset of field: cudaChildGraphNodeParams::graph"]
        [::core::mem::offset_of!(cudaChildGraphNodeParams, graph) - 0usize];
};
impl Default for cudaChildGraphNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventRecordNodeParams {
    pub event: cudaEvent_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaEventRecordNodeParams"]
        [::core::mem::size_of::<cudaEventRecordNodeParams>() - 8usize];
    ["Alignment of cudaEventRecordNodeParams"]
        [::core::mem::align_of::<cudaEventRecordNodeParams>() - 8usize];
    ["Offset of field: cudaEventRecordNodeParams::event"]
        [::core::mem::offset_of!(cudaEventRecordNodeParams, event) - 0usize];
};
impl Default for cudaEventRecordNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventWaitNodeParams {
    pub event: cudaEvent_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaEventWaitNodeParams"][::core::mem::size_of::<cudaEventWaitNodeParams>() - 8usize];
    ["Alignment of cudaEventWaitNodeParams"]
        [::core::mem::align_of::<cudaEventWaitNodeParams>() - 8usize];
    ["Offset of field: cudaEventWaitNodeParams::event"]
        [::core::mem::offset_of!(cudaEventWaitNodeParams, event) - 0usize];
};
impl Default for cudaEventWaitNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaGraphNodeParams {
    pub type_: cudaGraphNodeType,
    pub reserved0: [::core::ffi::c_int; 3usize],
    pub __bindgen_anon_1: cudaGraphNodeParams__bindgen_ty_1,
    pub reserved2: ::core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaGraphNodeParams__bindgen_ty_1 {
    pub reserved1: [::core::ffi::c_longlong; 29usize],
    pub kernel: cudaKernelNodeParamsV2,
    pub memcpy: cudaMemcpyNodeParams,
    pub memset: cudaMemsetParamsV2,
    pub host: cudaHostNodeParamsV2,
    pub graph: cudaChildGraphNodeParams,
    pub eventWait: cudaEventWaitNodeParams,
    pub eventRecord: cudaEventRecordNodeParams,
    pub extSemSignal: cudaExternalSemaphoreSignalNodeParamsV2,
    pub extSemWait: cudaExternalSemaphoreWaitNodeParamsV2,
    pub alloc: cudaMemAllocNodeParamsV2,
    pub free: cudaMemFreeNodeParams,
    pub conditional: cudaConditionalNodeParams,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphNodeParams__bindgen_ty_1"]
        [::core::mem::size_of::<cudaGraphNodeParams__bindgen_ty_1>() - 232usize];
    ["Alignment of cudaGraphNodeParams__bindgen_ty_1"]
        [::core::mem::align_of::<cudaGraphNodeParams__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::reserved1"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, reserved1) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::kernel"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, kernel) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::memcpy"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, memcpy) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::memset"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, memset) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::host"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, host) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::graph"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, graph) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::eventWait"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, eventWait) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::eventRecord"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, eventRecord) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::extSemSignal"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, extSemSignal) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::extSemWait"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, extSemWait) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::alloc"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, alloc) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::free"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, free) - 0usize];
    ["Offset of field: cudaGraphNodeParams__bindgen_ty_1::conditional"]
        [::core::mem::offset_of!(cudaGraphNodeParams__bindgen_ty_1, conditional) - 0usize];
};
impl Default for cudaGraphNodeParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphNodeParams"][::core::mem::size_of::<cudaGraphNodeParams>() - 256usize];
    ["Alignment of cudaGraphNodeParams"][::core::mem::align_of::<cudaGraphNodeParams>() - 8usize];
    ["Offset of field: cudaGraphNodeParams::type_"]
        [::core::mem::offset_of!(cudaGraphNodeParams, type_) - 0usize];
    ["Offset of field: cudaGraphNodeParams::reserved0"]
        [::core::mem::offset_of!(cudaGraphNodeParams, reserved0) - 4usize];
    ["Offset of field: cudaGraphNodeParams::reserved2"]
        [::core::mem::offset_of!(cudaGraphNodeParams, reserved2) - 248usize];
};
impl Default for cudaGraphNodeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphDependencyType_enum {
    cudaGraphDependencyTypeDefault = 0,
    cudaGraphDependencyTypeProgrammatic = 1,
}
pub use self::cudaGraphDependencyType_enum as cudaGraphDependencyType;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphEdgeData_st {
    pub from_port: ::core::ffi::c_uchar,
    pub to_port: ::core::ffi::c_uchar,
    pub type_: ::core::ffi::c_uchar,
    pub reserved: [::core::ffi::c_uchar; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphEdgeData_st"][::core::mem::size_of::<cudaGraphEdgeData_st>() - 8usize];
    ["Alignment of cudaGraphEdgeData_st"][::core::mem::align_of::<cudaGraphEdgeData_st>() - 1usize];
    ["Offset of field: cudaGraphEdgeData_st::from_port"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, from_port) - 0usize];
    ["Offset of field: cudaGraphEdgeData_st::to_port"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, to_port) - 1usize];
    ["Offset of field: cudaGraphEdgeData_st::type_"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, type_) - 2usize];
    ["Offset of field: cudaGraphEdgeData_st::reserved"]
        [::core::mem::offset_of!(cudaGraphEdgeData_st, reserved) - 3usize];
};
pub type cudaGraphEdgeData = cudaGraphEdgeData_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphExec_st {
    _unused: [u8; 0],
}
pub type cudaGraphExec_t = *mut CUgraphExec_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess = 0,
    cudaGraphExecUpdateError = 1,
    cudaGraphExecUpdateErrorTopologyChanged = 2,
    cudaGraphExecUpdateErrorNodeTypeChanged = 3,
    cudaGraphExecUpdateErrorFunctionChanged = 4,
    cudaGraphExecUpdateErrorParametersChanged = 5,
    cudaGraphExecUpdateErrorNotSupported = 6,
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7,
    cudaGraphExecUpdateErrorAttributesChanged = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphInstantiateResult {
    cudaGraphInstantiateSuccess = 0,
    cudaGraphInstantiateError = 1,
    cudaGraphInstantiateInvalidStructure = 2,
    cudaGraphInstantiateNodeOperationNotSupported = 3,
    cudaGraphInstantiateMultipleDevicesNotSupported = 4,
    cudaGraphInstantiateConditionalHandleUnused = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiateParams_st {
    pub flags: ::core::ffi::c_ulonglong,
    pub uploadStream: cudaStream_t,
    pub errNode_out: cudaGraphNode_t,
    pub result_out: cudaGraphInstantiateResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphInstantiateParams_st"]
        [::core::mem::size_of::<cudaGraphInstantiateParams_st>() - 32usize];
    ["Alignment of cudaGraphInstantiateParams_st"]
        [::core::mem::align_of::<cudaGraphInstantiateParams_st>() - 8usize];
    ["Offset of field: cudaGraphInstantiateParams_st::flags"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, flags) - 0usize];
    ["Offset of field: cudaGraphInstantiateParams_st::uploadStream"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, uploadStream) - 8usize];
    ["Offset of field: cudaGraphInstantiateParams_st::errNode_out"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, errNode_out) - 16usize];
    ["Offset of field: cudaGraphInstantiateParams_st::result_out"]
        [::core::mem::offset_of!(cudaGraphInstantiateParams_st, result_out) - 24usize];
};
impl Default for cudaGraphInstantiateParams_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiateParams = cudaGraphInstantiateParams_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecUpdateResultInfo_st {
    pub result: cudaGraphExecUpdateResult,
    pub errorNode: cudaGraphNode_t,
    pub errorFromNode: cudaGraphNode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphExecUpdateResultInfo_st"]
        [::core::mem::size_of::<cudaGraphExecUpdateResultInfo_st>() - 24usize];
    ["Alignment of cudaGraphExecUpdateResultInfo_st"]
        [::core::mem::align_of::<cudaGraphExecUpdateResultInfo_st>() - 8usize];
    ["Offset of field: cudaGraphExecUpdateResultInfo_st::result"]
        [::core::mem::offset_of!(cudaGraphExecUpdateResultInfo_st, result) - 0usize];
    ["Offset of field: cudaGraphExecUpdateResultInfo_st::errorNode"]
        [::core::mem::offset_of!(cudaGraphExecUpdateResultInfo_st, errorNode) - 8usize];
    ["Offset of field: cudaGraphExecUpdateResultInfo_st::errorFromNode"]
        [::core::mem::offset_of!(cudaGraphExecUpdateResultInfo_st, errorFromNode) - 16usize];
};
impl Default for cudaGraphExecUpdateResultInfo_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecUpdateResultInfo = cudaGraphExecUpdateResultInfo_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphDeviceUpdatableNode_st {
    _unused: [u8; 0],
}
pub type cudaGraphDeviceNode_t = *mut CUgraphDeviceUpdatableNode_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphKernelNodeField {
    cudaGraphKernelNodeFieldInvalid = 0,
    cudaGraphKernelNodeFieldGridDim = 1,
    cudaGraphKernelNodeFieldParam = 2,
    cudaGraphKernelNodeFieldEnabled = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaGraphKernelNodeUpdate {
    pub node: cudaGraphDeviceNode_t,
    pub field: cudaGraphKernelNodeField,
    pub updateData: cudaGraphKernelNodeUpdate__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaGraphKernelNodeUpdate__bindgen_ty_1 {
    pub gridDim: dim3,
    pub param: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
    pub isEnabled: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 {
    pub pValue: *const ::core::ffi::c_void,
    pub offset: usize,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1::pValue"][::core::mem::offset_of!(
        cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
        pValue
    ) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1::offset"][::core::mem::offset_of!(
        cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
        offset
    ) - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1::size"][::core::mem::offset_of!(
        cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 16usize];
};
impl Default for cudaGraphKernelNodeUpdate__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphKernelNodeUpdate__bindgen_ty_1"]
        [::core::mem::size_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1>() - 24usize];
    ["Alignment of cudaGraphKernelNodeUpdate__bindgen_ty_1"]
        [::core::mem::align_of::<cudaGraphKernelNodeUpdate__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1::gridDim"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate__bindgen_ty_1, gridDim) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1::param"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate__bindgen_ty_1, param) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate__bindgen_ty_1::isEnabled"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate__bindgen_ty_1, isEnabled) - 0usize];
};
impl Default for cudaGraphKernelNodeUpdate__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaGraphKernelNodeUpdate"]
        [::core::mem::size_of::<cudaGraphKernelNodeUpdate>() - 40usize];
    ["Alignment of cudaGraphKernelNodeUpdate"]
        [::core::mem::align_of::<cudaGraphKernelNodeUpdate>() - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate::node"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate, node) - 0usize];
    ["Offset of field: cudaGraphKernelNodeUpdate::field"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate, field) - 8usize];
    ["Offset of field: cudaGraphKernelNodeUpdate::updateData"]
        [::core::mem::offset_of!(cudaGraphKernelNodeUpdate, updateData) - 16usize];
};
impl Default for cudaGraphKernelNodeUpdate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGetDriverEntryPointFlags {
    cudaEnableDefault = 0,
    cudaEnableLegacyStream = 1,
    cudaEnablePerThreadDefaultStream = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDriverEntryPointQueryResult {
    cudaDriverEntryPointSuccess = 0,
    cudaDriverEntryPointSymbolNotFound = 1,
    cudaDriverEntryPointVersionNotSufficent = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphDebugDotFlags {
    cudaGraphDebugDotFlagsVerbose = 1,
    cudaGraphDebugDotFlagsKernelNodeParams = 4,
    cudaGraphDebugDotFlagsMemcpyNodeParams = 8,
    cudaGraphDebugDotFlagsMemsetNodeParams = 16,
    cudaGraphDebugDotFlagsHostNodeParams = 32,
    cudaGraphDebugDotFlagsEventNodeParams = 64,
    cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128,
    cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256,
    cudaGraphDebugDotFlagsKernelNodeAttributes = 512,
    cudaGraphDebugDotFlagsHandles = 1024,
    cudaGraphDebugDotFlagsConditionalNodeParams = 32768,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphInstantiateFlags {
    cudaGraphInstantiateFlagAutoFreeOnLaunch = 1,
    cudaGraphInstantiateFlagUpload = 2,
    cudaGraphInstantiateFlagDeviceLaunch = 4,
    cudaGraphInstantiateFlagUseNodePriority = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLaunchMemSyncDomain {
    cudaLaunchMemSyncDomainDefault = 0,
    cudaLaunchMemSyncDomainRemote = 1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchMemSyncDomainMap_st {
    pub default_: ::core::ffi::c_uchar,
    pub remote: ::core::ffi::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchMemSyncDomainMap_st"]
        [::core::mem::size_of::<cudaLaunchMemSyncDomainMap_st>() - 2usize];
    ["Alignment of cudaLaunchMemSyncDomainMap_st"]
        [::core::mem::align_of::<cudaLaunchMemSyncDomainMap_st>() - 1usize];
    ["Offset of field: cudaLaunchMemSyncDomainMap_st::default_"]
        [::core::mem::offset_of!(cudaLaunchMemSyncDomainMap_st, default_) - 0usize];
    ["Offset of field: cudaLaunchMemSyncDomainMap_st::remote"]
        [::core::mem::offset_of!(cudaLaunchMemSyncDomainMap_st, remote) - 1usize];
};
pub type cudaLaunchMemSyncDomainMap = cudaLaunchMemSyncDomainMap_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLaunchAttributeID {
    cudaLaunchAttributeIgnore = 0,
    cudaLaunchAttributeAccessPolicyWindow = 1,
    cudaLaunchAttributeCooperative = 2,
    cudaLaunchAttributeSynchronizationPolicy = 3,
    cudaLaunchAttributeClusterDimension = 4,
    cudaLaunchAttributeClusterSchedulingPolicyPreference = 5,
    cudaLaunchAttributeProgrammaticStreamSerialization = 6,
    cudaLaunchAttributeProgrammaticEvent = 7,
    cudaLaunchAttributePriority = 8,
    cudaLaunchAttributeMemSyncDomainMap = 9,
    cudaLaunchAttributeMemSyncDomain = 10,
    cudaLaunchAttributePreferredClusterDimension = 11,
    cudaLaunchAttributeLaunchCompletionEvent = 12,
    cudaLaunchAttributeDeviceUpdatableKernelNode = 13,
    cudaLaunchAttributePreferredSharedMemoryCarveout = 14,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaLaunchAttributeValue {
    pub pad: [::core::ffi::c_char; 64usize],
    pub accessPolicyWindow: cudaAccessPolicyWindow,
    pub cooperative: ::core::ffi::c_int,
    pub syncPolicy: cudaSynchronizationPolicy,
    pub clusterDim: cudaLaunchAttributeValue__bindgen_ty_1,
    pub clusterSchedulingPolicyPreference: cudaClusterSchedulingPolicy,
    pub programmaticStreamSerializationAllowed: ::core::ffi::c_int,
    pub programmaticEvent: cudaLaunchAttributeValue__bindgen_ty_2,
    pub priority: ::core::ffi::c_int,
    pub memSyncDomainMap: cudaLaunchMemSyncDomainMap,
    pub memSyncDomain: cudaLaunchMemSyncDomain,
    pub preferredClusterDim: cudaLaunchAttributeValue__bindgen_ty_3,
    pub launchCompletionEvent: cudaLaunchAttributeValue__bindgen_ty_4,
    pub deviceUpdatableKernelNode: cudaLaunchAttributeValue__bindgen_ty_5,
    pub sharedMemCarveout: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_1 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_1"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_1>() - 12usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_1"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_1>() - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_1::x"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_1, x) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_1::y"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_1, y) - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_1::z"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_1, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_2 {
    pub event: cudaEvent_t,
    pub flags: ::core::ffi::c_int,
    pub triggerAtBlockStart: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_2"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_2>() - 16usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_2"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_2>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_2::event"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_2, event) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_2::flags"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_2, flags) - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_2::triggerAtBlockStart"][::core::mem::offset_of!(
        cudaLaunchAttributeValue__bindgen_ty_2,
        triggerAtBlockStart
    ) - 12usize];
};
impl Default for cudaLaunchAttributeValue__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_3 {
    pub x: ::core::ffi::c_uint,
    pub y: ::core::ffi::c_uint,
    pub z: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_3"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_3>() - 12usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_3"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_3>() - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_3::x"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_3, x) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_3::y"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_3, y) - 4usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_3::z"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_3, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_4 {
    pub event: cudaEvent_t,
    pub flags: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_4"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_4>() - 16usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_4"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_4>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_4::event"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_4, event) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_4::flags"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_4, flags) - 8usize];
};
impl Default for cudaLaunchAttributeValue__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_5 {
    pub deviceUpdatable: ::core::ffi::c_int,
    pub devNode: cudaGraphDeviceNode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue__bindgen_ty_5"]
        [::core::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_5>() - 16usize];
    ["Alignment of cudaLaunchAttributeValue__bindgen_ty_5"]
        [::core::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_5>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_5::deviceUpdatable"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_5, deviceUpdatable) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue__bindgen_ty_5::devNode"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue__bindgen_ty_5, devNode) - 8usize];
};
impl Default for cudaLaunchAttributeValue__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttributeValue"]
        [::core::mem::size_of::<cudaLaunchAttributeValue>() - 64usize];
    ["Alignment of cudaLaunchAttributeValue"]
        [::core::mem::align_of::<cudaLaunchAttributeValue>() - 8usize];
    ["Offset of field: cudaLaunchAttributeValue::pad"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, pad) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::accessPolicyWindow"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, accessPolicyWindow) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::cooperative"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, cooperative) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::syncPolicy"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, syncPolicy) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::clusterDim"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, clusterDim) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::clusterSchedulingPolicyPreference"][::core::mem::offset_of!(
        cudaLaunchAttributeValue,
        clusterSchedulingPolicyPreference
    ) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::programmaticStreamSerializationAllowed"][::core::mem::offset_of!(
        cudaLaunchAttributeValue,
        programmaticStreamSerializationAllowed
    )
        - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::programmaticEvent"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, programmaticEvent) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::priority"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, priority) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::memSyncDomainMap"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, memSyncDomainMap) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::memSyncDomain"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, memSyncDomain) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::preferredClusterDim"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, preferredClusterDim) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::launchCompletionEvent"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, launchCompletionEvent) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::deviceUpdatableKernelNode"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, deviceUpdatableKernelNode) - 0usize];
    ["Offset of field: cudaLaunchAttributeValue::sharedMemCarveout"]
        [::core::mem::offset_of!(cudaLaunchAttributeValue, sharedMemCarveout) - 0usize];
};
impl Default for cudaLaunchAttributeValue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaLaunchAttribute_st {
    pub id: cudaLaunchAttributeID,
    pub pad: [::core::ffi::c_char; 4usize],
    pub val: cudaLaunchAttributeValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchAttribute_st"][::core::mem::size_of::<cudaLaunchAttribute_st>() - 72usize];
    ["Alignment of cudaLaunchAttribute_st"]
        [::core::mem::align_of::<cudaLaunchAttribute_st>() - 8usize];
    ["Offset of field: cudaLaunchAttribute_st::id"]
        [::core::mem::offset_of!(cudaLaunchAttribute_st, id) - 0usize];
    ["Offset of field: cudaLaunchAttribute_st::pad"]
        [::core::mem::offset_of!(cudaLaunchAttribute_st, pad) - 4usize];
    ["Offset of field: cudaLaunchAttribute_st::val"]
        [::core::mem::offset_of!(cudaLaunchAttribute_st, val) - 8usize];
};
impl Default for cudaLaunchAttribute_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchAttribute = cudaLaunchAttribute_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchConfig_st {
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub dynamicSmemBytes: usize,
    pub stream: cudaStream_t,
    pub attrs: *mut cudaLaunchAttribute,
    pub numAttrs: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaLaunchConfig_st"][::core::mem::size_of::<cudaLaunchConfig_st>() - 56usize];
    ["Alignment of cudaLaunchConfig_st"][::core::mem::align_of::<cudaLaunchConfig_st>() - 8usize];
    ["Offset of field: cudaLaunchConfig_st::gridDim"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, gridDim) - 0usize];
    ["Offset of field: cudaLaunchConfig_st::blockDim"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, blockDim) - 12usize];
    ["Offset of field: cudaLaunchConfig_st::dynamicSmemBytes"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, dynamicSmemBytes) - 24usize];
    ["Offset of field: cudaLaunchConfig_st::stream"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, stream) - 32usize];
    ["Offset of field: cudaLaunchConfig_st::attrs"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, attrs) - 40usize];
    ["Offset of field: cudaLaunchConfig_st::numAttrs"]
        [::core::mem::offset_of!(cudaLaunchConfig_st, numAttrs) - 48usize];
};
impl Default for cudaLaunchConfig_st {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchConfig_t = cudaLaunchConfig_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceNumaConfig {
    cudaDeviceNumaConfigNone = 0,
    cudaDeviceNumaConfigNumaNode = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaAsyncCallbackEntry {
    _unused: [u8; 0],
}
pub type cudaAsyncCallbackHandle_t = *mut cudaAsyncCallbackEntry;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaAsyncNotificationType_enum {
    cudaAsyncNotificationTypeOverBudget = 1,
}
pub use self::cudaAsyncNotificationType_enum as cudaAsyncNotificationType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaAsyncNotificationInfo {
    pub type_: cudaAsyncNotificationType,
    pub info: cudaAsyncNotificationInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaAsyncNotificationInfo__bindgen_ty_1 {
    pub overBudget: cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1 {
    pub bytesOverBudget: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1::bytesOverBudget"][::core::mem::offset_of!(
        cudaAsyncNotificationInfo__bindgen_ty_1__bindgen_ty_1,
        bytesOverBudget
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAsyncNotificationInfo__bindgen_ty_1"]
        [::core::mem::size_of::<cudaAsyncNotificationInfo__bindgen_ty_1>() - 8usize];
    ["Alignment of cudaAsyncNotificationInfo__bindgen_ty_1"]
        [::core::mem::align_of::<cudaAsyncNotificationInfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: cudaAsyncNotificationInfo__bindgen_ty_1::overBudget"]
        [::core::mem::offset_of!(cudaAsyncNotificationInfo__bindgen_ty_1, overBudget) - 0usize];
};
impl Default for cudaAsyncNotificationInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaAsyncNotificationInfo"]
        [::core::mem::size_of::<cudaAsyncNotificationInfo>() - 16usize];
    ["Alignment of cudaAsyncNotificationInfo"]
        [::core::mem::align_of::<cudaAsyncNotificationInfo>() - 8usize];
    ["Offset of field: cudaAsyncNotificationInfo::type_"]
        [::core::mem::offset_of!(cudaAsyncNotificationInfo, type_) - 0usize];
    ["Offset of field: cudaAsyncNotificationInfo::info"]
        [::core::mem::offset_of!(cudaAsyncNotificationInfo, info) - 8usize];
};
impl Default for cudaAsyncNotificationInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaAsyncNotificationInfo_t = cudaAsyncNotificationInfo;
pub type cudaAsyncCallback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut cudaAsyncNotificationInfo_t,
        arg2: *mut ::core::ffi::c_void,
        arg3: cudaAsyncCallbackHandle_t,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSurfaceBoundaryMode {
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSurfaceFormatMode {
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1,
}
pub type cudaSurfaceObject_t = ::core::ffi::c_ulonglong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureAddressMode {
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureFilterMode {
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureReadMode {
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaTextureDesc {
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub filterMode: cudaTextureFilterMode,
    pub readMode: cudaTextureReadMode,
    pub sRGB: ::core::ffi::c_int,
    pub borderColor: [f32; 4usize],
    pub normalizedCoords: ::core::ffi::c_int,
    pub maxAnisotropy: ::core::ffi::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
    pub disableTrilinearOptimization: ::core::ffi::c_int,
    pub seamlessCubemap: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cudaTextureDesc"][::core::mem::size_of::<cudaTextureDesc>() - 72usize];
    ["Alignment of cudaTextureDesc"][::core::mem::align_of::<cudaTextureDesc>() - 4usize];
    ["Offset of field: cudaTextureDesc::addressMode"]
        [::core::mem::offset_of!(cudaTextureDesc, addressMode) - 0usize];
    ["Offset of field: cudaTextureDesc::filterMode"]
        [::core::mem::offset_of!(cudaTextureDesc, filterMode) - 12usize];
    ["Offset of field: cudaTextureDesc::readMode"]
        [::core::mem::offset_of!(cudaTextureDesc, readMode) - 16usize];
    ["Offset of field: cudaTextureDesc::sRGB"]
        [::core::mem::offset_of!(cudaTextureDesc, sRGB) - 20usize];
    ["Offset of field: cudaTextureDesc::borderColor"]
        [::core::mem::offset_of!(cudaTextureDesc, borderColor) - 24usize];
    ["Offset of field: cudaTextureDesc::normalizedCoords"]
        [::core::mem::offset_of!(cudaTextureDesc, normalizedCoords) - 40usize];
    ["Offset of field: cudaTextureDesc::maxAnisotropy"]
        [::core::mem::offset_of!(cudaTextureDesc, maxAnisotropy) - 44usize];
    ["Offset of field: cudaTextureDesc::mipmapFilterMode"]
        [::core::mem::offset_of!(cudaTextureDesc, mipmapFilterMode) - 48usize];
    ["Offset of field: cudaTextureDesc::mipmapLevelBias"]
        [::core::mem::offset_of!(cudaTextureDesc, mipmapLevelBias) - 52usize];
    ["Offset of field: cudaTextureDesc::minMipmapLevelClamp"]
        [::core::mem::offset_of!(cudaTextureDesc, minMipmapLevelClamp) - 56usize];
    ["Offset of field: cudaTextureDesc::maxMipmapLevelClamp"]
        [::core::mem::offset_of!(cudaTextureDesc, maxMipmapLevelClamp) - 60usize];
    ["Offset of field: cudaTextureDesc::disableTrilinearOptimization"]
        [::core::mem::offset_of!(cudaTextureDesc, disableTrilinearOptimization) - 64usize];
    ["Offset of field: cudaTextureDesc::seamlessCubemap"]
        [::core::mem::offset_of!(cudaTextureDesc, seamlessCubemap) - 68usize];
};
impl Default for cudaTextureDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaTextureObject_t = ::core::ffi::c_ulonglong;
impl cudaDataType_t {
    pub const CUDA_R_8F_UE4M3: cudaDataType_t = cudaDataType_t::CUDA_R_8F_E4M3;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDataType_t {
    CUDA_R_16F = 2,
    CUDA_C_16F = 6,
    CUDA_R_16BF = 14,
    CUDA_C_16BF = 15,
    CUDA_R_32F = 0,
    CUDA_C_32F = 4,
    CUDA_R_64F = 1,
    CUDA_C_64F = 5,
    CUDA_R_4I = 16,
    CUDA_C_4I = 17,
    CUDA_R_4U = 18,
    CUDA_C_4U = 19,
    CUDA_R_8I = 3,
    CUDA_C_8I = 7,
    CUDA_R_8U = 8,
    CUDA_C_8U = 9,
    CUDA_R_16I = 20,
    CUDA_C_16I = 21,
    CUDA_R_16U = 22,
    CUDA_C_16U = 23,
    CUDA_R_32I = 10,
    CUDA_C_32I = 11,
    CUDA_R_32U = 12,
    CUDA_C_32U = 13,
    CUDA_R_64I = 24,
    CUDA_C_64I = 25,
    CUDA_R_64U = 26,
    CUDA_C_64U = 27,
    CUDA_R_8F_E4M3 = 28,
    CUDA_R_8F_E5M2 = 29,
    CUDA_R_8F_UE8M0 = 30,
    CUDA_R_6F_E2M3 = 31,
    CUDA_R_6F_E3M2 = 32,
    CUDA_R_4F_E2M1 = 33,
}
pub use self::cudaDataType_t as cudaDataType;
pub type cudaStreamCallback_t = ::core::option::Option<
    unsafe extern "C" fn(
        stream: cudaStream_t,
        status: cudaError_t,
        userData: *mut ::core::ffi::c_void,
    ),
>;
pub struct Lib {
    __library: ::libloading::Library,
    pub cudaDeviceReset: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaDeviceSynchronize: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaDeviceSetLimit: Result<
        unsafe extern "C" fn(limit: cudaLimit, value: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetLimit: Result<
        unsafe extern "C" fn(pValue: *mut usize, limit: cudaLimit) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetTexture1DLinearMaxWidth: Result<
        unsafe extern "C" fn(
            maxWidthInElements: *mut usize,
            fmtDesc: *const cudaChannelFormatDesc,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetCacheConfig: Result<
        unsafe extern "C" fn(pCacheConfig: *mut cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetStreamPriorityRange: Result<
        unsafe extern "C" fn(
            leastPriority: *mut ::core::ffi::c_int,
            greatestPriority: *mut ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetCacheConfig: Result<
        unsafe extern "C" fn(cacheConfig: cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetByPCIBusId: Result<
        unsafe extern "C" fn(
            device: *mut ::core::ffi::c_int,
            pciBusId: *const ::core::ffi::c_char,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetPCIBusId: Result<
        unsafe extern "C" fn(
            pciBusId: *mut ::core::ffi::c_char,
            len: ::core::ffi::c_int,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcGetEventHandle: Result<
        unsafe extern "C" fn(handle: *mut cudaIpcEventHandle_t, event: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcOpenEventHandle: Result<
        unsafe extern "C" fn(event: *mut cudaEvent_t, handle: cudaIpcEventHandle_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcGetMemHandle: Result<
        unsafe extern "C" fn(
            handle: *mut cudaIpcMemHandle_t,
            devPtr: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcOpenMemHandle: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            handle: cudaIpcMemHandle_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaIpcCloseMemHandle: Result<
        unsafe extern "C" fn(devPtr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceFlushGPUDirectRDMAWrites: Result<
        unsafe extern "C" fn(
            target: cudaFlushGPUDirectRDMAWritesTarget,
            scope: cudaFlushGPUDirectRDMAWritesScope,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceRegisterAsyncNotification: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            callbackFunc: cudaAsyncCallback,
            userData: *mut ::core::ffi::c_void,
            callback: *mut cudaAsyncCallbackHandle_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceUnregisterAsyncNotification: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            callback: cudaAsyncCallbackHandle_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetSharedMemConfig: Result<
        unsafe extern "C" fn(pConfig: *mut cudaSharedMemConfig) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetSharedMemConfig: Result<
        unsafe extern "C" fn(config: cudaSharedMemConfig) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadExit: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaThreadSynchronize: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaThreadSetLimit: Result<
        unsafe extern "C" fn(limit: cudaLimit, value: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadGetLimit: Result<
        unsafe extern "C" fn(pValue: *mut usize, limit: cudaLimit) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadGetCacheConfig: Result<
        unsafe extern "C" fn(pCacheConfig: *mut cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadSetCacheConfig: Result<
        unsafe extern "C" fn(cacheConfig: cudaFuncCache) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetLastError: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaPeekAtLastError: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaGetErrorName: Result<
        unsafe extern "C" fn(error: cudaError_t) -> *const ::core::ffi::c_char,
        ::libloading::Error,
    >,
    pub cudaGetErrorString: Result<
        unsafe extern "C" fn(error: cudaError_t) -> *const ::core::ffi::c_char,
        ::libloading::Error,
    >,
    pub cudaGetDeviceCount: Result<
        unsafe extern "C" fn(count: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDeviceProperties_v2: Result<
        unsafe extern "C" fn(prop: *mut cudaDeviceProp, device: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetAttribute: Result<
        unsafe extern "C" fn(
            value: *mut ::core::ffi::c_int,
            attr: cudaDeviceAttr,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetDefaultMemPool: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetMemPool: Result<
        unsafe extern "C" fn(device: ::core::ffi::c_int, memPool: cudaMemPool_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetMemPool: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetNvSciSyncAttributes: Result<
        unsafe extern "C" fn(
            nvSciSyncAttrList: *mut ::core::ffi::c_void,
            device: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetP2PAttribute: Result<
        unsafe extern "C" fn(
            value: *mut ::core::ffi::c_int,
            attr: cudaDeviceP2PAttr,
            srcDevice: ::core::ffi::c_int,
            dstDevice: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaChooseDevice: Result<
        unsafe extern "C" fn(
            device: *mut ::core::ffi::c_int,
            prop: *const cudaDeviceProp,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaInitDevice: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            deviceFlags: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetDevice: Result<
        unsafe extern "C" fn(device: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDevice: Result<
        unsafe extern "C" fn(device: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetValidDevices: Result<
        unsafe extern "C" fn(
            device_arr: *mut ::core::ffi::c_int,
            len: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetDeviceFlags: Result<
        unsafe extern "C" fn(flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDeviceFlags: Result<
        unsafe extern "C" fn(flags: *mut ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamCreate: Result<
        unsafe extern "C" fn(pStream: *mut cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamCreateWithFlags: Result<
        unsafe extern "C" fn(pStream: *mut cudaStream_t, flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamCreateWithPriority: Result<
        unsafe extern "C" fn(
            pStream: *mut cudaStream_t,
            flags: ::core::ffi::c_uint,
            priority: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetPriority: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            priority: *mut ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetFlags: Result<
        unsafe extern "C" fn(hStream: cudaStream_t, flags: *mut ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetId: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            streamId: *mut ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetDevice: Result<
        unsafe extern "C" fn(hStream: cudaStream_t, device: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaCtxResetPersistingL2Cache:
        Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaStreamCopyAttributes: Result<
        unsafe extern "C" fn(dst: cudaStream_t, src: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetAttribute: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            attr: cudaLaunchAttributeID,
            value_out: *mut cudaLaunchAttributeValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamSetAttribute: Result<
        unsafe extern "C" fn(
            hStream: cudaStream_t,
            attr: cudaLaunchAttributeID,
            value: *const cudaLaunchAttributeValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamDestroy:
        Result<unsafe extern "C" fn(stream: cudaStream_t) -> cudaError_t, ::libloading::Error>,
    pub cudaStreamWaitEvent: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            event: cudaEvent_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamAddCallback: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            callback: cudaStreamCallback_t,
            userData: *mut ::core::ffi::c_void,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamSynchronize:
        Result<unsafe extern "C" fn(stream: cudaStream_t) -> cudaError_t, ::libloading::Error>,
    pub cudaStreamQuery:
        Result<unsafe extern "C" fn(stream: cudaStream_t) -> cudaError_t, ::libloading::Error>,
    pub cudaStreamAttachMemAsync: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            devPtr: *mut ::core::ffi::c_void,
            length: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamBeginCapture: Result<
        unsafe extern "C" fn(stream: cudaStream_t, mode: cudaStreamCaptureMode) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamBeginCaptureToGraph: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            graph: cudaGraph_t,
            dependencies: *const cudaGraphNode_t,
            dependencyData: *const cudaGraphEdgeData,
            numDependencies: usize,
            mode: cudaStreamCaptureMode,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaThreadExchangeStreamCaptureMode: Result<
        unsafe extern "C" fn(mode: *mut cudaStreamCaptureMode) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamEndCapture: Result<
        unsafe extern "C" fn(stream: cudaStream_t, pGraph: *mut cudaGraph_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamIsCapturing: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            pCaptureStatus: *mut cudaStreamCaptureStatus,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetCaptureInfo_v2: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            captureStatus_out: *mut cudaStreamCaptureStatus,
            id_out: *mut ::core::ffi::c_ulonglong,
            graph_out: *mut cudaGraph_t,
            dependencies_out: *mut *const cudaGraphNode_t,
            numDependencies_out: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamGetCaptureInfo_v3: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            captureStatus_out: *mut cudaStreamCaptureStatus,
            id_out: *mut ::core::ffi::c_ulonglong,
            graph_out: *mut cudaGraph_t,
            dependencies_out: *mut *const cudaGraphNode_t,
            edgeData_out: *mut *const cudaGraphEdgeData,
            numDependencies_out: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamUpdateCaptureDependencies: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            dependencies: *mut cudaGraphNode_t,
            numDependencies: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaStreamUpdateCaptureDependencies_v2: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            dependencies: *mut cudaGraphNode_t,
            dependencyData: *const cudaGraphEdgeData,
            numDependencies: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventCreate:
        Result<unsafe extern "C" fn(event: *mut cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventCreateWithFlags: Result<
        unsafe extern "C" fn(event: *mut cudaEvent_t, flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventRecord: Result<
        unsafe extern "C" fn(event: cudaEvent_t, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventRecordWithFlags: Result<
        unsafe extern "C" fn(
            event: cudaEvent_t,
            stream: cudaStream_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventQuery:
        Result<unsafe extern "C" fn(event: cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventSynchronize:
        Result<unsafe extern "C" fn(event: cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventDestroy:
        Result<unsafe extern "C" fn(event: cudaEvent_t) -> cudaError_t, ::libloading::Error>,
    pub cudaEventElapsedTime: Result<
        unsafe extern "C" fn(ms: *mut f32, start: cudaEvent_t, end: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaEventElapsedTime_v2: Result<
        unsafe extern "C" fn(ms: *mut f32, start: cudaEvent_t, end: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaImportExternalMemory: Result<
        unsafe extern "C" fn(
            extMem_out: *mut cudaExternalMemory_t,
            memHandleDesc: *const cudaExternalMemoryHandleDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaExternalMemoryGetMappedBuffer: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            extMem: cudaExternalMemory_t,
            bufferDesc: *const cudaExternalMemoryBufferDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaExternalMemoryGetMappedMipmappedArray: Result<
        unsafe extern "C" fn(
            mipmap: *mut cudaMipmappedArray_t,
            extMem: cudaExternalMemory_t,
            mipmapDesc: *const cudaExternalMemoryMipmappedArrayDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroyExternalMemory: Result<
        unsafe extern "C" fn(extMem: cudaExternalMemory_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaImportExternalSemaphore: Result<
        unsafe extern "C" fn(
            extSem_out: *mut cudaExternalSemaphore_t,
            semHandleDesc: *const cudaExternalSemaphoreHandleDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSignalExternalSemaphoresAsync_v2: Result<
        unsafe extern "C" fn(
            extSemArray: *const cudaExternalSemaphore_t,
            paramsArray: *const cudaExternalSemaphoreSignalParams,
            numExtSems: ::core::ffi::c_uint,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaWaitExternalSemaphoresAsync_v2: Result<
        unsafe extern "C" fn(
            extSemArray: *const cudaExternalSemaphore_t,
            paramsArray: *const cudaExternalSemaphoreWaitParams,
            numExtSems: ::core::ffi::c_uint,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroyExternalSemaphore: Result<
        unsafe extern "C" fn(extSem: cudaExternalSemaphore_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchKernel: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            gridDim: dim3,
            blockDim: dim3,
            args: *mut *mut ::core::ffi::c_void,
            sharedMem: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchKernelExC: Result<
        unsafe extern "C" fn(
            config: *const cudaLaunchConfig_t,
            func: *const ::core::ffi::c_void,
            args: *mut *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchCooperativeKernel: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            gridDim: dim3,
            blockDim: dim3,
            args: *mut *mut ::core::ffi::c_void,
            sharedMem: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLaunchCooperativeKernelMultiDevice: Result<
        unsafe extern "C" fn(
            launchParamsList: *mut cudaLaunchParams,
            numDevices: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncSetCacheConfig: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            cacheConfig: cudaFuncCache,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncGetAttributes: Result<
        unsafe extern "C" fn(
            attr: *mut cudaFuncAttributes,
            func: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncSetAttribute: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            attr: cudaFuncAttribute,
            value: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncGetName: Result<
        unsafe extern "C" fn(
            name: *mut *const ::core::ffi::c_char,
            func: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncGetParamInfo: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            paramIndex: usize,
            paramOffset: *mut usize,
            paramSize: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaSetDoubleForDevice:
        Result<unsafe extern "C" fn(d: *mut f64) -> cudaError_t, ::libloading::Error>,
    pub cudaSetDoubleForHost:
        Result<unsafe extern "C" fn(d: *mut f64) -> cudaError_t, ::libloading::Error>,
    pub cudaLaunchHostFunc: Result<
        unsafe extern "C" fn(
            stream: cudaStream_t,
            fn_: cudaHostFn_t,
            userData: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFuncSetSharedMemConfig: Result<
        unsafe extern "C" fn(
            func: *const ::core::ffi::c_void,
            config: cudaSharedMemConfig,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyMaxActiveBlocksPerMultiprocessor: Result<
        unsafe extern "C" fn(
            numBlocks: *mut ::core::ffi::c_int,
            func: *const ::core::ffi::c_void,
            blockSize: ::core::ffi::c_int,
            dynamicSMemSize: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyAvailableDynamicSMemPerBlock: Result<
        unsafe extern "C" fn(
            dynamicSmemSize: *mut usize,
            func: *const ::core::ffi::c_void,
            numBlocks: ::core::ffi::c_int,
            blockSize: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags: Result<
        unsafe extern "C" fn(
            numBlocks: *mut ::core::ffi::c_int,
            func: *const ::core::ffi::c_void,
            blockSize: ::core::ffi::c_int,
            dynamicSMemSize: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyMaxPotentialClusterSize: Result<
        unsafe extern "C" fn(
            clusterSize: *mut ::core::ffi::c_int,
            func: *const ::core::ffi::c_void,
            launchConfig: *const cudaLaunchConfig_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaOccupancyMaxActiveClusters: Result<
        unsafe extern "C" fn(
            numClusters: *mut ::core::ffi::c_int,
            func: *const ::core::ffi::c_void,
            launchConfig: *const cudaLaunchConfig_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocManaged: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            size: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMalloc: Result<
        unsafe extern "C" fn(devPtr: *mut *mut ::core::ffi::c_void, size: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocHost: Result<
        unsafe extern "C" fn(ptr: *mut *mut ::core::ffi::c_void, size: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocPitch: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            pitch: *mut usize,
            width: usize,
            height: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocArray: Result<
        unsafe extern "C" fn(
            array: *mut cudaArray_t,
            desc: *const cudaChannelFormatDesc,
            width: usize,
            height: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFree: Result<
        unsafe extern "C" fn(devPtr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFreeHost: Result<
        unsafe extern "C" fn(ptr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFreeArray:
        Result<unsafe extern "C" fn(array: cudaArray_t) -> cudaError_t, ::libloading::Error>,
    pub cudaFreeMipmappedArray: Result<
        unsafe extern "C" fn(mipmappedArray: cudaMipmappedArray_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostAlloc: Result<
        unsafe extern "C" fn(
            pHost: *mut *mut ::core::ffi::c_void,
            size: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostRegister: Result<
        unsafe extern "C" fn(
            ptr: *mut ::core::ffi::c_void,
            size: usize,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostUnregister: Result<
        unsafe extern "C" fn(ptr: *mut ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostGetDevicePointer: Result<
        unsafe extern "C" fn(
            pDevice: *mut *mut ::core::ffi::c_void,
            pHost: *mut ::core::ffi::c_void,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaHostGetFlags: Result<
        unsafe extern "C" fn(
            pFlags: *mut ::core::ffi::c_uint,
            pHost: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMalloc3D: Result<
        unsafe extern "C" fn(pitchedDevPtr: *mut cudaPitchedPtr, extent: cudaExtent) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMalloc3DArray: Result<
        unsafe extern "C" fn(
            array: *mut cudaArray_t,
            desc: *const cudaChannelFormatDesc,
            extent: cudaExtent,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocMipmappedArray: Result<
        unsafe extern "C" fn(
            mipmappedArray: *mut cudaMipmappedArray_t,
            desc: *const cudaChannelFormatDesc,
            extent: cudaExtent,
            numLevels: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetMipmappedArrayLevel: Result<
        unsafe extern "C" fn(
            levelArray: *mut cudaArray_t,
            mipmappedArray: cudaMipmappedArray_const_t,
            level: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3D: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DParms) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DPeer: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DPeerParms) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DAsync: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DParms, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DPeerAsync: Result<
        unsafe extern "C" fn(p: *const cudaMemcpy3DPeerParms, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemGetInfo: Result<
        unsafe extern "C" fn(free: *mut usize, total: *mut usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetInfo: Result<
        unsafe extern "C" fn(
            desc: *mut cudaChannelFormatDesc,
            extent: *mut cudaExtent,
            flags: *mut ::core::ffi::c_uint,
            array: cudaArray_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetPlane: Result<
        unsafe extern "C" fn(
            pPlaneArray: *mut cudaArray_t,
            hArray: cudaArray_t,
            planeIdx: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetMemoryRequirements: Result<
        unsafe extern "C" fn(
            memoryRequirements: *mut cudaArrayMemoryRequirements,
            array: cudaArray_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMipmappedArrayGetMemoryRequirements: Result<
        unsafe extern "C" fn(
            memoryRequirements: *mut cudaArrayMemoryRequirements,
            mipmap: cudaMipmappedArray_t,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaArrayGetSparseProperties: Result<
        unsafe extern "C" fn(
            sparseProperties: *mut cudaArraySparseProperties,
            array: cudaArray_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMipmappedArrayGetSparseProperties: Result<
        unsafe extern "C" fn(
            sparseProperties: *mut cudaArraySparseProperties,
            mipmap: cudaMipmappedArray_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyPeer: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dstDevice: ::core::ffi::c_int,
            src: *const ::core::ffi::c_void,
            srcDevice: ::core::ffi::c_int,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2D: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DFromArray: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DArrayToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffsetDst: usize,
            hOffsetDst: usize,
            src: cudaArray_const_t,
            wOffsetSrc: usize,
            hOffsetSrc: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToSymbol: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromSymbol: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyPeerAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dstDevice: ::core::ffi::c_int,
            src: *const ::core::ffi::c_void,
            srcDevice: ::core::ffi::c_int,
            count: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyBatchAsync: Result<
        unsafe extern "C" fn(
            dsts: *mut *mut ::core::ffi::c_void,
            srcs: *mut *mut ::core::ffi::c_void,
            sizes: *mut usize,
            count: usize,
            attrs: *mut cudaMemcpyAttributes,
            attrsIdxs: *mut usize,
            numAttrs: usize,
            failIdx: *mut usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy3DBatchAsync: Result<
        unsafe extern "C" fn(
            numOps: usize,
            opList: *mut cudaMemcpy3DBatchOp,
            failIdx: *mut usize,
            flags: ::core::ffi::c_ulonglong,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DToArrayAsync: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            spitch: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpy2DFromArrayAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            dpitch: usize,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            width: usize,
            height: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToSymbolAsync: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromSymbolAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            value: ::core::ffi::c_int,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset2D: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            pitch: usize,
            value: ::core::ffi::c_int,
            width: usize,
            height: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset3D: Result<
        unsafe extern "C" fn(
            pitchedDevPtr: cudaPitchedPtr,
            value: ::core::ffi::c_int,
            extent: cudaExtent,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemsetAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            value: ::core::ffi::c_int,
            count: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset2DAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            pitch: usize,
            value: ::core::ffi::c_int,
            width: usize,
            height: usize,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemset3DAsync: Result<
        unsafe extern "C" fn(
            pitchedDevPtr: cudaPitchedPtr,
            value: ::core::ffi::c_int,
            extent: cudaExtent,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSymbolAddress: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSymbolSize: Result<
        unsafe extern "C" fn(size: *mut usize, symbol: *const ::core::ffi::c_void) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPrefetchAsync: Result<
        unsafe extern "C" fn(
            devPtr: *const ::core::ffi::c_void,
            count: usize,
            dstDevice: ::core::ffi::c_int,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPrefetchAsync_v2: Result<
        unsafe extern "C" fn(
            devPtr: *const ::core::ffi::c_void,
            count: usize,
            location: cudaMemLocation,
            flags: ::core::ffi::c_uint,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemAdvise: Result<
        unsafe extern "C" fn(
            devPtr: *const ::core::ffi::c_void,
            count: usize,
            advice: cudaMemoryAdvise,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemAdvise_v2: Result<
        unsafe extern "C" fn(
            devPtr: *const ::core::ffi::c_void,
            count: usize,
            advice: cudaMemoryAdvise,
            location: cudaMemLocation,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemRangeGetAttribute: Result<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_void,
            dataSize: usize,
            attribute: cudaMemRangeAttribute,
            devPtr: *const ::core::ffi::c_void,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemRangeGetAttributes: Result<
        unsafe extern "C" fn(
            data: *mut *mut ::core::ffi::c_void,
            dataSizes: *mut usize,
            attributes: *mut cudaMemRangeAttribute,
            numAttributes: usize,
            devPtr: *const ::core::ffi::c_void,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromArray: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyArrayToArray: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffsetDst: usize,
            hOffsetDst: usize,
            src: cudaArray_const_t,
            wOffsetSrc: usize,
            hOffsetSrc: usize,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyToArrayAsync: Result<
        unsafe extern "C" fn(
            dst: cudaArray_t,
            wOffset: usize,
            hOffset: usize,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemcpyFromArrayAsync: Result<
        unsafe extern "C" fn(
            dst: *mut ::core::ffi::c_void,
            src: cudaArray_const_t,
            wOffset: usize,
            hOffset: usize,
            count: usize,
            kind: cudaMemcpyKind,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMallocAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            size: usize,
            hStream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaFreeAsync: Result<
        unsafe extern "C" fn(
            devPtr: *mut ::core::ffi::c_void,
            hStream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolTrimTo: Result<
        unsafe extern "C" fn(memPool: cudaMemPool_t, minBytesToKeep: usize) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolSetAttribute: Result<
        unsafe extern "C" fn(
            memPool: cudaMemPool_t,
            attr: cudaMemPoolAttr,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolGetAttribute: Result<
        unsafe extern "C" fn(
            memPool: cudaMemPool_t,
            attr: cudaMemPoolAttr,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolSetAccess: Result<
        unsafe extern "C" fn(
            memPool: cudaMemPool_t,
            descList: *const cudaMemAccessDesc,
            count: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolGetAccess: Result<
        unsafe extern "C" fn(
            flags: *mut cudaMemAccessFlags,
            memPool: cudaMemPool_t,
            location: *mut cudaMemLocation,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolCreate: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            poolProps: *const cudaMemPoolProps,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolDestroy:
        Result<unsafe extern "C" fn(memPool: cudaMemPool_t) -> cudaError_t, ::libloading::Error>,
    pub cudaMallocFromPoolAsync: Result<
        unsafe extern "C" fn(
            ptr: *mut *mut ::core::ffi::c_void,
            size: usize,
            memPool: cudaMemPool_t,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolExportToShareableHandle: Result<
        unsafe extern "C" fn(
            shareableHandle: *mut ::core::ffi::c_void,
            memPool: cudaMemPool_t,
            handleType: cudaMemAllocationHandleType,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolImportFromShareableHandle: Result<
        unsafe extern "C" fn(
            memPool: *mut cudaMemPool_t,
            shareableHandle: *mut ::core::ffi::c_void,
            handleType: cudaMemAllocationHandleType,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolExportPointer: Result<
        unsafe extern "C" fn(
            exportData: *mut cudaMemPoolPtrExportData,
            ptr: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaMemPoolImportPointer: Result<
        unsafe extern "C" fn(
            ptr: *mut *mut ::core::ffi::c_void,
            memPool: cudaMemPool_t,
            exportData: *mut cudaMemPoolPtrExportData,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaPointerGetAttributes: Result<
        unsafe extern "C" fn(
            attributes: *mut cudaPointerAttributes,
            ptr: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceCanAccessPeer: Result<
        unsafe extern "C" fn(
            canAccessPeer: *mut ::core::ffi::c_int,
            device: ::core::ffi::c_int,
            peerDevice: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceEnablePeerAccess: Result<
        unsafe extern "C" fn(
            peerDevice: ::core::ffi::c_int,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceDisablePeerAccess: Result<
        unsafe extern "C" fn(peerDevice: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsUnregisterResource: Result<
        unsafe extern "C" fn(resource: cudaGraphicsResource_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsResourceSetMapFlags: Result<
        unsafe extern "C" fn(
            resource: cudaGraphicsResource_t,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsMapResources: Result<
        unsafe extern "C" fn(
            count: ::core::ffi::c_int,
            resources: *mut cudaGraphicsResource_t,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsUnmapResources: Result<
        unsafe extern "C" fn(
            count: ::core::ffi::c_int,
            resources: *mut cudaGraphicsResource_t,
            stream: cudaStream_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsResourceGetMappedPointer: Result<
        unsafe extern "C" fn(
            devPtr: *mut *mut ::core::ffi::c_void,
            size: *mut usize,
            resource: cudaGraphicsResource_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsSubResourceGetMappedArray: Result<
        unsafe extern "C" fn(
            array: *mut cudaArray_t,
            resource: cudaGraphicsResource_t,
            arrayIndex: ::core::ffi::c_uint,
            mipLevel: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphicsResourceGetMappedMipmappedArray: Result<
        unsafe extern "C" fn(
            mipmappedArray: *mut cudaMipmappedArray_t,
            resource: cudaGraphicsResource_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetChannelDesc: Result<
        unsafe extern "C" fn(
            desc: *mut cudaChannelFormatDesc,
            array: cudaArray_const_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaCreateChannelDesc: Result<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            z: ::core::ffi::c_int,
            w: ::core::ffi::c_int,
            f: cudaChannelFormatKind,
        ) -> cudaChannelFormatDesc,
        ::libloading::Error,
    >,
    pub cudaCreateTextureObject: Result<
        unsafe extern "C" fn(
            pTexObject: *mut cudaTextureObject_t,
            pResDesc: *const cudaResourceDesc,
            pTexDesc: *const cudaTextureDesc,
            pResViewDesc: *const cudaResourceViewDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroyTextureObject: Result<
        unsafe extern "C" fn(texObject: cudaTextureObject_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureObjectResourceDesc: Result<
        unsafe extern "C" fn(
            pResDesc: *mut cudaResourceDesc,
            texObject: cudaTextureObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureObjectTextureDesc: Result<
        unsafe extern "C" fn(
            pTexDesc: *mut cudaTextureDesc,
            texObject: cudaTextureObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetTextureObjectResourceViewDesc: Result<
        unsafe extern "C" fn(
            pResViewDesc: *mut cudaResourceViewDesc,
            texObject: cudaTextureObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaCreateSurfaceObject: Result<
        unsafe extern "C" fn(
            pSurfObject: *mut cudaSurfaceObject_t,
            pResDesc: *const cudaResourceDesc,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDestroySurfaceObject: Result<
        unsafe extern "C" fn(surfObject: cudaSurfaceObject_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetSurfaceObjectResourceDesc: Result<
        unsafe extern "C" fn(
            pResDesc: *mut cudaResourceDesc,
            surfObject: cudaSurfaceObject_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDriverGetVersion: Result<
        unsafe extern "C" fn(driverVersion: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaRuntimeGetVersion: Result<
        unsafe extern "C" fn(runtimeVersion: *mut ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphCreate: Result<
        unsafe extern "C" fn(pGraph: *mut cudaGraph_t, flags: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddKernelNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pNodeParams: *const cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeCopyAttributes: Result<
        unsafe extern "C" fn(hSrc: cudaGraphNode_t, hDst: cudaGraphNode_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeGetAttribute: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            attr: cudaLaunchAttributeID,
            value_out: *mut cudaLaunchAttributeValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphKernelNodeSetAttribute: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            attr: cudaLaunchAttributeID,
            value: *const cudaLaunchAttributeValue,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pCopyParams: *const cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNodeToSymbol: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNodeFromSymbol: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemcpyNode1D: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParamsToSymbol: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParamsFromSymbol: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemcpyNodeSetParams1D: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemsetNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pMemsetParams: *const cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemsetNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemsetNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddHostNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            pNodeParams: *const cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphHostNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *mut cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphHostNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pNodeParams: *const cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddChildGraphNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            childGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphChildGraphNodeGetGraph: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, pGraph: *mut cudaGraph_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddEmptyNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddEventRecordNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventRecordNodeGetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event_out: *mut cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventRecordNodeSetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddEventWaitNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventWaitNodeGetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event_out: *mut cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphEventWaitNodeSetEvent: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, event: cudaEvent_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddExternalSemaphoresSignalNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresSignalNodeGetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            params_out: *mut cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresSignalNodeSetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddExternalSemaphoresWaitNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresWaitNodeGetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            params_out: *mut cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExternalSemaphoresWaitNodeSetParams: Result<
        unsafe extern "C" fn(
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemAllocNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *mut cudaMemAllocNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemAllocNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            params_out: *mut cudaMemAllocNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddMemFreeNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            dptr: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphMemFreeNodeGetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            dptr_out: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGraphMemTrim: Result<
        unsafe extern "C" fn(device: ::core::ffi::c_int) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceGetGraphMemAttribute: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            attr: cudaGraphMemAttributeType,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaDeviceSetGraphMemAttribute: Result<
        unsafe extern "C" fn(
            device: ::core::ffi::c_int,
            attr: cudaGraphMemAttributeType,
            value: *mut ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphClone: Result<
        unsafe extern "C" fn(
            pGraphClone: *mut cudaGraph_t,
            originalGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeFindInClone: Result<
        unsafe extern "C" fn(
            pNode: *mut cudaGraphNode_t,
            originalNode: cudaGraphNode_t,
            clonedGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetType: Result<
        unsafe extern "C" fn(node: cudaGraphNode_t, pType: *mut cudaGraphNodeType) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetNodes: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            nodes: *mut cudaGraphNode_t,
            numNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetRootNodes: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            pRootNodes: *mut cudaGraphNode_t,
            pNumRootNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetEdges: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *mut cudaGraphNode_t,
            to: *mut cudaGraphNode_t,
            numEdges: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphGetEdges_v2: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *mut cudaGraphNode_t,
            to: *mut cudaGraphNode_t,
            edgeData: *mut cudaGraphEdgeData,
            numEdges: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetDependencies: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pDependencies: *mut cudaGraphNode_t,
            pNumDependencies: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetDependencies_v2: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pDependencies: *mut cudaGraphNode_t,
            edgeData: *mut cudaGraphEdgeData,
            pNumDependencies: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetDependentNodes: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pDependentNodes: *mut cudaGraphNode_t,
            pNumDependentNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetDependentNodes_v2: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            pDependentNodes: *mut cudaGraphNode_t,
            edgeData: *mut cudaGraphEdgeData,
            pNumDependentNodes: *mut usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddDependencies: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *const cudaGraphNode_t,
            to: *const cudaGraphNode_t,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddDependencies_v2: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *const cudaGraphNode_t,
            to: *const cudaGraphNode_t,
            edgeData: *const cudaGraphEdgeData,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphRemoveDependencies: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *const cudaGraphNode_t,
            to: *const cudaGraphNode_t,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphRemoveDependencies_v2: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            from: *const cudaGraphNode_t,
            to: *const cudaGraphNode_t,
            edgeData: *const cudaGraphEdgeData,
            numDependencies: usize,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphDestroyNode:
        Result<unsafe extern "C" fn(node: cudaGraphNode_t) -> cudaError_t, ::libloading::Error>,
    pub cudaGraphInstantiate: Result<
        unsafe extern "C" fn(
            pGraphExec: *mut cudaGraphExec_t,
            graph: cudaGraph_t,
            flags: ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphInstantiateWithFlags: Result<
        unsafe extern "C" fn(
            pGraphExec: *mut cudaGraphExec_t,
            graph: cudaGraph_t,
            flags: ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphInstantiateWithParams: Result<
        unsafe extern "C" fn(
            pGraphExec: *mut cudaGraphExec_t,
            graph: cudaGraph_t,
            instantiateParams: *mut cudaGraphInstantiateParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecGetFlags: Result<
        unsafe extern "C" fn(
            graphExec: cudaGraphExec_t,
            flags: *mut ::core::ffi::c_ulonglong,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecKernelNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaKernelNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemcpy3DParms,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParamsToSymbol: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            symbol: *const ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParamsFromSymbol: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            symbol: *const ::core::ffi::c_void,
            count: usize,
            offset: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemcpyNodeSetParams1D: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            dst: *mut ::core::ffi::c_void,
            src: *const ::core::ffi::c_void,
            count: usize,
            kind: cudaMemcpyKind,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecMemsetNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaMemsetParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecHostNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            pNodeParams: *const cudaHostNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecChildGraphNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            childGraph: cudaGraph_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecEventRecordNodeSetEvent: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecEventWaitNodeSetEvent: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            event: cudaEvent_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecExternalSemaphoresSignalNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecExternalSemaphoresWaitNodeSetParams: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeSetEnabled: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            isEnabled: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeGetEnabled: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hNode: cudaGraphNode_t,
            isEnabled: *mut ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecUpdate: Result<
        unsafe extern "C" fn(
            hGraphExec: cudaGraphExec_t,
            hGraph: cudaGraph_t,
            resultInfo: *mut cudaGraphExecUpdateResultInfo,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphUpload: Result<
        unsafe extern "C" fn(graphExec: cudaGraphExec_t, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphLaunch: Result<
        unsafe extern "C" fn(graphExec: cudaGraphExec_t, stream: cudaStream_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecDestroy: Result<
        unsafe extern "C" fn(graphExec: cudaGraphExec_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphDestroy:
        Result<unsafe extern "C" fn(graph: cudaGraph_t) -> cudaError_t, ::libloading::Error>,
    pub cudaGraphDebugDotPrint: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            path: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUserObjectCreate: Result<
        unsafe extern "C" fn(
            object_out: *mut cudaUserObject_t,
            ptr: *mut ::core::ffi::c_void,
            destroy: cudaHostFn_t,
            initialRefcount: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUserObjectRetain: Result<
        unsafe extern "C" fn(object: cudaUserObject_t, count: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaUserObjectRelease: Result<
        unsafe extern "C" fn(object: cudaUserObject_t, count: ::core::ffi::c_uint) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphRetainUserObject: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            object: cudaUserObject_t,
            count: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphReleaseUserObject: Result<
        unsafe extern "C" fn(
            graph: cudaGraph_t,
            object: cudaUserObject_t,
            count: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddNode: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            numDependencies: usize,
            nodeParams: *mut cudaGraphNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphAddNode_v2: Result<
        unsafe extern "C" fn(
            pGraphNode: *mut cudaGraphNode_t,
            graph: cudaGraph_t,
            pDependencies: *const cudaGraphNode_t,
            dependencyData: *const cudaGraphEdgeData,
            numDependencies: usize,
            nodeParams: *mut cudaGraphNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphNodeSetParams: Result<
        unsafe extern "C" fn(
            node: cudaGraphNode_t,
            nodeParams: *mut cudaGraphNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphExecNodeSetParams: Result<
        unsafe extern "C" fn(
            graphExec: cudaGraphExec_t,
            node: cudaGraphNode_t,
            nodeParams: *mut cudaGraphNodeParams,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGraphConditionalHandleCreate: Result<
        unsafe extern "C" fn(
            pHandle_out: *mut cudaGraphConditionalHandle,
            graph: cudaGraph_t,
            defaultLaunchValue: ::core::ffi::c_uint,
            flags: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDriverEntryPoint: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_char,
            funcPtr: *mut *mut ::core::ffi::c_void,
            flags: ::core::ffi::c_ulonglong,
            driverStatus: *mut cudaDriverEntryPointQueryResult,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetDriverEntryPointByVersion: Result<
        unsafe extern "C" fn(
            symbol: *const ::core::ffi::c_char,
            funcPtr: *mut *mut ::core::ffi::c_void,
            cudaVersion: ::core::ffi::c_uint,
            flags: ::core::ffi::c_ulonglong,
            driverStatus: *mut cudaDriverEntryPointQueryResult,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryLoadData: Result<
        unsafe extern "C" fn(
            library: *mut cudaLibrary_t,
            code: *const ::core::ffi::c_void,
            jitOptions: *mut cudaJitOption,
            jitOptionsValues: *mut *mut ::core::ffi::c_void,
            numJitOptions: ::core::ffi::c_uint,
            libraryOptions: *mut cudaLibraryOption,
            libraryOptionValues: *mut *mut ::core::ffi::c_void,
            numLibraryOptions: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryLoadFromFile: Result<
        unsafe extern "C" fn(
            library: *mut cudaLibrary_t,
            fileName: *const ::core::ffi::c_char,
            jitOptions: *mut cudaJitOption,
            jitOptionsValues: *mut *mut ::core::ffi::c_void,
            numJitOptions: ::core::ffi::c_uint,
            libraryOptions: *mut cudaLibraryOption,
            libraryOptionValues: *mut *mut ::core::ffi::c_void,
            numLibraryOptions: ::core::ffi::c_uint,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryUnload:
        Result<unsafe extern "C" fn(library: cudaLibrary_t) -> cudaError_t, ::libloading::Error>,
    pub cudaLibraryGetKernel: Result<
        unsafe extern "C" fn(
            pKernel: *mut cudaKernel_t,
            library: cudaLibrary_t,
            name: *const ::core::ffi::c_char,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryGetGlobal: Result<
        unsafe extern "C" fn(
            dptr: *mut *mut ::core::ffi::c_void,
            bytes: *mut usize,
            library: cudaLibrary_t,
            name: *const ::core::ffi::c_char,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryGetManaged: Result<
        unsafe extern "C" fn(
            dptr: *mut *mut ::core::ffi::c_void,
            bytes: *mut usize,
            library: cudaLibrary_t,
            name: *const ::core::ffi::c_char,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryGetUnifiedFunction: Result<
        unsafe extern "C" fn(
            fptr: *mut *mut ::core::ffi::c_void,
            library: cudaLibrary_t,
            symbol: *const ::core::ffi::c_char,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryGetKernelCount: Result<
        unsafe extern "C" fn(count: *mut ::core::ffi::c_uint, lib: cudaLibrary_t) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaLibraryEnumerateKernels: Result<
        unsafe extern "C" fn(
            kernels: *mut cudaKernel_t,
            numKernels: ::core::ffi::c_uint,
            lib: cudaLibrary_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaKernelSetAttributeForDevice: Result<
        unsafe extern "C" fn(
            kernel: cudaKernel_t,
            attr: cudaFuncAttribute,
            value: ::core::ffi::c_int,
            device: ::core::ffi::c_int,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetExportTable: Result<
        unsafe extern "C" fn(
            ppExportTable: *mut *const ::core::ffi::c_void,
            pExportTableId: *const cudaUUID_t,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetFuncBySymbol: Result<
        unsafe extern "C" fn(
            functionPtr: *mut cudaFunction_t,
            symbolPtr: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaGetKernel: Result<
        unsafe extern "C" fn(
            kernelPtr: *mut cudaKernel_t,
            entryFuncAddr: *const ::core::ffi::c_void,
        ) -> cudaError_t,
        ::libloading::Error,
    >,
    pub cudaProfilerStart: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
    pub cudaProfilerStop: Result<unsafe extern "C" fn() -> cudaError_t, ::libloading::Error>,
}
impl Lib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let cudaDeviceReset = __library.get(b"cudaDeviceReset\0").map(|sym| *sym);
        let cudaDeviceSynchronize = __library.get(b"cudaDeviceSynchronize\0").map(|sym| *sym);
        let cudaDeviceSetLimit = __library.get(b"cudaDeviceSetLimit\0").map(|sym| *sym);
        let cudaDeviceGetLimit = __library.get(b"cudaDeviceGetLimit\0").map(|sym| *sym);
        let cudaDeviceGetTexture1DLinearMaxWidth = __library
            .get(b"cudaDeviceGetTexture1DLinearMaxWidth\0")
            .map(|sym| *sym);
        let cudaDeviceGetCacheConfig = __library.get(b"cudaDeviceGetCacheConfig\0").map(|sym| *sym);
        let cudaDeviceGetStreamPriorityRange = __library
            .get(b"cudaDeviceGetStreamPriorityRange\0")
            .map(|sym| *sym);
        let cudaDeviceSetCacheConfig = __library.get(b"cudaDeviceSetCacheConfig\0").map(|sym| *sym);
        let cudaDeviceGetByPCIBusId = __library.get(b"cudaDeviceGetByPCIBusId\0").map(|sym| *sym);
        let cudaDeviceGetPCIBusId = __library.get(b"cudaDeviceGetPCIBusId\0").map(|sym| *sym);
        let cudaIpcGetEventHandle = __library.get(b"cudaIpcGetEventHandle\0").map(|sym| *sym);
        let cudaIpcOpenEventHandle = __library.get(b"cudaIpcOpenEventHandle\0").map(|sym| *sym);
        let cudaIpcGetMemHandle = __library.get(b"cudaIpcGetMemHandle\0").map(|sym| *sym);
        let cudaIpcOpenMemHandle = __library.get(b"cudaIpcOpenMemHandle\0").map(|sym| *sym);
        let cudaIpcCloseMemHandle = __library.get(b"cudaIpcCloseMemHandle\0").map(|sym| *sym);
        let cudaDeviceFlushGPUDirectRDMAWrites = __library
            .get(b"cudaDeviceFlushGPUDirectRDMAWrites\0")
            .map(|sym| *sym);
        let cudaDeviceRegisterAsyncNotification = __library
            .get(b"cudaDeviceRegisterAsyncNotification\0")
            .map(|sym| *sym);
        let cudaDeviceUnregisterAsyncNotification = __library
            .get(b"cudaDeviceUnregisterAsyncNotification\0")
            .map(|sym| *sym);
        let cudaDeviceGetSharedMemConfig = __library
            .get(b"cudaDeviceGetSharedMemConfig\0")
            .map(|sym| *sym);
        let cudaDeviceSetSharedMemConfig = __library
            .get(b"cudaDeviceSetSharedMemConfig\0")
            .map(|sym| *sym);
        let cudaThreadExit = __library.get(b"cudaThreadExit\0").map(|sym| *sym);
        let cudaThreadSynchronize = __library.get(b"cudaThreadSynchronize\0").map(|sym| *sym);
        let cudaThreadSetLimit = __library.get(b"cudaThreadSetLimit\0").map(|sym| *sym);
        let cudaThreadGetLimit = __library.get(b"cudaThreadGetLimit\0").map(|sym| *sym);
        let cudaThreadGetCacheConfig = __library.get(b"cudaThreadGetCacheConfig\0").map(|sym| *sym);
        let cudaThreadSetCacheConfig = __library.get(b"cudaThreadSetCacheConfig\0").map(|sym| *sym);
        let cudaGetLastError = __library.get(b"cudaGetLastError\0").map(|sym| *sym);
        let cudaPeekAtLastError = __library.get(b"cudaPeekAtLastError\0").map(|sym| *sym);
        let cudaGetErrorName = __library.get(b"cudaGetErrorName\0").map(|sym| *sym);
        let cudaGetErrorString = __library.get(b"cudaGetErrorString\0").map(|sym| *sym);
        let cudaGetDeviceCount = __library.get(b"cudaGetDeviceCount\0").map(|sym| *sym);
        let cudaGetDeviceProperties_v2 = __library
            .get(b"cudaGetDeviceProperties_v2\0")
            .map(|sym| *sym);
        let cudaDeviceGetAttribute = __library.get(b"cudaDeviceGetAttribute\0").map(|sym| *sym);
        let cudaDeviceGetDefaultMemPool = __library
            .get(b"cudaDeviceGetDefaultMemPool\0")
            .map(|sym| *sym);
        let cudaDeviceSetMemPool = __library.get(b"cudaDeviceSetMemPool\0").map(|sym| *sym);
        let cudaDeviceGetMemPool = __library.get(b"cudaDeviceGetMemPool\0").map(|sym| *sym);
        let cudaDeviceGetNvSciSyncAttributes = __library
            .get(b"cudaDeviceGetNvSciSyncAttributes\0")
            .map(|sym| *sym);
        let cudaDeviceGetP2PAttribute = __library
            .get(b"cudaDeviceGetP2PAttribute\0")
            .map(|sym| *sym);
        let cudaChooseDevice = __library.get(b"cudaChooseDevice\0").map(|sym| *sym);
        let cudaInitDevice = __library.get(b"cudaInitDevice\0").map(|sym| *sym);
        let cudaSetDevice = __library.get(b"cudaSetDevice\0").map(|sym| *sym);
        let cudaGetDevice = __library.get(b"cudaGetDevice\0").map(|sym| *sym);
        let cudaSetValidDevices = __library.get(b"cudaSetValidDevices\0").map(|sym| *sym);
        let cudaSetDeviceFlags = __library.get(b"cudaSetDeviceFlags\0").map(|sym| *sym);
        let cudaGetDeviceFlags = __library.get(b"cudaGetDeviceFlags\0").map(|sym| *sym);
        let cudaStreamCreate = __library.get(b"cudaStreamCreate\0").map(|sym| *sym);
        let cudaStreamCreateWithFlags = __library
            .get(b"cudaStreamCreateWithFlags\0")
            .map(|sym| *sym);
        let cudaStreamCreateWithPriority = __library
            .get(b"cudaStreamCreateWithPriority\0")
            .map(|sym| *sym);
        let cudaStreamGetPriority = __library.get(b"cudaStreamGetPriority\0").map(|sym| *sym);
        let cudaStreamGetFlags = __library.get(b"cudaStreamGetFlags\0").map(|sym| *sym);
        let cudaStreamGetId = __library.get(b"cudaStreamGetId\0").map(|sym| *sym);
        let cudaStreamGetDevice = __library.get(b"cudaStreamGetDevice\0").map(|sym| *sym);
        let cudaCtxResetPersistingL2Cache = __library
            .get(b"cudaCtxResetPersistingL2Cache\0")
            .map(|sym| *sym);
        let cudaStreamCopyAttributes = __library.get(b"cudaStreamCopyAttributes\0").map(|sym| *sym);
        let cudaStreamGetAttribute = __library.get(b"cudaStreamGetAttribute\0").map(|sym| *sym);
        let cudaStreamSetAttribute = __library.get(b"cudaStreamSetAttribute\0").map(|sym| *sym);
        let cudaStreamDestroy = __library.get(b"cudaStreamDestroy\0").map(|sym| *sym);
        let cudaStreamWaitEvent = __library.get(b"cudaStreamWaitEvent\0").map(|sym| *sym);
        let cudaStreamAddCallback = __library.get(b"cudaStreamAddCallback\0").map(|sym| *sym);
        let cudaStreamSynchronize = __library.get(b"cudaStreamSynchronize\0").map(|sym| *sym);
        let cudaStreamQuery = __library.get(b"cudaStreamQuery\0").map(|sym| *sym);
        let cudaStreamAttachMemAsync = __library.get(b"cudaStreamAttachMemAsync\0").map(|sym| *sym);
        let cudaStreamBeginCapture = __library.get(b"cudaStreamBeginCapture\0").map(|sym| *sym);
        let cudaStreamBeginCaptureToGraph = __library
            .get(b"cudaStreamBeginCaptureToGraph\0")
            .map(|sym| *sym);
        let cudaThreadExchangeStreamCaptureMode = __library
            .get(b"cudaThreadExchangeStreamCaptureMode\0")
            .map(|sym| *sym);
        let cudaStreamEndCapture = __library.get(b"cudaStreamEndCapture\0").map(|sym| *sym);
        let cudaStreamIsCapturing = __library.get(b"cudaStreamIsCapturing\0").map(|sym| *sym);
        let cudaStreamGetCaptureInfo_v2 = __library
            .get(b"cudaStreamGetCaptureInfo_v2\0")
            .map(|sym| *sym);
        let cudaStreamGetCaptureInfo_v3 = __library
            .get(b"cudaStreamGetCaptureInfo_v3\0")
            .map(|sym| *sym);
        let cudaStreamUpdateCaptureDependencies = __library
            .get(b"cudaStreamUpdateCaptureDependencies\0")
            .map(|sym| *sym);
        let cudaStreamUpdateCaptureDependencies_v2 = __library
            .get(b"cudaStreamUpdateCaptureDependencies_v2\0")
            .map(|sym| *sym);
        let cudaEventCreate = __library.get(b"cudaEventCreate\0").map(|sym| *sym);
        let cudaEventCreateWithFlags = __library.get(b"cudaEventCreateWithFlags\0").map(|sym| *sym);
        let cudaEventRecord = __library.get(b"cudaEventRecord\0").map(|sym| *sym);
        let cudaEventRecordWithFlags = __library.get(b"cudaEventRecordWithFlags\0").map(|sym| *sym);
        let cudaEventQuery = __library.get(b"cudaEventQuery\0").map(|sym| *sym);
        let cudaEventSynchronize = __library.get(b"cudaEventSynchronize\0").map(|sym| *sym);
        let cudaEventDestroy = __library.get(b"cudaEventDestroy\0").map(|sym| *sym);
        let cudaEventElapsedTime = __library.get(b"cudaEventElapsedTime\0").map(|sym| *sym);
        let cudaEventElapsedTime_v2 = __library.get(b"cudaEventElapsedTime_v2\0").map(|sym| *sym);
        let cudaImportExternalMemory = __library.get(b"cudaImportExternalMemory\0").map(|sym| *sym);
        let cudaExternalMemoryGetMappedBuffer = __library
            .get(b"cudaExternalMemoryGetMappedBuffer\0")
            .map(|sym| *sym);
        let cudaExternalMemoryGetMappedMipmappedArray = __library
            .get(b"cudaExternalMemoryGetMappedMipmappedArray\0")
            .map(|sym| *sym);
        let cudaDestroyExternalMemory = __library
            .get(b"cudaDestroyExternalMemory\0")
            .map(|sym| *sym);
        let cudaImportExternalSemaphore = __library
            .get(b"cudaImportExternalSemaphore\0")
            .map(|sym| *sym);
        let cudaSignalExternalSemaphoresAsync_v2 = __library
            .get(b"cudaSignalExternalSemaphoresAsync_v2\0")
            .map(|sym| *sym);
        let cudaWaitExternalSemaphoresAsync_v2 = __library
            .get(b"cudaWaitExternalSemaphoresAsync_v2\0")
            .map(|sym| *sym);
        let cudaDestroyExternalSemaphore = __library
            .get(b"cudaDestroyExternalSemaphore\0")
            .map(|sym| *sym);
        let cudaLaunchKernel = __library.get(b"cudaLaunchKernel\0").map(|sym| *sym);
        let cudaLaunchKernelExC = __library.get(b"cudaLaunchKernelExC\0").map(|sym| *sym);
        let cudaLaunchCooperativeKernel = __library
            .get(b"cudaLaunchCooperativeKernel\0")
            .map(|sym| *sym);
        let cudaLaunchCooperativeKernelMultiDevice = __library
            .get(b"cudaLaunchCooperativeKernelMultiDevice\0")
            .map(|sym| *sym);
        let cudaFuncSetCacheConfig = __library.get(b"cudaFuncSetCacheConfig\0").map(|sym| *sym);
        let cudaFuncGetAttributes = __library.get(b"cudaFuncGetAttributes\0").map(|sym| *sym);
        let cudaFuncSetAttribute = __library.get(b"cudaFuncSetAttribute\0").map(|sym| *sym);
        let cudaFuncGetName = __library.get(b"cudaFuncGetName\0").map(|sym| *sym);
        let cudaFuncGetParamInfo = __library.get(b"cudaFuncGetParamInfo\0").map(|sym| *sym);
        let cudaSetDoubleForDevice = __library.get(b"cudaSetDoubleForDevice\0").map(|sym| *sym);
        let cudaSetDoubleForHost = __library.get(b"cudaSetDoubleForHost\0").map(|sym| *sym);
        let cudaLaunchHostFunc = __library.get(b"cudaLaunchHostFunc\0").map(|sym| *sym);
        let cudaFuncSetSharedMemConfig = __library
            .get(b"cudaFuncSetSharedMemConfig\0")
            .map(|sym| *sym);
        let cudaOccupancyMaxActiveBlocksPerMultiprocessor = __library
            .get(b"cudaOccupancyMaxActiveBlocksPerMultiprocessor\0")
            .map(|sym| *sym);
        let cudaOccupancyAvailableDynamicSMemPerBlock = __library
            .get(b"cudaOccupancyAvailableDynamicSMemPerBlock\0")
            .map(|sym| *sym);
        let cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags = __library
            .get(b"cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags\0")
            .map(|sym| *sym);
        let cudaOccupancyMaxPotentialClusterSize = __library
            .get(b"cudaOccupancyMaxPotentialClusterSize\0")
            .map(|sym| *sym);
        let cudaOccupancyMaxActiveClusters = __library
            .get(b"cudaOccupancyMaxActiveClusters\0")
            .map(|sym| *sym);
        let cudaMallocManaged = __library.get(b"cudaMallocManaged\0").map(|sym| *sym);
        let cudaMalloc = __library.get(b"cudaMalloc\0").map(|sym| *sym);
        let cudaMallocHost = __library.get(b"cudaMallocHost\0").map(|sym| *sym);
        let cudaMallocPitch = __library.get(b"cudaMallocPitch\0").map(|sym| *sym);
        let cudaMallocArray = __library.get(b"cudaMallocArray\0").map(|sym| *sym);
        let cudaFree = __library.get(b"cudaFree\0").map(|sym| *sym);
        let cudaFreeHost = __library.get(b"cudaFreeHost\0").map(|sym| *sym);
        let cudaFreeArray = __library.get(b"cudaFreeArray\0").map(|sym| *sym);
        let cudaFreeMipmappedArray = __library.get(b"cudaFreeMipmappedArray\0").map(|sym| *sym);
        let cudaHostAlloc = __library.get(b"cudaHostAlloc\0").map(|sym| *sym);
        let cudaHostRegister = __library.get(b"cudaHostRegister\0").map(|sym| *sym);
        let cudaHostUnregister = __library.get(b"cudaHostUnregister\0").map(|sym| *sym);
        let cudaHostGetDevicePointer = __library.get(b"cudaHostGetDevicePointer\0").map(|sym| *sym);
        let cudaHostGetFlags = __library.get(b"cudaHostGetFlags\0").map(|sym| *sym);
        let cudaMalloc3D = __library.get(b"cudaMalloc3D\0").map(|sym| *sym);
        let cudaMalloc3DArray = __library.get(b"cudaMalloc3DArray\0").map(|sym| *sym);
        let cudaMallocMipmappedArray = __library.get(b"cudaMallocMipmappedArray\0").map(|sym| *sym);
        let cudaGetMipmappedArrayLevel = __library
            .get(b"cudaGetMipmappedArrayLevel\0")
            .map(|sym| *sym);
        let cudaMemcpy3D = __library.get(b"cudaMemcpy3D\0").map(|sym| *sym);
        let cudaMemcpy3DPeer = __library.get(b"cudaMemcpy3DPeer\0").map(|sym| *sym);
        let cudaMemcpy3DAsync = __library.get(b"cudaMemcpy3DAsync\0").map(|sym| *sym);
        let cudaMemcpy3DPeerAsync = __library.get(b"cudaMemcpy3DPeerAsync\0").map(|sym| *sym);
        let cudaMemGetInfo = __library.get(b"cudaMemGetInfo\0").map(|sym| *sym);
        let cudaArrayGetInfo = __library.get(b"cudaArrayGetInfo\0").map(|sym| *sym);
        let cudaArrayGetPlane = __library.get(b"cudaArrayGetPlane\0").map(|sym| *sym);
        let cudaArrayGetMemoryRequirements = __library
            .get(b"cudaArrayGetMemoryRequirements\0")
            .map(|sym| *sym);
        let cudaMipmappedArrayGetMemoryRequirements = __library
            .get(b"cudaMipmappedArrayGetMemoryRequirements\0")
            .map(|sym| *sym);
        let cudaArrayGetSparseProperties = __library
            .get(b"cudaArrayGetSparseProperties\0")
            .map(|sym| *sym);
        let cudaMipmappedArrayGetSparseProperties = __library
            .get(b"cudaMipmappedArrayGetSparseProperties\0")
            .map(|sym| *sym);
        let cudaMemcpy = __library.get(b"cudaMemcpy\0").map(|sym| *sym);
        let cudaMemcpyPeer = __library.get(b"cudaMemcpyPeer\0").map(|sym| *sym);
        let cudaMemcpy2D = __library.get(b"cudaMemcpy2D\0").map(|sym| *sym);
        let cudaMemcpy2DToArray = __library.get(b"cudaMemcpy2DToArray\0").map(|sym| *sym);
        let cudaMemcpy2DFromArray = __library.get(b"cudaMemcpy2DFromArray\0").map(|sym| *sym);
        let cudaMemcpy2DArrayToArray = __library.get(b"cudaMemcpy2DArrayToArray\0").map(|sym| *sym);
        let cudaMemcpyToSymbol = __library.get(b"cudaMemcpyToSymbol\0").map(|sym| *sym);
        let cudaMemcpyFromSymbol = __library.get(b"cudaMemcpyFromSymbol\0").map(|sym| *sym);
        let cudaMemcpyAsync = __library.get(b"cudaMemcpyAsync\0").map(|sym| *sym);
        let cudaMemcpyPeerAsync = __library.get(b"cudaMemcpyPeerAsync\0").map(|sym| *sym);
        let cudaMemcpyBatchAsync = __library.get(b"cudaMemcpyBatchAsync\0").map(|sym| *sym);
        let cudaMemcpy3DBatchAsync = __library.get(b"cudaMemcpy3DBatchAsync\0").map(|sym| *sym);
        let cudaMemcpy2DAsync = __library.get(b"cudaMemcpy2DAsync\0").map(|sym| *sym);
        let cudaMemcpy2DToArrayAsync = __library.get(b"cudaMemcpy2DToArrayAsync\0").map(|sym| *sym);
        let cudaMemcpy2DFromArrayAsync = __library
            .get(b"cudaMemcpy2DFromArrayAsync\0")
            .map(|sym| *sym);
        let cudaMemcpyToSymbolAsync = __library.get(b"cudaMemcpyToSymbolAsync\0").map(|sym| *sym);
        let cudaMemcpyFromSymbolAsync = __library
            .get(b"cudaMemcpyFromSymbolAsync\0")
            .map(|sym| *sym);
        let cudaMemset = __library.get(b"cudaMemset\0").map(|sym| *sym);
        let cudaMemset2D = __library.get(b"cudaMemset2D\0").map(|sym| *sym);
        let cudaMemset3D = __library.get(b"cudaMemset3D\0").map(|sym| *sym);
        let cudaMemsetAsync = __library.get(b"cudaMemsetAsync\0").map(|sym| *sym);
        let cudaMemset2DAsync = __library.get(b"cudaMemset2DAsync\0").map(|sym| *sym);
        let cudaMemset3DAsync = __library.get(b"cudaMemset3DAsync\0").map(|sym| *sym);
        let cudaGetSymbolAddress = __library.get(b"cudaGetSymbolAddress\0").map(|sym| *sym);
        let cudaGetSymbolSize = __library.get(b"cudaGetSymbolSize\0").map(|sym| *sym);
        let cudaMemPrefetchAsync = __library.get(b"cudaMemPrefetchAsync\0").map(|sym| *sym);
        let cudaMemPrefetchAsync_v2 = __library.get(b"cudaMemPrefetchAsync_v2\0").map(|sym| *sym);
        let cudaMemAdvise = __library.get(b"cudaMemAdvise\0").map(|sym| *sym);
        let cudaMemAdvise_v2 = __library.get(b"cudaMemAdvise_v2\0").map(|sym| *sym);
        let cudaMemRangeGetAttribute = __library.get(b"cudaMemRangeGetAttribute\0").map(|sym| *sym);
        let cudaMemRangeGetAttributes = __library
            .get(b"cudaMemRangeGetAttributes\0")
            .map(|sym| *sym);
        let cudaMemcpyToArray = __library.get(b"cudaMemcpyToArray\0").map(|sym| *sym);
        let cudaMemcpyFromArray = __library.get(b"cudaMemcpyFromArray\0").map(|sym| *sym);
        let cudaMemcpyArrayToArray = __library.get(b"cudaMemcpyArrayToArray\0").map(|sym| *sym);
        let cudaMemcpyToArrayAsync = __library.get(b"cudaMemcpyToArrayAsync\0").map(|sym| *sym);
        let cudaMemcpyFromArrayAsync = __library.get(b"cudaMemcpyFromArrayAsync\0").map(|sym| *sym);
        let cudaMallocAsync = __library.get(b"cudaMallocAsync\0").map(|sym| *sym);
        let cudaFreeAsync = __library.get(b"cudaFreeAsync\0").map(|sym| *sym);
        let cudaMemPoolTrimTo = __library.get(b"cudaMemPoolTrimTo\0").map(|sym| *sym);
        let cudaMemPoolSetAttribute = __library.get(b"cudaMemPoolSetAttribute\0").map(|sym| *sym);
        let cudaMemPoolGetAttribute = __library.get(b"cudaMemPoolGetAttribute\0").map(|sym| *sym);
        let cudaMemPoolSetAccess = __library.get(b"cudaMemPoolSetAccess\0").map(|sym| *sym);
        let cudaMemPoolGetAccess = __library.get(b"cudaMemPoolGetAccess\0").map(|sym| *sym);
        let cudaMemPoolCreate = __library.get(b"cudaMemPoolCreate\0").map(|sym| *sym);
        let cudaMemPoolDestroy = __library.get(b"cudaMemPoolDestroy\0").map(|sym| *sym);
        let cudaMallocFromPoolAsync = __library.get(b"cudaMallocFromPoolAsync\0").map(|sym| *sym);
        let cudaMemPoolExportToShareableHandle = __library
            .get(b"cudaMemPoolExportToShareableHandle\0")
            .map(|sym| *sym);
        let cudaMemPoolImportFromShareableHandle = __library
            .get(b"cudaMemPoolImportFromShareableHandle\0")
            .map(|sym| *sym);
        let cudaMemPoolExportPointer = __library.get(b"cudaMemPoolExportPointer\0").map(|sym| *sym);
        let cudaMemPoolImportPointer = __library.get(b"cudaMemPoolImportPointer\0").map(|sym| *sym);
        let cudaPointerGetAttributes = __library.get(b"cudaPointerGetAttributes\0").map(|sym| *sym);
        let cudaDeviceCanAccessPeer = __library.get(b"cudaDeviceCanAccessPeer\0").map(|sym| *sym);
        let cudaDeviceEnablePeerAccess = __library
            .get(b"cudaDeviceEnablePeerAccess\0")
            .map(|sym| *sym);
        let cudaDeviceDisablePeerAccess = __library
            .get(b"cudaDeviceDisablePeerAccess\0")
            .map(|sym| *sym);
        let cudaGraphicsUnregisterResource = __library
            .get(b"cudaGraphicsUnregisterResource\0")
            .map(|sym| *sym);
        let cudaGraphicsResourceSetMapFlags = __library
            .get(b"cudaGraphicsResourceSetMapFlags\0")
            .map(|sym| *sym);
        let cudaGraphicsMapResources = __library.get(b"cudaGraphicsMapResources\0").map(|sym| *sym);
        let cudaGraphicsUnmapResources = __library
            .get(b"cudaGraphicsUnmapResources\0")
            .map(|sym| *sym);
        let cudaGraphicsResourceGetMappedPointer = __library
            .get(b"cudaGraphicsResourceGetMappedPointer\0")
            .map(|sym| *sym);
        let cudaGraphicsSubResourceGetMappedArray = __library
            .get(b"cudaGraphicsSubResourceGetMappedArray\0")
            .map(|sym| *sym);
        let cudaGraphicsResourceGetMappedMipmappedArray = __library
            .get(b"cudaGraphicsResourceGetMappedMipmappedArray\0")
            .map(|sym| *sym);
        let cudaGetChannelDesc = __library.get(b"cudaGetChannelDesc\0").map(|sym| *sym);
        let cudaCreateChannelDesc = __library.get(b"cudaCreateChannelDesc\0").map(|sym| *sym);
        let cudaCreateTextureObject = __library.get(b"cudaCreateTextureObject\0").map(|sym| *sym);
        let cudaDestroyTextureObject = __library.get(b"cudaDestroyTextureObject\0").map(|sym| *sym);
        let cudaGetTextureObjectResourceDesc = __library
            .get(b"cudaGetTextureObjectResourceDesc\0")
            .map(|sym| *sym);
        let cudaGetTextureObjectTextureDesc = __library
            .get(b"cudaGetTextureObjectTextureDesc\0")
            .map(|sym| *sym);
        let cudaGetTextureObjectResourceViewDesc = __library
            .get(b"cudaGetTextureObjectResourceViewDesc\0")
            .map(|sym| *sym);
        let cudaCreateSurfaceObject = __library.get(b"cudaCreateSurfaceObject\0").map(|sym| *sym);
        let cudaDestroySurfaceObject = __library.get(b"cudaDestroySurfaceObject\0").map(|sym| *sym);
        let cudaGetSurfaceObjectResourceDesc = __library
            .get(b"cudaGetSurfaceObjectResourceDesc\0")
            .map(|sym| *sym);
        let cudaDriverGetVersion = __library.get(b"cudaDriverGetVersion\0").map(|sym| *sym);
        let cudaRuntimeGetVersion = __library.get(b"cudaRuntimeGetVersion\0").map(|sym| *sym);
        let cudaGraphCreate = __library.get(b"cudaGraphCreate\0").map(|sym| *sym);
        let cudaGraphAddKernelNode = __library.get(b"cudaGraphAddKernelNode\0").map(|sym| *sym);
        let cudaGraphKernelNodeGetParams = __library
            .get(b"cudaGraphKernelNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeSetParams = __library
            .get(b"cudaGraphKernelNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeCopyAttributes = __library
            .get(b"cudaGraphKernelNodeCopyAttributes\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeGetAttribute = __library
            .get(b"cudaGraphKernelNodeGetAttribute\0")
            .map(|sym| *sym);
        let cudaGraphKernelNodeSetAttribute = __library
            .get(b"cudaGraphKernelNodeSetAttribute\0")
            .map(|sym| *sym);
        let cudaGraphAddMemcpyNode = __library.get(b"cudaGraphAddMemcpyNode\0").map(|sym| *sym);
        let cudaGraphAddMemcpyNodeToSymbol = __library
            .get(b"cudaGraphAddMemcpyNodeToSymbol\0")
            .map(|sym| *sym);
        let cudaGraphAddMemcpyNodeFromSymbol = __library
            .get(b"cudaGraphAddMemcpyNodeFromSymbol\0")
            .map(|sym| *sym);
        let cudaGraphAddMemcpyNode1D = __library.get(b"cudaGraphAddMemcpyNode1D\0").map(|sym| *sym);
        let cudaGraphMemcpyNodeGetParams = __library
            .get(b"cudaGraphMemcpyNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParams = __library
            .get(b"cudaGraphMemcpyNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParamsToSymbol = __library
            .get(b"cudaGraphMemcpyNodeSetParamsToSymbol\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParamsFromSymbol = __library
            .get(b"cudaGraphMemcpyNodeSetParamsFromSymbol\0")
            .map(|sym| *sym);
        let cudaGraphMemcpyNodeSetParams1D = __library
            .get(b"cudaGraphMemcpyNodeSetParams1D\0")
            .map(|sym| *sym);
        let cudaGraphAddMemsetNode = __library.get(b"cudaGraphAddMemsetNode\0").map(|sym| *sym);
        let cudaGraphMemsetNodeGetParams = __library
            .get(b"cudaGraphMemsetNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphMemsetNodeSetParams = __library
            .get(b"cudaGraphMemsetNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddHostNode = __library.get(b"cudaGraphAddHostNode\0").map(|sym| *sym);
        let cudaGraphHostNodeGetParams = __library
            .get(b"cudaGraphHostNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphHostNodeSetParams = __library
            .get(b"cudaGraphHostNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddChildGraphNode = __library
            .get(b"cudaGraphAddChildGraphNode\0")
            .map(|sym| *sym);
        let cudaGraphChildGraphNodeGetGraph = __library
            .get(b"cudaGraphChildGraphNodeGetGraph\0")
            .map(|sym| *sym);
        let cudaGraphAddEmptyNode = __library.get(b"cudaGraphAddEmptyNode\0").map(|sym| *sym);
        let cudaGraphAddEventRecordNode = __library
            .get(b"cudaGraphAddEventRecordNode\0")
            .map(|sym| *sym);
        let cudaGraphEventRecordNodeGetEvent = __library
            .get(b"cudaGraphEventRecordNodeGetEvent\0")
            .map(|sym| *sym);
        let cudaGraphEventRecordNodeSetEvent = __library
            .get(b"cudaGraphEventRecordNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphAddEventWaitNode = __library
            .get(b"cudaGraphAddEventWaitNode\0")
            .map(|sym| *sym);
        let cudaGraphEventWaitNodeGetEvent = __library
            .get(b"cudaGraphEventWaitNodeGetEvent\0")
            .map(|sym| *sym);
        let cudaGraphEventWaitNodeSetEvent = __library
            .get(b"cudaGraphEventWaitNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphAddExternalSemaphoresSignalNode = __library
            .get(b"cudaGraphAddExternalSemaphoresSignalNode\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresSignalNodeGetParams = __library
            .get(b"cudaGraphExternalSemaphoresSignalNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresSignalNodeSetParams = __library
            .get(b"cudaGraphExternalSemaphoresSignalNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddExternalSemaphoresWaitNode = __library
            .get(b"cudaGraphAddExternalSemaphoresWaitNode\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresWaitNodeGetParams = __library
            .get(b"cudaGraphExternalSemaphoresWaitNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphExternalSemaphoresWaitNodeSetParams = __library
            .get(b"cudaGraphExternalSemaphoresWaitNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddMemAllocNode = __library.get(b"cudaGraphAddMemAllocNode\0").map(|sym| *sym);
        let cudaGraphMemAllocNodeGetParams = __library
            .get(b"cudaGraphMemAllocNodeGetParams\0")
            .map(|sym| *sym);
        let cudaGraphAddMemFreeNode = __library.get(b"cudaGraphAddMemFreeNode\0").map(|sym| *sym);
        let cudaGraphMemFreeNodeGetParams = __library
            .get(b"cudaGraphMemFreeNodeGetParams\0")
            .map(|sym| *sym);
        let cudaDeviceGraphMemTrim = __library.get(b"cudaDeviceGraphMemTrim\0").map(|sym| *sym);
        let cudaDeviceGetGraphMemAttribute = __library
            .get(b"cudaDeviceGetGraphMemAttribute\0")
            .map(|sym| *sym);
        let cudaDeviceSetGraphMemAttribute = __library
            .get(b"cudaDeviceSetGraphMemAttribute\0")
            .map(|sym| *sym);
        let cudaGraphClone = __library.get(b"cudaGraphClone\0").map(|sym| *sym);
        let cudaGraphNodeFindInClone = __library.get(b"cudaGraphNodeFindInClone\0").map(|sym| *sym);
        let cudaGraphNodeGetType = __library.get(b"cudaGraphNodeGetType\0").map(|sym| *sym);
        let cudaGraphGetNodes = __library.get(b"cudaGraphGetNodes\0").map(|sym| *sym);
        let cudaGraphGetRootNodes = __library.get(b"cudaGraphGetRootNodes\0").map(|sym| *sym);
        let cudaGraphGetEdges = __library.get(b"cudaGraphGetEdges\0").map(|sym| *sym);
        let cudaGraphGetEdges_v2 = __library.get(b"cudaGraphGetEdges_v2\0").map(|sym| *sym);
        let cudaGraphNodeGetDependencies = __library
            .get(b"cudaGraphNodeGetDependencies\0")
            .map(|sym| *sym);
        let cudaGraphNodeGetDependencies_v2 = __library
            .get(b"cudaGraphNodeGetDependencies_v2\0")
            .map(|sym| *sym);
        let cudaGraphNodeGetDependentNodes = __library
            .get(b"cudaGraphNodeGetDependentNodes\0")
            .map(|sym| *sym);
        let cudaGraphNodeGetDependentNodes_v2 = __library
            .get(b"cudaGraphNodeGetDependentNodes_v2\0")
            .map(|sym| *sym);
        let cudaGraphAddDependencies = __library.get(b"cudaGraphAddDependencies\0").map(|sym| *sym);
        let cudaGraphAddDependencies_v2 = __library
            .get(b"cudaGraphAddDependencies_v2\0")
            .map(|sym| *sym);
        let cudaGraphRemoveDependencies = __library
            .get(b"cudaGraphRemoveDependencies\0")
            .map(|sym| *sym);
        let cudaGraphRemoveDependencies_v2 = __library
            .get(b"cudaGraphRemoveDependencies_v2\0")
            .map(|sym| *sym);
        let cudaGraphDestroyNode = __library.get(b"cudaGraphDestroyNode\0").map(|sym| *sym);
        let cudaGraphInstantiate = __library.get(b"cudaGraphInstantiate\0").map(|sym| *sym);
        let cudaGraphInstantiateWithFlags = __library
            .get(b"cudaGraphInstantiateWithFlags\0")
            .map(|sym| *sym);
        let cudaGraphInstantiateWithParams = __library
            .get(b"cudaGraphInstantiateWithParams\0")
            .map(|sym| *sym);
        let cudaGraphExecGetFlags = __library.get(b"cudaGraphExecGetFlags\0").map(|sym| *sym);
        let cudaGraphExecKernelNodeSetParams = __library
            .get(b"cudaGraphExecKernelNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParams = __library
            .get(b"cudaGraphExecMemcpyNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParamsToSymbol = __library
            .get(b"cudaGraphExecMemcpyNodeSetParamsToSymbol\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParamsFromSymbol = __library
            .get(b"cudaGraphExecMemcpyNodeSetParamsFromSymbol\0")
            .map(|sym| *sym);
        let cudaGraphExecMemcpyNodeSetParams1D = __library
            .get(b"cudaGraphExecMemcpyNodeSetParams1D\0")
            .map(|sym| *sym);
        let cudaGraphExecMemsetNodeSetParams = __library
            .get(b"cudaGraphExecMemsetNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecHostNodeSetParams = __library
            .get(b"cudaGraphExecHostNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecChildGraphNodeSetParams = __library
            .get(b"cudaGraphExecChildGraphNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecEventRecordNodeSetEvent = __library
            .get(b"cudaGraphExecEventRecordNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphExecEventWaitNodeSetEvent = __library
            .get(b"cudaGraphExecEventWaitNodeSetEvent\0")
            .map(|sym| *sym);
        let cudaGraphExecExternalSemaphoresSignalNodeSetParams = __library
            .get(b"cudaGraphExecExternalSemaphoresSignalNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphExecExternalSemaphoresWaitNodeSetParams = __library
            .get(b"cudaGraphExecExternalSemaphoresWaitNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphNodeSetEnabled = __library.get(b"cudaGraphNodeSetEnabled\0").map(|sym| *sym);
        let cudaGraphNodeGetEnabled = __library.get(b"cudaGraphNodeGetEnabled\0").map(|sym| *sym);
        let cudaGraphExecUpdate = __library.get(b"cudaGraphExecUpdate\0").map(|sym| *sym);
        let cudaGraphUpload = __library.get(b"cudaGraphUpload\0").map(|sym| *sym);
        let cudaGraphLaunch = __library.get(b"cudaGraphLaunch\0").map(|sym| *sym);
        let cudaGraphExecDestroy = __library.get(b"cudaGraphExecDestroy\0").map(|sym| *sym);
        let cudaGraphDestroy = __library.get(b"cudaGraphDestroy\0").map(|sym| *sym);
        let cudaGraphDebugDotPrint = __library.get(b"cudaGraphDebugDotPrint\0").map(|sym| *sym);
        let cudaUserObjectCreate = __library.get(b"cudaUserObjectCreate\0").map(|sym| *sym);
        let cudaUserObjectRetain = __library.get(b"cudaUserObjectRetain\0").map(|sym| *sym);
        let cudaUserObjectRelease = __library.get(b"cudaUserObjectRelease\0").map(|sym| *sym);
        let cudaGraphRetainUserObject = __library
            .get(b"cudaGraphRetainUserObject\0")
            .map(|sym| *sym);
        let cudaGraphReleaseUserObject = __library
            .get(b"cudaGraphReleaseUserObject\0")
            .map(|sym| *sym);
        let cudaGraphAddNode = __library.get(b"cudaGraphAddNode\0").map(|sym| *sym);
        let cudaGraphAddNode_v2 = __library.get(b"cudaGraphAddNode_v2\0").map(|sym| *sym);
        let cudaGraphNodeSetParams = __library.get(b"cudaGraphNodeSetParams\0").map(|sym| *sym);
        let cudaGraphExecNodeSetParams = __library
            .get(b"cudaGraphExecNodeSetParams\0")
            .map(|sym| *sym);
        let cudaGraphConditionalHandleCreate = __library
            .get(b"cudaGraphConditionalHandleCreate\0")
            .map(|sym| *sym);
        let cudaGetDriverEntryPoint = __library.get(b"cudaGetDriverEntryPoint\0").map(|sym| *sym);
        let cudaGetDriverEntryPointByVersion = __library
            .get(b"cudaGetDriverEntryPointByVersion\0")
            .map(|sym| *sym);
        let cudaLibraryLoadData = __library.get(b"cudaLibraryLoadData\0").map(|sym| *sym);
        let cudaLibraryLoadFromFile = __library.get(b"cudaLibraryLoadFromFile\0").map(|sym| *sym);
        let cudaLibraryUnload = __library.get(b"cudaLibraryUnload\0").map(|sym| *sym);
        let cudaLibraryGetKernel = __library.get(b"cudaLibraryGetKernel\0").map(|sym| *sym);
        let cudaLibraryGetGlobal = __library.get(b"cudaLibraryGetGlobal\0").map(|sym| *sym);
        let cudaLibraryGetManaged = __library.get(b"cudaLibraryGetManaged\0").map(|sym| *sym);
        let cudaLibraryGetUnifiedFunction = __library
            .get(b"cudaLibraryGetUnifiedFunction\0")
            .map(|sym| *sym);
        let cudaLibraryGetKernelCount = __library
            .get(b"cudaLibraryGetKernelCount\0")
            .map(|sym| *sym);
        let cudaLibraryEnumerateKernels = __library
            .get(b"cudaLibraryEnumerateKernels\0")
            .map(|sym| *sym);
        let cudaKernelSetAttributeForDevice = __library
            .get(b"cudaKernelSetAttributeForDevice\0")
            .map(|sym| *sym);
        let cudaGetExportTable = __library.get(b"cudaGetExportTable\0").map(|sym| *sym);
        let cudaGetFuncBySymbol = __library.get(b"cudaGetFuncBySymbol\0").map(|sym| *sym);
        let cudaGetKernel = __library.get(b"cudaGetKernel\0").map(|sym| *sym);
        let cudaProfilerStart = __library.get(b"cudaProfilerStart\0").map(|sym| *sym);
        let cudaProfilerStop = __library.get(b"cudaProfilerStop\0").map(|sym| *sym);
        Ok(Lib {
            __library,
            cudaDeviceReset,
            cudaDeviceSynchronize,
            cudaDeviceSetLimit,
            cudaDeviceGetLimit,
            cudaDeviceGetTexture1DLinearMaxWidth,
            cudaDeviceGetCacheConfig,
            cudaDeviceGetStreamPriorityRange,
            cudaDeviceSetCacheConfig,
            cudaDeviceGetByPCIBusId,
            cudaDeviceGetPCIBusId,
            cudaIpcGetEventHandle,
            cudaIpcOpenEventHandle,
            cudaIpcGetMemHandle,
            cudaIpcOpenMemHandle,
            cudaIpcCloseMemHandle,
            cudaDeviceFlushGPUDirectRDMAWrites,
            cudaDeviceRegisterAsyncNotification,
            cudaDeviceUnregisterAsyncNotification,
            cudaDeviceGetSharedMemConfig,
            cudaDeviceSetSharedMemConfig,
            cudaThreadExit,
            cudaThreadSynchronize,
            cudaThreadSetLimit,
            cudaThreadGetLimit,
            cudaThreadGetCacheConfig,
            cudaThreadSetCacheConfig,
            cudaGetLastError,
            cudaPeekAtLastError,
            cudaGetErrorName,
            cudaGetErrorString,
            cudaGetDeviceCount,
            cudaGetDeviceProperties_v2,
            cudaDeviceGetAttribute,
            cudaDeviceGetDefaultMemPool,
            cudaDeviceSetMemPool,
            cudaDeviceGetMemPool,
            cudaDeviceGetNvSciSyncAttributes,
            cudaDeviceGetP2PAttribute,
            cudaChooseDevice,
            cudaInitDevice,
            cudaSetDevice,
            cudaGetDevice,
            cudaSetValidDevices,
            cudaSetDeviceFlags,
            cudaGetDeviceFlags,
            cudaStreamCreate,
            cudaStreamCreateWithFlags,
            cudaStreamCreateWithPriority,
            cudaStreamGetPriority,
            cudaStreamGetFlags,
            cudaStreamGetId,
            cudaStreamGetDevice,
            cudaCtxResetPersistingL2Cache,
            cudaStreamCopyAttributes,
            cudaStreamGetAttribute,
            cudaStreamSetAttribute,
            cudaStreamDestroy,
            cudaStreamWaitEvent,
            cudaStreamAddCallback,
            cudaStreamSynchronize,
            cudaStreamQuery,
            cudaStreamAttachMemAsync,
            cudaStreamBeginCapture,
            cudaStreamBeginCaptureToGraph,
            cudaThreadExchangeStreamCaptureMode,
            cudaStreamEndCapture,
            cudaStreamIsCapturing,
            cudaStreamGetCaptureInfo_v2,
            cudaStreamGetCaptureInfo_v3,
            cudaStreamUpdateCaptureDependencies,
            cudaStreamUpdateCaptureDependencies_v2,
            cudaEventCreate,
            cudaEventCreateWithFlags,
            cudaEventRecord,
            cudaEventRecordWithFlags,
            cudaEventQuery,
            cudaEventSynchronize,
            cudaEventDestroy,
            cudaEventElapsedTime,
            cudaEventElapsedTime_v2,
            cudaImportExternalMemory,
            cudaExternalMemoryGetMappedBuffer,
            cudaExternalMemoryGetMappedMipmappedArray,
            cudaDestroyExternalMemory,
            cudaImportExternalSemaphore,
            cudaSignalExternalSemaphoresAsync_v2,
            cudaWaitExternalSemaphoresAsync_v2,
            cudaDestroyExternalSemaphore,
            cudaLaunchKernel,
            cudaLaunchKernelExC,
            cudaLaunchCooperativeKernel,
            cudaLaunchCooperativeKernelMultiDevice,
            cudaFuncSetCacheConfig,
            cudaFuncGetAttributes,
            cudaFuncSetAttribute,
            cudaFuncGetName,
            cudaFuncGetParamInfo,
            cudaSetDoubleForDevice,
            cudaSetDoubleForHost,
            cudaLaunchHostFunc,
            cudaFuncSetSharedMemConfig,
            cudaOccupancyMaxActiveBlocksPerMultiprocessor,
            cudaOccupancyAvailableDynamicSMemPerBlock,
            cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags,
            cudaOccupancyMaxPotentialClusterSize,
            cudaOccupancyMaxActiveClusters,
            cudaMallocManaged,
            cudaMalloc,
            cudaMallocHost,
            cudaMallocPitch,
            cudaMallocArray,
            cudaFree,
            cudaFreeHost,
            cudaFreeArray,
            cudaFreeMipmappedArray,
            cudaHostAlloc,
            cudaHostRegister,
            cudaHostUnregister,
            cudaHostGetDevicePointer,
            cudaHostGetFlags,
            cudaMalloc3D,
            cudaMalloc3DArray,
            cudaMallocMipmappedArray,
            cudaGetMipmappedArrayLevel,
            cudaMemcpy3D,
            cudaMemcpy3DPeer,
            cudaMemcpy3DAsync,
            cudaMemcpy3DPeerAsync,
            cudaMemGetInfo,
            cudaArrayGetInfo,
            cudaArrayGetPlane,
            cudaArrayGetMemoryRequirements,
            cudaMipmappedArrayGetMemoryRequirements,
            cudaArrayGetSparseProperties,
            cudaMipmappedArrayGetSparseProperties,
            cudaMemcpy,
            cudaMemcpyPeer,
            cudaMemcpy2D,
            cudaMemcpy2DToArray,
            cudaMemcpy2DFromArray,
            cudaMemcpy2DArrayToArray,
            cudaMemcpyToSymbol,
            cudaMemcpyFromSymbol,
            cudaMemcpyAsync,
            cudaMemcpyPeerAsync,
            cudaMemcpyBatchAsync,
            cudaMemcpy3DBatchAsync,
            cudaMemcpy2DAsync,
            cudaMemcpy2DToArrayAsync,
            cudaMemcpy2DFromArrayAsync,
            cudaMemcpyToSymbolAsync,
            cudaMemcpyFromSymbolAsync,
            cudaMemset,
            cudaMemset2D,
            cudaMemset3D,
            cudaMemsetAsync,
            cudaMemset2DAsync,
            cudaMemset3DAsync,
            cudaGetSymbolAddress,
            cudaGetSymbolSize,
            cudaMemPrefetchAsync,
            cudaMemPrefetchAsync_v2,
            cudaMemAdvise,
            cudaMemAdvise_v2,
            cudaMemRangeGetAttribute,
            cudaMemRangeGetAttributes,
            cudaMemcpyToArray,
            cudaMemcpyFromArray,
            cudaMemcpyArrayToArray,
            cudaMemcpyToArrayAsync,
            cudaMemcpyFromArrayAsync,
            cudaMallocAsync,
            cudaFreeAsync,
            cudaMemPoolTrimTo,
            cudaMemPoolSetAttribute,
            cudaMemPoolGetAttribute,
            cudaMemPoolSetAccess,
            cudaMemPoolGetAccess,
            cudaMemPoolCreate,
            cudaMemPoolDestroy,
            cudaMallocFromPoolAsync,
            cudaMemPoolExportToShareableHandle,
            cudaMemPoolImportFromShareableHandle,
            cudaMemPoolExportPointer,
            cudaMemPoolImportPointer,
            cudaPointerGetAttributes,
            cudaDeviceCanAccessPeer,
            cudaDeviceEnablePeerAccess,
            cudaDeviceDisablePeerAccess,
            cudaGraphicsUnregisterResource,
            cudaGraphicsResourceSetMapFlags,
            cudaGraphicsMapResources,
            cudaGraphicsUnmapResources,
            cudaGraphicsResourceGetMappedPointer,
            cudaGraphicsSubResourceGetMappedArray,
            cudaGraphicsResourceGetMappedMipmappedArray,
            cudaGetChannelDesc,
            cudaCreateChannelDesc,
            cudaCreateTextureObject,
            cudaDestroyTextureObject,
            cudaGetTextureObjectResourceDesc,
            cudaGetTextureObjectTextureDesc,
            cudaGetTextureObjectResourceViewDesc,
            cudaCreateSurfaceObject,
            cudaDestroySurfaceObject,
            cudaGetSurfaceObjectResourceDesc,
            cudaDriverGetVersion,
            cudaRuntimeGetVersion,
            cudaGraphCreate,
            cudaGraphAddKernelNode,
            cudaGraphKernelNodeGetParams,
            cudaGraphKernelNodeSetParams,
            cudaGraphKernelNodeCopyAttributes,
            cudaGraphKernelNodeGetAttribute,
            cudaGraphKernelNodeSetAttribute,
            cudaGraphAddMemcpyNode,
            cudaGraphAddMemcpyNodeToSymbol,
            cudaGraphAddMemcpyNodeFromSymbol,
            cudaGraphAddMemcpyNode1D,
            cudaGraphMemcpyNodeGetParams,
            cudaGraphMemcpyNodeSetParams,
            cudaGraphMemcpyNodeSetParamsToSymbol,
            cudaGraphMemcpyNodeSetParamsFromSymbol,
            cudaGraphMemcpyNodeSetParams1D,
            cudaGraphAddMemsetNode,
            cudaGraphMemsetNodeGetParams,
            cudaGraphMemsetNodeSetParams,
            cudaGraphAddHostNode,
            cudaGraphHostNodeGetParams,
            cudaGraphHostNodeSetParams,
            cudaGraphAddChildGraphNode,
            cudaGraphChildGraphNodeGetGraph,
            cudaGraphAddEmptyNode,
            cudaGraphAddEventRecordNode,
            cudaGraphEventRecordNodeGetEvent,
            cudaGraphEventRecordNodeSetEvent,
            cudaGraphAddEventWaitNode,
            cudaGraphEventWaitNodeGetEvent,
            cudaGraphEventWaitNodeSetEvent,
            cudaGraphAddExternalSemaphoresSignalNode,
            cudaGraphExternalSemaphoresSignalNodeGetParams,
            cudaGraphExternalSemaphoresSignalNodeSetParams,
            cudaGraphAddExternalSemaphoresWaitNode,
            cudaGraphExternalSemaphoresWaitNodeGetParams,
            cudaGraphExternalSemaphoresWaitNodeSetParams,
            cudaGraphAddMemAllocNode,
            cudaGraphMemAllocNodeGetParams,
            cudaGraphAddMemFreeNode,
            cudaGraphMemFreeNodeGetParams,
            cudaDeviceGraphMemTrim,
            cudaDeviceGetGraphMemAttribute,
            cudaDeviceSetGraphMemAttribute,
            cudaGraphClone,
            cudaGraphNodeFindInClone,
            cudaGraphNodeGetType,
            cudaGraphGetNodes,
            cudaGraphGetRootNodes,
            cudaGraphGetEdges,
            cudaGraphGetEdges_v2,
            cudaGraphNodeGetDependencies,
            cudaGraphNodeGetDependencies_v2,
            cudaGraphNodeGetDependentNodes,
            cudaGraphNodeGetDependentNodes_v2,
            cudaGraphAddDependencies,
            cudaGraphAddDependencies_v2,
            cudaGraphRemoveDependencies,
            cudaGraphRemoveDependencies_v2,
            cudaGraphDestroyNode,
            cudaGraphInstantiate,
            cudaGraphInstantiateWithFlags,
            cudaGraphInstantiateWithParams,
            cudaGraphExecGetFlags,
            cudaGraphExecKernelNodeSetParams,
            cudaGraphExecMemcpyNodeSetParams,
            cudaGraphExecMemcpyNodeSetParamsToSymbol,
            cudaGraphExecMemcpyNodeSetParamsFromSymbol,
            cudaGraphExecMemcpyNodeSetParams1D,
            cudaGraphExecMemsetNodeSetParams,
            cudaGraphExecHostNodeSetParams,
            cudaGraphExecChildGraphNodeSetParams,
            cudaGraphExecEventRecordNodeSetEvent,
            cudaGraphExecEventWaitNodeSetEvent,
            cudaGraphExecExternalSemaphoresSignalNodeSetParams,
            cudaGraphExecExternalSemaphoresWaitNodeSetParams,
            cudaGraphNodeSetEnabled,
            cudaGraphNodeGetEnabled,
            cudaGraphExecUpdate,
            cudaGraphUpload,
            cudaGraphLaunch,
            cudaGraphExecDestroy,
            cudaGraphDestroy,
            cudaGraphDebugDotPrint,
            cudaUserObjectCreate,
            cudaUserObjectRetain,
            cudaUserObjectRelease,
            cudaGraphRetainUserObject,
            cudaGraphReleaseUserObject,
            cudaGraphAddNode,
            cudaGraphAddNode_v2,
            cudaGraphNodeSetParams,
            cudaGraphExecNodeSetParams,
            cudaGraphConditionalHandleCreate,
            cudaGetDriverEntryPoint,
            cudaGetDriverEntryPointByVersion,
            cudaLibraryLoadData,
            cudaLibraryLoadFromFile,
            cudaLibraryUnload,
            cudaLibraryGetKernel,
            cudaLibraryGetGlobal,
            cudaLibraryGetManaged,
            cudaLibraryGetUnifiedFunction,
            cudaLibraryGetKernelCount,
            cudaLibraryEnumerateKernels,
            cudaKernelSetAttributeForDevice,
            cudaGetExportTable,
            cudaGetFuncBySymbol,
            cudaGetKernel,
            cudaProfilerStart,
            cudaProfilerStop,
        })
    }
    pub unsafe fn cudaDeviceReset(&self) -> cudaError_t {
        (self
            .cudaDeviceReset
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaDeviceSynchronize(&self) -> cudaError_t {
        (self
            .cudaDeviceSynchronize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaDeviceSetLimit(&self, limit: cudaLimit, value: usize) -> cudaError_t {
        (self
            .cudaDeviceSetLimit
            .as_ref()
            .expect("Expected function, got error."))(limit, value)
    }
    pub unsafe fn cudaDeviceGetLimit(&self, pValue: *mut usize, limit: cudaLimit) -> cudaError_t {
        (self
            .cudaDeviceGetLimit
            .as_ref()
            .expect("Expected function, got error."))(pValue, limit)
    }
    pub unsafe fn cudaDeviceGetTexture1DLinearMaxWidth(
        &self,
        maxWidthInElements: *mut usize,
        fmtDesc: *const cudaChannelFormatDesc,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetTexture1DLinearMaxWidth
            .as_ref()
            .expect("Expected function, got error."))(maxWidthInElements, fmtDesc, device)
    }
    pub unsafe fn cudaDeviceGetCacheConfig(&self, pCacheConfig: *mut cudaFuncCache) -> cudaError_t {
        (self
            .cudaDeviceGetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(pCacheConfig)
    }
    pub unsafe fn cudaDeviceGetStreamPriorityRange(
        &self,
        leastPriority: *mut ::core::ffi::c_int,
        greatestPriority: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetStreamPriorityRange
            .as_ref()
            .expect("Expected function, got error."))(leastPriority, greatestPriority)
    }
    pub unsafe fn cudaDeviceSetCacheConfig(&self, cacheConfig: cudaFuncCache) -> cudaError_t {
        (self
            .cudaDeviceSetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(cacheConfig)
    }
    pub unsafe fn cudaDeviceGetByPCIBusId(
        &self,
        device: *mut ::core::ffi::c_int,
        pciBusId: *const ::core::ffi::c_char,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetByPCIBusId
            .as_ref()
            .expect("Expected function, got error."))(device, pciBusId)
    }
    pub unsafe fn cudaDeviceGetPCIBusId(
        &self,
        pciBusId: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetPCIBusId
            .as_ref()
            .expect("Expected function, got error."))(pciBusId, len, device)
    }
    pub unsafe fn cudaIpcGetEventHandle(
        &self,
        handle: *mut cudaIpcEventHandle_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaIpcGetEventHandle
            .as_ref()
            .expect("Expected function, got error."))(handle, event)
    }
    pub unsafe fn cudaIpcOpenEventHandle(
        &self,
        event: *mut cudaEvent_t,
        handle: cudaIpcEventHandle_t,
    ) -> cudaError_t {
        (self
            .cudaIpcOpenEventHandle
            .as_ref()
            .expect("Expected function, got error."))(event, handle)
    }
    pub unsafe fn cudaIpcGetMemHandle(
        &self,
        handle: *mut cudaIpcMemHandle_t,
        devPtr: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaIpcGetMemHandle
            .as_ref()
            .expect("Expected function, got error."))(handle, devPtr)
    }
    pub unsafe fn cudaIpcOpenMemHandle(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        handle: cudaIpcMemHandle_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaIpcOpenMemHandle
            .as_ref()
            .expect("Expected function, got error."))(devPtr, handle, flags)
    }
    pub unsafe fn cudaIpcCloseMemHandle(&self, devPtr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaIpcCloseMemHandle
            .as_ref()
            .expect("Expected function, got error."))(devPtr)
    }
    pub unsafe fn cudaDeviceFlushGPUDirectRDMAWrites(
        &self,
        target: cudaFlushGPUDirectRDMAWritesTarget,
        scope: cudaFlushGPUDirectRDMAWritesScope,
    ) -> cudaError_t {
        (self
            .cudaDeviceFlushGPUDirectRDMAWrites
            .as_ref()
            .expect("Expected function, got error."))(target, scope)
    }
    pub unsafe fn cudaDeviceRegisterAsyncNotification(
        &self,
        device: ::core::ffi::c_int,
        callbackFunc: cudaAsyncCallback,
        userData: *mut ::core::ffi::c_void,
        callback: *mut cudaAsyncCallbackHandle_t,
    ) -> cudaError_t {
        (self
            .cudaDeviceRegisterAsyncNotification
            .as_ref()
            .expect("Expected function, got error."))(
            device, callbackFunc, userData, callback
        )
    }
    pub unsafe fn cudaDeviceUnregisterAsyncNotification(
        &self,
        device: ::core::ffi::c_int,
        callback: cudaAsyncCallbackHandle_t,
    ) -> cudaError_t {
        (self
            .cudaDeviceUnregisterAsyncNotification
            .as_ref()
            .expect("Expected function, got error."))(device, callback)
    }
    pub unsafe fn cudaDeviceGetSharedMemConfig(
        &self,
        pConfig: *mut cudaSharedMemConfig,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetSharedMemConfig
            .as_ref()
            .expect("Expected function, got error."))(pConfig)
    }
    pub unsafe fn cudaDeviceSetSharedMemConfig(&self, config: cudaSharedMemConfig) -> cudaError_t {
        (self
            .cudaDeviceSetSharedMemConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn cudaThreadExit(&self) -> cudaError_t {
        (self
            .cudaThreadExit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaThreadSynchronize(&self) -> cudaError_t {
        (self
            .cudaThreadSynchronize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaThreadSetLimit(&self, limit: cudaLimit, value: usize) -> cudaError_t {
        (self
            .cudaThreadSetLimit
            .as_ref()
            .expect("Expected function, got error."))(limit, value)
    }
    pub unsafe fn cudaThreadGetLimit(&self, pValue: *mut usize, limit: cudaLimit) -> cudaError_t {
        (self
            .cudaThreadGetLimit
            .as_ref()
            .expect("Expected function, got error."))(pValue, limit)
    }
    pub unsafe fn cudaThreadGetCacheConfig(&self, pCacheConfig: *mut cudaFuncCache) -> cudaError_t {
        (self
            .cudaThreadGetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(pCacheConfig)
    }
    pub unsafe fn cudaThreadSetCacheConfig(&self, cacheConfig: cudaFuncCache) -> cudaError_t {
        (self
            .cudaThreadSetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(cacheConfig)
    }
    pub unsafe fn cudaGetLastError(&self) -> cudaError_t {
        (self
            .cudaGetLastError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaPeekAtLastError(&self) -> cudaError_t {
        (self
            .cudaPeekAtLastError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaGetErrorName(&self, error: cudaError_t) -> *const ::core::ffi::c_char {
        (self
            .cudaGetErrorName
            .as_ref()
            .expect("Expected function, got error."))(error)
    }
    pub unsafe fn cudaGetErrorString(&self, error: cudaError_t) -> *const ::core::ffi::c_char {
        (self
            .cudaGetErrorString
            .as_ref()
            .expect("Expected function, got error."))(error)
    }
    pub unsafe fn cudaGetDeviceCount(&self, count: *mut ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaGetDeviceCount
            .as_ref()
            .expect("Expected function, got error."))(count)
    }
    pub unsafe fn cudaGetDeviceProperties_v2(
        &self,
        prop: *mut cudaDeviceProp,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaGetDeviceProperties_v2
            .as_ref()
            .expect("Expected function, got error."))(prop, device)
    }
    pub unsafe fn cudaDeviceGetAttribute(
        &self,
        value: *mut ::core::ffi::c_int,
        attr: cudaDeviceAttr,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(value, attr, device)
    }
    pub unsafe fn cudaDeviceGetDefaultMemPool(
        &self,
        memPool: *mut cudaMemPool_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetDefaultMemPool
            .as_ref()
            .expect("Expected function, got error."))(memPool, device)
    }
    pub unsafe fn cudaDeviceSetMemPool(
        &self,
        device: ::core::ffi::c_int,
        memPool: cudaMemPool_t,
    ) -> cudaError_t {
        (self
            .cudaDeviceSetMemPool
            .as_ref()
            .expect("Expected function, got error."))(device, memPool)
    }
    pub unsafe fn cudaDeviceGetMemPool(
        &self,
        memPool: *mut cudaMemPool_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetMemPool
            .as_ref()
            .expect("Expected function, got error."))(memPool, device)
    }
    pub unsafe fn cudaDeviceGetNvSciSyncAttributes(
        &self,
        nvSciSyncAttrList: *mut ::core::ffi::c_void,
        device: ::core::ffi::c_int,
        flags: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetNvSciSyncAttributes
            .as_ref()
            .expect("Expected function, got error."))(nvSciSyncAttrList, device, flags)
    }
    pub unsafe fn cudaDeviceGetP2PAttribute(
        &self,
        value: *mut ::core::ffi::c_int,
        attr: cudaDeviceP2PAttr,
        srcDevice: ::core::ffi::c_int,
        dstDevice: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetP2PAttribute
            .as_ref()
            .expect("Expected function, got error."))(value, attr, srcDevice, dstDevice)
    }
    pub unsafe fn cudaChooseDevice(
        &self,
        device: *mut ::core::ffi::c_int,
        prop: *const cudaDeviceProp,
    ) -> cudaError_t {
        (self
            .cudaChooseDevice
            .as_ref()
            .expect("Expected function, got error."))(device, prop)
    }
    pub unsafe fn cudaInitDevice(
        &self,
        device: ::core::ffi::c_int,
        deviceFlags: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaInitDevice
            .as_ref()
            .expect("Expected function, got error."))(device, deviceFlags, flags)
    }
    pub unsafe fn cudaSetDevice(&self, device: ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaSetDevice
            .as_ref()
            .expect("Expected function, got error."))(device)
    }
    pub unsafe fn cudaGetDevice(&self, device: *mut ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaGetDevice
            .as_ref()
            .expect("Expected function, got error."))(device)
    }
    pub unsafe fn cudaSetValidDevices(
        &self,
        device_arr: *mut ::core::ffi::c_int,
        len: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaSetValidDevices
            .as_ref()
            .expect("Expected function, got error."))(device_arr, len)
    }
    pub unsafe fn cudaSetDeviceFlags(&self, flags: ::core::ffi::c_uint) -> cudaError_t {
        (self
            .cudaSetDeviceFlags
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    pub unsafe fn cudaGetDeviceFlags(&self, flags: *mut ::core::ffi::c_uint) -> cudaError_t {
        (self
            .cudaGetDeviceFlags
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    pub unsafe fn cudaStreamCreate(&self, pStream: *mut cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamCreate
            .as_ref()
            .expect("Expected function, got error."))(pStream)
    }
    pub unsafe fn cudaStreamCreateWithFlags(
        &self,
        pStream: *mut cudaStream_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamCreateWithFlags
            .as_ref()
            .expect("Expected function, got error."))(pStream, flags)
    }
    pub unsafe fn cudaStreamCreateWithPriority(
        &self,
        pStream: *mut cudaStream_t,
        flags: ::core::ffi::c_uint,
        priority: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaStreamCreateWithPriority
            .as_ref()
            .expect("Expected function, got error."))(pStream, flags, priority)
    }
    pub unsafe fn cudaStreamGetPriority(
        &self,
        hStream: cudaStream_t,
        priority: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaStreamGetPriority
            .as_ref()
            .expect("Expected function, got error."))(hStream, priority)
    }
    pub unsafe fn cudaStreamGetFlags(
        &self,
        hStream: cudaStream_t,
        flags: *mut ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamGetFlags
            .as_ref()
            .expect("Expected function, got error."))(hStream, flags)
    }
    pub unsafe fn cudaStreamGetId(
        &self,
        hStream: cudaStream_t,
        streamId: *mut ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaStreamGetId
            .as_ref()
            .expect("Expected function, got error."))(hStream, streamId)
    }
    pub unsafe fn cudaStreamGetDevice(
        &self,
        hStream: cudaStream_t,
        device: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaStreamGetDevice
            .as_ref()
            .expect("Expected function, got error."))(hStream, device)
    }
    pub unsafe fn cudaCtxResetPersistingL2Cache(&self) -> cudaError_t {
        (self
            .cudaCtxResetPersistingL2Cache
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaStreamCopyAttributes(
        &self,
        dst: cudaStream_t,
        src: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaStreamCopyAttributes
            .as_ref()
            .expect("Expected function, got error."))(dst, src)
    }
    pub unsafe fn cudaStreamGetAttribute(
        &self,
        hStream: cudaStream_t,
        attr: cudaLaunchAttributeID,
        value_out: *mut cudaLaunchAttributeValue,
    ) -> cudaError_t {
        (self
            .cudaStreamGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hStream, attr, value_out)
    }
    pub unsafe fn cudaStreamSetAttribute(
        &self,
        hStream: cudaStream_t,
        attr: cudaLaunchAttributeID,
        value: *const cudaLaunchAttributeValue,
    ) -> cudaError_t {
        (self
            .cudaStreamSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hStream, attr, value)
    }
    pub unsafe fn cudaStreamDestroy(&self, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamDestroy
            .as_ref()
            .expect("Expected function, got error."))(stream)
    }
    pub unsafe fn cudaStreamWaitEvent(
        &self,
        stream: cudaStream_t,
        event: cudaEvent_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamWaitEvent
            .as_ref()
            .expect("Expected function, got error."))(stream, event, flags)
    }
    pub unsafe fn cudaStreamAddCallback(
        &self,
        stream: cudaStream_t,
        callback: cudaStreamCallback_t,
        userData: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamAddCallback
            .as_ref()
            .expect("Expected function, got error."))(stream, callback, userData, flags)
    }
    pub unsafe fn cudaStreamSynchronize(&self, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamSynchronize
            .as_ref()
            .expect("Expected function, got error."))(stream)
    }
    pub unsafe fn cudaStreamQuery(&self, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaStreamQuery
            .as_ref()
            .expect("Expected function, got error."))(stream)
    }
    pub unsafe fn cudaStreamAttachMemAsync(
        &self,
        stream: cudaStream_t,
        devPtr: *mut ::core::ffi::c_void,
        length: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamAttachMemAsync
            .as_ref()
            .expect("Expected function, got error."))(stream, devPtr, length, flags)
    }
    pub unsafe fn cudaStreamBeginCapture(
        &self,
        stream: cudaStream_t,
        mode: cudaStreamCaptureMode,
    ) -> cudaError_t {
        (self
            .cudaStreamBeginCapture
            .as_ref()
            .expect("Expected function, got error."))(stream, mode)
    }
    pub unsafe fn cudaStreamBeginCaptureToGraph(
        &self,
        stream: cudaStream_t,
        graph: cudaGraph_t,
        dependencies: *const cudaGraphNode_t,
        dependencyData: *const cudaGraphEdgeData,
        numDependencies: usize,
        mode: cudaStreamCaptureMode,
    ) -> cudaError_t {
        (self
            .cudaStreamBeginCaptureToGraph
            .as_ref()
            .expect("Expected function, got error."))(
            stream,
            graph,
            dependencies,
            dependencyData,
            numDependencies,
            mode,
        )
    }
    pub unsafe fn cudaThreadExchangeStreamCaptureMode(
        &self,
        mode: *mut cudaStreamCaptureMode,
    ) -> cudaError_t {
        (self
            .cudaThreadExchangeStreamCaptureMode
            .as_ref()
            .expect("Expected function, got error."))(mode)
    }
    pub unsafe fn cudaStreamEndCapture(
        &self,
        stream: cudaStream_t,
        pGraph: *mut cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaStreamEndCapture
            .as_ref()
            .expect("Expected function, got error."))(stream, pGraph)
    }
    pub unsafe fn cudaStreamIsCapturing(
        &self,
        stream: cudaStream_t,
        pCaptureStatus: *mut cudaStreamCaptureStatus,
    ) -> cudaError_t {
        (self
            .cudaStreamIsCapturing
            .as_ref()
            .expect("Expected function, got error."))(stream, pCaptureStatus)
    }
    pub unsafe fn cudaStreamGetCaptureInfo_v2(
        &self,
        stream: cudaStream_t,
        captureStatus_out: *mut cudaStreamCaptureStatus,
        id_out: *mut ::core::ffi::c_ulonglong,
        graph_out: *mut cudaGraph_t,
        dependencies_out: *mut *const cudaGraphNode_t,
        numDependencies_out: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaStreamGetCaptureInfo_v2
            .as_ref()
            .expect("Expected function, got error."))(
            stream,
            captureStatus_out,
            id_out,
            graph_out,
            dependencies_out,
            numDependencies_out,
        )
    }
    pub unsafe fn cudaStreamGetCaptureInfo_v3(
        &self,
        stream: cudaStream_t,
        captureStatus_out: *mut cudaStreamCaptureStatus,
        id_out: *mut ::core::ffi::c_ulonglong,
        graph_out: *mut cudaGraph_t,
        dependencies_out: *mut *const cudaGraphNode_t,
        edgeData_out: *mut *const cudaGraphEdgeData,
        numDependencies_out: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaStreamGetCaptureInfo_v3
            .as_ref()
            .expect("Expected function, got error."))(
            stream,
            captureStatus_out,
            id_out,
            graph_out,
            dependencies_out,
            edgeData_out,
            numDependencies_out,
        )
    }
    pub unsafe fn cudaStreamUpdateCaptureDependencies(
        &self,
        stream: cudaStream_t,
        dependencies: *mut cudaGraphNode_t,
        numDependencies: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamUpdateCaptureDependencies
            .as_ref()
            .expect("Expected function, got error."))(
            stream, dependencies, numDependencies, flags
        )
    }
    pub unsafe fn cudaStreamUpdateCaptureDependencies_v2(
        &self,
        stream: cudaStream_t,
        dependencies: *mut cudaGraphNode_t,
        dependencyData: *const cudaGraphEdgeData,
        numDependencies: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaStreamUpdateCaptureDependencies_v2
            .as_ref()
            .expect("Expected function, got error."))(
            stream,
            dependencies,
            dependencyData,
            numDependencies,
            flags,
        )
    }
    pub unsafe fn cudaEventCreate(&self, event: *mut cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventCreate
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventCreateWithFlags(
        &self,
        event: *mut cudaEvent_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaEventCreateWithFlags
            .as_ref()
            .expect("Expected function, got error."))(event, flags)
    }
    pub unsafe fn cudaEventRecord(&self, event: cudaEvent_t, stream: cudaStream_t) -> cudaError_t {
        (self
            .cudaEventRecord
            .as_ref()
            .expect("Expected function, got error."))(event, stream)
    }
    pub unsafe fn cudaEventRecordWithFlags(
        &self,
        event: cudaEvent_t,
        stream: cudaStream_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaEventRecordWithFlags
            .as_ref()
            .expect("Expected function, got error."))(event, stream, flags)
    }
    pub unsafe fn cudaEventQuery(&self, event: cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventQuery
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventSynchronize(&self, event: cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventSynchronize
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventDestroy(&self, event: cudaEvent_t) -> cudaError_t {
        (self
            .cudaEventDestroy
            .as_ref()
            .expect("Expected function, got error."))(event)
    }
    pub unsafe fn cudaEventElapsedTime(
        &self,
        ms: *mut f32,
        start: cudaEvent_t,
        end: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaEventElapsedTime
            .as_ref()
            .expect("Expected function, got error."))(ms, start, end)
    }
    pub unsafe fn cudaEventElapsedTime_v2(
        &self,
        ms: *mut f32,
        start: cudaEvent_t,
        end: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaEventElapsedTime_v2
            .as_ref()
            .expect("Expected function, got error."))(ms, start, end)
    }
    pub unsafe fn cudaImportExternalMemory(
        &self,
        extMem_out: *mut cudaExternalMemory_t,
        memHandleDesc: *const cudaExternalMemoryHandleDesc,
    ) -> cudaError_t {
        (self
            .cudaImportExternalMemory
            .as_ref()
            .expect("Expected function, got error."))(extMem_out, memHandleDesc)
    }
    pub unsafe fn cudaExternalMemoryGetMappedBuffer(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        extMem: cudaExternalMemory_t,
        bufferDesc: *const cudaExternalMemoryBufferDesc,
    ) -> cudaError_t {
        (self
            .cudaExternalMemoryGetMappedBuffer
            .as_ref()
            .expect("Expected function, got error."))(devPtr, extMem, bufferDesc)
    }
    pub unsafe fn cudaExternalMemoryGetMappedMipmappedArray(
        &self,
        mipmap: *mut cudaMipmappedArray_t,
        extMem: cudaExternalMemory_t,
        mipmapDesc: *const cudaExternalMemoryMipmappedArrayDesc,
    ) -> cudaError_t {
        (self
            .cudaExternalMemoryGetMappedMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(mipmap, extMem, mipmapDesc)
    }
    pub unsafe fn cudaDestroyExternalMemory(&self, extMem: cudaExternalMemory_t) -> cudaError_t {
        (self
            .cudaDestroyExternalMemory
            .as_ref()
            .expect("Expected function, got error."))(extMem)
    }
    pub unsafe fn cudaImportExternalSemaphore(
        &self,
        extSem_out: *mut cudaExternalSemaphore_t,
        semHandleDesc: *const cudaExternalSemaphoreHandleDesc,
    ) -> cudaError_t {
        (self
            .cudaImportExternalSemaphore
            .as_ref()
            .expect("Expected function, got error."))(extSem_out, semHandleDesc)
    }
    pub unsafe fn cudaSignalExternalSemaphoresAsync_v2(
        &self,
        extSemArray: *const cudaExternalSemaphore_t,
        paramsArray: *const cudaExternalSemaphoreSignalParams,
        numExtSems: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaSignalExternalSemaphoresAsync_v2
            .as_ref()
            .expect("Expected function, got error."))(
            extSemArray, paramsArray, numExtSems, stream
        )
    }
    pub unsafe fn cudaWaitExternalSemaphoresAsync_v2(
        &self,
        extSemArray: *const cudaExternalSemaphore_t,
        paramsArray: *const cudaExternalSemaphoreWaitParams,
        numExtSems: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaWaitExternalSemaphoresAsync_v2
            .as_ref()
            .expect("Expected function, got error."))(
            extSemArray, paramsArray, numExtSems, stream
        )
    }
    pub unsafe fn cudaDestroyExternalSemaphore(
        &self,
        extSem: cudaExternalSemaphore_t,
    ) -> cudaError_t {
        (self
            .cudaDestroyExternalSemaphore
            .as_ref()
            .expect("Expected function, got error."))(extSem)
    }
    pub unsafe fn cudaLaunchKernel(
        &self,
        func: *const ::core::ffi::c_void,
        gridDim: dim3,
        blockDim: dim3,
        args: *mut *mut ::core::ffi::c_void,
        sharedMem: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaLaunchKernel
            .as_ref()
            .expect("Expected function, got error."))(
            func, gridDim, blockDim, args, sharedMem, stream,
        )
    }
    pub unsafe fn cudaLaunchKernelExC(
        &self,
        config: *const cudaLaunchConfig_t,
        func: *const ::core::ffi::c_void,
        args: *mut *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaLaunchKernelExC
            .as_ref()
            .expect("Expected function, got error."))(config, func, args)
    }
    pub unsafe fn cudaLaunchCooperativeKernel(
        &self,
        func: *const ::core::ffi::c_void,
        gridDim: dim3,
        blockDim: dim3,
        args: *mut *mut ::core::ffi::c_void,
        sharedMem: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaLaunchCooperativeKernel
            .as_ref()
            .expect("Expected function, got error."))(
            func, gridDim, blockDim, args, sharedMem, stream,
        )
    }
    pub unsafe fn cudaLaunchCooperativeKernelMultiDevice(
        &self,
        launchParamsList: *mut cudaLaunchParams,
        numDevices: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaLaunchCooperativeKernelMultiDevice
            .as_ref()
            .expect("Expected function, got error."))(launchParamsList, numDevices, flags)
    }
    pub unsafe fn cudaFuncSetCacheConfig(
        &self,
        func: *const ::core::ffi::c_void,
        cacheConfig: cudaFuncCache,
    ) -> cudaError_t {
        (self
            .cudaFuncSetCacheConfig
            .as_ref()
            .expect("Expected function, got error."))(func, cacheConfig)
    }
    pub unsafe fn cudaFuncGetAttributes(
        &self,
        attr: *mut cudaFuncAttributes,
        func: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaFuncGetAttributes
            .as_ref()
            .expect("Expected function, got error."))(attr, func)
    }
    pub unsafe fn cudaFuncSetAttribute(
        &self,
        func: *const ::core::ffi::c_void,
        attr: cudaFuncAttribute,
        value: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaFuncSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(func, attr, value)
    }
    pub unsafe fn cudaFuncGetName(
        &self,
        name: *mut *const ::core::ffi::c_char,
        func: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaFuncGetName
            .as_ref()
            .expect("Expected function, got error."))(name, func)
    }
    pub unsafe fn cudaFuncGetParamInfo(
        &self,
        func: *const ::core::ffi::c_void,
        paramIndex: usize,
        paramOffset: *mut usize,
        paramSize: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaFuncGetParamInfo
            .as_ref()
            .expect("Expected function, got error."))(
            func, paramIndex, paramOffset, paramSize
        )
    }
    pub unsafe fn cudaSetDoubleForDevice(&self, d: *mut f64) -> cudaError_t {
        (self
            .cudaSetDoubleForDevice
            .as_ref()
            .expect("Expected function, got error."))(d)
    }
    pub unsafe fn cudaSetDoubleForHost(&self, d: *mut f64) -> cudaError_t {
        (self
            .cudaSetDoubleForHost
            .as_ref()
            .expect("Expected function, got error."))(d)
    }
    pub unsafe fn cudaLaunchHostFunc(
        &self,
        stream: cudaStream_t,
        fn_: cudaHostFn_t,
        userData: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaLaunchHostFunc
            .as_ref()
            .expect("Expected function, got error."))(stream, fn_, userData)
    }
    pub unsafe fn cudaFuncSetSharedMemConfig(
        &self,
        func: *const ::core::ffi::c_void,
        config: cudaSharedMemConfig,
    ) -> cudaError_t {
        (self
            .cudaFuncSetSharedMemConfig
            .as_ref()
            .expect("Expected function, got error."))(func, config)
    }
    pub unsafe fn cudaOccupancyMaxActiveBlocksPerMultiprocessor(
        &self,
        numBlocks: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        blockSize: ::core::ffi::c_int,
        dynamicSMemSize: usize,
    ) -> cudaError_t {
        (self
            .cudaOccupancyMaxActiveBlocksPerMultiprocessor
            .as_ref()
            .expect("Expected function, got error."))(
            numBlocks, func, blockSize, dynamicSMemSize
        )
    }
    pub unsafe fn cudaOccupancyAvailableDynamicSMemPerBlock(
        &self,
        dynamicSmemSize: *mut usize,
        func: *const ::core::ffi::c_void,
        numBlocks: ::core::ffi::c_int,
        blockSize: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaOccupancyAvailableDynamicSMemPerBlock
            .as_ref()
            .expect("Expected function, got error."))(
            dynamicSmemSize, func, numBlocks, blockSize
        )
    }
    pub unsafe fn cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
        &self,
        numBlocks: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        blockSize: ::core::ffi::c_int,
        dynamicSMemSize: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
            .as_ref()
            .expect("Expected function, got error."))(
            numBlocks,
            func,
            blockSize,
            dynamicSMemSize,
            flags,
        )
    }
    pub unsafe fn cudaOccupancyMaxPotentialClusterSize(
        &self,
        clusterSize: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        launchConfig: *const cudaLaunchConfig_t,
    ) -> cudaError_t {
        (self
            .cudaOccupancyMaxPotentialClusterSize
            .as_ref()
            .expect("Expected function, got error."))(clusterSize, func, launchConfig)
    }
    pub unsafe fn cudaOccupancyMaxActiveClusters(
        &self,
        numClusters: *mut ::core::ffi::c_int,
        func: *const ::core::ffi::c_void,
        launchConfig: *const cudaLaunchConfig_t,
    ) -> cudaError_t {
        (self
            .cudaOccupancyMaxActiveClusters
            .as_ref()
            .expect("Expected function, got error."))(numClusters, func, launchConfig)
    }
    pub unsafe fn cudaMallocManaged(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMallocManaged
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size, flags)
    }
    pub unsafe fn cudaMalloc(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
    ) -> cudaError_t {
        (self
            .cudaMalloc
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size)
    }
    pub unsafe fn cudaMallocHost(
        &self,
        ptr: *mut *mut ::core::ffi::c_void,
        size: usize,
    ) -> cudaError_t {
        (self
            .cudaMallocHost
            .as_ref()
            .expect("Expected function, got error."))(ptr, size)
    }
    pub unsafe fn cudaMallocPitch(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        pitch: *mut usize,
        width: usize,
        height: usize,
    ) -> cudaError_t {
        (self
            .cudaMallocPitch
            .as_ref()
            .expect("Expected function, got error."))(devPtr, pitch, width, height)
    }
    pub unsafe fn cudaMallocArray(
        &self,
        array: *mut cudaArray_t,
        desc: *const cudaChannelFormatDesc,
        width: usize,
        height: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMallocArray
            .as_ref()
            .expect("Expected function, got error."))(array, desc, width, height, flags)
    }
    pub unsafe fn cudaFree(&self, devPtr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaFree
            .as_ref()
            .expect("Expected function, got error."))(devPtr)
    }
    pub unsafe fn cudaFreeHost(&self, ptr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaFreeHost
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn cudaFreeArray(&self, array: cudaArray_t) -> cudaError_t {
        (self
            .cudaFreeArray
            .as_ref()
            .expect("Expected function, got error."))(array)
    }
    pub unsafe fn cudaFreeMipmappedArray(
        &self,
        mipmappedArray: cudaMipmappedArray_t,
    ) -> cudaError_t {
        (self
            .cudaFreeMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(mipmappedArray)
    }
    pub unsafe fn cudaHostAlloc(
        &self,
        pHost: *mut *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaHostAlloc
            .as_ref()
            .expect("Expected function, got error."))(pHost, size, flags)
    }
    pub unsafe fn cudaHostRegister(
        &self,
        ptr: *mut ::core::ffi::c_void,
        size: usize,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaHostRegister
            .as_ref()
            .expect("Expected function, got error."))(ptr, size, flags)
    }
    pub unsafe fn cudaHostUnregister(&self, ptr: *mut ::core::ffi::c_void) -> cudaError_t {
        (self
            .cudaHostUnregister
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn cudaHostGetDevicePointer(
        &self,
        pDevice: *mut *mut ::core::ffi::c_void,
        pHost: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaHostGetDevicePointer
            .as_ref()
            .expect("Expected function, got error."))(pDevice, pHost, flags)
    }
    pub unsafe fn cudaHostGetFlags(
        &self,
        pFlags: *mut ::core::ffi::c_uint,
        pHost: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaHostGetFlags
            .as_ref()
            .expect("Expected function, got error."))(pFlags, pHost)
    }
    pub unsafe fn cudaMalloc3D(
        &self,
        pitchedDevPtr: *mut cudaPitchedPtr,
        extent: cudaExtent,
    ) -> cudaError_t {
        (self
            .cudaMalloc3D
            .as_ref()
            .expect("Expected function, got error."))(pitchedDevPtr, extent)
    }
    pub unsafe fn cudaMalloc3DArray(
        &self,
        array: *mut cudaArray_t,
        desc: *const cudaChannelFormatDesc,
        extent: cudaExtent,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMalloc3DArray
            .as_ref()
            .expect("Expected function, got error."))(array, desc, extent, flags)
    }
    pub unsafe fn cudaMallocMipmappedArray(
        &self,
        mipmappedArray: *mut cudaMipmappedArray_t,
        desc: *const cudaChannelFormatDesc,
        extent: cudaExtent,
        numLevels: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMallocMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(
            mipmappedArray,
            desc,
            extent,
            numLevels,
            flags,
        )
    }
    pub unsafe fn cudaGetMipmappedArrayLevel(
        &self,
        levelArray: *mut cudaArray_t,
        mipmappedArray: cudaMipmappedArray_const_t,
        level: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGetMipmappedArrayLevel
            .as_ref()
            .expect("Expected function, got error."))(levelArray, mipmappedArray, level)
    }
    pub unsafe fn cudaMemcpy3D(&self, p: *const cudaMemcpy3DParms) -> cudaError_t {
        (self
            .cudaMemcpy3D
            .as_ref()
            .expect("Expected function, got error."))(p)
    }
    pub unsafe fn cudaMemcpy3DPeer(&self, p: *const cudaMemcpy3DPeerParms) -> cudaError_t {
        (self
            .cudaMemcpy3DPeer
            .as_ref()
            .expect("Expected function, got error."))(p)
    }
    pub unsafe fn cudaMemcpy3DAsync(
        &self,
        p: *const cudaMemcpy3DParms,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy3DAsync
            .as_ref()
            .expect("Expected function, got error."))(p, stream)
    }
    pub unsafe fn cudaMemcpy3DPeerAsync(
        &self,
        p: *const cudaMemcpy3DPeerParms,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy3DPeerAsync
            .as_ref()
            .expect("Expected function, got error."))(p, stream)
    }
    pub unsafe fn cudaMemGetInfo(&self, free: *mut usize, total: *mut usize) -> cudaError_t {
        (self
            .cudaMemGetInfo
            .as_ref()
            .expect("Expected function, got error."))(free, total)
    }
    pub unsafe fn cudaArrayGetInfo(
        &self,
        desc: *mut cudaChannelFormatDesc,
        extent: *mut cudaExtent,
        flags: *mut ::core::ffi::c_uint,
        array: cudaArray_t,
    ) -> cudaError_t {
        (self
            .cudaArrayGetInfo
            .as_ref()
            .expect("Expected function, got error."))(desc, extent, flags, array)
    }
    pub unsafe fn cudaArrayGetPlane(
        &self,
        pPlaneArray: *mut cudaArray_t,
        hArray: cudaArray_t,
        planeIdx: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaArrayGetPlane
            .as_ref()
            .expect("Expected function, got error."))(pPlaneArray, hArray, planeIdx)
    }
    pub unsafe fn cudaArrayGetMemoryRequirements(
        &self,
        memoryRequirements: *mut cudaArrayMemoryRequirements,
        array: cudaArray_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaArrayGetMemoryRequirements
            .as_ref()
            .expect("Expected function, got error."))(memoryRequirements, array, device)
    }
    pub unsafe fn cudaMipmappedArrayGetMemoryRequirements(
        &self,
        memoryRequirements: *mut cudaArrayMemoryRequirements,
        mipmap: cudaMipmappedArray_t,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaMipmappedArrayGetMemoryRequirements
            .as_ref()
            .expect("Expected function, got error."))(memoryRequirements, mipmap, device)
    }
    pub unsafe fn cudaArrayGetSparseProperties(
        &self,
        sparseProperties: *mut cudaArraySparseProperties,
        array: cudaArray_t,
    ) -> cudaError_t {
        (self
            .cudaArrayGetSparseProperties
            .as_ref()
            .expect("Expected function, got error."))(sparseProperties, array)
    }
    pub unsafe fn cudaMipmappedArrayGetSparseProperties(
        &self,
        sparseProperties: *mut cudaArraySparseProperties,
        mipmap: cudaMipmappedArray_t,
    ) -> cudaError_t {
        (self
            .cudaMipmappedArrayGetSparseProperties
            .as_ref()
            .expect("Expected function, got error."))(sparseProperties, mipmap)
    }
    pub unsafe fn cudaMemcpy(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy
            .as_ref()
            .expect("Expected function, got error."))(dst, src, count, kind)
    }
    pub unsafe fn cudaMemcpyPeer(
        &self,
        dst: *mut ::core::ffi::c_void,
        dstDevice: ::core::ffi::c_int,
        src: *const ::core::ffi::c_void,
        srcDevice: ::core::ffi::c_int,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemcpyPeer
            .as_ref()
            .expect("Expected function, got error."))(dst, dstDevice, src, srcDevice, count)
    }
    pub unsafe fn cudaMemcpy2D(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2D
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, spitch, width, height, kind
        )
    }
    pub unsafe fn cudaMemcpy2DToArray(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, spitch, width, height, kind,
        )
    }
    pub unsafe fn cudaMemcpy2DFromArray(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DFromArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, wOffset, hOffset, width, height, kind,
        )
    }
    pub unsafe fn cudaMemcpy2DArrayToArray(
        &self,
        dst: cudaArray_t,
        wOffsetDst: usize,
        hOffsetDst: usize,
        src: cudaArray_const_t,
        wOffsetSrc: usize,
        hOffsetSrc: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DArrayToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind,
        )
    }
    pub unsafe fn cudaMemcpyToSymbol(
        &self,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToSymbol
            .as_ref()
            .expect("Expected function, got error."))(symbol, src, count, offset, kind)
    }
    pub unsafe fn cudaMemcpyFromSymbol(
        &self,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(dst, symbol, count, offset, kind)
    }
    pub unsafe fn cudaMemcpyAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyAsync
            .as_ref()
            .expect("Expected function, got error."))(dst, src, count, kind, stream)
    }
    pub unsafe fn cudaMemcpyPeerAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        dstDevice: ::core::ffi::c_int,
        src: *const ::core::ffi::c_void,
        srcDevice: ::core::ffi::c_int,
        count: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyPeerAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dstDevice, src, srcDevice, count, stream
        )
    }
    pub unsafe fn cudaMemcpyBatchAsync(
        &self,
        dsts: *mut *mut ::core::ffi::c_void,
        srcs: *mut *mut ::core::ffi::c_void,
        sizes: *mut usize,
        count: usize,
        attrs: *mut cudaMemcpyAttributes,
        attrsIdxs: *mut usize,
        numAttrs: usize,
        failIdx: *mut usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyBatchAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dsts, srcs, sizes, count, attrs, attrsIdxs, numAttrs, failIdx, stream,
        )
    }
    pub unsafe fn cudaMemcpy3DBatchAsync(
        &self,
        numOps: usize,
        opList: *mut cudaMemcpy3DBatchOp,
        failIdx: *mut usize,
        flags: ::core::ffi::c_ulonglong,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy3DBatchAsync
            .as_ref()
            .expect("Expected function, got error."))(numOps, opList, failIdx, flags, stream)
    }
    pub unsafe fn cudaMemcpy2DAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, spitch, width, height, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpy2DToArrayAsync(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        spitch: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DToArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, spitch, width, height, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpy2DFromArrayAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        dpitch: usize,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        width: usize,
        height: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpy2DFromArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, dpitch, src, wOffset, hOffset, width, height, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpyToSymbolAsync(
        &self,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToSymbolAsync
            .as_ref()
            .expect("Expected function, got error."))(
            symbol, src, count, offset, kind, stream
        )
    }
    pub unsafe fn cudaMemcpyFromSymbolAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromSymbolAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, symbol, count, offset, kind, stream
        )
    }
    pub unsafe fn cudaMemset(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemset
            .as_ref()
            .expect("Expected function, got error."))(devPtr, value, count)
    }
    pub unsafe fn cudaMemset2D(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        pitch: usize,
        value: ::core::ffi::c_int,
        width: usize,
        height: usize,
    ) -> cudaError_t {
        (self
            .cudaMemset2D
            .as_ref()
            .expect("Expected function, got error."))(devPtr, pitch, value, width, height)
    }
    pub unsafe fn cudaMemset3D(
        &self,
        pitchedDevPtr: cudaPitchedPtr,
        value: ::core::ffi::c_int,
        extent: cudaExtent,
    ) -> cudaError_t {
        (self
            .cudaMemset3D
            .as_ref()
            .expect("Expected function, got error."))(pitchedDevPtr, value, extent)
    }
    pub unsafe fn cudaMemsetAsync(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        count: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemsetAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, value, count, stream)
    }
    pub unsafe fn cudaMemset2DAsync(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        pitch: usize,
        value: ::core::ffi::c_int,
        width: usize,
        height: usize,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemset2DAsync
            .as_ref()
            .expect("Expected function, got error."))(
            devPtr, pitch, value, width, height, stream
        )
    }
    pub unsafe fn cudaMemset3DAsync(
        &self,
        pitchedDevPtr: cudaPitchedPtr,
        value: ::core::ffi::c_int,
        extent: cudaExtent,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemset3DAsync
            .as_ref()
            .expect("Expected function, got error."))(pitchedDevPtr, value, extent, stream)
    }
    pub unsafe fn cudaGetSymbolAddress(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetSymbolAddress
            .as_ref()
            .expect("Expected function, got error."))(devPtr, symbol)
    }
    pub unsafe fn cudaGetSymbolSize(
        &self,
        size: *mut usize,
        symbol: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetSymbolSize
            .as_ref()
            .expect("Expected function, got error."))(size, symbol)
    }
    pub unsafe fn cudaMemPrefetchAsync(
        &self,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        dstDevice: ::core::ffi::c_int,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemPrefetchAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, count, dstDevice, stream)
    }
    pub unsafe fn cudaMemPrefetchAsync_v2(
        &self,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        location: cudaMemLocation,
        flags: ::core::ffi::c_uint,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemPrefetchAsync_v2
            .as_ref()
            .expect("Expected function, got error."))(devPtr, count, location, flags, stream)
    }
    pub unsafe fn cudaMemAdvise(
        &self,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        advice: cudaMemoryAdvise,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaMemAdvise
            .as_ref()
            .expect("Expected function, got error."))(devPtr, count, advice, device)
    }
    pub unsafe fn cudaMemAdvise_v2(
        &self,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
        advice: cudaMemoryAdvise,
        location: cudaMemLocation,
    ) -> cudaError_t {
        (self
            .cudaMemAdvise_v2
            .as_ref()
            .expect("Expected function, got error."))(devPtr, count, advice, location)
    }
    pub unsafe fn cudaMemRangeGetAttribute(
        &self,
        data: *mut ::core::ffi::c_void,
        dataSize: usize,
        attribute: cudaMemRangeAttribute,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemRangeGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(
            data, dataSize, attribute, devPtr, count
        )
    }
    pub unsafe fn cudaMemRangeGetAttributes(
        &self,
        data: *mut *mut ::core::ffi::c_void,
        dataSizes: *mut usize,
        attributes: *mut cudaMemRangeAttribute,
        numAttributes: usize,
        devPtr: *const ::core::ffi::c_void,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemRangeGetAttributes
            .as_ref()
            .expect("Expected function, got error."))(
            data,
            dataSizes,
            attributes,
            numAttributes,
            devPtr,
            count,
        )
    }
    pub unsafe fn cudaMemcpyToArray(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, count, kind
        )
    }
    pub unsafe fn cudaMemcpyFromArray(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, src, wOffset, hOffset, count, kind
        )
    }
    pub unsafe fn cudaMemcpyArrayToArray(
        &self,
        dst: cudaArray_t,
        wOffsetDst: usize,
        hOffsetDst: usize,
        src: cudaArray_const_t,
        wOffsetSrc: usize,
        hOffsetSrc: usize,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaMemcpyArrayToArray
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind,
        )
    }
    pub unsafe fn cudaMemcpyToArrayAsync(
        &self,
        dst: cudaArray_t,
        wOffset: usize,
        hOffset: usize,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyToArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, wOffset, hOffset, src, count, kind, stream,
        )
    }
    pub unsafe fn cudaMemcpyFromArrayAsync(
        &self,
        dst: *mut ::core::ffi::c_void,
        src: cudaArray_const_t,
        wOffset: usize,
        hOffset: usize,
        count: usize,
        kind: cudaMemcpyKind,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMemcpyFromArrayAsync
            .as_ref()
            .expect("Expected function, got error."))(
            dst, src, wOffset, hOffset, count, kind, stream,
        )
    }
    pub unsafe fn cudaMallocAsync(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: usize,
        hStream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMallocAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size, hStream)
    }
    pub unsafe fn cudaFreeAsync(
        &self,
        devPtr: *mut ::core::ffi::c_void,
        hStream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaFreeAsync
            .as_ref()
            .expect("Expected function, got error."))(devPtr, hStream)
    }
    pub unsafe fn cudaMemPoolTrimTo(
        &self,
        memPool: cudaMemPool_t,
        minBytesToKeep: usize,
    ) -> cudaError_t {
        (self
            .cudaMemPoolTrimTo
            .as_ref()
            .expect("Expected function, got error."))(memPool, minBytesToKeep)
    }
    pub unsafe fn cudaMemPoolSetAttribute(
        &self,
        memPool: cudaMemPool_t,
        attr: cudaMemPoolAttr,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaMemPoolSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(memPool, attr, value)
    }
    pub unsafe fn cudaMemPoolGetAttribute(
        &self,
        memPool: cudaMemPool_t,
        attr: cudaMemPoolAttr,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaMemPoolGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(memPool, attr, value)
    }
    pub unsafe fn cudaMemPoolSetAccess(
        &self,
        memPool: cudaMemPool_t,
        descList: *const cudaMemAccessDesc,
        count: usize,
    ) -> cudaError_t {
        (self
            .cudaMemPoolSetAccess
            .as_ref()
            .expect("Expected function, got error."))(memPool, descList, count)
    }
    pub unsafe fn cudaMemPoolGetAccess(
        &self,
        flags: *mut cudaMemAccessFlags,
        memPool: cudaMemPool_t,
        location: *mut cudaMemLocation,
    ) -> cudaError_t {
        (self
            .cudaMemPoolGetAccess
            .as_ref()
            .expect("Expected function, got error."))(flags, memPool, location)
    }
    pub unsafe fn cudaMemPoolCreate(
        &self,
        memPool: *mut cudaMemPool_t,
        poolProps: *const cudaMemPoolProps,
    ) -> cudaError_t {
        (self
            .cudaMemPoolCreate
            .as_ref()
            .expect("Expected function, got error."))(memPool, poolProps)
    }
    pub unsafe fn cudaMemPoolDestroy(&self, memPool: cudaMemPool_t) -> cudaError_t {
        (self
            .cudaMemPoolDestroy
            .as_ref()
            .expect("Expected function, got error."))(memPool)
    }
    pub unsafe fn cudaMallocFromPoolAsync(
        &self,
        ptr: *mut *mut ::core::ffi::c_void,
        size: usize,
        memPool: cudaMemPool_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaMallocFromPoolAsync
            .as_ref()
            .expect("Expected function, got error."))(ptr, size, memPool, stream)
    }
    pub unsafe fn cudaMemPoolExportToShareableHandle(
        &self,
        shareableHandle: *mut ::core::ffi::c_void,
        memPool: cudaMemPool_t,
        handleType: cudaMemAllocationHandleType,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMemPoolExportToShareableHandle
            .as_ref()
            .expect("Expected function, got error."))(
            shareableHandle, memPool, handleType, flags
        )
    }
    pub unsafe fn cudaMemPoolImportFromShareableHandle(
        &self,
        memPool: *mut cudaMemPool_t,
        shareableHandle: *mut ::core::ffi::c_void,
        handleType: cudaMemAllocationHandleType,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaMemPoolImportFromShareableHandle
            .as_ref()
            .expect("Expected function, got error."))(
            memPool, shareableHandle, handleType, flags
        )
    }
    pub unsafe fn cudaMemPoolExportPointer(
        &self,
        exportData: *mut cudaMemPoolPtrExportData,
        ptr: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaMemPoolExportPointer
            .as_ref()
            .expect("Expected function, got error."))(exportData, ptr)
    }
    pub unsafe fn cudaMemPoolImportPointer(
        &self,
        ptr: *mut *mut ::core::ffi::c_void,
        memPool: cudaMemPool_t,
        exportData: *mut cudaMemPoolPtrExportData,
    ) -> cudaError_t {
        (self
            .cudaMemPoolImportPointer
            .as_ref()
            .expect("Expected function, got error."))(ptr, memPool, exportData)
    }
    pub unsafe fn cudaPointerGetAttributes(
        &self,
        attributes: *mut cudaPointerAttributes,
        ptr: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaPointerGetAttributes
            .as_ref()
            .expect("Expected function, got error."))(attributes, ptr)
    }
    pub unsafe fn cudaDeviceCanAccessPeer(
        &self,
        canAccessPeer: *mut ::core::ffi::c_int,
        device: ::core::ffi::c_int,
        peerDevice: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceCanAccessPeer
            .as_ref()
            .expect("Expected function, got error."))(canAccessPeer, device, peerDevice)
    }
    pub unsafe fn cudaDeviceEnablePeerAccess(
        &self,
        peerDevice: ::core::ffi::c_int,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaDeviceEnablePeerAccess
            .as_ref()
            .expect("Expected function, got error."))(peerDevice, flags)
    }
    pub unsafe fn cudaDeviceDisablePeerAccess(
        &self,
        peerDevice: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDeviceDisablePeerAccess
            .as_ref()
            .expect("Expected function, got error."))(peerDevice)
    }
    pub unsafe fn cudaGraphicsUnregisterResource(
        &self,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsUnregisterResource
            .as_ref()
            .expect("Expected function, got error."))(resource)
    }
    pub unsafe fn cudaGraphicsResourceSetMapFlags(
        &self,
        resource: cudaGraphicsResource_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphicsResourceSetMapFlags
            .as_ref()
            .expect("Expected function, got error."))(resource, flags)
    }
    pub unsafe fn cudaGraphicsMapResources(
        &self,
        count: ::core::ffi::c_int,
        resources: *mut cudaGraphicsResource_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsMapResources
            .as_ref()
            .expect("Expected function, got error."))(count, resources, stream)
    }
    pub unsafe fn cudaGraphicsUnmapResources(
        &self,
        count: ::core::ffi::c_int,
        resources: *mut cudaGraphicsResource_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsUnmapResources
            .as_ref()
            .expect("Expected function, got error."))(count, resources, stream)
    }
    pub unsafe fn cudaGraphicsResourceGetMappedPointer(
        &self,
        devPtr: *mut *mut ::core::ffi::c_void,
        size: *mut usize,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsResourceGetMappedPointer
            .as_ref()
            .expect("Expected function, got error."))(devPtr, size, resource)
    }
    pub unsafe fn cudaGraphicsSubResourceGetMappedArray(
        &self,
        array: *mut cudaArray_t,
        resource: cudaGraphicsResource_t,
        arrayIndex: ::core::ffi::c_uint,
        mipLevel: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphicsSubResourceGetMappedArray
            .as_ref()
            .expect("Expected function, got error."))(array, resource, arrayIndex, mipLevel)
    }
    pub unsafe fn cudaGraphicsResourceGetMappedMipmappedArray(
        &self,
        mipmappedArray: *mut cudaMipmappedArray_t,
        resource: cudaGraphicsResource_t,
    ) -> cudaError_t {
        (self
            .cudaGraphicsResourceGetMappedMipmappedArray
            .as_ref()
            .expect("Expected function, got error."))(mipmappedArray, resource)
    }
    pub unsafe fn cudaGetChannelDesc(
        &self,
        desc: *mut cudaChannelFormatDesc,
        array: cudaArray_const_t,
    ) -> cudaError_t {
        (self
            .cudaGetChannelDesc
            .as_ref()
            .expect("Expected function, got error."))(desc, array)
    }
    pub unsafe fn cudaCreateChannelDesc(
        &self,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        z: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        f: cudaChannelFormatKind,
    ) -> cudaChannelFormatDesc {
        (self
            .cudaCreateChannelDesc
            .as_ref()
            .expect("Expected function, got error."))(x, y, z, w, f)
    }
    pub unsafe fn cudaCreateTextureObject(
        &self,
        pTexObject: *mut cudaTextureObject_t,
        pResDesc: *const cudaResourceDesc,
        pTexDesc: *const cudaTextureDesc,
        pResViewDesc: *const cudaResourceViewDesc,
    ) -> cudaError_t {
        (self
            .cudaCreateTextureObject
            .as_ref()
            .expect("Expected function, got error."))(
            pTexObject, pResDesc, pTexDesc, pResViewDesc
        )
    }
    pub unsafe fn cudaDestroyTextureObject(&self, texObject: cudaTextureObject_t) -> cudaError_t {
        (self
            .cudaDestroyTextureObject
            .as_ref()
            .expect("Expected function, got error."))(texObject)
    }
    pub unsafe fn cudaGetTextureObjectResourceDesc(
        &self,
        pResDesc: *mut cudaResourceDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetTextureObjectResourceDesc
            .as_ref()
            .expect("Expected function, got error."))(pResDesc, texObject)
    }
    pub unsafe fn cudaGetTextureObjectTextureDesc(
        &self,
        pTexDesc: *mut cudaTextureDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetTextureObjectTextureDesc
            .as_ref()
            .expect("Expected function, got error."))(pTexDesc, texObject)
    }
    pub unsafe fn cudaGetTextureObjectResourceViewDesc(
        &self,
        pResViewDesc: *mut cudaResourceViewDesc,
        texObject: cudaTextureObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetTextureObjectResourceViewDesc
            .as_ref()
            .expect("Expected function, got error."))(pResViewDesc, texObject)
    }
    pub unsafe fn cudaCreateSurfaceObject(
        &self,
        pSurfObject: *mut cudaSurfaceObject_t,
        pResDesc: *const cudaResourceDesc,
    ) -> cudaError_t {
        (self
            .cudaCreateSurfaceObject
            .as_ref()
            .expect("Expected function, got error."))(pSurfObject, pResDesc)
    }
    pub unsafe fn cudaDestroySurfaceObject(&self, surfObject: cudaSurfaceObject_t) -> cudaError_t {
        (self
            .cudaDestroySurfaceObject
            .as_ref()
            .expect("Expected function, got error."))(surfObject)
    }
    pub unsafe fn cudaGetSurfaceObjectResourceDesc(
        &self,
        pResDesc: *mut cudaResourceDesc,
        surfObject: cudaSurfaceObject_t,
    ) -> cudaError_t {
        (self
            .cudaGetSurfaceObjectResourceDesc
            .as_ref()
            .expect("Expected function, got error."))(pResDesc, surfObject)
    }
    pub unsafe fn cudaDriverGetVersion(
        &self,
        driverVersion: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaDriverGetVersion
            .as_ref()
            .expect("Expected function, got error."))(driverVersion)
    }
    pub unsafe fn cudaRuntimeGetVersion(
        &self,
        runtimeVersion: *mut ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaRuntimeGetVersion
            .as_ref()
            .expect("Expected function, got error."))(runtimeVersion)
    }
    pub unsafe fn cudaGraphCreate(
        &self,
        pGraph: *mut cudaGraph_t,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphCreate
            .as_ref()
            .expect("Expected function, got error."))(pGraph, flags)
    }
    pub unsafe fn cudaGraphAddKernelNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddKernelNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pNodeParams,
        )
    }
    pub unsafe fn cudaGraphKernelNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphKernelNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphKernelNodeCopyAttributes(
        &self,
        hSrc: cudaGraphNode_t,
        hDst: cudaGraphNode_t,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeCopyAttributes
            .as_ref()
            .expect("Expected function, got error."))(hSrc, hDst)
    }
    pub unsafe fn cudaGraphKernelNodeGetAttribute(
        &self,
        hNode: cudaGraphNode_t,
        attr: cudaLaunchAttributeID,
        value_out: *mut cudaLaunchAttributeValue,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeGetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hNode, attr, value_out)
    }
    pub unsafe fn cudaGraphKernelNodeSetAttribute(
        &self,
        hNode: cudaGraphNode_t,
        attr: cudaLaunchAttributeID,
        value: *const cudaLaunchAttributeValue,
    ) -> cudaError_t {
        (self
            .cudaGraphKernelNodeSetAttribute
            .as_ref()
            .expect("Expected function, got error."))(hNode, attr, value)
    }
    pub unsafe fn cudaGraphAddMemcpyNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pCopyParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pCopyParams,
        )
    }
    pub unsafe fn cudaGraphAddMemcpyNodeToSymbol(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNodeToSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            symbol,
            src,
            count,
            offset,
            kind,
        )
    }
    pub unsafe fn cudaGraphAddMemcpyNodeFromSymbol(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNodeFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            dst,
            symbol,
            count,
            offset,
            kind,
        )
    }
    pub unsafe fn cudaGraphAddMemcpyNode1D(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemcpyNode1D
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            dst,
            src,
            count,
            kind,
        )
    }
    pub unsafe fn cudaGraphMemcpyNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParamsToSymbol(
        &self,
        node: cudaGraphNode_t,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParamsToSymbol
            .as_ref()
            .expect("Expected function, got error."))(node, symbol, src, count, offset, kind)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParamsFromSymbol(
        &self,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParamsFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(node, dst, symbol, count, offset, kind)
    }
    pub unsafe fn cudaGraphMemcpyNodeSetParams1D(
        &self,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphMemcpyNodeSetParams1D
            .as_ref()
            .expect("Expected function, got error."))(node, dst, src, count, kind)
    }
    pub unsafe fn cudaGraphAddMemsetNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pMemsetParams: *const cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemsetNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pMemsetParams,
        )
    }
    pub unsafe fn cudaGraphMemsetNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphMemsetNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphMemsetNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphMemsetNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphAddHostNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddHostNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            pNodeParams,
        )
    }
    pub unsafe fn cudaGraphHostNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *mut cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphHostNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphHostNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphHostNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, pNodeParams)
    }
    pub unsafe fn cudaGraphAddChildGraphNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        childGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphAddChildGraphNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            childGraph,
        )
    }
    pub unsafe fn cudaGraphChildGraphNodeGetGraph(
        &self,
        node: cudaGraphNode_t,
        pGraph: *mut cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphChildGraphNodeGetGraph
            .as_ref()
            .expect("Expected function, got error."))(node, pGraph)
    }
    pub unsafe fn cudaGraphAddEmptyNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphAddEmptyNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
        )
    }
    pub unsafe fn cudaGraphAddEventRecordNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphAddEventRecordNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            event,
        )
    }
    pub unsafe fn cudaGraphEventRecordNodeGetEvent(
        &self,
        node: cudaGraphNode_t,
        event_out: *mut cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventRecordNodeGetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event_out)
    }
    pub unsafe fn cudaGraphEventRecordNodeSetEvent(
        &self,
        node: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventRecordNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event)
    }
    pub unsafe fn cudaGraphAddEventWaitNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphAddEventWaitNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            event,
        )
    }
    pub unsafe fn cudaGraphEventWaitNodeGetEvent(
        &self,
        node: cudaGraphNode_t,
        event_out: *mut cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventWaitNodeGetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event_out)
    }
    pub unsafe fn cudaGraphEventWaitNodeSetEvent(
        &self,
        node: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphEventWaitNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(node, event)
    }
    pub unsafe fn cudaGraphAddExternalSemaphoresSignalNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddExternalSemaphoresSignalNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphExternalSemaphoresSignalNodeGetParams(
        &self,
        hNode: cudaGraphNode_t,
        params_out: *mut cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresSignalNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, params_out)
    }
    pub unsafe fn cudaGraphExternalSemaphoresSignalNodeSetParams(
        &self,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresSignalNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, nodeParams)
    }
    pub unsafe fn cudaGraphAddExternalSemaphoresWaitNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddExternalSemaphoresWaitNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphExternalSemaphoresWaitNodeGetParams(
        &self,
        hNode: cudaGraphNode_t,
        params_out: *mut cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresWaitNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, params_out)
    }
    pub unsafe fn cudaGraphExternalSemaphoresWaitNodeSetParams(
        &self,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExternalSemaphoresWaitNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hNode, nodeParams)
    }
    pub unsafe fn cudaGraphAddMemAllocNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *mut cudaMemAllocNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemAllocNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphMemAllocNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        params_out: *mut cudaMemAllocNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphMemAllocNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, params_out)
    }
    pub unsafe fn cudaGraphAddMemFreeNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        dptr: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGraphAddMemFreeNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            dptr,
        )
    }
    pub unsafe fn cudaGraphMemFreeNodeGetParams(
        &self,
        node: cudaGraphNode_t,
        dptr_out: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGraphMemFreeNodeGetParams
            .as_ref()
            .expect("Expected function, got error."))(node, dptr_out)
    }
    pub unsafe fn cudaDeviceGraphMemTrim(&self, device: ::core::ffi::c_int) -> cudaError_t {
        (self
            .cudaDeviceGraphMemTrim
            .as_ref()
            .expect("Expected function, got error."))(device)
    }
    pub unsafe fn cudaDeviceGetGraphMemAttribute(
        &self,
        device: ::core::ffi::c_int,
        attr: cudaGraphMemAttributeType,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaDeviceGetGraphMemAttribute
            .as_ref()
            .expect("Expected function, got error."))(device, attr, value)
    }
    pub unsafe fn cudaDeviceSetGraphMemAttribute(
        &self,
        device: ::core::ffi::c_int,
        attr: cudaGraphMemAttributeType,
        value: *mut ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaDeviceSetGraphMemAttribute
            .as_ref()
            .expect("Expected function, got error."))(device, attr, value)
    }
    pub unsafe fn cudaGraphClone(
        &self,
        pGraphClone: *mut cudaGraph_t,
        originalGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphClone
            .as_ref()
            .expect("Expected function, got error."))(pGraphClone, originalGraph)
    }
    pub unsafe fn cudaGraphNodeFindInClone(
        &self,
        pNode: *mut cudaGraphNode_t,
        originalNode: cudaGraphNode_t,
        clonedGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeFindInClone
            .as_ref()
            .expect("Expected function, got error."))(pNode, originalNode, clonedGraph)
    }
    pub unsafe fn cudaGraphNodeGetType(
        &self,
        node: cudaGraphNode_t,
        pType: *mut cudaGraphNodeType,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetType
            .as_ref()
            .expect("Expected function, got error."))(node, pType)
    }
    pub unsafe fn cudaGraphGetNodes(
        &self,
        graph: cudaGraph_t,
        nodes: *mut cudaGraphNode_t,
        numNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetNodes
            .as_ref()
            .expect("Expected function, got error."))(graph, nodes, numNodes)
    }
    pub unsafe fn cudaGraphGetRootNodes(
        &self,
        graph: cudaGraph_t,
        pRootNodes: *mut cudaGraphNode_t,
        pNumRootNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetRootNodes
            .as_ref()
            .expect("Expected function, got error."))(graph, pRootNodes, pNumRootNodes)
    }
    pub unsafe fn cudaGraphGetEdges(
        &self,
        graph: cudaGraph_t,
        from: *mut cudaGraphNode_t,
        to: *mut cudaGraphNode_t,
        numEdges: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetEdges
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, numEdges)
    }
    pub unsafe fn cudaGraphGetEdges_v2(
        &self,
        graph: cudaGraph_t,
        from: *mut cudaGraphNode_t,
        to: *mut cudaGraphNode_t,
        edgeData: *mut cudaGraphEdgeData,
        numEdges: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphGetEdges_v2
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, edgeData, numEdges)
    }
    pub unsafe fn cudaGraphNodeGetDependencies(
        &self,
        node: cudaGraphNode_t,
        pDependencies: *mut cudaGraphNode_t,
        pNumDependencies: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetDependencies
            .as_ref()
            .expect("Expected function, got error."))(node, pDependencies, pNumDependencies)
    }
    pub unsafe fn cudaGraphNodeGetDependencies_v2(
        &self,
        node: cudaGraphNode_t,
        pDependencies: *mut cudaGraphNode_t,
        edgeData: *mut cudaGraphEdgeData,
        pNumDependencies: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetDependencies_v2
            .as_ref()
            .expect("Expected function, got error."))(
            node,
            pDependencies,
            edgeData,
            pNumDependencies,
        )
    }
    pub unsafe fn cudaGraphNodeGetDependentNodes(
        &self,
        node: cudaGraphNode_t,
        pDependentNodes: *mut cudaGraphNode_t,
        pNumDependentNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetDependentNodes
            .as_ref()
            .expect("Expected function, got error."))(
            node, pDependentNodes, pNumDependentNodes
        )
    }
    pub unsafe fn cudaGraphNodeGetDependentNodes_v2(
        &self,
        node: cudaGraphNode_t,
        pDependentNodes: *mut cudaGraphNode_t,
        edgeData: *mut cudaGraphEdgeData,
        pNumDependentNodes: *mut usize,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetDependentNodes_v2
            .as_ref()
            .expect("Expected function, got error."))(
            node,
            pDependentNodes,
            edgeData,
            pNumDependentNodes,
        )
    }
    pub unsafe fn cudaGraphAddDependencies(
        &self,
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphAddDependencies
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, numDependencies)
    }
    pub unsafe fn cudaGraphAddDependencies_v2(
        &self,
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        edgeData: *const cudaGraphEdgeData,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphAddDependencies_v2
            .as_ref()
            .expect("Expected function, got error."))(
            graph, from, to, edgeData, numDependencies
        )
    }
    pub unsafe fn cudaGraphRemoveDependencies(
        &self,
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphRemoveDependencies
            .as_ref()
            .expect("Expected function, got error."))(graph, from, to, numDependencies)
    }
    pub unsafe fn cudaGraphRemoveDependencies_v2(
        &self,
        graph: cudaGraph_t,
        from: *const cudaGraphNode_t,
        to: *const cudaGraphNode_t,
        edgeData: *const cudaGraphEdgeData,
        numDependencies: usize,
    ) -> cudaError_t {
        (self
            .cudaGraphRemoveDependencies_v2
            .as_ref()
            .expect("Expected function, got error."))(
            graph, from, to, edgeData, numDependencies
        )
    }
    pub unsafe fn cudaGraphDestroyNode(&self, node: cudaGraphNode_t) -> cudaError_t {
        (self
            .cudaGraphDestroyNode
            .as_ref()
            .expect("Expected function, got error."))(node)
    }
    pub unsafe fn cudaGraphInstantiate(
        &self,
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        flags: ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaGraphInstantiate
            .as_ref()
            .expect("Expected function, got error."))(pGraphExec, graph, flags)
    }
    pub unsafe fn cudaGraphInstantiateWithFlags(
        &self,
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        flags: ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaGraphInstantiateWithFlags
            .as_ref()
            .expect("Expected function, got error."))(pGraphExec, graph, flags)
    }
    pub unsafe fn cudaGraphInstantiateWithParams(
        &self,
        pGraphExec: *mut cudaGraphExec_t,
        graph: cudaGraph_t,
        instantiateParams: *mut cudaGraphInstantiateParams,
    ) -> cudaError_t {
        (self
            .cudaGraphInstantiateWithParams
            .as_ref()
            .expect("Expected function, got error."))(pGraphExec, graph, instantiateParams)
    }
    pub unsafe fn cudaGraphExecGetFlags(
        &self,
        graphExec: cudaGraphExec_t,
        flags: *mut ::core::ffi::c_ulonglong,
    ) -> cudaError_t {
        (self
            .cudaGraphExecGetFlags
            .as_ref()
            .expect("Expected function, got error."))(graphExec, flags)
    }
    pub unsafe fn cudaGraphExecKernelNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaKernelNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecKernelNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemcpy3DParms,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParamsToSymbol(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        symbol: *const ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParamsToSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec, node, symbol, src, count, offset, kind,
        )
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParamsFromSymbol(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        symbol: *const ::core::ffi::c_void,
        count: usize,
        offset: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParamsFromSymbol
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec, node, dst, symbol, count, offset, kind,
        )
    }
    pub unsafe fn cudaGraphExecMemcpyNodeSetParams1D(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        dst: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        count: usize,
        kind: cudaMemcpyKind,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemcpyNodeSetParams1D
            .as_ref()
            .expect("Expected function, got error."))(
            hGraphExec, node, dst, src, count, kind
        )
    }
    pub unsafe fn cudaGraphExecMemsetNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaMemsetParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecMemsetNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecHostNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        pNodeParams: *const cudaHostNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecHostNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, pNodeParams)
    }
    pub unsafe fn cudaGraphExecChildGraphNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        childGraph: cudaGraph_t,
    ) -> cudaError_t {
        (self
            .cudaGraphExecChildGraphNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, node, childGraph)
    }
    pub unsafe fn cudaGraphExecEventRecordNodeSetEvent(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphExecEventRecordNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, event)
    }
    pub unsafe fn cudaGraphExecEventWaitNodeSetEvent(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        event: cudaEvent_t,
    ) -> cudaError_t {
        (self
            .cudaGraphExecEventWaitNodeSetEvent
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, event)
    }
    pub unsafe fn cudaGraphExecExternalSemaphoresSignalNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecExternalSemaphoresSignalNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, nodeParams)
    }
    pub unsafe fn cudaGraphExecExternalSemaphoresWaitNodeSetParams(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecExternalSemaphoresWaitNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, nodeParams)
    }
    pub unsafe fn cudaGraphNodeSetEnabled(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        isEnabled: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeSetEnabled
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, isEnabled)
    }
    pub unsafe fn cudaGraphNodeGetEnabled(
        &self,
        hGraphExec: cudaGraphExec_t,
        hNode: cudaGraphNode_t,
        isEnabled: *mut ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeGetEnabled
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hNode, isEnabled)
    }
    pub unsafe fn cudaGraphExecUpdate(
        &self,
        hGraphExec: cudaGraphExec_t,
        hGraph: cudaGraph_t,
        resultInfo: *mut cudaGraphExecUpdateResultInfo,
    ) -> cudaError_t {
        (self
            .cudaGraphExecUpdate
            .as_ref()
            .expect("Expected function, got error."))(hGraphExec, hGraph, resultInfo)
    }
    pub unsafe fn cudaGraphUpload(
        &self,
        graphExec: cudaGraphExec_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphUpload
            .as_ref()
            .expect("Expected function, got error."))(graphExec, stream)
    }
    pub unsafe fn cudaGraphLaunch(
        &self,
        graphExec: cudaGraphExec_t,
        stream: cudaStream_t,
    ) -> cudaError_t {
        (self
            .cudaGraphLaunch
            .as_ref()
            .expect("Expected function, got error."))(graphExec, stream)
    }
    pub unsafe fn cudaGraphExecDestroy(&self, graphExec: cudaGraphExec_t) -> cudaError_t {
        (self
            .cudaGraphExecDestroy
            .as_ref()
            .expect("Expected function, got error."))(graphExec)
    }
    pub unsafe fn cudaGraphDestroy(&self, graph: cudaGraph_t) -> cudaError_t {
        (self
            .cudaGraphDestroy
            .as_ref()
            .expect("Expected function, got error."))(graph)
    }
    pub unsafe fn cudaGraphDebugDotPrint(
        &self,
        graph: cudaGraph_t,
        path: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphDebugDotPrint
            .as_ref()
            .expect("Expected function, got error."))(graph, path, flags)
    }
    pub unsafe fn cudaUserObjectCreate(
        &self,
        object_out: *mut cudaUserObject_t,
        ptr: *mut ::core::ffi::c_void,
        destroy: cudaHostFn_t,
        initialRefcount: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaUserObjectCreate
            .as_ref()
            .expect("Expected function, got error."))(
            object_out,
            ptr,
            destroy,
            initialRefcount,
            flags,
        )
    }
    pub unsafe fn cudaUserObjectRetain(
        &self,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaUserObjectRetain
            .as_ref()
            .expect("Expected function, got error."))(object, count)
    }
    pub unsafe fn cudaUserObjectRelease(
        &self,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaUserObjectRelease
            .as_ref()
            .expect("Expected function, got error."))(object, count)
    }
    pub unsafe fn cudaGraphRetainUserObject(
        &self,
        graph: cudaGraph_t,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphRetainUserObject
            .as_ref()
            .expect("Expected function, got error."))(graph, object, count, flags)
    }
    pub unsafe fn cudaGraphReleaseUserObject(
        &self,
        graph: cudaGraph_t,
        object: cudaUserObject_t,
        count: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphReleaseUserObject
            .as_ref()
            .expect("Expected function, got error."))(graph, object, count)
    }
    pub unsafe fn cudaGraphAddNode(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        numDependencies: usize,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddNode
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphAddNode_v2(
        &self,
        pGraphNode: *mut cudaGraphNode_t,
        graph: cudaGraph_t,
        pDependencies: *const cudaGraphNode_t,
        dependencyData: *const cudaGraphEdgeData,
        numDependencies: usize,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphAddNode_v2
            .as_ref()
            .expect("Expected function, got error."))(
            pGraphNode,
            graph,
            pDependencies,
            dependencyData,
            numDependencies,
            nodeParams,
        )
    }
    pub unsafe fn cudaGraphNodeSetParams(
        &self,
        node: cudaGraphNode_t,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(node, nodeParams)
    }
    pub unsafe fn cudaGraphExecNodeSetParams(
        &self,
        graphExec: cudaGraphExec_t,
        node: cudaGraphNode_t,
        nodeParams: *mut cudaGraphNodeParams,
    ) -> cudaError_t {
        (self
            .cudaGraphExecNodeSetParams
            .as_ref()
            .expect("Expected function, got error."))(graphExec, node, nodeParams)
    }
    pub unsafe fn cudaGraphConditionalHandleCreate(
        &self,
        pHandle_out: *mut cudaGraphConditionalHandle,
        graph: cudaGraph_t,
        defaultLaunchValue: ::core::ffi::c_uint,
        flags: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaGraphConditionalHandleCreate
            .as_ref()
            .expect("Expected function, got error."))(
            pHandle_out, graph, defaultLaunchValue, flags
        )
    }
    pub unsafe fn cudaGetDriverEntryPoint(
        &self,
        symbol: *const ::core::ffi::c_char,
        funcPtr: *mut *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_ulonglong,
        driverStatus: *mut cudaDriverEntryPointQueryResult,
    ) -> cudaError_t {
        (self
            .cudaGetDriverEntryPoint
            .as_ref()
            .expect("Expected function, got error."))(symbol, funcPtr, flags, driverStatus)
    }
    pub unsafe fn cudaGetDriverEntryPointByVersion(
        &self,
        symbol: *const ::core::ffi::c_char,
        funcPtr: *mut *mut ::core::ffi::c_void,
        cudaVersion: ::core::ffi::c_uint,
        flags: ::core::ffi::c_ulonglong,
        driverStatus: *mut cudaDriverEntryPointQueryResult,
    ) -> cudaError_t {
        (self
            .cudaGetDriverEntryPointByVersion
            .as_ref()
            .expect("Expected function, got error."))(
            symbol,
            funcPtr,
            cudaVersion,
            flags,
            driverStatus,
        )
    }
    pub unsafe fn cudaLibraryLoadData(
        &self,
        library: *mut cudaLibrary_t,
        code: *const ::core::ffi::c_void,
        jitOptions: *mut cudaJitOption,
        jitOptionsValues: *mut *mut ::core::ffi::c_void,
        numJitOptions: ::core::ffi::c_uint,
        libraryOptions: *mut cudaLibraryOption,
        libraryOptionValues: *mut *mut ::core::ffi::c_void,
        numLibraryOptions: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaLibraryLoadData
            .as_ref()
            .expect("Expected function, got error."))(
            library,
            code,
            jitOptions,
            jitOptionsValues,
            numJitOptions,
            libraryOptions,
            libraryOptionValues,
            numLibraryOptions,
        )
    }
    pub unsafe fn cudaLibraryLoadFromFile(
        &self,
        library: *mut cudaLibrary_t,
        fileName: *const ::core::ffi::c_char,
        jitOptions: *mut cudaJitOption,
        jitOptionsValues: *mut *mut ::core::ffi::c_void,
        numJitOptions: ::core::ffi::c_uint,
        libraryOptions: *mut cudaLibraryOption,
        libraryOptionValues: *mut *mut ::core::ffi::c_void,
        numLibraryOptions: ::core::ffi::c_uint,
    ) -> cudaError_t {
        (self
            .cudaLibraryLoadFromFile
            .as_ref()
            .expect("Expected function, got error."))(
            library,
            fileName,
            jitOptions,
            jitOptionsValues,
            numJitOptions,
            libraryOptions,
            libraryOptionValues,
            numLibraryOptions,
        )
    }
    pub unsafe fn cudaLibraryUnload(&self, library: cudaLibrary_t) -> cudaError_t {
        (self
            .cudaLibraryUnload
            .as_ref()
            .expect("Expected function, got error."))(library)
    }
    pub unsafe fn cudaLibraryGetKernel(
        &self,
        pKernel: *mut cudaKernel_t,
        library: cudaLibrary_t,
        name: *const ::core::ffi::c_char,
    ) -> cudaError_t {
        (self
            .cudaLibraryGetKernel
            .as_ref()
            .expect("Expected function, got error."))(pKernel, library, name)
    }
    pub unsafe fn cudaLibraryGetGlobal(
        &self,
        dptr: *mut *mut ::core::ffi::c_void,
        bytes: *mut usize,
        library: cudaLibrary_t,
        name: *const ::core::ffi::c_char,
    ) -> cudaError_t {
        (self
            .cudaLibraryGetGlobal
            .as_ref()
            .expect("Expected function, got error."))(dptr, bytes, library, name)
    }
    pub unsafe fn cudaLibraryGetManaged(
        &self,
        dptr: *mut *mut ::core::ffi::c_void,
        bytes: *mut usize,
        library: cudaLibrary_t,
        name: *const ::core::ffi::c_char,
    ) -> cudaError_t {
        (self
            .cudaLibraryGetManaged
            .as_ref()
            .expect("Expected function, got error."))(dptr, bytes, library, name)
    }
    pub unsafe fn cudaLibraryGetUnifiedFunction(
        &self,
        fptr: *mut *mut ::core::ffi::c_void,
        library: cudaLibrary_t,
        symbol: *const ::core::ffi::c_char,
    ) -> cudaError_t {
        (self
            .cudaLibraryGetUnifiedFunction
            .as_ref()
            .expect("Expected function, got error."))(fptr, library, symbol)
    }
    pub unsafe fn cudaLibraryGetKernelCount(
        &self,
        count: *mut ::core::ffi::c_uint,
        lib: cudaLibrary_t,
    ) -> cudaError_t {
        (self
            .cudaLibraryGetKernelCount
            .as_ref()
            .expect("Expected function, got error."))(count, lib)
    }
    pub unsafe fn cudaLibraryEnumerateKernels(
        &self,
        kernels: *mut cudaKernel_t,
        numKernels: ::core::ffi::c_uint,
        lib: cudaLibrary_t,
    ) -> cudaError_t {
        (self
            .cudaLibraryEnumerateKernels
            .as_ref()
            .expect("Expected function, got error."))(kernels, numKernels, lib)
    }
    pub unsafe fn cudaKernelSetAttributeForDevice(
        &self,
        kernel: cudaKernel_t,
        attr: cudaFuncAttribute,
        value: ::core::ffi::c_int,
        device: ::core::ffi::c_int,
    ) -> cudaError_t {
        (self
            .cudaKernelSetAttributeForDevice
            .as_ref()
            .expect("Expected function, got error."))(kernel, attr, value, device)
    }
    pub unsafe fn cudaGetExportTable(
        &self,
        ppExportTable: *mut *const ::core::ffi::c_void,
        pExportTableId: *const cudaUUID_t,
    ) -> cudaError_t {
        (self
            .cudaGetExportTable
            .as_ref()
            .expect("Expected function, got error."))(ppExportTable, pExportTableId)
    }
    pub unsafe fn cudaGetFuncBySymbol(
        &self,
        functionPtr: *mut cudaFunction_t,
        symbolPtr: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetFuncBySymbol
            .as_ref()
            .expect("Expected function, got error."))(functionPtr, symbolPtr)
    }
    pub unsafe fn cudaGetKernel(
        &self,
        kernelPtr: *mut cudaKernel_t,
        entryFuncAddr: *const ::core::ffi::c_void,
    ) -> cudaError_t {
        (self
            .cudaGetKernel
            .as_ref()
            .expect("Expected function, got error."))(kernelPtr, entryFuncAddr)
    }
    pub unsafe fn cudaProfilerStart(&self) -> cudaError_t {
        (self
            .cudaProfilerStart
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn cudaProfilerStop(&self) -> cudaError_t {
        (self
            .cudaProfilerStop
            .as_ref()
            .expect("Expected function, got error."))()
    }
}
