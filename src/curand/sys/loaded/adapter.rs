use super :: * ;pub unsafe fn curandCreateGenerator (generator : * mut curandGenerator_t , rng_type : curandRngType_t ,) -> curandStatus_t { unsafe { culib () . curandCreateGenerator (generator , rng_type) } }
pub unsafe fn curandCreateGeneratorHost (generator : * mut curandGenerator_t , rng_type : curandRngType_t ,) -> curandStatus_t { unsafe { culib () . curandCreateGeneratorHost (generator , rng_type) } }
pub unsafe fn curandDestroyGenerator (generator : curandGenerator_t) -> curandStatus_t { unsafe { culib () . curandDestroyGenerator (generator) } }
pub unsafe fn curandGetVersion (version : * mut :: core :: ffi :: c_int) -> curandStatus_t { unsafe { culib () . curandGetVersion (version) } }
pub unsafe fn curandGetProperty (type_ : libraryPropertyType , value : * mut :: core :: ffi :: c_int ,) -> curandStatus_t { unsafe { culib () . curandGetProperty (type_ , value) } }
pub unsafe fn curandSetStream (generator : curandGenerator_t , stream : cudaStream_t) -> curandStatus_t { unsafe { culib () . curandSetStream (generator , stream) } }
pub unsafe fn curandSetPseudoRandomGeneratorSeed (generator : curandGenerator_t , seed : :: core :: ffi :: c_ulonglong ,) -> curandStatus_t { unsafe { culib () . curandSetPseudoRandomGeneratorSeed (generator , seed) } }
pub unsafe fn curandSetGeneratorOffset (generator : curandGenerator_t , offset : :: core :: ffi :: c_ulonglong ,) -> curandStatus_t { unsafe { culib () . curandSetGeneratorOffset (generator , offset) } }
pub unsafe fn curandSetGeneratorOrdering (generator : curandGenerator_t , order : curandOrdering_t ,) -> curandStatus_t { unsafe { culib () . curandSetGeneratorOrdering (generator , order) } }
pub unsafe fn curandSetQuasiRandomGeneratorDimensions (generator : curandGenerator_t , num_dimensions : :: core :: ffi :: c_uint ,) -> curandStatus_t { unsafe { culib () . curandSetQuasiRandomGeneratorDimensions (generator , num_dimensions) } }
pub unsafe fn curandGenerate (generator : curandGenerator_t , outputPtr : * mut :: core :: ffi :: c_uint , num : usize ,) -> curandStatus_t { unsafe { culib () . curandGenerate (generator , outputPtr , num) } }
pub unsafe fn curandGenerateLongLong (generator : curandGenerator_t , outputPtr : * mut :: core :: ffi :: c_ulonglong , num : usize ,) -> curandStatus_t { unsafe { culib () . curandGenerateLongLong (generator , outputPtr , num) } }
pub unsafe fn curandGenerateUniform (generator : curandGenerator_t , outputPtr : * mut f32 , num : usize ,) -> curandStatus_t { unsafe { culib () . curandGenerateUniform (generator , outputPtr , num) } }
pub unsafe fn curandGenerateUniformDouble (generator : curandGenerator_t , outputPtr : * mut f64 , num : usize ,) -> curandStatus_t { unsafe { culib () . curandGenerateUniformDouble (generator , outputPtr , num) } }
pub unsafe fn curandGenerateNormal (generator : curandGenerator_t , outputPtr : * mut f32 , n : usize , mean : f32 , stddev : f32 ,) -> curandStatus_t { unsafe { culib () . curandGenerateNormal (generator , outputPtr , n , mean , stddev) } }
pub unsafe fn curandGenerateNormalDouble (generator : curandGenerator_t , outputPtr : * mut f64 , n : usize , mean : f64 , stddev : f64 ,) -> curandStatus_t { unsafe { culib () . curandGenerateNormalDouble (generator , outputPtr , n , mean , stddev) } }
pub unsafe fn curandGenerateLogNormal (generator : curandGenerator_t , outputPtr : * mut f32 , n : usize , mean : f32 , stddev : f32 ,) -> curandStatus_t { unsafe { culib () . curandGenerateLogNormal (generator , outputPtr , n , mean , stddev) } }
pub unsafe fn curandGenerateLogNormalDouble (generator : curandGenerator_t , outputPtr : * mut f64 , n : usize , mean : f64 , stddev : f64 ,) -> curandStatus_t { unsafe { culib () . curandGenerateLogNormalDouble (generator , outputPtr , n , mean , stddev) } }
pub unsafe fn curandCreatePoissonDistribution (lambda : f64 , discrete_distribution : * mut curandDiscreteDistribution_t ,) -> curandStatus_t { unsafe { culib () . curandCreatePoissonDistribution (lambda , discrete_distribution) } }
pub unsafe fn curandDestroyDistribution (discrete_distribution : curandDiscreteDistribution_t ,) -> curandStatus_t { unsafe { culib () . curandDestroyDistribution (discrete_distribution) } }
pub unsafe fn curandGeneratePoisson (generator : curandGenerator_t , outputPtr : * mut :: core :: ffi :: c_uint , n : usize , lambda : f64 ,) -> curandStatus_t { unsafe { culib () . curandGeneratePoisson (generator , outputPtr , n , lambda) } }
pub unsafe fn curandGeneratePoissonMethod (generator : curandGenerator_t , outputPtr : * mut :: core :: ffi :: c_uint , n : usize , lambda : f64 , method : curandMethod_t ,) -> curandStatus_t { unsafe { culib () . curandGeneratePoissonMethod (generator , outputPtr , n , lambda , method) } }
pub unsafe fn curandGenerateBinomial (generator : curandGenerator_t , outputPtr : * mut :: core :: ffi :: c_uint , num : usize , n : :: core :: ffi :: c_uint , p : f64 ,) -> curandStatus_t { unsafe { culib () . curandGenerateBinomial (generator , outputPtr , num , n , p) } }
pub unsafe fn curandGenerateBinomialMethod (generator : curandGenerator_t , outputPtr : * mut :: core :: ffi :: c_uint , num : usize , n : :: core :: ffi :: c_uint , p : f64 , method : curandMethod_t ,) -> curandStatus_t { unsafe { culib () . curandGenerateBinomialMethod (generator , outputPtr , num , n , p , method) } }
pub unsafe fn curandGenerateSeeds (generator : curandGenerator_t) -> curandStatus_t { unsafe { culib () . curandGenerateSeeds (generator) } }
pub unsafe fn curandGetDirectionVectors32 (vectors : * mut * mut curandDirectionVectors32_t , set : curandDirectionVectorSet_t ,) -> curandStatus_t { unsafe { culib () . curandGetDirectionVectors32 (vectors , set) } }
pub unsafe fn curandGetScrambleConstants32 (constants : * mut * mut :: core :: ffi :: c_uint) -> curandStatus_t { unsafe { culib () . curandGetScrambleConstants32 (constants) } }
pub unsafe fn curandGetDirectionVectors64 (vectors : * mut * mut curandDirectionVectors64_t , set : curandDirectionVectorSet_t ,) -> curandStatus_t { unsafe { culib () . curandGetDirectionVectors64 (vectors , set) } }
pub unsafe fn curandGetScrambleConstants64 (constants : * mut * mut :: core :: ffi :: c_ulonglong ,) -> curandStatus_t { unsafe { culib () . curandGetScrambleConstants64 (constants) } }
