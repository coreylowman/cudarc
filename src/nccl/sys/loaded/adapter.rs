use super :: * ;pub unsafe fn ncclMemAlloc (ptr : * mut * mut :: core :: ffi :: c_void , size : usize) -> ncclResult_t { unsafe { culib () . ncclMemAlloc (ptr , size) } }
pub unsafe fn ncclMemFree (ptr : * mut :: core :: ffi :: c_void) -> ncclResult_t { unsafe { culib () . ncclMemFree (ptr) } }
pub unsafe fn ncclGetVersion (version : * mut :: core :: ffi :: c_int) -> ncclResult_t { unsafe { culib () . ncclGetVersion (version) } }
pub unsafe fn ncclGetUniqueId (uniqueId : * mut ncclUniqueId) -> ncclResult_t { unsafe { culib () . ncclGetUniqueId (uniqueId) } }
pub unsafe fn ncclCommInitRankConfig (comm : * mut ncclComm_t , nranks : :: core :: ffi :: c_int , commId : ncclUniqueId , rank : :: core :: ffi :: c_int , config : * mut ncclConfig_t ,) -> ncclResult_t { unsafe { culib () . ncclCommInitRankConfig (comm , nranks , commId , rank , config) } }
pub unsafe fn ncclCommInitRank (comm : * mut ncclComm_t , nranks : :: core :: ffi :: c_int , commId : ncclUniqueId , rank : :: core :: ffi :: c_int ,) -> ncclResult_t { unsafe { culib () . ncclCommInitRank (comm , nranks , commId , rank) } }
pub unsafe fn ncclCommInitAll (comm : * mut ncclComm_t , ndev : :: core :: ffi :: c_int , devlist : * const :: core :: ffi :: c_int ,) -> ncclResult_t { unsafe { culib () . ncclCommInitAll (comm , ndev , devlist) } }
pub unsafe fn ncclCommFinalize (comm : ncclComm_t) -> ncclResult_t { unsafe { culib () . ncclCommFinalize (comm) } }
pub unsafe fn ncclCommDestroy (comm : ncclComm_t) -> ncclResult_t { unsafe { culib () . ncclCommDestroy (comm) } }
pub unsafe fn ncclCommAbort (comm : ncclComm_t) -> ncclResult_t { unsafe { culib () . ncclCommAbort (comm) } }
pub unsafe fn ncclCommSplit (comm : ncclComm_t , color : :: core :: ffi :: c_int , key : :: core :: ffi :: c_int , newcomm : * mut ncclComm_t , config : * mut ncclConfig_t ,) -> ncclResult_t { unsafe { culib () . ncclCommSplit (comm , color , key , newcomm , config) } }
pub unsafe fn ncclCommInitRankScalable (newcomm : * mut ncclComm_t , nranks : :: core :: ffi :: c_int , myrank : :: core :: ffi :: c_int , nId : :: core :: ffi :: c_int , commIds : * mut ncclUniqueId , config : * mut ncclConfig_t ,) -> ncclResult_t { unsafe { culib () . ncclCommInitRankScalable (newcomm , nranks , myrank , nId , commIds , config) } }
pub unsafe fn ncclGetErrorString (result : ncclResult_t) -> * const :: core :: ffi :: c_char { unsafe { culib () . ncclGetErrorString (result) } }
pub unsafe fn ncclGetLastError (comm : ncclComm_t) -> * const :: core :: ffi :: c_char { unsafe { culib () . ncclGetLastError (comm) } }
pub unsafe fn ncclResetDebugInit () { unsafe { culib () . ncclResetDebugInit () } }
pub unsafe fn ncclCommGetAsyncError (comm : ncclComm_t , asyncError : * mut ncclResult_t) -> ncclResult_t { unsafe { culib () . ncclCommGetAsyncError (comm , asyncError) } }
pub unsafe fn ncclCommCount (comm : ncclComm_t , count : * mut :: core :: ffi :: c_int) -> ncclResult_t { unsafe { culib () . ncclCommCount (comm , count) } }
pub unsafe fn ncclCommCuDevice (comm : ncclComm_t , device : * mut :: core :: ffi :: c_int) -> ncclResult_t { unsafe { culib () . ncclCommCuDevice (comm , device) } }
pub unsafe fn ncclCommUserRank (comm : ncclComm_t , rank : * mut :: core :: ffi :: c_int) -> ncclResult_t { unsafe { culib () . ncclCommUserRank (comm , rank) } }
pub unsafe fn ncclCommRegister (comm : ncclComm_t , buff : * mut :: core :: ffi :: c_void , size : usize , handle : * mut * mut :: core :: ffi :: c_void ,) -> ncclResult_t { unsafe { culib () . ncclCommRegister (comm , buff , size , handle) } }
pub unsafe fn ncclCommDeregister (comm : ncclComm_t , handle : * mut :: core :: ffi :: c_void) -> ncclResult_t { unsafe { culib () . ncclCommDeregister (comm , handle) } }
pub unsafe fn ncclRedOpCreatePreMulSum (op : * mut ncclRedOp_t , scalar : * mut :: core :: ffi :: c_void , datatype : ncclDataType_t , residence : ncclScalarResidence_t , comm : ncclComm_t ,) -> ncclResult_t { unsafe { culib () . ncclRedOpCreatePreMulSum (op , scalar , datatype , residence , comm) } }
pub unsafe fn ncclRedOpDestroy (op : ncclRedOp_t , comm : ncclComm_t) -> ncclResult_t { unsafe { culib () . ncclRedOpDestroy (op , comm) } }
pub unsafe fn ncclReduce (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , op : ncclRedOp_t , root : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclReduce (sendbuff , recvbuff , count , datatype , op , root , comm , stream) } }
pub unsafe fn ncclBcast (buff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , root : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclBcast (buff , count , datatype , root , comm , stream) } }
pub unsafe fn ncclBroadcast (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , root : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclBroadcast (sendbuff , recvbuff , count , datatype , root , comm , stream) } }
pub unsafe fn ncclAllReduce (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , op : ncclRedOp_t , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclAllReduce (sendbuff , recvbuff , count , datatype , op , comm , stream) } }
pub unsafe fn ncclReduceScatter (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , recvcount : usize , datatype : ncclDataType_t , op : ncclRedOp_t , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclReduceScatter (sendbuff , recvbuff , recvcount , datatype , op , comm , stream) } }
pub unsafe fn ncclAllGather (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , sendcount : usize , datatype : ncclDataType_t , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclAllGather (sendbuff , recvbuff , sendcount , datatype , comm , stream) } }
pub unsafe fn ncclSend (sendbuff : * const :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , peer : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclSend (sendbuff , count , datatype , peer , comm , stream) } }
pub unsafe fn ncclRecv (recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , peer : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t { unsafe { culib () . ncclRecv (recvbuff , count , datatype , peer , comm , stream) } }
pub unsafe fn ncclGroupStart () -> ncclResult_t { unsafe { culib () . ncclGroupStart () } }
pub unsafe fn ncclGroupEnd () -> ncclResult_t { unsafe { culib () . ncclGroupEnd () } }
pub unsafe fn ncclGroupSimulateEnd (simInfo : * mut ncclSimInfo_t) -> ncclResult_t { unsafe { culib () . ncclGroupSimulateEnd (simInfo) } }
