// AUTOGENERATED UNIFIED CUDA BINDINGS
// This file combines bindings from multiple CUDA versions

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

extern "C" {
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclAllGather (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , sendcount : usize , datatype : ncclDataType_t , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclAllReduce (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , op : ncclRedOp_t , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclBcast (buff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , root : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclBroadcast (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , root : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommAbort (comm : ncclComm_t) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommCount (comm : ncclComm_t , count : * mut :: core :: ffi :: c_int) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommCuDevice (comm : ncclComm_t , device : * mut :: core :: ffi :: c_int) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommDeregister (comm : ncclComm_t , handle : * mut :: core :: ffi :: c_void) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommDestroy (comm : ncclComm_t) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommFinalize (comm : ncclComm_t) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommGetAsyncError (comm : ncclComm_t , asyncError : * mut ncclResult_t) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommInitAll (comm : * mut ncclComm_t , ndev : :: core :: ffi :: c_int , devlist : * const :: core :: ffi :: c_int ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommInitRank (comm : * mut ncclComm_t , nranks : :: core :: ffi :: c_int , commId : ncclUniqueId , rank : :: core :: ffi :: c_int ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommInitRankConfig (comm : * mut ncclComm_t , nranks : :: core :: ffi :: c_int , commId : ncclUniqueId , rank : :: core :: ffi :: c_int , config : * mut ncclConfig_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommInitRankScalable (newcomm : * mut ncclComm_t , nranks : :: core :: ffi :: c_int , myrank : :: core :: ffi :: c_int , nId : :: core :: ffi :: c_int , commIds : * mut ncclUniqueId , config : * mut ncclConfig_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommRegister (comm : ncclComm_t , buff : * mut :: core :: ffi :: c_void , size : usize , handle : * mut * mut :: core :: ffi :: c_void ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommSplit (comm : ncclComm_t , color : :: core :: ffi :: c_int , key : :: core :: ffi :: c_int , newcomm : * mut ncclComm_t , config : * mut ncclConfig_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclCommUserRank (comm : ncclComm_t , rank : * mut :: core :: ffi :: c_int) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGetErrorString (result : ncclResult_t) -> * const :: core :: ffi :: c_char ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGetLastError (comm : ncclComm_t) -> * const :: core :: ffi :: c_char ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGetUniqueId (uniqueId : * mut ncclUniqueId) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGetVersion (version : * mut :: core :: ffi :: c_int) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGroupEnd () -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGroupSimulateEnd (simInfo : * mut ncclSimInfo_t) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclGroupStart () -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclMemAlloc (ptr : * mut * mut :: core :: ffi :: c_void , size : usize) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclMemFree (ptr : * mut :: core :: ffi :: c_void) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclRecv (recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , peer : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclRedOpCreatePreMulSum (op : * mut ncclRedOp_t , scalar : * mut :: core :: ffi :: c_void , datatype : ncclDataType_t , residence : ncclScalarResidence_t , comm : ncclComm_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclRedOpDestroy (op : ncclRedOp_t , comm : ncclComm_t) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclReduce (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , op : ncclRedOp_t , root : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclReduceScatter (sendbuff : * const :: core :: ffi :: c_void , recvbuff : * mut :: core :: ffi :: c_void , recvcount : usize , datatype : ncclDataType_t , op : ncclRedOp_t , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclResetDebugInit () ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub fn ncclSend (sendbuff : * const :: core :: ffi :: c_void , count : usize , datatype : ncclDataType_t , peer : :: core :: ffi :: c_int , comm : ncclComm_t , stream : cudaStream_t ,) -> ncclResult_t ;
}
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum ncclDataType_t { ncclInt8 = 0 , ncclUint8 = 1 , ncclInt32 = 2 , ncclUint32 = 3 , ncclInt64 = 4 , ncclUint64 = 5 , ncclFloat16 = 6 , ncclFloat32 = 7 , ncclFloat64 = 8 , ncclBfloat16 = 9 , ncclFloat8e4m3 = 10 , ncclFloat8e5m2 = 11 , ncclNumTypes = 12 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum ncclRedOp_dummy_t { ncclNumOps_dummy = 5 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum ncclRedOp_t { ncclSum = 0 , ncclProd = 1 , ncclMax = 2 , ncclMin = 3 , ncclAvg = 4 , ncclNumOps = 5 , ncclMaxRedOp = 2147483647 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum ncclResult_t { ncclSuccess = 0 , ncclUnhandledCudaError = 1 , ncclSystemError = 2 , ncclInternalError = 3 , ncclInvalidArgument = 4 , ncclInvalidUsage = 5 , ncclRemoteError = 6 , ncclInProgress = 7 , ncclNumResults = 8 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (u32)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub enum ncclScalarResidence_t { ncclScalarDevice = 0 , ncclScalarHostImmediate = 1 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for ncclConfig_v21700 { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl ncclDataType_t { pub const ncclDouble : ncclDataType_t = ncclDataType_t :: ncclFloat64 ; }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
impl Default for ncclUniqueId { fn default () -> Self { let mut s = :: core :: mem :: MaybeUninit :: < Self > :: uninit () ; unsafe { :: core :: ptr :: write_bytes (s . as_mut_ptr () , 0 , 1) ; s . assume_init () } } }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CUstream_st { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ncclComm { _unused : [u8 ; 0] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct ncclConfig_v21700 { pub size : usize , pub magic : :: core :: ffi :: c_uint , pub version : :: core :: ffi :: c_uint , pub blocking : :: core :: ffi :: c_int , pub cgaClusterSize : :: core :: ffi :: c_int , pub minCTAs : :: core :: ffi :: c_int , pub maxCTAs : :: core :: ffi :: c_int , pub netName : * const :: core :: ffi :: c_char , pub splitShare : :: core :: ffi :: c_int , pub trafficClass : :: core :: ffi :: c_int , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Default , Copy , Clone , PartialOrd , PartialEq)] pub struct ncclSimInfo_v22200 { pub size : usize , pub magic : :: core :: ffi :: c_uint , pub version : :: core :: ffi :: c_uint , pub estimatedTime : f32 , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
# [repr (C)] # [derive (Debug , Copy , Clone , Hash , PartialOrd , Ord , PartialEq , Eq)] pub struct ncclUniqueId { pub internal : [:: core :: ffi :: c_char ; 128usize] , }
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type cudaStream_t = * mut CUstream_st ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type ncclComm_t = * mut ncclComm ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type ncclConfig_t = ncclConfig_v21700 ;
#[cfg(any(feature = "cuda-11040", feature = "cuda-11050", feature = "cuda-11060", feature = "cuda-11070", feature = "cuda-11080", feature = "cuda-12000", feature = "cuda-12010", feature = "cuda-12020", feature = "cuda-12030", feature = "cuda-12040", feature = "cuda-12050", feature = "cuda-12060", feature = "cuda-12080"))]
pub type ncclSimInfo_t = ncclSimInfo_v22200 ;
