/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncclComm {
    _unused: [u8; 0],
}
pub type ncclComm_t = *mut ncclComm;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ncclUniqueId {
    pub internal: [::core::ffi::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ncclUniqueId"][::core::mem::size_of::<ncclUniqueId>() - 128usize];
    ["Alignment of ncclUniqueId"][::core::mem::align_of::<ncclUniqueId>() - 1usize];
    ["Offset of field: ncclUniqueId::internal"]
        [::core::mem::offset_of!(ncclUniqueId, internal) - 0usize];
};
impl Default for ncclUniqueId {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ncclResult_t {
    ncclSuccess = 0,
    ncclUnhandledCudaError = 1,
    ncclSystemError = 2,
    ncclInternalError = 3,
    ncclInvalidArgument = 4,
    ncclInvalidUsage = 5,
    ncclRemoteError = 6,
    ncclInProgress = 7,
    ncclNumResults = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ncclConfig_v21700 {
    pub size: usize,
    pub magic: ::core::ffi::c_uint,
    pub version: ::core::ffi::c_uint,
    pub blocking: ::core::ffi::c_int,
    pub cgaClusterSize: ::core::ffi::c_int,
    pub minCTAs: ::core::ffi::c_int,
    pub maxCTAs: ::core::ffi::c_int,
    pub netName: *const ::core::ffi::c_char,
    pub splitShare: ::core::ffi::c_int,
    pub trafficClass: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ncclConfig_v21700"][::core::mem::size_of::<ncclConfig_v21700>() - 48usize];
    ["Alignment of ncclConfig_v21700"][::core::mem::align_of::<ncclConfig_v21700>() - 8usize];
    ["Offset of field: ncclConfig_v21700::size"]
        [::core::mem::offset_of!(ncclConfig_v21700, size) - 0usize];
    ["Offset of field: ncclConfig_v21700::magic"]
        [::core::mem::offset_of!(ncclConfig_v21700, magic) - 8usize];
    ["Offset of field: ncclConfig_v21700::version"]
        [::core::mem::offset_of!(ncclConfig_v21700, version) - 12usize];
    ["Offset of field: ncclConfig_v21700::blocking"]
        [::core::mem::offset_of!(ncclConfig_v21700, blocking) - 16usize];
    ["Offset of field: ncclConfig_v21700::cgaClusterSize"]
        [::core::mem::offset_of!(ncclConfig_v21700, cgaClusterSize) - 20usize];
    ["Offset of field: ncclConfig_v21700::minCTAs"]
        [::core::mem::offset_of!(ncclConfig_v21700, minCTAs) - 24usize];
    ["Offset of field: ncclConfig_v21700::maxCTAs"]
        [::core::mem::offset_of!(ncclConfig_v21700, maxCTAs) - 28usize];
    ["Offset of field: ncclConfig_v21700::netName"]
        [::core::mem::offset_of!(ncclConfig_v21700, netName) - 32usize];
    ["Offset of field: ncclConfig_v21700::splitShare"]
        [::core::mem::offset_of!(ncclConfig_v21700, splitShare) - 40usize];
    ["Offset of field: ncclConfig_v21700::trafficClass"]
        [::core::mem::offset_of!(ncclConfig_v21700, trafficClass) - 44usize];
};
impl Default for ncclConfig_v21700 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ncclConfig_t = ncclConfig_v21700;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct ncclSimInfo_v22200 {
    pub size: usize,
    pub magic: ::core::ffi::c_uint,
    pub version: ::core::ffi::c_uint,
    pub estimatedTime: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ncclSimInfo_v22200"][::core::mem::size_of::<ncclSimInfo_v22200>() - 24usize];
    ["Alignment of ncclSimInfo_v22200"][::core::mem::align_of::<ncclSimInfo_v22200>() - 8usize];
    ["Offset of field: ncclSimInfo_v22200::size"]
        [::core::mem::offset_of!(ncclSimInfo_v22200, size) - 0usize];
    ["Offset of field: ncclSimInfo_v22200::magic"]
        [::core::mem::offset_of!(ncclSimInfo_v22200, magic) - 8usize];
    ["Offset of field: ncclSimInfo_v22200::version"]
        [::core::mem::offset_of!(ncclSimInfo_v22200, version) - 12usize];
    ["Offset of field: ncclSimInfo_v22200::estimatedTime"]
        [::core::mem::offset_of!(ncclSimInfo_v22200, estimatedTime) - 16usize];
};
pub type ncclSimInfo_t = ncclSimInfo_v22200;
unsafe extern "C" {
    pub fn ncclMemAlloc(ptr: *mut *mut ::core::ffi::c_void, size: usize) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclMemFree(ptr: *mut ::core::ffi::c_void) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclGetVersion(version: *mut ::core::ffi::c_int) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclGetUniqueId(uniqueId: *mut ncclUniqueId) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommInitRankConfig(
        comm: *mut ncclComm_t,
        nranks: ::core::ffi::c_int,
        commId: ncclUniqueId,
        rank: ::core::ffi::c_int,
        config: *mut ncclConfig_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommInitRank(
        comm: *mut ncclComm_t,
        nranks: ::core::ffi::c_int,
        commId: ncclUniqueId,
        rank: ::core::ffi::c_int,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommInitAll(
        comm: *mut ncclComm_t,
        ndev: ::core::ffi::c_int,
        devlist: *const ::core::ffi::c_int,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommFinalize(comm: ncclComm_t) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommDestroy(comm: ncclComm_t) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommAbort(comm: ncclComm_t) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommSplit(
        comm: ncclComm_t,
        color: ::core::ffi::c_int,
        key: ::core::ffi::c_int,
        newcomm: *mut ncclComm_t,
        config: *mut ncclConfig_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommInitRankScalable(
        newcomm: *mut ncclComm_t,
        nranks: ::core::ffi::c_int,
        myrank: ::core::ffi::c_int,
        nId: ::core::ffi::c_int,
        commIds: *mut ncclUniqueId,
        config: *mut ncclConfig_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclGetErrorString(result: ncclResult_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ncclGetLastError(comm: ncclComm_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ncclResetDebugInit();
}
unsafe extern "C" {
    pub fn ncclCommGetAsyncError(comm: ncclComm_t, asyncError: *mut ncclResult_t) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommCount(comm: ncclComm_t, count: *mut ::core::ffi::c_int) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommCuDevice(comm: ncclComm_t, device: *mut ::core::ffi::c_int) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommUserRank(comm: ncclComm_t, rank: *mut ::core::ffi::c_int) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommRegister(
        comm: ncclComm_t,
        buff: *mut ::core::ffi::c_void,
        size: usize,
        handle: *mut *mut ::core::ffi::c_void,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclCommDeregister(comm: ncclComm_t, handle: *mut ::core::ffi::c_void) -> ncclResult_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ncclRedOp_dummy_t {
    ncclNumOps_dummy = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ncclRedOp_t {
    ncclSum = 0,
    ncclProd = 1,
    ncclMax = 2,
    ncclMin = 3,
    ncclAvg = 4,
    ncclNumOps = 5,
    ncclMaxRedOp = 2147483647,
}
impl ncclDataType_t {
    pub const ncclChar: ncclDataType_t = ncclDataType_t::ncclInt8;
}
impl ncclDataType_t {
    pub const ncclInt: ncclDataType_t = ncclDataType_t::ncclInt32;
}
impl ncclDataType_t {
    pub const ncclHalf: ncclDataType_t = ncclDataType_t::ncclFloat16;
}
impl ncclDataType_t {
    pub const ncclFloat: ncclDataType_t = ncclDataType_t::ncclFloat32;
}
impl ncclDataType_t {
    pub const ncclDouble: ncclDataType_t = ncclDataType_t::ncclFloat64;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ncclDataType_t {
    ncclInt8 = 0,
    ncclUint8 = 1,
    ncclInt32 = 2,
    ncclUint32 = 3,
    ncclInt64 = 4,
    ncclUint64 = 5,
    ncclFloat16 = 6,
    ncclFloat32 = 7,
    ncclFloat64 = 8,
    ncclBfloat16 = 9,
    ncclFloat8e4m3 = 10,
    ncclFloat8e5m2 = 11,
    ncclNumTypes = 12,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ncclScalarResidence_t {
    ncclScalarDevice = 0,
    ncclScalarHostImmediate = 1,
}
unsafe extern "C" {
    pub fn ncclRedOpCreatePreMulSum(
        op: *mut ncclRedOp_t,
        scalar: *mut ::core::ffi::c_void,
        datatype: ncclDataType_t,
        residence: ncclScalarResidence_t,
        comm: ncclComm_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclRedOpDestroy(op: ncclRedOp_t, comm: ncclComm_t) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclReduce(
        sendbuff: *const ::core::ffi::c_void,
        recvbuff: *mut ::core::ffi::c_void,
        count: usize,
        datatype: ncclDataType_t,
        op: ncclRedOp_t,
        root: ::core::ffi::c_int,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclBcast(
        buff: *mut ::core::ffi::c_void,
        count: usize,
        datatype: ncclDataType_t,
        root: ::core::ffi::c_int,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclBroadcast(
        sendbuff: *const ::core::ffi::c_void,
        recvbuff: *mut ::core::ffi::c_void,
        count: usize,
        datatype: ncclDataType_t,
        root: ::core::ffi::c_int,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclAllReduce(
        sendbuff: *const ::core::ffi::c_void,
        recvbuff: *mut ::core::ffi::c_void,
        count: usize,
        datatype: ncclDataType_t,
        op: ncclRedOp_t,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclReduceScatter(
        sendbuff: *const ::core::ffi::c_void,
        recvbuff: *mut ::core::ffi::c_void,
        recvcount: usize,
        datatype: ncclDataType_t,
        op: ncclRedOp_t,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclAllGather(
        sendbuff: *const ::core::ffi::c_void,
        recvbuff: *mut ::core::ffi::c_void,
        sendcount: usize,
        datatype: ncclDataType_t,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclSend(
        sendbuff: *const ::core::ffi::c_void,
        count: usize,
        datatype: ncclDataType_t,
        peer: ::core::ffi::c_int,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclRecv(
        recvbuff: *mut ::core::ffi::c_void,
        count: usize,
        datatype: ncclDataType_t,
        peer: ::core::ffi::c_int,
        comm: ncclComm_t,
        stream: cudaStream_t,
    ) -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclGroupStart() -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclGroupEnd() -> ncclResult_t;
}
unsafe extern "C" {
    pub fn ncclGroupSimulateEnd(simInfo: *mut ncclSimInfo_t) -> ncclResult_t;
}
